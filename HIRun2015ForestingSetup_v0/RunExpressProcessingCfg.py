import FWCore.ParameterSet.Config as cms

process = cms.Process("RECO")

#parse command line arguments
from FWCore.ParameterSet.VarParsing import VarParsing
options = VarParsing('analysis')
options.register ('isPP',
                  False,
                  VarParsing.multiplicity.singleton,
                  VarParsing.varType.bool,
                  "Flag if this is a pp simulation")
options.parseArguments()


process.source = cms.Source("NewEventStreamFileReader",
    fileNames = cms.untracked.vstring(options.inputFiles[0])
)
process.ALCARECOCalibrationTracksRefit = cms.EDProducer("TrackRefitter",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string(''),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string(''),
    src = cms.InputTag("ALCARECOCalibrationTracks"),
    srcConstr = cms.InputTag(""),
    useHitsSplitting = cms.bool(False)
)


process.ALCARECOTkAlLAST0Producer = cms.EDProducer("LaserAlignmentT0Producer",
    DigiProducerList = cms.VPSet(cms.PSet(
        DigiLabel = cms.string('ZeroSuppressed'),
        DigiProducer = cms.string('ALCARECOTkAlLASsiStripDigis'),
        DigiType = cms.string('Processed')
    ))
)


process.ALCARECOTkAlLASsiStripDigis = cms.EDProducer("SiStripRawToDigiModule",
    AppendedBytes = cms.int32(0),
    DoAPVEmulatorCheck = cms.bool(False),
    DoAllCorruptBufferChecks = cms.bool(False),
    ErrorThreshold = cms.uint32(7174),
    LegacyUnpacker = cms.bool(False),
    MarkModulesOnMissingFeds = cms.bool(True),
    ProductLabel = cms.InputTag("hltTrackerCalibrationRaw"),
    TriggerFedId = cms.int32(0),
    UnpackBadChannels = cms.bool(False),
    UnpackCommonModeValues = cms.bool(False),
    UseDaqRegister = cms.bool(False),
    UseFedKey = cms.bool(False)
)


process.APVPhases = cms.EDProducer("APVCyclePhaseProducerFromL1TS",
    defaultPartitionNames = cms.vstring('TI', 
        'TO', 
        'TP', 
        'TM'),
    defaultPhases = cms.vint32(30, 30, 30, 30),
    l1TSCollection = cms.InputTag("scalersRawToDigi")
)


process.CastorTowerReco = cms.EDProducer("CastorTowerProducer",
    inputprocess = cms.string('castorreco'),
    maxtime = cms.double(99999.0),
    mintime = cms.double(-99999.0),
    towercut = cms.double(0.65)
)


process.CosmicMuonSeed = cms.EDProducer("CosmicMuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    ForcePointDown = cms.bool(True),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    MaxSeeds = cms.int32(1000)
)


process.DiJetsProd = cms.EDProducer("AlCaDiJetsProducer",
    HBHEInput = cms.InputTag("hbhereco"),
    HFInput = cms.InputTag("hfreco"),
    HOInput = cms.InputTag("horeco"),
    MinPtJet = cms.double(20.0),
    PFjetInput = cms.InputTag("ak4PFJetsCHS"),
    VertexInput = cms.InputTag("offlinePrimaryVertices"),
    particleFlowInput = cms.InputTag("particleFlow")
)


process.GammaJetProd = cms.EDProducer("AlCaGammaJetProducer",
    BeamSpotInput = cms.InputTag("offlineBeamSpot"),
    ConversionsInput = cms.InputTag("allConversions"),
    HBHEInput = cms.InputTag("hbhereco"),
    HFInput = cms.InputTag("hfreco"),
    HOInput = cms.InputTag("horeco"),
    METInput = cms.InputTag("pfMet"),
    MinPtJet = cms.double(10.0),
    MinPtPhoton = cms.double(10.0),
    PFjetInput = cms.InputTag("ak4PFJetsCHS"),
    PhoInput = cms.InputTag("gedPhotons"),
    PhoLoose = cms.InputTag("PhotonIDProdGED","PhotonCutBasedIDLoose"),
    PhoTight = cms.InputTag("PhotonIDProdGED","PhotonCutBasedIDTight"),
    TriggerResults = cms.InputTag("TriggerResults","","HLT"),
    VertexInput = cms.InputTag("offlinePrimaryVertices"),
    gsfeleInput = cms.InputTag("gedGsfElectrons"),
    particleFlowInput = cms.InputTag("particleFlow"),
    rhoInput = cms.InputTag("fixedGridRhoFastjetAll")
)


process.GsfGlobalElectronTest = cms.EDProducer("GsfTrackProducer",
    AlgorithmName = cms.string('gsf'),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('fwdElectronPropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    src = cms.InputTag("CkfElectronCandidates"),
    useHitsSplitting = cms.bool(False)
)


process.HBHENoiseFilterResultProducer = cms.EDProducer("HBHENoiseFilterResultProducer",
    IgnoreTS4TS5ifJetInLowBVRegion = cms.bool(False),
    defaultDecision = cms.string('HBHENoiseFilterResultRun1'),
    minHPDHits = cms.int32(17),
    minHPDNoOtherHits = cms.int32(10),
    minIsolatedNoiseSumE = cms.double(50.0),
    minIsolatedNoiseSumEt = cms.double(25.0),
    minNumIsolatedNoiseChannels = cms.int32(10),
    minZeros = cms.int32(9999),
    noiselabel = cms.InputTag("hcalnoise")
)


process.HcalNoiseProd = cms.EDProducer("AlCaEcalHcalReadoutsProducer",
    JetHCALminEnergyFraction = cms.double(0.98),
    JetMinE = cms.double(20),
    JetSource = cms.InputTag("iterativeCone5CaloJets"),
    MetCut = cms.double(0),
    MetSource = cms.InputTag("met"),
    TowerSource = cms.InputTag("towerMaker"),
    UseJet = cms.bool(True),
    UseMET = cms.bool(False),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    ecalPSInput = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco"),
    rawInput = cms.InputTag("rawDataRepacker")
)


process.IsoProd = cms.EDProducer("AlCaIsoTracksProducer",
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ConeRadius = cms.double(34.98),
    ConeRadiusMIP = cms.double(14.0),
    EBRecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    HBHERecHitLabel = cms.InputTag("hbhereco"),
    IsoTrackLabel = cms.string('HcalIsolatedTrackCollection'),
    IsolationEnergy = cms.double(32.0),
    L1GTSeedLabel = cms.InputTag("hltL1sL1SingleJet68"),
    MaxChi2 = cms.double(5.0),
    MaxDpOverP = cms.double(0.1),
    MaxDxyPV = cms.double(10.0),
    MaxDzPV = cms.double(100.0),
    MaxInMiss = cms.int32(2),
    MaxOutMiss = cms.int32(2),
    MaximumEcalEnergy = cms.double(2.0),
    MinLayerCrossed = cms.int32(8),
    MinOuterHit = cms.int32(4),
    MinTrackPt = cms.double(10.0),
    MinimumTrackP = cms.double(10.0),
    ProcessName = cms.string('HLT'),
    SlopeTrackPt = cms.double(6.0),
    TrackLabel = cms.InputTag("generalTracks"),
    TrackQuality = cms.string('highPurity'),
    TriggerEventLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    TriggerResultLabel = cms.InputTag("TriggerResults","","HLT"),
    Triggers = cms.vstring('HLT_IsoTrackHB', 
        'HLT_IsoTrackHE'),
    VertexLabel = cms.InputTag("offlinePrimaryVertices")
)


process.MEtoEDMConvertSiStrip = cms.EDProducer("MEtoEDMConverter",
    Frequency = cms.untracked.int32(50),
    MEPathToSave = cms.untracked.string('AlCaReco/SiStrip'),
    Name = cms.untracked.string('MEtoEDMConverter'),
    Verbosity = cms.untracked.int32(0),
    deleteAfterCopy = cms.untracked.bool(False)
)


process.MEtoEDMConvertSiStripGains = cms.EDProducer("MEtoEDMConverter",
    Frequency = cms.untracked.int32(50),
    MEPathToSave = cms.untracked.string('AlCaReco/SiStripGains'),
    Name = cms.untracked.string('MEtoEDMConverter'),
    Verbosity = cms.untracked.int32(0),
    deleteAfterCopy = cms.untracked.bool(False)
)


process.MEtoEDMConverter = cms.EDProducer("MEtoEDMConverter",
    Frequency = cms.untracked.int32(50),
    MEPathToSave = cms.untracked.string(''),
    Name = cms.untracked.string('MEtoEDMConverter'),
    Verbosity = cms.untracked.int32(0),
    deleteAfterCopy = cms.untracked.bool(True)
)


process.MeasurementTrackerEvent = cms.EDProducer("MeasurementTrackerEventProducer",
    inactivePixelDetectorLabels = cms.VInputTag(cms.InputTag("siPixelDigis")),
    inactiveStripDetectorLabels = cms.VInputTag(cms.InputTag("siStripDigis")),
    measurementTracker = cms.string(''),
    pixelClusterProducer = cms.string('siPixelClusters'),
    skipClusters = cms.InputTag(""),
    stripClusterProducer = cms.string('siStripClusters'),
    switchOffPixelsIfEmpty = cms.bool(True)
)


process.MeasurementTrackerEventPreSplitting = cms.EDProducer("MeasurementTrackerEventProducer",
    inactivePixelDetectorLabels = cms.VInputTag(cms.InputTag("siPixelDigis")),
    inactiveStripDetectorLabels = cms.VInputTag(cms.InputTag("siStripDigis")),
    measurementTracker = cms.string(''),
    pixelClusterProducer = cms.string('siPixelClustersPreSplitting'),
    skipClusters = cms.InputTag(""),
    stripClusterProducer = cms.string('siStripClusters'),
    switchOffPixelsIfEmpty = cms.bool(True)
)


process.MixedLayerPairs = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(1),
        minRing = cms.int32(1),
        useRingSlector = cms.bool(True)
    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'FPix2_pos+TEC1_pos', 
        'FPix2_pos+TEC2_pos', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'FPix2_neg+TEC1_neg', 
        'FPix2_neg+TEC2_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg')
)


process.MixedLayerTriplets = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix1+BPix2+TIB1', 
        'BPix1+BPix3+TIB1', 
        'BPix2+BPix3+TIB1', 
        'BPix1+FPix1_pos+TID1_pos', 
        'BPix1+FPix1_neg+TID1_neg', 
        'BPix1+FPix1_pos+TID2_pos', 
        'BPix1+FPix1_neg+TID2_neg', 
        'FPix1_pos+FPix2_pos+TEC1_pos', 
        'FPix1_neg+FPix2_neg+TEC1_neg', 
        'FPix1_pos+FPix2_pos+TEC2_pos', 
        'FPix1_neg+FPix2_neg+TEC2_neg')
)


process.MuonSeed = cms.EDProducer("MuonSeedProducer",
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    CSC_01 = cms.vdouble(0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_02 = cms.vdouble(0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0),
    CSC_03 = cms.vdouble(0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0),
    CSC_12 = cms.vdouble(-0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13 = cms.vdouble(0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14 = cms.vdouble(0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23 = cms.vdouble(-0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24 = cms.vdouble(0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34 = cms.vdouble(0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DTSegmentLabel = cms.InputTag("dt4DSegments"),
    DT_12 = cms.vdouble(0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13 = cms.vdouble(0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14 = cms.vdouble(0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23 = cms.vdouble(0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24 = cms.vdouble(0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34 = cms.vdouble(0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    DebugMuonSeed = cms.bool(False),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    OL_1213 = cms.vdouble(0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222 = cms.vdouble(0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232 = cms.vdouble(0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213 = cms.vdouble(0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222 = cms.vdouble(0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10 = cms.vdouble(1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11 = cms.vdouble(1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12 = cms.vdouble(2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20 = cms.vdouble(1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21 = cms.vdouble(1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22 = cms.vdouble(1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30 = cms.vdouble(0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31 = cms.vdouble(0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32 = cms.vdouble(0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11 = cms.vdouble(3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12 = cms.vdouble(0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13 = cms.vdouble(-1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21 = cms.vdouble(-0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22 = cms.vdouble(-1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SME_31 = cms.vdouble(-1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0),
    SME_32 = cms.vdouble(-0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0),
    SME_41 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    SME_42 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    SeedPtSystematics = cms.double(0.1),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    defaultSeedPt = cms.double(25.0),
    maxDeltaEtaCSC = cms.double(0.2),
    maxDeltaEtaDT = cms.double(0.3),
    maxDeltaEtaOverlap = cms.double(0.08),
    maxDeltaPhiCSC = cms.double(0.5),
    maxDeltaPhiDT = cms.double(0.3),
    maxDeltaPhiOverlap = cms.double(0.25),
    maxEtaResolutionCSC = cms.double(0.06),
    maxEtaResolutionDT = cms.double(0.02),
    maxPhiResolutionCSC = cms.double(0.03),
    maxPhiResolutionDT = cms.double(0.03),
    maximumSeedPt = cms.double(3000.0),
    minCSCHitsPerSegment = cms.int32(4),
    minDTHitsPerSegment = cms.int32(2),
    minimumSeedPt = cms.double(5.0)
)


process.PFTowers = cms.EDProducer("ParticleTowerProducer",
    src = cms.InputTag("particleFlowTmp"),
    useHF = cms.bool(False)
)


process.PixelLayerPairs = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg')
)


process.PixelLayerTriplets = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.PixelLayerTripletsPreSplitting = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHitsPreSplitting'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHitsPreSplitting'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.SETMuonSeed = cms.EDProducer("SETMuonSeedProducer",
    SETTrajBuilderParameters = cms.PSet(
        Apply_prePruning = cms.bool(True),
        CSC_01 = cms.vdouble(0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
            0.0),
        CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
        CSC_02 = cms.vdouble(0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
            0.253916),
        CSC_03 = cms.vdouble(0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
            0.72802),
        CSC_12 = cms.vdouble(-0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
            3.478874),
        CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
        CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
        CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
        CSC_13 = cms.vdouble(1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
            2.0142),
        CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
        CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
        CSC_14 = cms.vdouble(0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
            0.514139),
        CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
        CSC_23 = cms.vdouble(-0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
            -4.267065),
        CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
        CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
        CSC_24 = cms.vdouble(-0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
            -4.241835),
        CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
        CSC_34 = cms.vdouble(0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
            43.430395),
        CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
        DT_12 = cms.vdouble(0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
            0.222219),
        DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
        DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
        DT_13 = cms.vdouble(0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
            0.155638),
        DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
        DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
        DT_14 = cms.vdouble(0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
            -0.133269),
        DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
        DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
        DT_23 = cms.vdouble(0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
            0.261012),
        DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
        DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
        DT_24 = cms.vdouble(0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
            0.010984),
        DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
        DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
        DT_34 = cms.vdouble(0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
            -0.304346),
        DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
        DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            MinLocalSegmentAngle = cms.double(0.09),
            OutsideChamberErrorScale = cms.double(1.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            maxActiveChambers = cms.int32(100)
        ),
        OL_1213 = cms.vdouble(0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
            0.0),
        OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
        OL_1222 = cms.vdouble(0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
            0.0),
        OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
        OL_1232 = cms.vdouble(0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
            0.0),
        OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
        OL_2213 = cms.vdouble(0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
            0.0),
        OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
        OL_2222 = cms.vdouble(0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
            0.0),
        OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
        SMB_10 = cms.vdouble(1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
            0.0),
        SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
        SMB_11 = cms.vdouble(1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
            0.0),
        SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
        SMB_12 = cms.vdouble(1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
            0.0),
        SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
        SMB_20 = cms.vdouble(0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
            0.0),
        SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
        SMB_21 = cms.vdouble(0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
            0.0),
        SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
        SMB_22 = cms.vdouble(1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
            0.0),
        SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
        SMB_30 = cms.vdouble(0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
            0.0),
        SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
        SMB_31 = cms.vdouble(0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
            0.0),
        SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
        SMB_32 = cms.vdouble(0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
            0.0),
        SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
        SME_11 = cms.vdouble(2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
            0.0),
        SME_11_0_scale = cms.vdouble(1.325085, 0.0),
        SME_12 = cms.vdouble(-0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
            0.0),
        SME_12_0_scale = cms.vdouble(2.279181, 0.0),
        SME_13 = cms.vdouble(0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
            0.0),
        SME_13_0_scale = cms.vdouble(0.104905, 0.0),
        SME_21 = cms.vdouble(0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
            0.0),
        SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
        SME_22 = cms.vdouble(-0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
            0.0),
        SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
        SME_31 = cms.vdouble(-0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
            0.0),
        SME_32 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0),
        SME_41 = cms.vdouble(-0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
            0.0),
        SME_42 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0),
        UseSegmentsInTrajectory = cms.bool(False),
        scaleDT = cms.bool(True)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    beamSpotTag = cms.InputTag("offlineBeamSpot")
)


process.SiPixelAliMillePedeFileConverter = cms.EDProducer("MillePedeFileConverter",
    fileBlobLabel = cms.string(''),
    fileDir = cms.string(''),
    inputBinaryFile = cms.string('milleBinary_0.dat')
)


process.SiPixelAliTrackFitter = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string(''),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("SiPixelAliTrackerTrackHitFilter"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.SiPixelAliTrackRefitter0 = cms.EDProducer("TrackRefitter",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string(''),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string(''),
    src = cms.InputTag("SiPixelAliHighPuritySelector"),
    srcConstr = cms.InputTag(""),
    useHitsSplitting = cms.bool(False)
)


process.SiPixelAliTrackRefitter1 = cms.EDProducer("TrackRefitter",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string(''),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string(''),
    src = cms.InputTag("SiPixelAliTrackSelector"),
    srcConstr = cms.InputTag(""),
    useHitsSplitting = cms.bool(False)
)


process.SiPixelAliTrackerTrackHitFilter = cms.EDProducer("TrackerTrackHitFilter",
    CMNSubtractionMode = cms.string('Median'),
    PxlCorrClusterChargeCut = cms.double(-999.0),
    PxlTemplateProbXYChargeCut = cms.double(-99.0),
    PxlTemplateProbXYCut = cms.double(0.000125),
    PxlTemplateqBinCut = cms.vint32(0, 3),
    StoNcommands = cms.vstring('ALL 18.0'),
    TrackAngleCut = cms.double(0.17),
    commands = cms.vstring('keep PXB', 
        'keep PXE', 
        'keep TIB', 
        'keep TID', 
        'keep TOB', 
        'keep TEC'),
    detsToIgnore = cms.vuint32(),
    minimumHits = cms.uint32(8),
    rejectBadStoNHits = cms.bool(True),
    rejectLowAngleHits = cms.bool(True),
    replaceWithInactiveHits = cms.bool(True),
    src = cms.InputTag("SiPixelAliTrackRefitter0"),
    stripAllInvalidHits = cms.bool(False),
    stripBackInvalidHits = cms.bool(False),
    stripFrontInvalidHits = cms.bool(False),
    tagOverlaps = cms.bool(False),
    usePixelQualityFlag = cms.bool(True),
    useTrajectories = cms.bool(True)
)


process.TauRefProducer = cms.EDProducer("HLTTauRefProducer",
    Electrons = cms.untracked.PSet(
        ElectronCollection = cms.untracked.InputTag("gedGsfElectrons"),
        IdCollection = cms.untracked.InputTag("elecIDext"),
        InnerConeDR = cms.untracked.double(0.02),
        MaxIsoVar = cms.untracked.double(0.02),
        OuterConeDR = cms.untracked.double(0.6),
        TrackCollection = cms.untracked.InputTag("generalTracks"),
        doElectrons = cms.untracked.bool(True),
        doID = cms.untracked.bool(False),
        doTrackIso = cms.untracked.bool(True),
        lipMinTrack = cms.untracked.double(0.2),
        ptMin = cms.untracked.double(15.0),
        ptMinTrack = cms.untracked.double(1.5)
    ),
    EtaMax = cms.untracked.double(2.3),
    Jets = cms.untracked.PSet(
        JetCollection = cms.untracked.InputTag("ak4PFJetsCHS"),
        doJets = cms.untracked.bool(False),
        etMin = cms.untracked.double(15.0)
    ),
    MET = cms.untracked.PSet(
        METCollection = cms.untracked.InputTag("caloMet"),
        doMET = cms.untracked.bool(True),
        ptMin = cms.untracked.double(0.0)
    ),
    Muons = cms.untracked.PSet(
        MuonCollection = cms.untracked.InputTag("muons"),
        doMuons = cms.untracked.bool(True),
        ptMin = cms.untracked.double(15.0)
    ),
    PFTaus = cms.untracked.PSet(
        PFTauDiscriminators = cms.untracked.VInputTag(cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding"), cms.InputTag("hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits"), cms.InputTag("hpsPFTauDiscriminationByLooseMuonRejection2")),
        PFTauProducer = cms.untracked.InputTag("hpsPFTauProducer"),
        doPFTaus = cms.untracked.bool(True),
        ptMin = cms.untracked.double(15.0)
    ),
    Photons = cms.untracked.PSet(
        ECALIso = cms.untracked.double(3.0),
        PhotonCollection = cms.untracked.InputTag("gedPhotons"),
        doPhotons = cms.untracked.bool(False),
        etMin = cms.untracked.double(15.0)
    ),
    Towers = cms.untracked.PSet(
        TowerCollection = cms.untracked.InputTag("towerMaker"),
        doTowers = cms.untracked.bool(False),
        etMin = cms.untracked.double(10.0),
        towerIsolation = cms.untracked.double(5.0)
    )
)


process.TrackProducer = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.TrackRefitter = cms.EDProducer("TrackRefitter",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string(''),
    src = cms.InputTag("generalTracks"),
    srcConstr = cms.InputTag(""),
    useHitsSplitting = cms.bool(False)
)


process.ak10PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak10PFL1FastL2L3'),
    src = cms.InputTag("ak10PFJets")
)


process.ak10PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak10PFL1FastL2L3Residual'),
    src = cms.InputTag("ak10PFJets")
)


process.ak10PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak10PFL1L2L3'),
    src = cms.InputTag("ak10PFJets")
)


process.ak10PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak10PFL1L2L3Residual'),
    src = cms.InputTag("ak10PFJets")
)


process.ak10PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak10PFL2L3'),
    src = cms.InputTag("ak10PFJets")
)


process.ak10PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak10PFL2L3Residual'),
    src = cms.InputTag("ak10PFJets")
)


process.ak1CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.1),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak1PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak1PFL1FastL2L3'),
    src = cms.InputTag("ak1PFJets")
)


process.ak1PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak1PFL1FastL2L3Residual'),
    src = cms.InputTag("ak1PFJets")
)


process.ak1PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak1PFL1L2L3'),
    src = cms.InputTag("ak1PFJets")
)


process.ak1PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak1PFL1L2L3Residual'),
    src = cms.InputTag("ak1PFJets")
)


process.ak1PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak1PFL2L3'),
    src = cms.InputTag("ak1PFJets")
)


process.ak1PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak1PFL2L3Residual'),
    src = cms.InputTag("ak1PFJets")
)


process.ak2CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.2),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak2PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak2PFL1FastL2L3'),
    src = cms.InputTag("ak2PFJets")
)


process.ak2PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak2PFL1FastL2L3Residual'),
    src = cms.InputTag("ak2PFJets")
)


process.ak2PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak2PFL1L2L3'),
    src = cms.InputTag("ak2PFJets")
)


process.ak2PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak2PFL1L2L3Residual'),
    src = cms.InputTag("ak2PFJets")
)


process.ak2PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak2PFL2L3'),
    src = cms.InputTag("ak2PFJets")
)


process.ak2PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak2PFL2L3Residual'),
    src = cms.InputTag("ak2PFJets")
)


process.ak3CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.3),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak3PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak3PFL1FastL2L3'),
    src = cms.InputTag("ak3PFJets")
)


process.ak3PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak3PFL1FastL2L3Residual'),
    src = cms.InputTag("ak3PFJets")
)


process.ak3PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak3PFL1L2L3'),
    src = cms.InputTag("ak3PFJets")
)


process.ak3PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak3PFL1L2L3Residual'),
    src = cms.InputTag("ak3PFJets")
)


process.ak3PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak3PFL2L3'),
    src = cms.InputTag("ak3PFJets")
)


process.ak3PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak3PFL2L3Residual'),
    src = cms.InputTag("ak3PFJets")
)


process.ak4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak4CaloJetsL1 = cms.EDProducer("CorrectedCaloJetProducer",
    correctors = cms.VInputTag("ak4CaloL1FastjetCorrector"),
    src = cms.InputTag("ak4CaloJets")
)


process.ak4CaloJetsL1FastL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak4CaloL1FastL2L3'),
    src = cms.InputTag("ak4CaloJets")
)


process.ak4CaloJetsL1FastL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak4CaloL1FastL2L3Residual'),
    src = cms.InputTag("ak4CaloJets")
)


process.ak4CaloJetsL1L2L3 = cms.EDProducer("CorrectedCaloJetProducer",
    correctors = cms.VInputTag("ak4CaloL1L2L3Corrector"),
    src = cms.InputTag("ak4CaloJets")
)


process.ak4CaloJetsL1L2L3L6 = cms.EDProducer("CorrectedCaloJetProducer",
    correctors = cms.VInputTag("ak4CaloL1L2L3L6Corrector"),
    src = cms.InputTag("ak4CaloJets")
)


process.ak4CaloJetsL1L2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak4CaloL1L2L3Residual'),
    src = cms.InputTag("ak4CaloJets")
)


process.ak4CaloJetsL2 = cms.EDProducer("CorrectedCaloJetProducer",
    correctors = cms.VInputTag("ak4CaloL2RelativeCorrector"),
    src = cms.InputTag("ak4CaloJets")
)


process.ak4CaloJetsL2L3 = cms.EDProducer("CorrectedCaloJetProducer",
    correctors = cms.VInputTag("ak4CaloL2L3Corrector"),
    src = cms.InputTag("ak4CaloJets")
)


process.ak4CaloJetsL2L3L6 = cms.EDProducer("CorrectedCaloJetProducer",
    correctors = cms.VInputTag("ak4CaloL2L3L6Corrector"),
    src = cms.InputTag("ak4CaloJets")
)


process.ak4CaloJetsL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak4CaloL2L3Residual'),
    src = cms.InputTag("ak4CaloJets")
)


process.ak4CaloL1FastL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1FastjetCorrector", "ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector")
)


process.ak4CaloL1FastL2L3L6Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1FastjetCorrector", "ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector", "ak4CaloL6SLBCorrector")
)


process.ak4CaloL1FastL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1FastjetCorrector", "ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector", "ak4CaloResidualCorrector")
)


process.ak4CaloL1FastjetCorrector = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.ak4CaloL1L2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1OffsetCorrector", "ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector")
)


process.ak4CaloL1L2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL1OffsetCorrector", "ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector", "ak4CaloResidualCorrector")
)


process.ak4CaloL1OffsetCorrector = cms.EDProducer("L1OffsetCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.ak4CaloL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector")
)


process.ak4CaloL2L3L6Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector", "ak4CaloL6SLBCorrector")
)


process.ak4CaloL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4CaloL2RelativeCorrector", "ak4CaloL3AbsoluteCorrector", "ak4CaloResidualCorrector")
)


process.ak4CaloL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2Relative')
)


process.ak4CaloL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L3Absolute')
)


process.ak4CaloL6SLBCorrector = cms.EDProducer("L6SLBCorrectorProducer",
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ak4CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak4CaloJetsSoftMuonTagInfos")
)


process.ak4CaloResidualCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2L3Residual')
)


process.ak4JPTJetsL1 = cms.EDProducer("CorrectedJPTJetProducer",
    correctors = cms.VInputTag("ak4JPTL1FastjetCorrector"),
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt4")
)


process.ak4JPTJetsL1FastL2L3 = cms.EDProducer("JPTJetCorrectionProducer",
    correctors = cms.vstring('ak4JPTL1FastL2L3'),
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt4")
)


process.ak4JPTJetsL1FastL2L3Residual = cms.EDProducer("JPTJetCorrectionProducer",
    correctors = cms.vstring('ak4JPTL1FastL2L3Residual'),
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt4")
)


process.ak4JPTJetsL1L2L3 = cms.EDProducer("CorrectedJPTJetProducer",
    correctors = cms.VInputTag("ak4JPTL1L2L3Corrector"),
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt4")
)


process.ak4JPTJetsL1L2L3Residual = cms.EDProducer("JPTJetCorrectionProducer",
    correctors = cms.vstring('ak4JPTL1L2L3Residual'),
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt4")
)


process.ak4JPTJetsL2 = cms.EDProducer("CorrectedJPTJetProducer",
    correctors = cms.VInputTag("ak4JPTL2RelativeCorrector"),
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt4")
)


process.ak4JPTJetsL2L3 = cms.EDProducer("CorrectedJPTJetProducer",
    correctors = cms.VInputTag("ak4JPTL2L3Corrector"),
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt4")
)


process.ak4JPTJetsL2L3Residual = cms.EDProducer("JPTJetCorrectionProducer",
    correctors = cms.vstring('ak4JPTL2L3Residual'),
    src = cms.InputTag("JetPlusTrackZSPCorJetAntiKt4")
)


process.ak4JPTL1FastL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4JPTL1FastjetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector")
)


process.ak4JPTL1FastL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4JPTL1FastjetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector", "ak4JPTResidualCorrector")
)


process.ak4JPTL1FastjetCorrector = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.ak4JPTL1L2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4L1JPTOffsetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector")
)


process.ak4JPTL1L2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4L1JPTOffsetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector", "ak4JPTResidualCorrector")
)


process.ak4JPTL1OffsetCorrector = cms.EDProducer("L1OffsetCorrectorProducer",
    algorithm = cms.string('AK4JPT'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.ak4JPTL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4L1JPTOffsetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector")
)


process.ak4JPTL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4L1JPTOffsetCorrector", "ak4JPTL2RelativeCorrector", "ak4JPTL3AbsoluteCorrector", "ak4JPTResidualCorrector")
)


process.ak4JPTL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4JPT'),
    level = cms.string('L2Relative')
)


process.ak4JPTL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4JPT'),
    level = cms.string('L3Absolute')
)


process.ak4JPTResidualCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4JPT'),
    level = cms.string('L2L3Residual')
)


process.ak4L1JPTOffsetCorrector = cms.EDProducer("L1JPTOffsetCorrectorProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L1JPTOffset'),
    offsetService = cms.InputTag("ak4CaloL1OffsetCorrector")
)


process.ak4PFCHSJetsL1 = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("ak4PFCHSL1FastjetCorrector"),
    src = cms.InputTag("ak4PFJetsCHS")
)


process.ak4PFCHSJetsL1L2L3 = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("ak4PFCHSL1L2L3Corrector"),
    src = cms.InputTag("ak4PFJetsCHS")
)


process.ak4PFCHSJetsL2 = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("ak4PFCHSL2RelativeCorrector"),
    src = cms.InputTag("ak4PFJetsCHS")
)


process.ak4PFCHSJetsL2L3 = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("ak4PFCHSL2L3Corrector"),
    src = cms.InputTag("ak4PFJetsCHS")
)


process.ak4PFCHSL1FastL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL1FastjetCorrector", "ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector")
)


process.ak4PFCHSL1FastL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL1FastjetCorrector", "ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector", "ak4PFCHSResidualCorrector")
)


process.ak4PFCHSL1FastjetCorrector = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFCHSL1L2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL1OffsetCorrector", "ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector")
)


process.ak4PFCHSL1L2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL1OffsetCorrector", "ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector", "ak4PFCHSResidualCorrector")
)


process.ak4PFCHSL1OffsetCorrector = cms.EDProducer("L1OffsetCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.ak4PFCHSL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector")
)


process.ak4PFCHSL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFCHSL2RelativeCorrector", "ak4PFCHSL3AbsoluteCorrector", "ak4PFCHSResidualCorrector")
)


process.ak4PFCHSL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.ak4PFCHSL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.ak4PFCHSResidualCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak4PFJetsL1 = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("ak4PFL1FastjetCorrector"),
    src = cms.InputTag("ak4PFJets")
)


process.ak4PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak4PFL1FastL2L3'),
    src = cms.InputTag("ak4PFJets")
)


process.ak4PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak4PFL1FastL2L3Residual'),
    src = cms.InputTag("ak4PFJets")
)


process.ak4PFJetsL1L2L3 = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("ak4PFL1L2L3Corrector"),
    src = cms.InputTag("ak4PFJets")
)


process.ak4PFJetsL1L2L3L6 = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("ak4PFL1L2L3L6Corrector"),
    src = cms.InputTag("ak4PFJets")
)


process.ak4PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak4PFL1L2L3Residual'),
    src = cms.InputTag("ak4PFJets")
)


process.ak4PFJetsL2 = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("ak4PFL2RelativeCorrector"),
    src = cms.InputTag("ak4PFJets")
)


process.ak4PFJetsL2L3 = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("ak4PFL2L3Corrector"),
    src = cms.InputTag("ak4PFJets")
)


process.ak4PFJetsL2L3L6 = cms.EDProducer("CorrectedPFJetProducer",
    correctors = cms.VInputTag("ak4PFL2L3L6Corrector"),
    src = cms.InputTag("ak4PFJets")
)


process.ak4PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak4PFL2L3Residual'),
    src = cms.InputTag("ak4PFJets")
)


process.ak4PFL1FastL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL1FastjetCorrector", "ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector")
)


process.ak4PFL1FastL2L3L6Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL1FastjetCorrector", "ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector", "ak4PFL6SLBCorrector")
)


process.ak4PFL1FastL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL1FastjetCorrector", "ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector", "ak4PFResidualCorrector")
)


process.ak4PFL1FastjetCorrector = cms.EDProducer("L1FastjetCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFL1L2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL1OffsetCorrector", "ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector")
)


process.ak4PFL1L2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL1OffsetCorrector", "ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector", "ak4PFResidualCorrector")
)


process.ak4PFL1OffsetCorrector = cms.EDProducer("L1OffsetCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.ak4PFL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector")
)


process.ak4PFL2L3L6Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector", "ak4PFL6SLBCorrector")
)


process.ak4PFL2L3ResidualCorrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4PFL2RelativeCorrector", "ak4PFL3AbsoluteCorrector", "ak4PFResidualCorrector")
)


process.ak4PFL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L2Relative')
)


process.ak4PFL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L3Absolute')
)


process.ak4PFL6SLBCorrector = cms.EDProducer("L6SLBCorrectorProducer",
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ak4PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak4PFJetsSoftMuonTagInfos")
)


process.ak4PFResidualCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L2L3Residual')
)


process.ak4TrackJetsL1 = cms.EDProducer("CorrectedTrackJetProducer",
    correctors = cms.VInputTag("ak4TrackL1FastjetCorrector"),
    src = cms.InputTag("ak4TrackJets")
)


process.ak4TrackJetsL1L2L3 = cms.EDProducer("TrackJetCorrectionProducer",
    correctors = cms.vstring('ak5TRKL1L2L3'),
    src = cms.InputTag("ak4TrackJets")
)


process.ak4TrackJetsL2 = cms.EDProducer("CorrectedTrackJetProducer",
    correctors = cms.VInputTag("ak4TrackL2RelativeCorrector"),
    src = cms.InputTag("ak4TrackJets")
)


process.ak4TrackJetsL2L3 = cms.EDProducer("CorrectedTrackJetProducer",
    correctors = cms.VInputTag("ak4TrackL2L3Corrector"),
    src = cms.InputTag("ak4TrackJets")
)


process.ak4TrackL2L3Corrector = cms.EDProducer("ChainedJetCorrectorProducer",
    correctors = cms.VInputTag("ak4TrackL2RelativeCorrector", "ak4TrackL3AbsoluteCorrector")
)


process.ak4TrackL2RelativeCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4TRK'),
    level = cms.string('L2Relative')
)


process.ak4TrackL3AbsoluteCorrector = cms.EDProducer("LXXXCorrectorProducer",
    algorithm = cms.string('AK4TRK'),
    level = cms.string('L3Absolute')
)


process.ak5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak5CastorJetID = cms.EDProducer("CastorJetIDProducer",
    src = cms.InputTag("ak5CastorJets")
)


process.ak5CastorJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(0.0),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("CastorTowerReco"),
    srcPVs = cms.InputTag("offlinePrimaryVertices")
)


process.ak5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlowTmp"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak5PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak5PFL1FastL2L3'),
    src = cms.InputTag("ak5PFJets")
)


process.ak5PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak5PFL1FastL2L3Residual'),
    src = cms.InputTag("ak5PFJets")
)


process.ak5PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak5PFL1L2L3'),
    src = cms.InputTag("ak5PFJets")
)


process.ak5PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak5PFL1L2L3Residual'),
    src = cms.InputTag("ak5PFJets")
)


process.ak5PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak5PFL2L3'),
    src = cms.InputTag("ak5PFJets")
)


process.ak5PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak5PFL2L3Residual'),
    src = cms.InputTag("ak5PFJets")
)


process.ak6CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.6),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak6PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak6PFL1FastL2L3'),
    src = cms.InputTag("ak6PFJets")
)


process.ak6PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak6PFL1FastL2L3Residual'),
    src = cms.InputTag("ak6PFJets")
)


process.ak6PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak6PFL1L2L3'),
    src = cms.InputTag("ak6PFJets")
)


process.ak6PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak6PFL1L2L3Residual'),
    src = cms.InputTag("ak6PFJets")
)


process.ak6PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak6PFL2L3'),
    src = cms.InputTag("ak6PFJets")
)


process.ak6PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak6PFL2L3Residual'),
    src = cms.InputTag("ak6PFJets")
)


process.ak7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.7),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ak7CaloJetsL1FastL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak7CaloL1FastL2L3'),
    src = cms.InputTag("ak7CaloJets")
)


process.ak7CaloJetsL1FastL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak7CaloL1FastL2L3Residual'),
    src = cms.InputTag("ak7CaloJets")
)


process.ak7CaloJetsL1L2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak7CaloL1L2L3'),
    src = cms.InputTag("ak7CaloJets")
)


process.ak7CaloJetsL1L2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak7CaloL1L2L3Residual'),
    src = cms.InputTag("ak7CaloJets")
)


process.ak7CaloJetsL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak7CaloL2L3'),
    src = cms.InputTag("ak7CaloJets")
)


process.ak7CaloJetsL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak7CaloL2L3Residual'),
    src = cms.InputTag("ak7CaloJets")
)


process.ak7CastorJetID = cms.EDProducer("CastorJetIDProducer",
    src = cms.InputTag("ak7CastorJets")
)


process.ak7CastorJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(5.0),
    doAreaFastjet = cms.bool(False),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(True),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(0.0),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    nSigmaPU = cms.double(1.0),
    rParam = cms.double(0.7),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("CastorTowerReco"),
    srcPVs = cms.InputTag("offlinePrimaryVertices")
)


process.ak7PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak7PFL1FastL2L3'),
    src = cms.InputTag("ak7PFJets")
)


process.ak7PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak7PFL1FastL2L3Residual'),
    src = cms.InputTag("ak7PFJets")
)


process.ak7PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak7PFL1L2L3'),
    src = cms.InputTag("ak7PFJets")
)


process.ak7PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak7PFL1L2L3Residual'),
    src = cms.InputTag("ak7PFJets")
)


process.ak7PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak7PFL2L3'),
    src = cms.InputTag("ak7PFJets")
)


process.ak7PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak7PFL2L3Residual'),
    src = cms.InputTag("ak7PFJets")
)


process.ak8PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak8PFL1FastL2L3'),
    src = cms.InputTag("ak8PFJets")
)


process.ak8PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak8PFL1FastL2L3Residual'),
    src = cms.InputTag("ak8PFJets")
)


process.ak8PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak8PFL1L2L3'),
    src = cms.InputTag("ak8PFJets")
)


process.ak8PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak8PFL1L2L3Residual'),
    src = cms.InputTag("ak8PFJets")
)


process.ak8PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak8PFL2L3'),
    src = cms.InputTag("ak8PFJets")
)


process.ak8PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak8PFL2L3Residual'),
    src = cms.InputTag("ak8PFJets")
)


process.ak9PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak9PFL1FastL2L3'),
    src = cms.InputTag("ak9PFJets")
)


process.ak9PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak9PFL1FastL2L3Residual'),
    src = cms.InputTag("ak9PFJets")
)


process.ak9PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak9PFL1L2L3'),
    src = cms.InputTag("ak9PFJets")
)


process.ak9PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak9PFL1L2L3Residual'),
    src = cms.InputTag("ak9PFJets")
)


process.ak9PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak9PFL2L3'),
    src = cms.InputTag("ak9PFJets")
)


process.ak9PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ak9PFL2L3Residual'),
    src = cms.InputTag("ak9PFJets")
)


process.akPu1CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(4),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.1),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu1PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.1),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("PFTowers"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu2CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(4),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.2),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu2PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.2),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("PFTowers"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu3CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(6),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.3),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu3PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(15),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.3),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("PFTowers"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(8),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu4CaloJetsCorrected = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak4CaloL2L3'),
    src = cms.InputTag("akPu4CaloJetsForTrk")
)


process.akPu4CaloJetsForTrk = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(8),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("hiCaloTowerForTrk"),
    srcPVs = cms.InputTag("hiSelectedVertex"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(20),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("PFTowers"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(25),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("PFTowers"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu6CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(12),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.6),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu6PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(30),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.6),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("PFTowers"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(14),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.7),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akPu7PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('BasicJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(35),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.7),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("PFTowers"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs1CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundCalo"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.1),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs1PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundPF"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(0),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.1),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlowTmp"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs2CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundCalo"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.2),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs2PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundPF"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(0),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.2),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlowTmp"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs3CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundCalo"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.3),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs3PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundPF"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(0),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.3),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlowTmp"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundCalo"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundPF"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(0),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlowTmp"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundCalo"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundPF"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(0),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlowTmp"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs6CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundCalo"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.6),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs6PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundPF"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(0),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.6),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlowTmp"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundCalo"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.7),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.akVs7PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    bkg = cms.InputTag("voronoiBackgroundPF"),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(False),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10),
    jetType = cms.string('PFJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(0),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.7),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlowTmp"),
    srcPVs = cms.InputTag(""),
    subtractorName = cms.string('VoronoiSubtractor'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.alcaBeamSpotProducer = cms.EDProducer("AlcaBeamSpotProducer",
    AlcaBeamSpotProducerParameters = cms.PSet(
        RunAllFitters = cms.bool(False),
        RunBeamWidthFit = cms.bool(False),
        WriteToDB = cms.bool(False),
        fitEveryNLumi = cms.untracked.int32(1),
        resetEveryNLumi = cms.untracked.int32(1)
    ),
    BeamFitter = cms.PSet(
        AppendRunToFileName = cms.untracked.bool(True),
        AsciiFileName = cms.untracked.string('BeamFit.txt'),
        DIPFileName = cms.untracked.string('BeamFitDIP.txt'),
        Debug = cms.untracked.bool(False),
        FractionOfFittedTrks = cms.untracked.double(0.9),
        InputBeamWidth = cms.untracked.double(-1.0),
        IsMuonCollection = cms.untracked.bool(False),
        MaximumEta = cms.untracked.double(2.4),
        MaximumImpactParameter = cms.untracked.double(1.0),
        MaximumNormChi2 = cms.untracked.double(10),
        MaximumZ = cms.untracked.double(60),
        MinimumInputTracks = cms.untracked.int32(50),
        MinimumPixelLayers = cms.untracked.int32(-1),
        MinimumPt = cms.untracked.double(1.0),
        MinimumTotalLayers = cms.untracked.int32(6),
        OutputFileName = cms.untracked.string('analyze_d0_phi.root'),
        SaveFitResults = cms.untracked.bool(False),
        SaveNtuple = cms.untracked.bool(False),
        SavePVVertices = cms.untracked.bool(False),
        TrackAlgorithm = cms.untracked.vstring(),
        TrackCollection = cms.untracked.InputTag("ALCARECOTkAlMinBiasHI"),
        TrackQuality = cms.untracked.vstring('highPurity'),
        WriteAscii = cms.untracked.bool(False),
        WriteDIPAscii = cms.untracked.bool(False)
    ),
    PVFitter = cms.PSet(
        Apply3DFit = cms.untracked.bool(True),
        Debug = cms.untracked.bool(False),
        FitPerBunchCrossing = cms.untracked.bool(False),
        VertexCollection = cms.untracked.InputTag("hiSelectedVertex"),
        errorScale = cms.untracked.double(0.9),
        maxNrStoredVertices = cms.untracked.uint32(10000),
        maxVertexNormChi2 = cms.untracked.double(10.0),
        maxVertexR = cms.untracked.double(2),
        maxVertexZ = cms.untracked.double(10),
        minNrVerticesForFit = cms.untracked.uint32(10),
        minVertexMeanWeight = cms.untracked.double(0.5),
        minVertexNTracks = cms.untracked.uint32(0),
        minVertexNdf = cms.untracked.double(10.0),
        nSigmaCut = cms.untracked.double(50.0)
    )
)


process.ancientMuonSeed = cms.EDProducer("MuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    CSC_01 = cms.vdouble(0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_02 = cms.vdouble(0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0),
    CSC_03 = cms.vdouble(0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0),
    CSC_12 = cms.vdouble(-0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13 = cms.vdouble(0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14 = cms.vdouble(0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23 = cms.vdouble(-0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24 = cms.vdouble(0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34 = cms.vdouble(0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    DT_12 = cms.vdouble(0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13 = cms.vdouble(0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14 = cms.vdouble(0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23 = cms.vdouble(0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24 = cms.vdouble(0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34 = cms.vdouble(0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    OL_1213 = cms.vdouble(0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222 = cms.vdouble(0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232 = cms.vdouble(0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213 = cms.vdouble(0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222 = cms.vdouble(0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10 = cms.vdouble(1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11 = cms.vdouble(1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12 = cms.vdouble(2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20 = cms.vdouble(1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21 = cms.vdouble(1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22 = cms.vdouble(1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30 = cms.vdouble(0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31 = cms.vdouble(0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32 = cms.vdouble(0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11 = cms.vdouble(3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12 = cms.vdouble(0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13 = cms.vdouble(-1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21 = cms.vdouble(-0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22 = cms.vdouble(-1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SME_31 = cms.vdouble(-1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0),
    SME_32 = cms.vdouble(-0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0),
    SME_41 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    SME_42 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    crackEtas = cms.vdouble(0.2, 1.6, 1.7),
    crackWindow = cms.double(0.04),
    deltaEtaCrackSearchWindow = cms.double(0.25),
    deltaEtaSearchWindow = cms.double(0.2),
    deltaPhiSearchWindow = cms.double(0.25),
    scaleDT = cms.bool(True)
)


process.bunchSpacingProducer = cms.EDProducer("BunchSpacingProducer",
    bunchSpacingOverride = cms.uint32(50),
    overrideBunchSpacing = cms.bool(True)
)


process.calZeroBiasClusters = cms.EDProducer("SiStripClusterizer",
    Clusterizer = cms.PSet(
        Algorithm = cms.string('ThreeThresholdAlgorithm'),
        ChannelThreshold = cms.double(2.0),
        ClusterThreshold = cms.double(5.0),
        MaxAdjacentBad = cms.uint32(0),
        MaxSequentialBad = cms.uint32(1),
        MaxSequentialHoles = cms.uint32(0),
        QualityLabel = cms.string('unbiased'),
        RemoveApvShots = cms.bool(True),
        SeedThreshold = cms.double(3.0),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    ),
    DigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode"))
)


process.caloStage1Digis = cms.EDProducer("L1TRawToDigi",
    FedIds = cms.vint32(1352),
    InputLabel = cms.InputTag("rawDataCollector"),
    Setup = cms.string('stage1::CaloSetup'),
    lenAMC13Header = cms.untracked.int32(8),
    lenAMC13Trailer = cms.untracked.int32(8),
    lenAMCHeader = cms.untracked.int32(8),
    lenAMCTrailer = cms.untracked.int32(0),
    lenSlinkHeader = cms.untracked.int32(8),
    lenSlinkTrailer = cms.untracked.int32(8)
)


process.caloStage1LegacyFormatDigis = cms.EDProducer("L1TCaloUpgradeToGCTConverter",
    InputCollection = cms.InputTag("caloStage1Digis"),
    InputHFCountsCollection = cms.InputTag("caloStage1Digis","HFBitCounts"),
    InputHFSumsCollection = cms.InputTag("caloStage1Digis","HFRingSums"),
    InputIsoTauCollection = cms.InputTag("caloStage1Digis","isoTaus"),
    InputRlxTauCollection = cms.InputTag("caloStage1Digis","rlxTaus")
)


process.caloTowers = cms.EDProducer("CaloTowerCandidateCreator",
    e = cms.double(0.0),
    et = cms.double(0.0),
    minimumE = cms.double(0.0),
    minimumEt = cms.double(0.0),
    pt = cms.double(0.0),
    src = cms.InputTag("towerMaker"),
    verbose = cms.untracked.int32(0)
)


process.calomuons = cms.EDProducer("CaloMuonProducer",
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    inputCollection = cms.InputTag("hiMuons1stStep"),
    inputMuons = cms.InputTag("hiMuons1stStep"),
    inputTracks = cms.InputTag("hiGeneralTracks"),
    minCaloCompatibility = cms.double(0.6),
    minPt = cms.double(1.0)
)


process.calotowermaker = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.8),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.8),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.castorDigis = cms.EDProducer("CastorRawToDigi",
    CastorCtdc = cms.bool(False),
    CastorFirstFED = cms.int32(690),
    ComplainEmptyData = cms.untracked.bool(False),
    ExceptionEmptyData = cms.untracked.bool(False),
    ExpectedOrbitMessageTime = cms.int32(-1),
    FEDs = cms.untracked.vint32(690, 691, 692),
    FilterDataQuality = cms.bool(True),
    InputLabel = cms.InputTag("rawDataRepacker"),
    UnpackTTP = cms.bool(True),
    UseNominalOrbitMessageTime = cms.bool(True),
    firstSample = cms.int32(0),
    lastSample = cms.int32(9),
    silent = cms.untracked.bool(False)
)


process.castorreco = cms.EDProducer("CastorSimpleReconstructor",
    Subdetector = cms.string('CASTOR'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("castorDigis"),
    doSaturationCorr = cms.bool(True),
    firstSample = cms.int32(4),
    maxADCvalue = cms.int32(127),
    samplesToAdd = cms.int32(2),
    setSaturationFlag = cms.bool(True),
    tsFromDB = cms.bool(True)
)


process.centralityBin = cms.EDProducer("CentralityBinProducer",
    Centrality = cms.InputTag("hiCentrality"),
    centralityVariable = cms.string('HFtowers'),
    nonDefaultGlauberModel = cms.string(''),
    pPbRunFlip = cms.uint32(99999999)
)


process.chargeCut2069Clusters = cms.EDProducer("ClusterChargeMasker",
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    oldClusterRemovalInfo = cms.InputTag("pixelPairStepClusters"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters")
)


process.ckfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("globalMixedSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesCombinedSeeds = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("globalCombinedSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesNoOverlaps = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('CkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("globalMixedSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesP5 = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("combinedP5SeedsForCTF"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesP5Bottom = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5Bottom')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("combinedP5SeedsForCTFBottom"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesP5LHCNavigation = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("combinedP5SeedsForCTF"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesP5Top = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5Top')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("combinedP5SeedsForCTFTop"),
    useHitsSplitting = cms.bool(True)
)


process.ckfTrackCandidatesPixelLess = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("globalPixelLessSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.cleanPhotonCore = cms.EDProducer("PhotonCoreProducer",
    conversionProducer = cms.InputTag(""),
    minSCEt = cms.double(8.0),
    photonCoreCollection = cms.string(''),
    pixelSeedProducer = cms.InputTag("electronMergedSeeds"),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("hiSpikeCleanedSC"),
    scIslandEndcapProducer = cms.InputTag("correctedIslandEndcapSuperClusters")
)


process.cleanPhotons = cms.EDProducer("PhotonProducer",
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromEcalEnergy'),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("hiGeneralTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.99),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(10.0),
    minR9Endcap = cms.double(10.0),
    minSCEtBarrel = cms.double(5.0),
    minSCEtEndcap = cms.double(15.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    photonCoreProducer = cms.InputTag("cleanPhotonCore"),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    primaryVertexProducer = cms.InputTag("hiSelectedVertex"),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True)
)


process.cleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    HybridBarrelSeedThr = cms.double(1.0),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitSeverityToBeExcluded = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    dynamicEThresh = cms.bool(False),
    dynamicPhiRoad = cms.bool(False),
    eThreshA = cms.double(0.003),
    eThreshB = cms.double(0.1),
    eseed = cms.double(0.35),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    excludeFlagged = cms.bool(True),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    recHitsCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    step = cms.int32(17),
    superclusterCollection = cms.string(''),
    useEtForXi = cms.bool(True),
    xi = cms.double(0.0)
)


process.clusterSummaryProducer = cms.EDProducer("ClusterSummaryProducer",
    doPixels = cms.bool(True),
    doStrips = cms.bool(True),
    pixelClusters = cms.InputTag("siPixelClustersPreSplitting"),
    stripClusters = cms.InputTag("siStripClusters"),
    verbose = cms.bool(False),
    wantedSubDets = cms.vstring('TOB', 
        'TIB', 
        'TID', 
        'TEC', 
        'STRIP', 
        'BPIX', 
        'FPIX', 
        'PIXEL'),
    wantedUserSubDets = cms.VPSet()
)


process.clusterSummaryProducerNoSplitting = cms.EDProducer("ClusterSummaryProducer",
    doPixels = cms.bool(True),
    doStrips = cms.bool(True),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    verbose = cms.bool(False),
    wantedSubDets = cms.vstring('TOB', 
        'TIB', 
        'TID', 
        'TEC', 
        'STRIP', 
        'BPIX', 
        'FPIX', 
        'PIXEL'),
    wantedUserSubDets = cms.VPSet()
)


process.combinatorialcosmicseedfinder = cms.EDProducer("CtfSpecialSeedGenerator",
    Charges = cms.vint32(-1),
    CheckHitsAreOnDifferentLayers = cms.bool(False),
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    DontCountDetsAboveNClusters = cms.uint32(20),
    ErrorRescaling = cms.double(50.0),
    LowerScintillatorParameters = cms.PSet(
        GlobalX = cms.double(0.0),
        GlobalY = cms.double(-100.0),
        GlobalZ = cms.double(50.0),
        LenghtInZ = cms.double(100.0),
        WidthInX = cms.double(100.0)
    ),
    MaxNumberOfCosmicClusters = cms.uint32(300),
    MaxNumberOfPixelClusters = cms.uint32(300),
    OrderedHitsFactoryPSets = cms.VPSet(cms.PSet(
        ComponentName = cms.string('GenericTripletGenerator'),
        LayerSrc = cms.InputTag("combinatorialcosmicseedingtripletsTOB"),
        NavigationDirection = cms.string('outsideIn'),
        PropagationDirection = cms.string('alongMomentum')
    ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECpos"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericTripletGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingtripletsTIB"),
            NavigationDirection = cms.string('insideOut'),
            PropagationDirection = cms.string('oppositeToMomentum')
        )),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducer'),
        RegionPSet = cms.PSet(
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            originXPos = cms.double(0.0),
            originYPos = cms.double(0.0),
            originZPos = cms.double(0.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.9)
        )
    ),
    SeedMomentum = cms.double(5.0),
    SeedsFromNegativeY = cms.bool(False),
    SeedsFromPositiveY = cms.bool(True),
    SetMomentum = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    UpperScintillatorParameters = cms.PSet(
        GlobalX = cms.double(0.0),
        GlobalY = cms.double(300.0),
        GlobalZ = cms.double(50.0),
        LenghtInZ = cms.double(100.0),
        WidthInX = cms.double(100.0)
    ),
    UseScintillatorsConstraint = cms.bool(True),
    doClusterCheck = cms.bool(True),
    maxSeeds = cms.int32(10000),
    requireBOFF = cms.bool(False)
)


process.combinatorialcosmicseedfinderP5 = cms.EDProducer("CtfSpecialSeedGenerator",
    Charges = cms.vint32(-1),
    CheckHitsAreOnDifferentLayers = cms.bool(False),
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    DontCountDetsAboveNClusters = cms.uint32(20),
    ErrorRescaling = cms.double(50.0),
    LowerScintillatorParameters = cms.PSet(
        GlobalX = cms.double(0.0),
        GlobalY = cms.double(-100.0),
        GlobalZ = cms.double(50.0),
        LenghtInZ = cms.double(100.0),
        WidthInX = cms.double(100.0)
    ),
    MaxNumberOfCosmicClusters = cms.uint32(300),
    MaxNumberOfPixelClusters = cms.uint32(300),
    OrderedHitsFactoryPSets = cms.VPSet(cms.PSet(
        ComponentName = cms.string('GenericTripletGenerator'),
        LayerSrc = cms.InputTag("combinatorialcosmicseedingtripletsP5"),
        NavigationDirection = cms.string('outsideIn'),
        PropagationDirection = cms.string('alongMomentum')
    ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTOBP5"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECposP5"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECposP5"),
            NavigationDirection = cms.string('insideOut'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECnegP5"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECnegP5"),
            NavigationDirection = cms.string('insideOut'),
            PropagationDirection = cms.string('alongMomentum')
        )),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducer'),
        RegionPSet = cms.PSet(
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            originXPos = cms.double(0.0),
            originYPos = cms.double(0.0),
            originZPos = cms.double(0.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.9)
        )
    ),
    SeedMomentum = cms.double(5.0),
    SeedsFromNegativeY = cms.bool(False),
    SeedsFromPositiveY = cms.bool(True),
    SetMomentum = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    UpperScintillatorParameters = cms.PSet(
        GlobalX = cms.double(0.0),
        GlobalY = cms.double(300.0),
        GlobalZ = cms.double(50.0),
        LenghtInZ = cms.double(100.0),
        WidthInX = cms.double(100.0)
    ),
    UseScintillatorsConstraint = cms.bool(False),
    doClusterCheck = cms.bool(True),
    maxSeeds = cms.int32(10000),
    requireBOFF = cms.bool(True)
)


process.combinatorialcosmicseedfinderP5Bottom = cms.EDProducer("CtfSpecialSeedGenerator",
    Charges = cms.vint32(-1),
    CheckHitsAreOnDifferentLayers = cms.bool(False),
    ClusterCollectionLabel = cms.InputTag("siStripClustersBottom"),
    DontCountDetsAboveNClusters = cms.uint32(20),
    ErrorRescaling = cms.double(50.0),
    LowerScintillatorParameters = cms.PSet(
        GlobalX = cms.double(0.0),
        GlobalY = cms.double(-100.0),
        GlobalZ = cms.double(50.0),
        LenghtInZ = cms.double(100.0),
        WidthInX = cms.double(100.0)
    ),
    MaxNumberOfCosmicClusters = cms.uint32(150),
    MaxNumberOfPixelClusters = cms.uint32(300),
    OrderedHitsFactoryPSets = cms.VPSet(cms.PSet(
        ComponentName = cms.string('GenericTripletGenerator'),
        LayerSrc = cms.InputTag("combinatorialcosmicseedingtripletsP5Bottom"),
        NavigationDirection = cms.string('outsideIn'),
        PropagationDirection = cms.string('oppositeToMomentum')
    ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTOBP5Bottom"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('oppositeToMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECposP5Bottom"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('oppositeToMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECposP5Bottom"),
            NavigationDirection = cms.string('insideOut'),
            PropagationDirection = cms.string('oppositeToMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECnegP5Bottom"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('oppositeToMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECnegP5Bottom"),
            NavigationDirection = cms.string('insideOut'),
            PropagationDirection = cms.string('oppositeToMomentum')
        )),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducer'),
        RegionPSet = cms.PSet(
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            originXPos = cms.double(0.0),
            originYPos = cms.double(0.0),
            originZPos = cms.double(0.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.9)
        )
    ),
    SeedMomentum = cms.double(5.0),
    SeedsFromNegativeY = cms.bool(True),
    SeedsFromPositiveY = cms.bool(False),
    SetMomentum = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    UpperScintillatorParameters = cms.PSet(
        GlobalX = cms.double(0.0),
        GlobalY = cms.double(300.0),
        GlobalZ = cms.double(50.0),
        LenghtInZ = cms.double(100.0),
        WidthInX = cms.double(100.0)
    ),
    UseScintillatorsConstraint = cms.bool(False),
    doClusterCheck = cms.bool(True),
    maxSeeds = cms.int32(10000),
    requireBOFF = cms.bool(True)
)


process.combinatorialcosmicseedfinderP5Top = cms.EDProducer("CtfSpecialSeedGenerator",
    Charges = cms.vint32(-1),
    CheckHitsAreOnDifferentLayers = cms.bool(False),
    ClusterCollectionLabel = cms.InputTag("siStripClustersTop"),
    DontCountDetsAboveNClusters = cms.uint32(20),
    ErrorRescaling = cms.double(50.0),
    LowerScintillatorParameters = cms.PSet(
        GlobalX = cms.double(0.0),
        GlobalY = cms.double(-100.0),
        GlobalZ = cms.double(50.0),
        LenghtInZ = cms.double(100.0),
        WidthInX = cms.double(100.0)
    ),
    MaxNumberOfCosmicClusters = cms.uint32(150),
    MaxNumberOfPixelClusters = cms.uint32(300),
    OrderedHitsFactoryPSets = cms.VPSet(cms.PSet(
        ComponentName = cms.string('GenericTripletGenerator'),
        LayerSrc = cms.InputTag("combinatorialcosmicseedingtripletsP5Top"),
        NavigationDirection = cms.string('outsideIn'),
        PropagationDirection = cms.string('alongMomentum')
    ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTOBP5Top"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECposP5Top"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECposP5Top"),
            NavigationDirection = cms.string('insideOut'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECnegP5Top"),
            NavigationDirection = cms.string('outsideIn'),
            PropagationDirection = cms.string('alongMomentum')
        ), 
        cms.PSet(
            ComponentName = cms.string('GenericPairGenerator'),
            LayerSrc = cms.InputTag("combinatorialcosmicseedingpairsTECnegP5Top"),
            NavigationDirection = cms.string('insideOut'),
            PropagationDirection = cms.string('alongMomentum')
        )),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducer'),
        RegionPSet = cms.PSet(
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            originXPos = cms.double(0.0),
            originYPos = cms.double(0.0),
            originZPos = cms.double(0.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.9)
        )
    ),
    SeedMomentum = cms.double(5.0),
    SeedsFromNegativeY = cms.bool(False),
    SeedsFromPositiveY = cms.bool(True),
    SetMomentum = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    UpperScintillatorParameters = cms.PSet(
        GlobalX = cms.double(0.0),
        GlobalY = cms.double(300.0),
        GlobalZ = cms.double(50.0),
        LenghtInZ = cms.double(100.0),
        WidthInX = cms.double(100.0)
    ),
    UseScintillatorsConstraint = cms.bool(False),
    doClusterCheck = cms.bool(True),
    maxSeeds = cms.int32(10000),
    requireBOFF = cms.bool(True)
)


process.combinatorialcosmicseedingpairsTECnegP5 = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg', 
        'TEC7_neg+TEC8_neg', 
        'TEC8_neg+TEC9_neg')
)


process.combinatorialcosmicseedingpairsTECnegP5Bottom = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg', 
        'TEC7_neg+TEC8_neg', 
        'TEC8_neg+TEC9_neg')
)


process.combinatorialcosmicseedingpairsTECnegP5Top = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg', 
        'TEC7_neg+TEC8_neg', 
        'TEC8_neg+TEC9_neg')
)


process.combinatorialcosmicseedingpairsTECposP5 = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC7_pos+TEC8_pos', 
        'TEC8_pos+TEC9_pos')
)


process.combinatorialcosmicseedingpairsTECposP5Bottom = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC7_pos+TEC8_pos', 
        'TEC8_pos+TEC9_pos')
)


process.combinatorialcosmicseedingpairsTECposP5Top = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC7_pos+TEC8_pos', 
        'TEC8_pos+TEC9_pos')
)


process.combinatorialcosmicseedingpairsTOBP5 = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(True)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    layerList = cms.vstring('TOB5+TOB6', 
        'TOB4+TOB5')
)


process.combinatorialcosmicseedingpairsTOBP5Bottom = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(True)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    layerList = cms.vstring('TOB5+TOB6', 
        'TOB4+TOB5')
)


process.combinatorialcosmicseedingpairsTOBP5Top = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(True)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    layerList = cms.vstring('TOB5+TOB6', 
        'TOB4+TOB5')
)


process.combinatorialcosmicseedingtripletsP5 = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(True)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    layerList = cms.vstring('TOB4+TOB5+TOB6', 
        'TOB3+TOB5+TOB6', 
        'TOB3+TOB4+TOB5', 
        'TOB2+TOB4+TOB5', 
        'TOB3+TOB4+TOB6', 
        'TOB2+TOB4+TOB6')
)


process.combinatorialcosmicseedingtripletsP5Bottom = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(True)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    layerList = cms.vstring('TOB4+TOB5+TOB6', 
        'TOB3+TOB5+TOB6', 
        'TOB3+TOB4+TOB5', 
        'TOB2+TOB4+TOB5', 
        'TOB3+TOB4+TOB6', 
        'TOB2+TOB4+TOB6')
)


process.combinatorialcosmicseedingtripletsP5Top = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(True)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    layerList = cms.vstring('TOB4+TOB5+TOB6', 
        'TOB3+TOB5+TOB6', 
        'TOB3+TOB4+TOB5', 
        'TOB2+TOB4+TOB5', 
        'TOB3+TOB4+TOB6', 
        'TOB2+TOB4+TOB6')
)


process.combinedP5SeedsForCTF = cms.EDProducer("SeedCombiner",
    PairCollection = cms.InputTag("combinatorialcosmicseedfinderP5"),
    TripletCollection = cms.InputTag("simpleCosmicBONSeeds"),
    seedCollections = cms.VInputTag(cms.InputTag("combinatorialcosmicseedfinderP5"), cms.InputTag("simpleCosmicBONSeeds"))
)


process.combinedP5SeedsForCTFBottom = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("combinatorialcosmicseedfinderP5Bottom"), cms.InputTag("simpleCosmicBONSeedsBottom"))
)


process.combinedP5SeedsForCTFTop = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("combinatorialcosmicseedfinderP5Top"), cms.InputTag("simpleCosmicBONSeedsTop"))
)


process.conditionsInEdm = cms.EDProducer("ConditionDumperInEdm",
    gtEvmDigisLabel = cms.InputTag("gtEvmDigis")
)


process.consecutiveHEs = cms.EDProducer("EventWithHistoryProducerFromL1ABC",
    l1ABCCollection = cms.InputTag("scalersRawToDigi")
)


process.conversionStepTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("convStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("convStepSelector","convStep")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(1)
    )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.convertObjectMapRecord = cms.EDProducer("ConvertObjectMapRecord",
    L1GtObjectMapTag = cms.InputTag("hltL1GtObjectMap")
)


process.correctedEndcapSuperClustersWithPreshower = cms.EDProducer("PreshowerClusterProducer",
    assocSClusterCollection = cms.string(''),
    debugLevel = cms.string(''),
    endcapSClusterProducer = cms.InputTag("correctedIslandEndcapSuperClusters"),
    etThresh = cms.double(0.0),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshClusterEnergyCut = cms.double(0.0),
    preshNclust = cms.int32(4),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    preshSeededNstrip = cms.int32(15),
    preshStripEnergyCut = cms.double(0.0)
)


process.correctedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    hyb_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(8.0),
        brLinearLowThr = cms.double(1.1),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419),
        fEtEtaVec = cms.vdouble(0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181)
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid')
)


process.correctedIslandBarrelSuperClusters = cms.EDProducer("HiEgammaSCCorrectionMaker",
    VerbosityLevel = cms.string('ERROR'),
    applyEnergyCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    etThresh = cms.double(0.0),
    isl_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(0.0),
        brLinearLowThr = cms.double(0.0),
        fBremThVect = cms.vdouble(1.2, 1.2),
        fBremVect = cms.vdouble(-0.773799, 2.73438, -1.07235, 0.986821, -0.0101822, 
            0.000306744, 1.00595, -0.0495958, 0.00451986, 1.00595, 
            -0.0495958, 0.00451986),
        fEtEtaVect = cms.vdouble(0.9497, 0.006985, 1.03754, -0.0142667, -0.0233993, 
            0, 0, 0.908915, 0.0137322, 16.9602, 
            -29.3093, 19.8976, -5.92666, 0.654571),
        fEtaVect = cms.vdouble(0.993, 0, 0.00546, 1.165, -0.180844, 
            0.040312),
        maxR9 = cms.double(1.5),
        minR9Barrel = cms.double(0.94),
        minR9Endcap = cms.double(0.95)
    ),
    rawSuperClusterProducer = cms.InputTag("islandSuperClusters","islandBarrelSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Island')
)


process.correctedIslandEndcapSuperClusters = cms.EDProducer("HiEgammaSCCorrectionMaker",
    VerbosityLevel = cms.string('ERROR'),
    applyEnergyCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    etThresh = cms.double(0.0),
    isl_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(0.0),
        brLinearLowThr = cms.double(0.0),
        fBremThVect = cms.vdouble(1.2, 1.2),
        fBremVect = cms.vdouble(-0.773799, 2.73438, -1.07235, 0.986821, -0.0101822, 
            0.000306744, 1.00595, -0.0495958, 0.00451986, 1.00595, 
            -0.0495958, 0.00451986),
        fEtEtaVect = cms.vdouble(0.9497, 0.006985, 1.03754, -0.0142667, -0.0233993, 
            0, 0, 0.908915, 0.0137322, 16.9602, 
            -29.3093, 19.8976, -5.92666, 0.654571),
        fEtaVect = cms.vdouble(0.993, 0, 0.00546, 1.165, -0.180844, 
            0.040312),
        maxR9 = cms.double(1.5),
        minR9Barrel = cms.double(0.94),
        minR9Endcap = cms.double(0.95)
    ),
    rawSuperClusterProducer = cms.InputTag("islandSuperClusters","islandEndcapSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Island')
)


process.correctedMulti5x5SuperClustersWithPreshower = cms.EDProducer("EgammaSCCorrectionMaker",
    VerbosityLevel = cms.string('ERROR'),
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(False),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    fix_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(6.0),
        brLinearLowThr = cms.double(0.9),
        fBremVec = cms.vdouble(-0.05228, 0.08738, 0.9508, 0.002677, 1.221),
        fEtEtaVec = cms.vdouble(1, -0.4386, -32.38, 0.6372, 15.67, 
            -0.0928, -2.462, 1.138, 20.93)
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("multi5x5SuperClustersWithPreshower"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Multi5x5')
)


process.cosmicCandidateFinder = cms.EDProducer("CosmicTrackFinder",
    Chi2Cut = cms.double(30.0),
    GeometricStructure = cms.untracked.string('MTCC'),
    HitProducer = cms.string('siStripRecHits'),
    MinHits = cms.int32(4),
    TTRHBuilder = cms.string('WithTrackAngle'),
    cosmicSeeds = cms.InputTag("cosmicseedfinder"),
    debug = cms.untracked.bool(True),
    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    pixelRecHits = cms.InputTag("siPixelRecHits"),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    stereorecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHit"),
    useHitsSplitting = cms.bool(True)
)


process.cosmicCandidateFinderP5 = cms.EDProducer("CosmicTrackFinder",
    Chi2Cut = cms.double(30.0),
    GeometricStructure = cms.untracked.string('STANDARD'),
    HitProducer = cms.string('siStripRecHits'),
    MinHits = cms.int32(4),
    TTRHBuilder = cms.string('WithTrackAngle'),
    cosmicSeeds = cms.InputTag("cosmicseedfinderP5"),
    debug = cms.untracked.bool(True),
    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    pixelRecHits = cms.InputTag("siPixelRecHits"),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    stereorecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHit"),
    useHitsSplitting = cms.bool(True)
)


process.cosmicCandidateFinderP5Bottom = cms.EDProducer("CosmicTrackFinder",
    Chi2Cut = cms.double(30.0),
    GeometricStructure = cms.untracked.string('STANDARD'),
    HitProducer = cms.string('siStripRecHitsBottom'),
    MinHits = cms.int32(4),
    TTRHBuilder = cms.string('WithTrackAngle'),
    cosmicSeeds = cms.InputTag("cosmicseedfinderP5Bottom"),
    debug = cms.untracked.bool(True),
    matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit"),
    pixelRecHits = cms.InputTag("siPixelRecHitsBottom"),
    rphirecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit"),
    stereorecHits = cms.InputTag("siStripMatchedRecHitsBottom","stereoRecHit"),
    useHitsSplitting = cms.bool(True)
)


process.cosmicCandidateFinderP5Top = cms.EDProducer("CosmicTrackFinder",
    Chi2Cut = cms.double(30.0),
    GeometricStructure = cms.untracked.string('STANDARD'),
    HitProducer = cms.string('siStripRecHitsTop'),
    MinHits = cms.int32(4),
    TTRHBuilder = cms.string('WithTrackAngle'),
    cosmicSeeds = cms.InputTag("cosmicseedfinderP5Top"),
    debug = cms.untracked.bool(True),
    matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit"),
    pixelRecHits = cms.InputTag("siPixelRecHitsTop"),
    rphirecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit"),
    stereorecHits = cms.InputTag("siStripMatchedRecHitsTop","stereoRecHit"),
    useHitsSplitting = cms.bool(True)
)


process.cosmicTrackSplitter = cms.EDProducer("CosmicTrackSplitter",
    detsToIgnore = cms.vuint32(),
    dxyCut = cms.double(9999.0),
    dzCut = cms.double(9999.0),
    excludePixelHits = cms.bool(False),
    minimumHits = cms.uint32(6),
    replaceWithInactiveHits = cms.bool(False),
    stripAllInvalidHits = cms.bool(False),
    stripBackInvalidHits = cms.bool(True),
    stripFrontInvalidHits = cms.bool(True),
    tjTkAssociationMapTag = cms.InputTag("cosmictrackfinderCosmics"),
    tracks = cms.InputTag("cosmictrackfinderCosmics")
)


process.cosmicsVeto = cms.EDProducer("CosmicsMuonIdProducer",
    CosmicCompFillerParameters = cms.PSet(
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons1stStep")),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        angleCut = cms.double(0.1),
        corrTimeNeg = cms.double(-10),
        corrTimePos = cms.double(5),
        deltaPt = cms.double(0.1),
        hIpTrdxy = cms.double(0.02),
        hIpTrvProb = cms.double(0.5),
        ipCut = cms.double(0.02),
        largedxy = cms.double(2.0),
        largedxyMult = cms.double(3.0),
        maxdxyLoose = cms.double(0.01),
        maxdxyLooseMult = cms.double(0.01),
        maxdxyTight = cms.double(1.0),
        maxdxyTightMult = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        maxdzLooseMult = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        maxdzTightMult = cms.double(10.0),
        maxvertRho = cms.double(5),
        maxvertZ = cms.double(20),
        minvProb = cms.double(0.001),
        nChamberMatches = cms.int32(1),
        nTrackThreshold = cms.int32(3),
        offTimeNegLoose = cms.double(-15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        offTimeNegTight = cms.double(-20.0),
        offTimeNegTightMult = cms.double(-20.0),
        offTimePosLoose = cms.double(15.0),
        offTimePosLooseMult = cms.double(15.0),
        offTimePosTight = cms.double(25.0),
        offTimePosTightMult = cms.double(25.0),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        sharedHits = cms.int32(5)
    ),
    muonCollection = cms.InputTag("muons1stStep"),
    trackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks"))
)


process.cosmicsVetoSeeds = cms.EDProducer("TrajectorySeedFromMuonProducer",
    muonCollectionTag = cms.InputTag("muons1stStep"),
    skipMatchedMuons = cms.bool(False),
    trackCollectionTag = cms.InputTag("generalTracks")
)


process.cosmicsVetoTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('none'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("cosmicsVetoSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.cosmicsVetoTracks = cms.EDProducer("CosmicTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    chi2n_par = cms.double(10.0),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    max_eta = cms.double(2.0),
    max_z0 = cms.double(300.0),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_nHit = cms.uint32(5),
    min_nPixelHit = cms.uint32(0),
    min_pt = cms.double(1.0),
    qualityBit = cms.string(''),
    src = cms.InputTag("cosmicsVetoTracksRaw")
)


process.cosmicsVetoTracksRaw = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("cosmicsVetoTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.cosmicseedfinder = cms.EDProducer("CosmicSeedGenerator",
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    DontCountDetsAboveNClusters = cms.uint32(20),
    GeometricStructure = cms.untracked.string('STANDARD'),
    HitsForSeeds = cms.untracked.string('pairs'),
    MaxNumberOfCosmicClusters = cms.uint32(300),
    MaxNumberOfPixelClusters = cms.uint32(300),
    NegativeYOnly = cms.bool(False),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    PositiveYOnly = cms.bool(False),
    SeedPt = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    doClusterCheck = cms.bool(True),
    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxSeeds = cms.int32(10000),
    originHalfLength = cms.double(90.0),
    originRadius = cms.double(150.0),
    originZPosition = cms.double(0.0),
    ptMin = cms.double(0.9),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    stereorecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHit")
)


process.cosmicseedfinderP5 = cms.EDProducer("CosmicSeedGenerator",
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    DontCountDetsAboveNClusters = cms.uint32(20),
    GeometricStructure = cms.untracked.string('STANDARD'),
    HitsForSeeds = cms.untracked.string('pairs'),
    MaxNumberOfCosmicClusters = cms.uint32(300),
    MaxNumberOfPixelClusters = cms.uint32(300),
    NegativeYOnly = cms.bool(False),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    PositiveYOnly = cms.bool(False),
    SeedPt = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    doClusterCheck = cms.bool(True),
    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxSeeds = cms.int32(10000),
    originHalfLength = cms.double(90.0),
    originRadius = cms.double(150.0),
    originZPosition = cms.double(0.0),
    ptMin = cms.double(0.9),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    stereorecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHit")
)


process.cosmicseedfinderP5Bottom = cms.EDProducer("CosmicSeedGenerator",
    ClusterCollectionLabel = cms.InputTag("siStripClustersBottom"),
    DontCountDetsAboveNClusters = cms.uint32(20),
    GeometricStructure = cms.untracked.string('STANDARD'),
    HitsForSeeds = cms.untracked.string('pairs'),
    MaxNumberOfCosmicClusters = cms.uint32(150),
    MaxNumberOfPixelClusters = cms.uint32(300),
    NegativeYOnly = cms.bool(True),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    PositiveYOnly = cms.bool(False),
    SeedPt = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    doClusterCheck = cms.bool(True),
    matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit"),
    maxSeeds = cms.int32(10000),
    originHalfLength = cms.double(90.0),
    originRadius = cms.double(150.0),
    originZPosition = cms.double(0.0),
    ptMin = cms.double(0.9),
    rphirecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit"),
    stereorecHits = cms.InputTag("siStripMatchedRecHitsBottom","stereoRecHit")
)


process.cosmicseedfinderP5Top = cms.EDProducer("CosmicSeedGenerator",
    ClusterCollectionLabel = cms.InputTag("siStripClustersTop"),
    DontCountDetsAboveNClusters = cms.uint32(20),
    GeometricStructure = cms.untracked.string('STANDARD'),
    HitsForSeeds = cms.untracked.string('pairs'),
    MaxNumberOfCosmicClusters = cms.uint32(150),
    MaxNumberOfPixelClusters = cms.uint32(300),
    NegativeYOnly = cms.bool(False),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    PositiveYOnly = cms.bool(True),
    SeedPt = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    doClusterCheck = cms.bool(True),
    matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit"),
    maxSeeds = cms.int32(10000),
    originHalfLength = cms.double(90.0),
    originRadius = cms.double(150.0),
    originZPosition = cms.double(0.0),
    ptMin = cms.double(0.9),
    rphirecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit"),
    stereorecHits = cms.InputTag("siStripMatchedRecHitsTop","stereoRecHit")
)


process.cosmictrackSelector = cms.EDProducer("CosmicTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    chi2n_par = cms.double(10.0),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    max_eta = cms.double(2.0),
    max_z0 = cms.double(300.0),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_nHit = cms.uint32(5),
    min_nPixelHit = cms.uint32(0),
    min_pt = cms.double(1.0),
    qualityBit = cms.string(''),
    src = cms.InputTag("ctfWithMaterialTracksCosmics")
)


process.cosmictrackfinderCosmics = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('cosmic'),
    Fitter = cms.string('RKFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("cosmicCandidateFinderP5"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.cosmictrackfinderP5 = cms.EDProducer("CosmicTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    chi2n_par = cms.double(10.0),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    max_eta = cms.double(2.0),
    max_z0 = cms.double(300.0),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_nHit = cms.uint32(5),
    min_nPixelHit = cms.uint32(0),
    min_pt = cms.double(1.0),
    qualityBit = cms.string(''),
    src = cms.InputTag("cosmictrackfinderCosmics")
)


process.cosmictrackfinderP5Bottom = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('cosmic'),
    Fitter = cms.string('RKFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag("topBottomClusterInfoProducerBottom"),
    src = cms.InputTag("cosmicCandidateFinderP5Bottom"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.cosmictrackfinderP5Top = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('cosmic'),
    Fitter = cms.string('RKFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag("topBottomClusterInfoProducerTop"),
    src = cms.InputTag("cosmicCandidateFinderP5Top"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.csc2DRecHits = cms.EDProducer("CSCRecHitDProducer",
    CSCDebug = cms.untracked.bool(False),
    CSCNoOfTimeBinsForDynamicPedestal = cms.int32(2),
    CSCStripClusterChargeCut = cms.double(25.0),
    CSCStripClusterSize = cms.untracked.int32(3),
    CSCStripPeakThreshold = cms.double(10.0),
    CSCStripxtalksOffset = cms.double(0.03),
    CSCUseCalibrations = cms.bool(True),
    CSCUseGasGainCorrections = cms.bool(False),
    CSCUseStaticPedestals = cms.bool(False),
    CSCUseTimingCorrections = cms.bool(True),
    CSCWireClusterDeltaT = cms.int32(1),
    CSCstripWireDeltaTime = cms.int32(8),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME41 = cms.double(0.03),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    UseAverageTime = cms.bool(False),
    UseFivePoleFit = cms.bool(True),
    UseParabolaFit = cms.bool(False),
    XTasymmetry_ME12 = cms.double(0.015),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME1a = cms.double(0.023),
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME21 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME31 = cms.double(0.023),
    XTasymmetry_ME32 = cms.double(0.023),
    XTasymmetry_ME41 = cms.double(0.023),
    readBadChambers = cms.bool(True),
    readBadChannels = cms.bool(False),
    stripDigiTag = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
    wireDigiTag = cms.InputTag("muonCSCDigis","MuonCSCWireDigi")
)


process.cscSegments = cms.EDProducer("CSCSegmentProducer",
    algo_psets = cms.VPSet(cms.PSet(
        algo_name = cms.string('CSCSegAlgoSK'),
        algo_psets = cms.VPSet(cms.PSet(
            chi2Max = cms.double(99999.0),
            dPhiFineMax = cms.double(0.025),
            dPhiMax = cms.double(0.003),
            dRPhiFineMax = cms.double(8.0),
            dRPhiMax = cms.double(8.0),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True),
            wideSeg = cms.double(3.0)
        ), 
            cms.PSet(
                chi2Max = cms.double(99999.0),
                dPhiFineMax = cms.double(0.025),
                dPhiMax = cms.double(0.025),
                dRPhiFineMax = cms.double(3.0),
                dRPhiMax = cms.double(8.0),
                minLayersApart = cms.int32(2),
                verboseInfo = cms.untracked.bool(True),
                wideSeg = cms.double(3.0)
            )),
        chamber_types = cms.vstring('ME1/a', 
            'ME1/b', 
            'ME1/2', 
            'ME1/3', 
            'ME2/1', 
            'ME2/2', 
            'ME3/1', 
            'ME3/2', 
            'ME4/1', 
            'ME4/2'),
        parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
            1, 1, 1, 1, 1)
    ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoTC'),
            algo_psets = cms.VPSet(cms.PSet(
                SegmentSorting = cms.int32(1),
                chi2Max = cms.double(6000.0),
                chi2ndfProbMin = cms.double(0.0001),
                dPhiFineMax = cms.double(0.02),
                dPhiMax = cms.double(0.003),
                dRPhiFineMax = cms.double(6.0),
                dRPhiMax = cms.double(1.2),
                minLayersApart = cms.int32(2),
                verboseInfo = cms.untracked.bool(True)
            ), 
                cms.PSet(
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    chi2ndfProbMin = cms.double(0.0001),
                    dPhiFineMax = cms.double(0.013),
                    dPhiMax = cms.double(0.00198),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(0.6),
                    minLayersApart = cms.int32(2),
                    verboseInfo = cms.untracked.bool(True)
                )),
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1)
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoDF'),
            algo_psets = cms.VPSet(cms.PSet(
                CSCSegmentDebug = cms.untracked.bool(False),
                Pruning = cms.untracked.bool(False),
                chi2Max = cms.double(5000.0),
                dPhiFineMax = cms.double(0.025),
                dRPhiFineMax = cms.double(8.0),
                dXclusBoxMax = cms.double(8.0),
                dYclusBoxMax = cms.double(8.0),
                maxDPhi = cms.double(999.0),
                maxDTheta = cms.double(999.0),
                maxRatioResidualPrune = cms.double(3.0),
                minHitsForPreClustering = cms.int32(10),
                minHitsPerSegment = cms.int32(3),
                minLayersApart = cms.int32(2),
                nHitsPerClusterIsShower = cms.int32(20),
                preClustering = cms.untracked.bool(False),
                tanPhiMax = cms.double(0.5),
                tanThetaMax = cms.double(1.2)
            ), 
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(12.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(12.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(10),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.8),
                    tanThetaMax = cms.double(2.0)
                ), 
                cms.PSet(
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(8.0),
                    dYclusBoxMax = cms.double(8.0),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    minHitsForPreClustering = cms.int32(30),
                    minHitsPerSegment = cms.int32(3),
                    minLayersApart = cms.int32(2),
                    nHitsPerClusterIsShower = cms.int32(20),
                    preClustering = cms.untracked.bool(False),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2)
                )),
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'),
            parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
                2, 1, 2, 1, 2)
        ), 
        cms.PSet(
            algo_name = cms.string('CSCSegAlgoST'),
            algo_psets = cms.VPSet(cms.PSet(
                BPMinImprovement = cms.double(10000.0),
                BrutePruning = cms.bool(True),
                CSCDebug = cms.untracked.bool(False),
                CorrectTheErrors = cms.bool(True),
                Covariance = cms.double(0.0),
                ForceCovariance = cms.bool(False),
                ForceCovarianceAll = cms.bool(False),
                NormChi2Cut2D = cms.double(20.0),
                NormChi2Cut3D = cms.double(10.0),
                Pruning = cms.bool(True),
                SeedBig = cms.double(0.0015),
                SeedSmall = cms.double(0.0002),
                curvePenalty = cms.double(2.0),
                curvePenaltyThreshold = cms.double(0.85),
                dPhiFineMax = cms.double(0.025),
                dRPhiFineMax = cms.double(8.0),
                dXclusBoxMax = cms.double(4.0),
                dYclusBoxMax = cms.double(8.0),
                hitDropLimit4Hits = cms.double(0.6),
                hitDropLimit5Hits = cms.double(0.8),
                hitDropLimit6Hits = cms.double(0.3333),
                maxDPhi = cms.double(999.0),
                maxDTheta = cms.double(999.0),
                maxRatioResidualPrune = cms.double(3),
                maxRecHitsInCluster = cms.int32(20),
                minHitsPerSegment = cms.int32(3),
                onlyBestSegment = cms.bool(False),
                preClustering = cms.bool(True),
                preClusteringUseChaining = cms.bool(True),
                prePrun = cms.bool(True),
                prePrunLimit = cms.double(3.17),
                tanPhiMax = cms.double(0.5),
                tanThetaMax = cms.double(1.2),
                useShowering = cms.bool(False),
                yweightPenalty = cms.double(1.5),
                yweightPenaltyThreshold = cms.double(1.0)
            ), 
                cms.PSet(
                    BPMinImprovement = cms.double(10000.0),
                    BrutePruning = cms.bool(True),
                    CSCDebug = cms.untracked.bool(False),
                    CorrectTheErrors = cms.bool(True),
                    Covariance = cms.double(0.0),
                    ForceCovariance = cms.bool(False),
                    ForceCovarianceAll = cms.bool(False),
                    NormChi2Cut2D = cms.double(20.0),
                    NormChi2Cut3D = cms.double(10.0),
                    Pruning = cms.bool(True),
                    SeedBig = cms.double(0.0015),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    curvePenaltyThreshold = cms.double(0.85),
                    dPhiFineMax = cms.double(0.025),
                    dRPhiFineMax = cms.double(8.0),
                    dXclusBoxMax = cms.double(4.0),
                    dYclusBoxMax = cms.double(8.0),
                    hitDropLimit4Hits = cms.double(0.6),
                    hitDropLimit5Hits = cms.double(0.8),
                    hitDropLimit6Hits = cms.double(0.3333),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    maxRatioResidualPrune = cms.double(3),
                    maxRecHitsInCluster = cms.int32(24),
                    minHitsPerSegment = cms.int32(3),
                    onlyBestSegment = cms.bool(False),
                    preClustering = cms.bool(True),
                    preClusteringUseChaining = cms.bool(True),
                    prePrun = cms.bool(True),
                    prePrunLimit = cms.double(3.17),
                    tanPhiMax = cms.double(0.5),
                    tanThetaMax = cms.double(1.2),
                    useShowering = cms.bool(False),
                    yweightPenalty = cms.double(1.5),
                    yweightPenaltyThreshold = cms.double(1.0)
                )),
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1)
        )),
    algo_type = cms.int32(4),
    inputObjects = cms.InputTag("csc2DRecHits")
)


process.cscTriggerPrimitiveDigis = cms.EDProducer("CSCTriggerPrimitivesProducer",
    CSCComparatorDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    CSCWireDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigi"),
    GEMPadDigiProducer = cms.InputTag(""),
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3),
    RPCDigiProducer = cms.InputTag(""),
    alctParam07 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(4),
        alctGhostCancellationSideQuality = cms.bool(False),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(False),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(4),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    alctParamMTCC = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(3),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctL1aWindowWidth = cms.uint32(3),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(2),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.int32(0)
    ),
    alctParamOldMC = cms.PSet(
        alctAccelMode = cms.uint32(1),
        alctDriftDelay = cms.uint32(3),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctL1aWindowWidth = cms.uint32(5),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(2),
        alctTrigMode = cms.uint32(3),
        verbosity = cms.int32(0)
    ),
    alctSLHC = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    checkBadChambers = cms.bool(True),
    clctParam07 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctStartBxShift = cms.int32(0),
        verbosity = cms.int32(0)
    ),
    clctParamMTCC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(6),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(1),
        clctNplanesHitPretrig = cms.uint32(4),
        clctPidThreshPretrig = cms.uint32(2),
        verbosity = cms.int32(0)
    ),
    clctParamOldMC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(6),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(2),
        clctPidThreshPretrig = cms.uint32(2),
        verbosity = cms.int32(0)
    ),
    clctSLHC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(4),
        clctPretriggerTriggerZone = cms.uint32(5),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(8),
        clctUseCorrectedBx = cms.bool(True),
        useDeadTimeZoning = cms.bool(True),
        useDynamicStateMachineZone = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    commonParam = cms.PSet(
        disableME1a = cms.bool(False),
        disableME42 = cms.bool(False),
        gangedME1a = cms.bool(True),
        isMTCC = cms.bool(False),
        isSLHC = cms.bool(False),
        isTMB07 = cms.bool(True),
        runME11ILT = cms.bool(False),
        runME21ILT = cms.bool(False),
        runME3141ILT = cms.bool(False),
        smartME1aME1b = cms.bool(False)
    ),
    debugParameters = cms.bool(False),
    mpcSLHC = cms.PSet(
        mpcMaxStubs = cms.uint32(3)
    ),
    tmbParam = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        tmbDropUsedAlcts = cms.bool(True),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    tmbSLHC = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctToAlct = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        matchEarliestAlctME11Only = cms.bool(False),
        matchEarliestClctME11Only = cms.bool(False),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(3),
        maxME11LCTs = cms.uint32(2),
        mpcBlockMe1a = cms.uint32(0),
        tmbCrossBxAlgorithm = cms.uint32(1),
        tmbDropUsedAlcts = cms.bool(False),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(False),
        verbosity = cms.int32(0)
    )
)


process.csctfDigis = cms.EDProducer("CSCTFUnpacker",
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3),
    mappingFile = cms.string(''),
    producer = cms.InputTag("rawDataRepacker"),
    slot2sector = cms.vint32(0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0),
    swapME1strips = cms.bool(False)
)


process.ctfCombinedSeeds = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidatesCombinedSeeds"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfNoOverlaps = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidatesNoOverlaps"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfPixelLess = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('RKFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidatesPixelLess"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfWithMaterialTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfWithMaterialTracksCosmics = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidatesP5"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfWithMaterialTracksP5 = cms.EDProducer("CosmicTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    chi2n_par = cms.double(10.0),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    max_eta = cms.double(2.0),
    max_z0 = cms.double(300.0),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_nHit = cms.uint32(5),
    min_nPixelHit = cms.uint32(0),
    min_pt = cms.double(1.0),
    qualityBit = cms.string(''),
    src = cms.InputTag("ctfWithMaterialTracksCosmics")
)


process.ctfWithMaterialTracksP5Bottom = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag("topBottomClusterInfoProducerBottom"),
    src = cms.InputTag("ckfTrackCandidatesP5Bottom"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfWithMaterialTracksP5LHCNavigation = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("ckfTrackCandidatesP5LHCNavigation"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.ctfWithMaterialTracksP5Top = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag("topBottomClusterInfoProducerTop"),
    src = cms.InputTag("ckfTrackCandidatesP5Top"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.dedxDiscrimASmi = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('asmirnovDiscrim'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxDiscrimASmiCTF = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('asmirnovDiscrim'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("ctfWithMaterialTracksP5"),
    trajectoryTrackAssociation = cms.InputTag("ctfWithMaterialTracksP5")
)


process.dedxDiscrimASmiCTFP5LHC = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('asmirnovDiscrim'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation"),
    trajectoryTrackAssociation = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation")
)


process.dedxDiscrimASmiCosmicTF = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('asmirnovDiscrim'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("cosmictrackfinderP5"),
    trajectoryTrackAssociation = cms.InputTag("cosmictrackfinderP5")
)


process.dedxDiscrimBTag = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('btagDiscrim'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxDiscrimProd = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('productDiscrim'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxDiscrimSmi = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('smirnovDiscrim'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxHarmonic2 = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('generic'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxHarmonic2CTF = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('generic'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("ctfWithMaterialTracksP5"),
    trajectoryTrackAssociation = cms.InputTag("ctfWithMaterialTracksP5")
)


process.dedxHarmonic2CTFP5LHC = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('generic'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation"),
    trajectoryTrackAssociation = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation")
)


process.dedxHarmonic2CosmicTF = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('generic'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("cosmictrackfinderP5"),
    trajectoryTrackAssociation = cms.InputTag("cosmictrackfinderP5")
)


process.dedxHitInfo = cms.EDProducer("DeDxHitInfoProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    calibrationPath = cms.string('file:Gains.root'),
    maxTrackEta = cms.double(5.0),
    minTrackHits = cms.uint32(0),
    minTrackPt = cms.double(15),
    shapeTest = cms.bool(True),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks"),
    useCalibration = cms.bool(False),
    usePixel = cms.bool(True),
    useStrip = cms.bool(True),
    useTrajectory = cms.bool(True)
)


process.dedxHitInfoCTF = cms.EDProducer("DeDxHitInfoProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    calibrationPath = cms.string('file:Gains.root'),
    maxTrackEta = cms.double(5.0),
    minTrackHits = cms.uint32(0),
    minTrackPt = cms.double(15),
    shapeTest = cms.bool(True),
    tracks = cms.InputTag("ctfWithMaterialTracksP5"),
    trajectoryTrackAssociation = cms.InputTag("ctfWithMaterialTracksP5"),
    useCalibration = cms.bool(False),
    usePixel = cms.bool(True),
    useStrip = cms.bool(True),
    useTrajectory = cms.bool(True)
)


process.dedxHitInfoCTFP5LHC = cms.EDProducer("DeDxHitInfoProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    calibrationPath = cms.string('file:Gains.root'),
    maxTrackEta = cms.double(5.0),
    minTrackHits = cms.uint32(0),
    minTrackPt = cms.double(15),
    shapeTest = cms.bool(True),
    tracks = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation"),
    trajectoryTrackAssociation = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation"),
    useCalibration = cms.bool(False),
    usePixel = cms.bool(True),
    useStrip = cms.bool(True),
    useTrajectory = cms.bool(True)
)


process.dedxHitInfoCosmicTF = cms.EDProducer("DeDxHitInfoProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    calibrationPath = cms.string('file:Gains.root'),
    maxTrackEta = cms.double(5.0),
    minTrackHits = cms.uint32(0),
    minTrackPt = cms.double(15),
    shapeTest = cms.bool(True),
    tracks = cms.InputTag("cosmictrackfinderP5"),
    trajectoryTrackAssociation = cms.InputTag("cosmictrackfinderP5"),
    useCalibration = cms.bool(False),
    usePixel = cms.bool(True),
    useStrip = cms.bool(True),
    useTrajectory = cms.bool(True)
)


process.dedxMedian = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('median'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxTruncated40 = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('truncated'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxTruncated40CTF = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('truncated'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("ctfWithMaterialTracksP5"),
    trajectoryTrackAssociation = cms.InputTag("ctfWithMaterialTracksP5")
)


process.dedxTruncated40CTFP5LHC = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('truncated'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation"),
    trajectoryTrackAssociation = cms.InputTag("ctfWithMaterialTracksP5LHCNavigation")
)


process.dedxTruncated40CosmicTF = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('truncated'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("cosmictrackfinderP5"),
    trajectoryTrackAssociation = cms.InputTag("cosmictrackfinderP5")
)


process.dedxUnbinned = cms.EDProducer("DeDxEstimatorProducer",
    MeVperADCPixel = cms.double(3.61e-06),
    MeVperADCStrip = cms.double(0.00095665),
    ProbabilityMode = cms.string('Accumulation'),
    Reccord = cms.string('SiStripDeDxMip_3D_Rcd'),
    ShapeTest = cms.bool(True),
    UseCalibration = cms.bool(False),
    UsePixel = cms.bool(False),
    UseStrip = cms.bool(True),
    UseTrajectory = cms.bool(True),
    calibrationPath = cms.string(''),
    estimator = cms.string('unbinnedFit'),
    exponent = cms.double(-2.0),
    fraction = cms.double(0.4),
    tracks = cms.InputTag("generalTracks"),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.detachedTripletStep = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("detachedTripletStepTracks"), cms.InputTag("detachedTripletStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1),
    indivShareFrac = cms.vdouble(0.13, 0.13),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("detachedTripletStepSelector","detachedTripletStepVtx"), cms.InputTag("detachedTripletStepSelector","detachedTripletStepTrk")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    shareFrac = cms.double(0.13),
    writeOnlyTrkQuals = cms.bool(True)
)


process.detachedTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag("initialStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("initialStepTracks")
)


process.detachedTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("detachedTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("detachedTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.detachedTripletStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("detachedTripletStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(15.0),
            originRadius = cms.double(1.5),
            precise = cms.bool(True),
            ptMin = cms.double(0.3)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.detachedTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("detachedTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        GBRForestLabel = cms.string('MVASelectorIter0_13TeV'),
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(9999),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(1.2, 3.0),
        d0_par2 = cms.vdouble(1.3, 3.0),
        dz_par1 = cms.vdouble(1.2, 3.0),
        dz_par2 = cms.vdouble(1.3, 3.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minMVA = cms.double(-0.2),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        mvaType = cms.string('Prompt'),
        nSigmaZ = cms.double(4.0),
        name = cms.string('detachedTripletStepVtxLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.001),
        useMVA = cms.bool(True),
        useMVAonly = cms.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter3_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.4, 4.0),
            d0_par2 = cms.vdouble(1.4, 4.0),
            dz_par1 = cms.vdouble(1.4, 4.0),
            dz_par2 = cms.vdouble(1.4, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(-0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepTrkLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.001),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter3_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.9),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 3.0),
            d0_par2 = cms.vdouble(1.2, 3.0),
            dz_par1 = cms.vdouble(1.1, 3.0),
            dz_par2 = cms.vdouble(1.2, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepVtxTight'),
            preFilterName = cms.string('detachedTripletStepVtxLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter3_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.5),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 4.0),
            d0_par2 = cms.vdouble(1.1, 4.0),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(4),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepTrkTight'),
            preFilterName = cms.string('detachedTripletStepTrkLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter0_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 3.0),
            d0_par2 = cms.vdouble(1.1, 3.0),
            dz_par1 = cms.vdouble(1.0, 3.0),
            dz_par2 = cms.vdouble(1.1, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.4),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepVtx'),
            preFilterName = cms.string('detachedTripletStepVtxLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter3_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 4.0),
            d0_par2 = cms.vdouble(1.0, 4.0),
            dz_par1 = cms.vdouble(1.0, 4.0),
            dz_par2 = cms.vdouble(1.0, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('detachedTripletStepTrk'),
            preFilterName = cms.string('detachedTripletStepTrkLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.detachedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('detachedTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("detachedTripletStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("detachedTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.detachedTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('detachedTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("detachedTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.displacedGlobalMuons = cms.EDProducer("GlobalMuonProducer",
    GLBTrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutRPC = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            DYTselector = cms.int32(1),
            DYTthrs = cms.vint32(20, 30),
            DYTupdator = cms.bool(False),
            DYTuseAPE = cms.bool(False),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('GlbMuKFFitter'),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            PtCut = cms.double(1.0),
            RefitDirection = cms.string('insideOut'),
            RefitFlag = cms.bool(True),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SmartPropagatorRK'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.2),
            DeltaR = cms.double(0.2),
            DeltaZ = cms.double(15.9),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(False),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(False),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(1.5),
            Rescale_Dz = cms.double(3.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(False),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    MuonCollectionLabel = cms.InputTag("displacedStandAloneMuons"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrackerCollectionLabel = cms.InputTag("displacedTracks")
)


process.displacedMuonSeeds = cms.EDProducer("CosmicMuonSeedGenerator",
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    EnableCSCMeasurement = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    ForcePointDown = cms.bool(False),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    MaxSeeds = cms.int32(1000)
)


process.displacedStandAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("displacedMuonSeeds"),
    MuonTrajectoryBuilder = cms.string('StandAloneMuonTrajectoryBuilder'),
    STATrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            ForceAllIterations = cms.bool(False),
            MaxFractionOfLostHits = cms.double(0.05),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        ),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.displacedTracks = cms.EDProducer("DuplicateListMerger",
    candidateSource = cms.InputTag("duplicateDisplacedTrackCandidates","candidateMap"),
    diffHitsCut = cms.int32(5),
    mergedMVAVals = cms.InputTag("duplicateDisplacedTrackSelector","MVAVals"),
    mergedSource = cms.InputTag("mergedDuplicateDisplacedTracks"),
    minTrkProbCut = cms.double(0.0),
    newQuality = cms.string('confirmed'),
    originalSource = cms.InputTag("preDuplicateMergingDisplacedTracks")
)


process.dqmGctDigis = cms.EDProducer("GctRawToDigi",
    checkHeaders = cms.untracked.bool(False),
    gctFedId = cms.untracked.int32(745),
    hltMode = cms.bool(False),
    inputLabel = cms.InputTag("rawDataRepacker"),
    numberOfGctSamplesToUnpack = cms.uint32(5),
    numberOfRctSamplesToUnpack = cms.uint32(1),
    unpackSharedRegions = cms.bool(False),
    unpackerVersion = cms.uint32(0),
    verbose = cms.untracked.bool(False)
)


process.dqmGtDigis = cms.EDProducer("L1GlobalTriggerRawToDigi",
    ActiveBoardsMask = cms.uint32(65535),
    DaqGtFedId = cms.untracked.int32(813),
    DaqGtInputTag = cms.InputTag("rawDataRepacker"),
    UnpackBxInEvent = cms.int32(-1),
    Verbosity = cms.untracked.int32(0)
)


process.dqmL1ExtraParticles = cms.EDProducer("L1ExtraParticlesProd",
    centralBxOnly = cms.bool(False),
    centralJetSource = cms.InputTag("caloStage1LegacyFormatDigis","cenJets"),
    etHadSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    etMissSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    etTotalSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    forwardJetSource = cms.InputTag("caloStage1LegacyFormatDigis","forJets"),
    hfRingBitCountsSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    hfRingEtSumsSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    htMissSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    ignoreHtMiss = cms.bool(False),
    isoTauJetSource = cms.InputTag("caloStage1LegacyFormatDigis","isoTauJets"),
    isolatedEmSource = cms.InputTag("caloStage1LegacyFormatDigis","isoEm"),
    muonSource = cms.InputTag("dqmGtDigis"),
    nonIsolatedEmSource = cms.InputTag("caloStage1LegacyFormatDigis","nonIsoEm"),
    produceCaloParticles = cms.bool(True),
    produceMuonParticles = cms.bool(True),
    tauJetSource = cms.InputTag("caloStage1LegacyFormatDigis","tauJets")
)


process.dqmL1ExtraParticlesStage1 = cms.EDProducer("L1ExtraParticlesProd",
    centralBxOnly = cms.bool(False),
    centralJetSource = cms.InputTag("caloStage1LegacyFormatDigis","cenJets"),
    etHadSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    etMissSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    etTotalSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    forwardJetSource = cms.InputTag("caloStage1LegacyFormatDigis","forJets"),
    hfRingBitCountsSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    hfRingEtSumsSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    htMissSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    ignoreHtMiss = cms.bool(False),
    isoTauJetSource = cms.InputTag("caloStage1LegacyFormatDigis","isoTauJets"),
    isolatedEmSource = cms.InputTag("caloStage1LegacyFormatDigis","isoEm"),
    muonSource = cms.InputTag("dqmGtDigis"),
    nonIsolatedEmSource = cms.InputTag("caloStage1LegacyFormatDigis","nonIsoEm"),
    produceCaloParticles = cms.bool(True),
    produceMuonParticles = cms.bool(True),
    tauJetSource = cms.InputTag("caloStage1LegacyFormatDigis","tauJets")
)


process.dt1DCosmicRecHits = cms.EDProducer("DTRecHitProducer",
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis"),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(False),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(False)
    )
)


process.dt1DRecHits = cms.EDProducer("DTRecHitProducer",
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis"),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(True),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(True),
            doWirePropCorrection = cms.bool(True),
            tTrigLabel = cms.string(''),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(True)
    )
)


process.dt2DCosmicSegments = cms.EDProducer("DTRecSegment2DProducer",
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(100.0),
        AlphaMaxTheta = cms.double(100.0),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DCosmicRecHits")
)


process.dt2DSegments = cms.EDProducer("DTRecSegment2DProducer",
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(1.0),
        AlphaMaxTheta = cms.double(0.9),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits")
)


process.dt4DCosmicSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(100.0),
            AlphaMaxTheta = cms.double(100.0),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            intime_cut = cms.double(-1.0),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(False),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(False),
                    doWirePropCorrection = cms.bool(False),
                    tTrigLabel = cms.string('cosmics'),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(False)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DCosmicRecHits"),
    recHits2DLabel = cms.InputTag("dt2DCosmicSegments")
)


process.dt4DSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(1.0),
            AlphaMaxTheta = cms.double(0.9),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(True),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(True),
                    doWirePropCorrection = cms.bool(True),
                    tTrigLabel = cms.string(''),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(True)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits"),
    recHits2DLabel = cms.InputTag("dt2DSegments")
)


process.dt4DSegmentsNoWire = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(1.0),
            AlphaMaxTheta = cms.double(0.9),
            MaxAllowedHits = cms.uint32(50),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(True),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(True),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(True),
                    doWirePropCorrection = cms.bool(False),
                    tTrigLabel = cms.string(''),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(True)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(True),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        )
    ),
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits"),
    recHits2DLabel = cms.InputTag("dt2DSegments")
)


process.dt4DSegmentsT0Seg = cms.EDProducer("DTSegment4DT0Corrector",
    debug = cms.untracked.bool(False),
    hit_afterT0_resolution = cms.double(0.03),
    performT0_vdriftSegCorrection = cms.bool(True),
    perform_delta_rejecting = cms.bool(False),
    recAlgo = cms.string('DTLinearDriftAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        )
    ),
    recHits4DLabel = cms.InputTag("dt4DSegments")
)


process.dtDataIntegrityUnpacker = cms.EDProducer("DTUnpackingModule",
    dataType = cms.string('DDU'),
    dqmOnly = cms.bool(True),
    fedbyType = cms.bool(False),
    inputLabel = cms.InputTag("rawDataRepacker"),
    readOutParameters = cms.PSet(
        debug = cms.untracked.bool(False),
        localDAQ = cms.untracked.bool(False),
        performDataIntegrityMonitor = cms.untracked.bool(True),
        rosParameters = cms.PSet(
            debug = cms.untracked.bool(False),
            localDAQ = cms.untracked.bool(False),
            performDataIntegrityMonitor = cms.untracked.bool(True),
            readDDUIDfromDDU = cms.untracked.bool(True),
            readingDDU = cms.untracked.bool(True),
            writeSC = cms.untracked.bool(True)
        )
    ),
    useStandardFEDid = cms.bool(True)
)


process.dtTriggerPrimitiveDigis = cms.EDProducer("DTTrigProd",
    DTTFSectorNumbering = cms.bool(True),
    debug = cms.untracked.bool(False),
    digiTag = cms.InputTag("muonDTDigis"),
    lutBtic = cms.untracked.int32(31),
    lutDumpFlag = cms.untracked.bool(False)
)


process.dttfDigis = cms.EDProducer("DTTFFEDReader",
    DTTF_FED_Source = cms.InputTag("rawDataRepacker"),
    verbose = cms.untracked.bool(False)
)


process.duplicateDisplacedTrackCandidates = cms.EDProducer("DuplicateTrackMerger",
    forestLabel = cms.string('MVADuplicate'),
    maxDCA = cms.double(30.0),
    maxDLambda = cms.double(0.3),
    maxDPhi = cms.double(0.3),
    maxDQoP = cms.double(0.25),
    maxDdsz = cms.double(10.0),
    maxDdxy = cms.double(10.0),
    minBDTG = cms.double(-0.1),
    minDeltaR3d = cms.double(-4.0),
    minP = cms.double(0.4),
    minpT = cms.double(0.2),
    source = cms.InputTag("preDuplicateMergingDisplacedTracks"),
    ttrhBuilderName = cms.string('WithAngleAndTemplate'),
    useInnermostState = cms.bool(True)
)


process.duplicateDisplacedTrackSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("mergedDuplicateDisplacedTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(0),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('duplicateDisplacedTrackSelectorLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.duplicateTrackCandidates = cms.EDProducer("DuplicateTrackMerger",
    forestLabel = cms.string('MVADuplicate'),
    maxDCA = cms.double(30.0),
    maxDLambda = cms.double(0.3),
    maxDPhi = cms.double(0.3),
    maxDQoP = cms.double(0.25),
    maxDdsz = cms.double(10.0),
    maxDdxy = cms.double(10.0),
    minBDTG = cms.double(-0.1),
    minDeltaR3d = cms.double(-4.0),
    minP = cms.double(0.4),
    minpT = cms.double(0.2),
    source = cms.InputTag("preDuplicateMergingGeneralTracks"),
    ttrhBuilderName = cms.string('WithAngleAndTemplate'),
    useInnermostState = cms.bool(True)
)


process.duplicateTrackSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("mergedDuplicateTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(0),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(4.0),
        name = cms.string('duplicateTrackSelectorLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.earlyDisplacedMuons = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(False),
    fillEnergy = cms.bool(False),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(False),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("earlyGeneralTracks"), cms.InputTag("displacedStandAloneMuons")),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(3.0),
    minPCaloMuon = cms.double(3.0),
    minPt = cms.double(2.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.earlyMuons = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(False),
    fillEnergy = cms.bool(False),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(False),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("earlyGeneralTracks"), cms.InputTag("standAloneMuons","UpdatedAtVtx")),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(3.0),
    minPCaloMuon = cms.double(3.0),
    minPt = cms.double(2.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.ecalCompactTrigPrim = cms.EDProducer("EcalCompactTrigPrimProducer",
    inColl = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    outColl = cms.string('')
)


process.ecalDetIdToBeRecovered = cms.EDProducer("EcalDetIdToBeRecoveredProducer",
    ebDetIdToBeRecovered = cms.string('ebDetId'),
    ebFEToBeRecovered = cms.string('ebFE'),
    ebIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    ebIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    ebIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    ebSrFlagCollection = cms.InputTag("ecalDigis"),
    eeDetIdToBeRecovered = cms.string('eeDetId'),
    eeFEToBeRecovered = cms.string('eeFE'),
    eeIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    eeIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    eeIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    eeSrFlagCollection = cms.InputTag("ecalDigis"),
    integrityBlockSizeErrors = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    integrityTTIdErrors = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors")
)


process.ecalDigis = cms.EDProducer("EcalRawToDigi",
    DoRegional = cms.bool(False),
    FEDs = cms.vint32(601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654),
    FedLabel = cms.InputTag("listfeds"),
    InputLabel = cms.InputTag("rawDataRepacker"),
    eventPut = cms.bool(True),
    feIdCheck = cms.bool(True),
    feUnpacking = cms.bool(True),
    forceToKeepFRData = cms.bool(False),
    headerUnpacking = cms.bool(True),
    memUnpacking = cms.bool(True),
    numbTriggerTSamples = cms.int32(1),
    numbXtalTSamples = cms.int32(10),
    orderedDCCIdList = cms.vint32(1, 2, 3, 4, 5, 
        6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 
        16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 
        26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 
        36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 
        46, 47, 48, 49, 50, 
        51, 52, 53, 54),
    orderedFedList = cms.vint32(601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654),
    silentMode = cms.untracked.bool(True),
    srpUnpacking = cms.bool(True),
    syncCheck = cms.bool(True),
    tccUnpacking = cms.bool(True)
)


process.ecalDrivenElectronSeeds = cms.EDProducer("ElectronSeedProducer",
    SeedConfiguration = cms.PSet(
        DeltaPhi1High = cms.double(0.08),
        DeltaPhi1Low = cms.double(0.23),
        DeltaPhi2B = cms.double(0.008),
        DeltaPhi2F = cms.double(0.012),
        HighPtThreshold = cms.double(35.0),
        LowPtThreshold = cms.double(5.0),
        PhiMax2B = cms.double(0.002),
        PhiMax2F = cms.double(0.003),
        PhiMin2B = cms.double(-0.002),
        PhiMin2F = cms.double(-0.003),
        SCEtCut = cms.double(15.0),
        SizeWindowENeg = cms.double(0.675),
        applyHOverECut = cms.bool(True),
        applySigmaIEtaIEtaCut = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        deltaZ1WithVertex = cms.double(25.0),
        dynamicPhiRoad = cms.bool(True),
        ePhiMax1 = cms.double(0.075),
        ePhiMin1 = cms.double(-0.125),
        fromTrackerSeeds = cms.bool(True),
        hOverEConeSize = cms.double(0.15),
        hOverEHBMinE = cms.double(0.7),
        hOverEHFMinE = cms.double(0.8),
        hOverEPtMin = cms.double(0.0),
        hcalRecHits = cms.InputTag("hbhereco"),
        hcalTowers = cms.InputTag("towerMaker"),
        initialSeeds = cms.InputTag("hiPixelTrackSeeds"),
        maxHBarrel = cms.double(0.0),
        maxHEndcaps = cms.double(0.0),
        maxHOverEBarrel = cms.double(0.25),
        maxHOverEEndcaps = cms.double(0.25),
        maxSigmaIEtaIEtaBarrel = cms.double(0.5),
        maxSigmaIEtaIEtaEndcaps = cms.double(0.5),
        measurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
        measurementTrackerName = cms.string(''),
        nSigmasDeltaZ1 = cms.double(5.0),
        pPhiMax1 = cms.double(0.125),
        pPhiMin1 = cms.double(-0.075),
        preFilteredSeeds = cms.bool(False),
        r2MaxF = cms.double(0.15),
        r2MinF = cms.double(-0.15),
        rMaxI = cms.double(0.2),
        rMinI = cms.double(-0.2),
        searchInTIDTEC = cms.bool(True),
        useRecoVertex = cms.bool(False),
        vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
        z2MaxB = cms.double(0.09),
        z2MinB = cms.double(-0.09)
    ),
    barrelSuperClusters = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
    endcapSuperClusters = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower")
)


process.ecalDrivenGsfElectronCores = cms.EDProducer("GsfElectronCoreEcalDrivenProducer",
    ctfTracks = cms.InputTag("hiGeneralTracks"),
    gsfPfRecTracks = cms.InputTag("pfTrackElec"),
    gsfTracks = cms.InputTag("electronGsfTracks"),
    useGsfPfRecTracks = cms.bool(True)
)


process.ecalDrivenGsfElectrons = cms.EDProducer("GsfElectronEcalDrivenProducer",
    ElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_10_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_12_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_20_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_22_17Feb2011.weights.xml'),
    MaxElePtForOnlyMVA = cms.double(50.0),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_9Dec2013.weights.xml'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    addPflowElectrons = cms.bool(True),
    ambClustersOverlapStrategy = cms.uint32(1),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(False),
    applyPreselection = cms.bool(False),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring(),
    combinationWeightsFromDB = cms.bool(True),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("hiGeneralTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring(),
    ecalWeightsFromDB = cms.bool(True),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0.0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0.0),
    gedElectronMode = cms.bool(False),
    gsfElectronCoresTag = cms.InputTag("ecalDrivenGsfElectronCores"),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    hOverEConeSize = cms.double(0.15),
    hOverEConeSizePflow = cms.double(0.15),
    hOverEPtMin = cms.double(0.0),
    hOverEPtMinPflow = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    intRadiusBarrelTk = cms.double(0.015),
    intRadiusEcalBarrel = cms.double(3.0),
    intRadiusEcalEndcaps = cms.double(3.0),
    intRadiusEndcapTk = cms.double(0.015),
    intRadiusHcal = cms.double(0.15),
    isBarrel = cms.bool(False),
    isBarrelPflow = cms.bool(False),
    isEndcaps = cms.bool(False),
    isEndcapsPflow = cms.bool(False),
    isFiducial = cms.bool(False),
    isFiducialPflow = cms.bool(False),
    jurassicWidth = cms.double(1.5),
    maxDeltaEtaBarrel = cms.double(0.02),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxDeltaEtaEndcaps = cms.double(0.02),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    maxDrbTk = cms.double(999999999.0),
    maxEOverPBarrel = cms.double(999999999.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxEOverPEndcaps = cms.double(999999999.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    maxFbremBarrel = cms.double(999999999.0),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    maxHBarrel = cms.double(0.0),
    maxHBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEBarrel = cms.double(0.25),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxHOverEEndcaps = cms.double(0.25),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    maxVtxDistTk = cms.double(0.2),
    minEOverPBarrel = cms.double(0.0),
    minEOverPBarrelPflow = cms.double(0.0),
    minEOverPEndcaps = cms.double(0.0),
    minEOverPEndcapsPflow = cms.double(0.0),
    minMVA = cms.double(-0.4),
    minMVAPflow = cms.double(-0.4),
    minMvaByPassForIsolated = cms.double(-0.4),
    minMvaByPassForIsolatedPflow = cms.double(-0.4),
    minSCEtBarrel = cms.double(15.0),
    minSCEtBarrelPflow = cms.double(0.0),
    minSCEtEndcaps = cms.double(15.0),
    minSCEtEndcapsPflow = cms.double(0.0),
    pfMvaTag = cms.InputTag(""),
    pflowGsfElectronsTag = cms.InputTag(""),
    previousGsfElectronsTag = cms.InputTag(""),
    ptMinTk = cms.double(0.7),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    seedFromTEC = cms.bool(True),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    stripBarrelTk = cms.double(0.015),
    stripEndcapTk = cms.double(0.015),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    useCombinationRegression = cms.bool(False),
    useEcalRegression = cms.bool(False),
    useGsfPfRecTracks = cms.bool(True),
    useIsolationValues = cms.bool(False),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("hiSelectedVertex")
)


process.ecalEtaCorrected = cms.EDProducer("EcalRecalibRecHitProducer",
    EBRecHitCollection = cms.InputTag("hltAlCaEtaRecHitsFilter","etaEcalRecHitsEB"),
    EBRecalibRecHitCollection = cms.string('etaEcalRecHitsEB'),
    EERecHitCollection = cms.InputTag("hltAlCaEtaRecHitsFilter","etaEcalRecHitsEE"),
    EERecalibRecHitCollection = cms.string('etaEcalRecHitsEE'),
    doEnergyScale = cms.bool(False),
    doEnergyScaleInverse = cms.bool(False),
    doIntercalib = cms.bool(False),
    doIntercalibInverse = cms.bool(False),
    doLaserCorrections = cms.bool(True),
    doLaserCorrectionsInverse = cms.bool(False)
)


process.ecalMultiFitUncalibRecHit = cms.EDProducer("EcalUncalibRecHitProducer",
    EBdigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    EBhitCollection = cms.string('EcalUncalibRecHitsEB'),
    EEdigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    EEhitCollection = cms.string('EcalUncalibRecHitsEE'),
    algo = cms.string('EcalUncalibRecHitWorkerMultiFit'),
    algoPSet = cms.PSet(
        EBamplitudeFitParameters = cms.vdouble(1.138, 1.652),
        EBtimeConstantTerm = cms.double(0.6),
        EBtimeFitLimits_Lower = cms.double(0.2),
        EBtimeFitLimits_Upper = cms.double(1.4),
        EBtimeFitParameters = cms.vdouble(-2.015452, 3.130702, -12.3473, 41.88921, -82.83944, 
            91.01147, -50.35761, 11.05621),
        EBtimeNconst = cms.double(28.5),
        EEamplitudeFitParameters = cms.vdouble(1.89, 1.4),
        EEtimeConstantTerm = cms.double(1.0),
        EEtimeFitLimits_Lower = cms.double(0.2),
        EEtimeFitLimits_Upper = cms.double(1.4),
        EEtimeFitParameters = cms.vdouble(-2.390548, 3.553628, -17.62341, 67.67538, -133.213, 
            140.7432, -75.41106, 16.20277),
        EEtimeNconst = cms.double(31.8),
        EcalPulseShapeParameters = cms.PSet(
            EBCorrNoiseMatrixG01 = cms.vdouble(1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
                0.53082, 0.51916, 0.51097, 0.50732, 0.50409),
            EBCorrNoiseMatrixG06 = cms.vdouble(1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
                0.41366, 0.39699, 0.38478, 0.37847, 0.37055),
            EBCorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
                0.35931, 0.33924, 0.32439, 0.31581, 0.30481),
            EBPulseShapeCovariance = cms.vdouble(3.001e-06, 1.233e-05, 0.0, -4.416e-06, -4.571e-06, 
                -3.614e-06, -2.636e-06, -1.286e-06, -8.41e-07, -5.296e-07, 
                0.0, 0.0, 1.233e-05, 6.154e-05, 0.0, 
                -2.2e-05, -2.309e-05, -1.838e-05, -1.373e-05, -7.334e-06, 
                -5.088e-06, -3.745e-06, -2.428e-06, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, -4.416e-06, -2.2e-05, 0.0, 8.319e-06, 
                8.545e-06, 6.792e-06, 5.059e-06, 2.678e-06, 1.816e-06, 
                1.223e-06, 8.245e-07, 5.589e-07, -4.571e-06, -2.309e-05, 
                0.0, 8.545e-06, 9.182e-06, 7.219e-06, 5.388e-06, 
                2.853e-06, 1.944e-06, 1.324e-06, 9.083e-07, 6.335e-07, 
                -3.614e-06, -1.838e-05, 0.0, 6.792e-06, 7.219e-06, 
                6.016e-06, 4.437e-06, 2.385e-06, 1.636e-06, 1.118e-06, 
                7.754e-07, 5.556e-07, -2.636e-06, -1.373e-05, 0.0, 
                5.059e-06, 5.388e-06, 4.437e-06, 3.602e-06, 1.917e-06, 
                1.322e-06, 9.079e-07, 6.529e-07, 4.752e-07, -1.286e-06, 
                -7.334e-06, 0.0, 2.678e-06, 2.853e-06, 2.385e-06, 
                1.917e-06, 1.375e-06, 9.1e-07, 6.455e-07, 4.693e-07, 
                3.657e-07, -8.41e-07, -5.088e-06, 0.0, 1.816e-06, 
                1.944e-06, 1.636e-06, 1.322e-06, 9.1e-07, 9.115e-07, 
                6.062e-07, 4.436e-07, 3.422e-07, -5.296e-07, -3.745e-06, 
                0.0, 1.223e-06, 1.324e-06, 1.118e-06, 9.079e-07, 
                6.455e-07, 6.062e-07, 7.217e-07, 4.862e-07, 3.768e-07, 
                0.0, -2.428e-06, 0.0, 8.245e-07, 9.083e-07, 
                7.754e-07, 6.529e-07, 4.693e-07, 4.436e-07, 4.862e-07, 
                6.509e-07, 4.418e-07, 0.0, 0.0, 0.0, 
                5.589e-07, 6.335e-07, 5.556e-07, 4.752e-07, 3.657e-07, 
                3.422e-07, 3.768e-07, 4.418e-07, 6.142e-07),
            EBPulseShapeTemplate = cms.vdouble(0.0113979, 0.758151, 1.0, 0.887744, 0.673548, 
                0.474332, 0.319561, 0.215144, 0.147464, 0.101087, 
                0.0693181, 0.0475044),
            EBdigiCollection = cms.string(''),
            EECorrNoiseMatrixG01 = cms.vdouble(1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
                0.49147, 0.47813, 0.47007, 0.46621, 0.46265),
            EECorrNoiseMatrixG06 = cms.vdouble(1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
                0.20287, 0.17734, 0.16256, 0.15618, 0.14443),
            EECorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
                0.14786, 0.11772, 0.10165, 0.09465, 0.08098),
            EEPulseShapeCovariance = cms.vdouble(3.941e-05, 3.333e-05, 0.0, -1.449e-05, -1.661e-05, 
                -1.424e-05, -1.183e-05, -6.842e-06, -4.915e-06, -3.411e-06, 
                0.0, 0.0, 3.333e-05, 2.862e-05, 0.0, 
                -1.244e-05, -1.431e-05, -1.233e-05, -1.032e-05, -5.883e-06, 
                -4.154e-06, -2.902e-06, -2.128e-06, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, 0.0, 0.0, 0.0, 0.0, 
                0.0, -1.449e-05, -1.244e-05, 0.0, 5.84e-06, 
                6.649e-06, 5.72e-06, 4.812e-06, 2.708e-06, 1.869e-06, 
                1.33e-06, 9.186e-07, 6.446e-07, -1.661e-05, -1.431e-05, 
                0.0, 6.649e-06, 7.966e-06, 6.898e-06, 5.794e-06, 
                3.157e-06, 2.184e-06, 1.567e-06, 1.084e-06, 7.575e-07, 
                -1.424e-05, -1.233e-05, 0.0, 5.72e-06, 6.898e-06, 
                6.341e-06, 5.347e-06, 2.859e-06, 1.991e-06, 1.431e-06, 
                9.839e-07, 6.886e-07, -1.183e-05, -1.032e-05, 0.0, 
                4.812e-06, 5.794e-06, 5.347e-06, 4.854e-06, 2.628e-06, 
                1.809e-06, 1.289e-06, 9.02e-07, 6.146e-07, -6.842e-06, 
                -5.883e-06, 0.0, 2.708e-06, 3.157e-06, 2.859e-06, 
                2.628e-06, 1.863e-06, 1.296e-06, 8.882e-07, 6.108e-07, 
                4.283e-07, -4.915e-06, -4.154e-06, 0.0, 1.869e-06, 
                2.184e-06, 1.991e-06, 1.809e-06, 1.296e-06, 1.217e-06, 
                8.669e-07, 5.751e-07, 3.882e-07, -3.411e-06, -2.902e-06, 
                0.0, 1.33e-06, 1.567e-06, 1.431e-06, 1.289e-06, 
                8.882e-07, 8.669e-07, 9.522e-07, 6.717e-07, 4.293e-07, 
                0.0, -2.128e-06, 0.0, 9.186e-07, 1.084e-06, 
                9.839e-07, 9.02e-07, 6.108e-07, 5.751e-07, 6.717e-07, 
                7.911e-07, 5.493e-07, 0.0, 0.0, 0.0, 
                6.446e-07, 7.575e-07, 6.886e-07, 6.146e-07, 4.283e-07, 
                3.882e-07, 4.293e-07, 5.493e-07, 7.027e-07),
            EEPulseShapeTemplate = cms.vdouble(0.116442, 0.756246, 1.0, 0.897182, 0.686831, 
                0.491506, 0.344111, 0.245731, 0.174115, 0.123361, 
                0.0874288, 0.061957),
            EEdigiCollection = cms.string(''),
            ESdigiCollection = cms.string(''),
            EcalPreMixStage1 = cms.bool(False),
            EcalPreMixStage2 = cms.bool(False),
            UseLCcorrection = cms.untracked.bool(True)
        ),
        activeBXs = cms.vint32(-5, -4, -3, -2, -1, 
            0, 1, 2, 3, 4),
        ampErrorCalculation = cms.bool(True),
        amplitudeThresholdEB = cms.double(10),
        amplitudeThresholdEE = cms.double(10),
        chi2ThreshEB_ = cms.double(65.0),
        chi2ThreshEE_ = cms.double(50.0),
        doPrefitEB = cms.bool(False),
        doPrefitEE = cms.bool(False),
        ebPulseShape = cms.vdouble(5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
            1.0, 0.8876, 0.6732, 0.4741, 0.3194),
        ebSpikeThreshold = cms.double(1.042),
        eePulseShape = cms.vdouble(5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
            1.0, 0.8876, 0.6732, 0.4741, 0.3194),
        kPoorRecoFlagEB = cms.bool(True),
        kPoorRecoFlagEE = cms.bool(False),
        outOfTimeThresholdGain12mEB = cms.double(5),
        outOfTimeThresholdGain12mEE = cms.double(1000),
        outOfTimeThresholdGain12pEB = cms.double(5),
        outOfTimeThresholdGain12pEE = cms.double(1000),
        outOfTimeThresholdGain61mEB = cms.double(5),
        outOfTimeThresholdGain61mEE = cms.double(1000),
        outOfTimeThresholdGain61pEB = cms.double(5),
        outOfTimeThresholdGain61pEE = cms.double(1000),
        prefitMaxChiSqEB = cms.double(25.0),
        prefitMaxChiSqEE = cms.double(10.0),
        timealgo = cms.string('RatioMethod'),
        useLumiInfoRunHeader = cms.bool(True)
    )
)


process.ecalPi0Corrected = cms.EDProducer("EcalRecalibRecHitProducer",
    EBRecHitCollection = cms.InputTag("hltAlCaPi0RecHitsFilter","pi0EcalRecHitsEB"),
    EBRecalibRecHitCollection = cms.string('pi0EcalRecHitsEB'),
    EERecHitCollection = cms.InputTag("hltAlCaPi0RecHitsFilter","pi0EcalRecHitsEE"),
    EERecalibRecHitCollection = cms.string('pi0EcalRecHitsEE'),
    doEnergyScale = cms.bool(False),
    doEnergyScaleInverse = cms.bool(False),
    doIntercalib = cms.bool(False),
    doIntercalibInverse = cms.bool(False),
    doLaserCorrections = cms.bool(True),
    doLaserCorrectionsInverse = cms.bool(False)
)


process.ecalPreshowerDigis = cms.EDProducer("ESRawToDigi",
    ESdigiCollection = cms.string(''),
    InstanceES = cms.string(''),
    LookupTable = cms.FileInPath('EventFilter/ESDigiToRaw/data/ES_lookup_table.dat'),
    debugMode = cms.untracked.bool(False),
    sourceTag = cms.InputTag("rawDataRepacker")
)


process.ecalPreshowerRecHit = cms.EDProducer("ESRecHitProducer",
    ESRecoAlgo = cms.int32(0),
    ESdigiCollection = cms.InputTag("ecalPreshowerDigis"),
    ESrechitCollection = cms.string('EcalRecHitsES'),
    algo = cms.string('ESRecHitWorker')
)


process.ecalRecHit = cms.EDProducer("EcalRecHitProducer",
    ChannelStatusToBeExcluded = cms.vstring('kNoisy', 
        'kNNoisy', 
        'kFixedG6', 
        'kFixedG1', 
        'kFixedG0', 
        'kNonRespondingIsolated', 
        'kDeadVFE', 
        'kDeadFE', 
        'kNoDataNoTP'),
    EBLaserMAX = cms.double(3.0),
    EBLaserMIN = cms.double(0.5),
    EBrechitCollection = cms.string('EcalRecHitsEB'),
    EBuncalibRecHitCollection = cms.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
    EELaserMAX = cms.double(8.0),
    EELaserMIN = cms.double(0.5),
    EErechitCollection = cms.string('EcalRecHitsEE'),
    EEuncalibRecHitCollection = cms.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
    algo = cms.string('EcalRecHitWorkerSimple'),
    algoRecover = cms.string('EcalRecHitWorkerRecover'),
    cleaningConfig = cms.PSet(
        cThreshold_barrel = cms.double(4),
        cThreshold_double = cms.double(10),
        cThreshold_endcap = cms.double(15),
        e4e1Threshold_barrel = cms.double(0.08),
        e4e1Threshold_endcap = cms.double(0.3),
        e4e1_a_barrel = cms.double(0.02),
        e4e1_a_endcap = cms.double(0.02),
        e4e1_b_barrel = cms.double(0.02),
        e4e1_b_endcap = cms.double(-0.0125),
        e6e2thresh = cms.double(0.04),
        ignoreOutOfTimeThresh = cms.double(1000000000.0),
        tightenCrack_e1_double = cms.double(2),
        tightenCrack_e1_single = cms.double(1),
        tightenCrack_e4e1_single = cms.double(2.5),
        tightenCrack_e6e2_double = cms.double(3)
    ),
    dbStatusToBeExcludedEB = cms.vint32(14, 78, 142),
    dbStatusToBeExcludedEE = cms.vint32(14, 78, 142),
    ebDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebDetId"),
    ebFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebFE"),
    eeDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeDetId"),
    eeFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeFE"),
    flagsMapDBReco = cms.PSet(
        kDead = cms.vstring('kNoDataNoTP'),
        kGood = cms.vstring('kOk', 
            'kDAC', 
            'kNoLaser', 
            'kNoisy'),
        kNeighboursRecovered = cms.vstring('kFixedG0', 
            'kNonRespondingIsolated', 
            'kDeadVFE'),
        kNoisy = cms.vstring('kNNoisy', 
            'kFixedG6', 
            'kFixedG1'),
        kTowerRecovered = cms.vstring('kDeadFE')
    ),
    killDeadChannels = cms.bool(True),
    laserCorrection = cms.bool(True),
    logWarningEtThreshold_EB_FE = cms.double(50),
    logWarningEtThreshold_EE_FE = cms.double(50),
    recoverEBFE = cms.bool(True),
    recoverEBIsolatedChannels = cms.bool(False),
    recoverEBVFE = cms.bool(False),
    recoverEEFE = cms.bool(True),
    recoverEEIsolatedChannels = cms.bool(False),
    recoverEEVFE = cms.bool(False),
    singleChannelRecoveryMethod = cms.string('NeuralNetworks'),
    singleChannelRecoveryThreshold = cms.double(8),
    triggerPrimitiveDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives")
)


process.ecalTPSkim = cms.EDProducer("EcalTPSkimmer",
    chStatusToSelectTP = cms.vuint32(13),
    doBarrel = cms.bool(True),
    doEndcap = cms.bool(True),
    skipModule = cms.bool(False),
    tpInputCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    tpOutputCollection = cms.string('')
)


process.elEDIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("ecalDrivenGsfElectrons"),
    trackType = cms.string('candidate')
)


process.elEDIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("ecalDrivenGsfElectrons"),
    trackType = cms.string('candidate')
)


process.elEDIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("ecalDrivenGsfElectrons"),
    trackType = cms.string('candidate')
)


process.elEDIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("ecalDrivenGsfElectrons"),
    trackType = cms.string('candidate')
)


process.elEDIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("ecalDrivenGsfElectrons"),
    trackType = cms.string('candidate')
)


process.elEDIsoValueCharged03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elEDIsoDepositCharged"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elEDIsoValueCharged04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elEDIsoDepositCharged"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elEDIsoValueChargedAll03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elEDIsoDepositChargedAll"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elEDIsoValueChargedAll04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elEDIsoDepositChargedAll"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elEDIsoValueGamma03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elEDIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        weight = cms.string('1')
    ))
)


process.elEDIsoValueGamma04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elEDIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        weight = cms.string('1')
    ))
)


process.elEDIsoValueNeutral03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elEDIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.elEDIsoValueNeutral04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elEDIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.elEDIsoValuePU03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elEDIsoDepositPU"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elEDIsoValuePU04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elEDIsoDepositPU"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfElectronTranslator","pf"),
    trackType = cms.string('candidate')
)


process.elPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfElectronTranslator","pf"),
    trackType = cms.string('candidate')
)


process.elPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfElectronTranslator","pf"),
    trackType = cms.string('candidate')
)


process.elPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfElectronTranslator","pf"),
    trackType = cms.string('candidate')
)


process.elPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfElectronTranslator","pf"),
    trackType = cms.string('candidate')
)


process.elPFIsoValueCharged03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositCharged"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueCharged04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositCharged"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueChargedAll03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueChargedAll04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueGamma03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueGamma04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueNeutral03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.elPFIsoValueNeutral04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.elPFIsoValuePU03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositPU"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.elPFIsoValuePU04 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("elPFIsoDepositPU"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.electronCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('TrajectoryBuilderForElectrons')
    ),
    TrajectoryCleaner = cms.string('electronTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("ecalDrivenElectronSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.electronGsfTracks = cms.EDProducer("GsfTrackProducer",
    AlgorithmName = cms.string('gsf'),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('fwdGsfElectronPropagator'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    src = cms.InputTag("electronCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False)
)


process.electronMergedSeeds = cms.EDProducer("ElectronSeedMerger",
    EcalBasedSeeds = cms.InputTag("ecalDrivenElectronSeeds"),
    TkBasedSeeds = cms.InputTag("trackerDrivenElectronSeeds","SeedsForGsf")
)


process.firstStepPrimaryVertices = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            Tmin = cms.double(4.0),
            coolingFactor = cms.double(0.6),
            d0CutOff = cms.double(3.0),
            dzCutOff = cms.double(4.0),
            vertexSize = cms.double(0.01)
        ),
        algorithm = cms.string('DA_vect')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(5.0),
        maxNormalizedChi2 = cms.double(20.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(5),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("initialStepTracks"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(1.0),
        minNdof = cms.double(0.0),
        useBeamConstraint = cms.bool(False)
    ))
)


process.gctDigis = cms.EDProducer("GctRawToDigi",
    checkHeaders = cms.untracked.bool(False),
    gctFedId = cms.untracked.int32(745),
    hltMode = cms.bool(False),
    inputLabel = cms.InputTag("rawDataRepacker"),
    numberOfGctSamplesToUnpack = cms.uint32(1),
    numberOfRctSamplesToUnpack = cms.uint32(1),
    unpackSharedRegions = cms.bool(False),
    unpackerVersion = cms.uint32(0),
    verbose = cms.untracked.bool(False)
)


process.gedElPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("gedGsfElectronsTmp"),
    trackType = cms.string('candidate')
)


process.gedElPFIsoValueCharged03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositCharged"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValueChargedAll03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositChargedAll"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValueGamma03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValueNeutral03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.gedElPFIsoValuePU03 = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("gedElPFIsoDepositPU"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        weight = cms.string('1')
    ))
)


process.gedGsfElectronCores = cms.EDProducer("GEDGsfElectronCoreProducer",
    GEDEMUnbiased = cms.InputTag("particleFlowEGamma"),
    ctfTracks = cms.InputTag("hiGeneralTracks"),
    gsfTracks = cms.InputTag("electronGsfTracks")
)


process.gedGsfElectrons = cms.EDProducer("GEDGsfElectronFinalizer",
    outputCollectionLabel = cms.string(''),
    pfCandidatesTag = cms.InputTag("particleFlowTmp"),
    pfIsolationValues = cms.PSet(
        pfSumChargedHadronPt = cms.InputTag("gedElPFIsoValueCharged03"),
        pfSumNeutralHadronEt = cms.InputTag("gedElPFIsoValueNeutral03"),
        pfSumPUPt = cms.InputTag("gedElPFIsoValuePU03"),
        pfSumPhotonEt = cms.InputTag("gedElPFIsoValueGamma03")
    ),
    previousGsfElectronsTag = cms.InputTag("gedGsfElectronsTmp")
)


process.gedGsfElectronsTmp = cms.EDProducer("GEDGsfElectronProducer",
    ElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_10_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_12_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_20_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_22_17Feb2011.weights.xml'),
    MaxElePtForOnlyMVA = cms.double(50.0),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_7Feb2014.weights.xml'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    addPflowElectrons = cms.bool(True),
    ambClustersOverlapStrategy = cms.uint32(1),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(False),
    applyPreselection = cms.bool(True),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring('gedelectron_p4combination_offline'),
    combinationWeightsFromDB = cms.bool(True),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("hiGeneralTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(False),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(False),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring('gedelectron_EBCorrection_offline_v1', 
        'gedelectron_EECorrection_offline_v1', 
        'gedelectron_EBUncertainty_offline_v1', 
        'gedelectron_EEUncertainty_offline_v1'),
    ecalWeightsFromDB = cms.bool(True),
    egmPFCandidatesTag = cms.InputTag("particleFlowEGamma"),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0.0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0.0),
    gedElectronMode = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("gedGsfElectronCores"),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    hOverEConeSize = cms.double(0.15),
    hOverEConeSizePflow = cms.double(0.15),
    hOverEPtMin = cms.double(0.0),
    hOverEPtMinPflow = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    intRadiusBarrelTk = cms.double(0.015),
    intRadiusEcalBarrel = cms.double(3.0),
    intRadiusEcalEndcaps = cms.double(3.0),
    intRadiusEndcapTk = cms.double(0.015),
    intRadiusHcal = cms.double(0.15),
    isBarrel = cms.bool(False),
    isBarrelPflow = cms.bool(False),
    isEndcaps = cms.bool(False),
    isEndcapsPflow = cms.bool(False),
    isFiducial = cms.bool(False),
    isFiducialPflow = cms.bool(False),
    jurassicWidth = cms.double(1.5),
    maxDeltaEtaBarrel = cms.double(0.02),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxDeltaEtaEndcaps = cms.double(0.02),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    maxDrbTk = cms.double(999999999.0),
    maxEOverPBarrel = cms.double(2.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxEOverPEndcaps = cms.double(2.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    maxFbremBarrel = cms.double(999999999.0),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    maxHBarrel = cms.double(0.0),
    maxHBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEBarrel = cms.double(0.25),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxHOverEEndcaps = cms.double(0.25),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    maxVtxDistTk = cms.double(0.2),
    minEOverPBarrel = cms.double(0.0),
    minEOverPBarrelPflow = cms.double(0.0),
    minEOverPEndcaps = cms.double(0.0),
    minEOverPEndcapsPflow = cms.double(0.0),
    minMVA = cms.double(-0.4),
    minMVAPflow = cms.double(-0.4),
    minMvaByPassForIsolated = cms.double(-0.4),
    minMvaByPassForIsolatedPflow = cms.double(-0.4),
    minSCEtBarrel = cms.double(15.0),
    minSCEtBarrelPflow = cms.double(0.0),
    minSCEtEndcaps = cms.double(15.0),
    minSCEtEndcapsPflow = cms.double(0.0),
    outputEGMPFValueMap = cms.string(''),
    pfMvaTag = cms.InputTag(""),
    pflowGsfElectronsTag = cms.InputTag(""),
    previousGsfElectronsTag = cms.InputTag(""),
    ptMinTk = cms.double(0.7),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    seedFromTEC = cms.bool(True),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    stripBarrelTk = cms.double(0.015),
    stripEndcapTk = cms.double(0.015),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    useCombinationRegression = cms.bool(True),
    useEcalRegression = cms.bool(True),
    useGsfPfRecTracks = cms.bool(True),
    useIsolationValues = cms.bool(False),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("hiSelectedVertex")
)


process.gedPhotonCore = cms.EDProducer("GEDPhotonCoreProducer",
    gedPhotonCoreCollection = cms.string(''),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    pixelSeedProducer = cms.InputTag("electronMergedSeeds")
)


process.gedPhotons = cms.EDProducer("GEDPhotonProducer",
    PFIsolationCalculatorSet = cms.PSet(
        ComponentName = cms.string('pfIsolationCalculator'),
        applyDzDxyVeto = cms.bool(True),
        applyMissHitPhVeto = cms.bool(False),
        applyPFPUVeto = cms.bool(True),
        applyVeto = cms.bool(True),
        checkClosestZVertex = cms.bool(True),
        coneDR = cms.double(0.3),
        deltaRVetoBarrel = cms.bool(True),
        deltaRVetoBarrelCharged = cms.double(0.02),
        deltaRVetoBarrelNeutrals = cms.double(-1.0),
        deltaRVetoBarrelPhotons = cms.double(-1.0),
        deltaRVetoEndcap = cms.bool(True),
        deltaRVetoEndcapCharged = cms.double(0.02),
        deltaRVetoEndcapNeutrals = cms.double(-1.0),
        deltaRVetoEndcapPhotons = cms.double(0.07),
        numberOfCrystalEndcapPhotons = cms.double(4.0),
        numberOfRings = cms.int32(1),
        particleType = cms.int32(1),
        rectangleDeltaEtaVetoBarrelCharged = cms.double(-1),
        rectangleDeltaEtaVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoBarrelPhotons = cms.double(0.015),
        rectangleDeltaEtaVetoEndcapCharged = cms.double(-1),
        rectangleDeltaEtaVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoEndcapPhotons = cms.double(-1),
        rectangleDeltaPhiVetoBarrelCharged = cms.double(-1),
        rectangleDeltaPhiVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoBarrelPhotons = cms.double(1.0),
        rectangleDeltaPhiVetoEndcapCharged = cms.double(-1),
        rectangleDeltaPhiVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoEndcapPhotons = cms.double(-1),
        rectangleVetoBarrel = cms.bool(True),
        rectangleVetoEndcap = cms.bool(False),
        ringSize = cms.double(0.3),
        useCrystalSize = cms.bool(True)
    ),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromRefinedSCRegression'),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("generalTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(10.0),
    minSCEtEndcap = cms.double(10.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    outputPhotonCollection = cms.string(''),
    pfCandidates = cms.InputTag("particleFlowTmp"),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    photonProducer = cms.InputTag("gedPhotonsTmp"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    primaryVertexProducer = cms.InputTag("offlinePrimaryVerticesWithBS"),
    reconstructionStep = cms.string('final'),
    regressionConfig = cms.PSet(
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        regressionKeyEB = cms.string('gedphoton_EBCorrection_offline_v1'),
        regressionKeyEE = cms.string('gedphoton_EECorrection_offline_v1'),
        uncertaintyKeyEB = cms.string('gedphoton_EBUncertainty_offline_v1'),
        uncertaintyKeyEE = cms.string('gedphoton_EEUncertainty_offline_v1'),
        vertexCollection = cms.InputTag("offlinePrimaryVertices")
    ),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True),
    useRegression = cms.bool(True),
    valueMapPhotons = cms.string('valMapPFEgammaCandToPhoton')
)


process.gedPhotonsTmp = cms.EDProducer("GEDPhotonProducer",
    PFIsolationCalculatorSet = cms.PSet(
        ComponentName = cms.string('pfIsolationCalculator'),
        applyDzDxyVeto = cms.bool(True),
        applyMissHitPhVeto = cms.bool(False),
        applyPFPUVeto = cms.bool(True),
        applyVeto = cms.bool(True),
        checkClosestZVertex = cms.bool(True),
        coneDR = cms.double(0.3),
        deltaRVetoBarrel = cms.bool(True),
        deltaRVetoBarrelCharged = cms.double(0.02),
        deltaRVetoBarrelNeutrals = cms.double(-1.0),
        deltaRVetoBarrelPhotons = cms.double(-1.0),
        deltaRVetoEndcap = cms.bool(True),
        deltaRVetoEndcapCharged = cms.double(0.02),
        deltaRVetoEndcapNeutrals = cms.double(-1.0),
        deltaRVetoEndcapPhotons = cms.double(0.07),
        numberOfCrystalEndcapPhotons = cms.double(4.0),
        numberOfRings = cms.int32(1),
        particleType = cms.int32(1),
        rectangleDeltaEtaVetoBarrelCharged = cms.double(-1),
        rectangleDeltaEtaVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoBarrelPhotons = cms.double(0.015),
        rectangleDeltaEtaVetoEndcapCharged = cms.double(-1),
        rectangleDeltaEtaVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaEtaVetoEndcapPhotons = cms.double(-1),
        rectangleDeltaPhiVetoBarrelCharged = cms.double(-1),
        rectangleDeltaPhiVetoBarrelNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoBarrelPhotons = cms.double(1.0),
        rectangleDeltaPhiVetoEndcapCharged = cms.double(-1),
        rectangleDeltaPhiVetoEndcapNeutrals = cms.double(-1),
        rectangleDeltaPhiVetoEndcapPhotons = cms.double(-1),
        rectangleVetoBarrel = cms.bool(True),
        rectangleVetoEndcap = cms.bool(False),
        ringSize = cms.double(0.3),
        useCrystalSize = cms.bool(True)
    ),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromRefinedSCRegression'),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("hiGeneralTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.5),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minR9Endcap = cms.double(0.95),
    minSCEtBarrel = cms.double(10.0),
    minSCEtEndcap = cms.double(10.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    outputPhotonCollection = cms.string(''),
    pfCandidates = cms.InputTag("particleFlowTmp"),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    photonProducer = cms.InputTag("gedPhotonCore"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    primaryVertexProducer = cms.InputTag("hiSelectedVertex"),
    reconstructionStep = cms.string('tmp'),
    regressionConfig = cms.PSet(
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        regressionKeyEB = cms.string('gedphoton_EBCorrection_offline_v1'),
        regressionKeyEE = cms.string('gedphoton_EECorrection_offline_v1'),
        uncertaintyKeyEB = cms.string('gedphoton_EBUncertainty_offline_v1'),
        uncertaintyKeyEE = cms.string('gedphoton_EEUncertainty_offline_v1'),
        vertexCollection = cms.InputTag("hiSelectedVertex")
    ),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True),
    useRegression = cms.bool(True),
    valueMapPhotons = cms.string('valMapPFEgammaCandToPhoton')
)


process.generalTracks = cms.EDProducer("DuplicateListMerger",
    candidateSource = cms.InputTag("duplicateTrackCandidates","candidateMap"),
    diffHitsCut = cms.int32(5),
    mergedMVAVals = cms.InputTag("duplicateTrackSelector","MVAVals"),
    mergedSource = cms.InputTag("mergedDuplicateTracks"),
    minTrkProbCut = cms.double(0.0),
    newQuality = cms.string('confirmed'),
    originalSource = cms.InputTag("preDuplicateMergingGeneralTracks")
)


process.glbTrackQual = cms.EDProducer("GlobalTrackQualityProducer",
    BaseLabel = cms.string('GLB'),
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    ),
    InputCollection = cms.InputTag("globalMuons"),
    InputLinksCollection = cms.InputTag("globalMuons"),
    MaxChi2 = cms.double(100000.0),
    RefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutDT = cms.double(30.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(10, 10),
        DYTupdator = cms.bool(True),
        DYTuseAPE = cms.bool(False),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        HitThreshold = cms.int32(1),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        RefitDirection = cms.string('insideOut'),
        RefitFlag = cms.bool(True),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    nSigma = cms.double(3.0)
)


process.globalCombinedSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("globalSeedsFromTripletsWithVertices"), cms.InputTag("globalSeedsFromPairsWithVertices"))
)


process.globalMixedSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("MixedLayerPairs"),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.9)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.globalMuons = cms.EDProducer("GlobalMuonProducer",
    GLBTrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutRPC = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            DYTselector = cms.int32(1),
            DYTthrs = cms.vint32(20, 30),
            DYTupdator = cms.bool(False),
            DYTuseAPE = cms.bool(False),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('GlbMuKFFitter'),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            PtCut = cms.double(1.0),
            RefitDirection = cms.string('insideOut'),
            RefitFlag = cms.bool(True),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SmartPropagatorRK'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.2),
            DeltaR = cms.double(0.2),
            DeltaZ = cms.double(15.9),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(False),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(False),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(1.5),
            Rescale_Dz = cms.double(3.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(False),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    MuonCollectionLabel = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrackerCollectionLabel = cms.InputTag("hiGeneralTracks")
)


process.globalPixelLessSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(5000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("pixelLessLayerPairs4PixelLessTracking"),
        maxElement = cms.uint32(100000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(40),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.9)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.globalPixelSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("PixelLayerPairs")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.9)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.globalSETMuons = cms.EDProducer("GlobalMuonProducer",
    GLBTrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutRPC = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            DYTselector = cms.int32(1),
            DYTthrs = cms.vint32(20, 30),
            DYTupdator = cms.bool(False),
            DYTuseAPE = cms.bool(False),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('GlbMuKFFitter'),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            PtCut = cms.double(1.0),
            RefitDirection = cms.string('insideOut'),
            RefitFlag = cms.bool(True),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SmartPropagatorRK'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.2),
            DeltaR = cms.double(0.2),
            DeltaZ = cms.double(15.9),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(False),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(False),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(1.5),
            Rescale_Dz = cms.double(3.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(False),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    MuonCollectionLabel = cms.InputTag("standAloneSETMuons","UpdatedAtVtx"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrackerCollectionLabel = cms.InputTag("generalTracks")
)


process.globalSeedsFromPairsWithVertices = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("MixedLayerPairs"),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("firstStepPrimaryVertices"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            fixedError = cms.double(0.2),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            sigmaZVertex = cms.double(3.0),
            useFakeVertices = cms.bool(False),
            useFixedError = cms.bool(True),
            useFoundVertices = cms.bool(True)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.globalSeedsFromTriplets = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(1000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("PixelLayerTriplets")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(21.2),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.9)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.gsfElectronCores = cms.EDProducer("GsfElectronCoreProducer",
    ctfTracks = cms.InputTag("hiGeneralTracks"),
    ecalDrivenGsfElectronCoresTag = cms.InputTag("ecalDrivenGsfElectronCores"),
    gsfPfRecTracks = cms.InputTag("pfTrackElec"),
    gsfTracks = cms.InputTag("electronGsfTracks"),
    pfSuperClusterTrackMap = cms.InputTag("pfElectronTranslator","pf"),
    pfSuperClusters = cms.InputTag("pfElectronTranslator","pf"),
    pflowGsfElectronCoresTag = cms.InputTag("pfElectronTranslator","pf"),
    useGsfPfRecTracks = cms.bool(True)
)


process.gsfElectrons = cms.EDProducer("GsfElectronProducer",
    ElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_10_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_12_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_20_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_22_17Feb2011.weights.xml'),
    PreSelectMVA = cms.double(-0.1),
    SoftElecMVAFilesString = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_BDTSoftElectrons_7Feb2014.weights.xml'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    addPflowElectrons = cms.bool(True),
    ambClustersOverlapStrategy = cms.uint32(1),
    ambSortingStrategy = cms.uint32(1),
    applyAmbResolution = cms.bool(True),
    applyPreselection = cms.bool(True),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    combinationRegressionWeightFile = cms.vstring(),
    combinationRegressionWeightLabels = cms.vstring(),
    combinationWeightsFromDB = cms.bool(True),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    ctfTracks = cms.InputTag("hiGeneralTracks"),
    ctfTracksCheck = cms.bool(True),
    ctfTracksTag = cms.InputTag("generalTracks"),
    eMinBarrel = cms.double(0.095),
    eMinEndcaps = cms.double(0.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    ecalRefinedRegressionWeightFiles = cms.vstring(),
    ecalRefinedRegressionWeightLabels = cms.vstring(),
    ecalWeightsFromDB = cms.bool(True),
    edIsolationValues = cms.PSet(
        edSumChargedHadronPt = cms.InputTag("elEDIsoValueCharged04"),
        edSumNeutralHadronEt = cms.InputTag("elEDIsoValueNeutral04"),
        edSumPhotonEt = cms.InputTag("elEDIsoValueGamma04")
    ),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etMinBarrel = cms.double(0.0),
    etMinEndcaps = cms.double(0.11),
    etMinHcal = cms.double(0.0),
    gedElectronMode = cms.bool(False),
    gsfElectronCoresTag = cms.InputTag("gsfElectronCores"),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    hOverEConeSize = cms.double(0.15),
    hOverEConeSizePflow = cms.double(0.15),
    hOverEPtMin = cms.double(0.0),
    hOverEPtMinPflow = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    intRadiusBarrelTk = cms.double(0.015),
    intRadiusEcalBarrel = cms.double(3.0),
    intRadiusEcalEndcaps = cms.double(3.0),
    intRadiusEndcapTk = cms.double(0.015),
    intRadiusHcal = cms.double(0.15),
    isBarrel = cms.bool(False),
    isBarrelPflow = cms.bool(False),
    isEndcaps = cms.bool(False),
    isEndcapsPflow = cms.bool(False),
    isFiducial = cms.bool(False),
    isFiducialPflow = cms.bool(False),
    jurassicWidth = cms.double(1.5),
    maxDeltaEtaBarrel = cms.double(0.02),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxDeltaEtaEndcaps = cms.double(0.02),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    maxDrbTk = cms.double(999999999.0),
    maxEOverPBarrel = cms.double(999999999.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxEOverPEndcaps = cms.double(999999999.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    maxFbremBarrel = cms.double(999999999.0),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    maxHBarrel = cms.double(0.0),
    maxHBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxHOverEEndcaps = cms.double(0.15),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    maxVtxDistTk = cms.double(0.2),
    minEOverPBarrel = cms.double(0.0),
    minEOverPBarrelPflow = cms.double(0.0),
    minEOverPEndcaps = cms.double(0.0),
    minEOverPEndcapsPflow = cms.double(0.0),
    minMVA = cms.double(-0.1),
    minMVAPflow = cms.double(-0.1),
    minMvaByPassForIsolated = cms.double(-0.1),
    minMvaByPassForIsolatedPflow = cms.double(-0.1),
    minSCEtBarrel = cms.double(4.0),
    minSCEtBarrelPflow = cms.double(0.0),
    minSCEtEndcaps = cms.double(4.0),
    minSCEtEndcapsPflow = cms.double(0.0),
    pfIsolationValues = cms.PSet(
        pfSumChargedHadronPt = cms.InputTag("elPFIsoValueCharged04"),
        pfSumNeutralHadronEt = cms.InputTag("elPFIsoValueNeutral04"),
        pfSumPhotonEt = cms.InputTag("elPFIsoValueGamma04")
    ),
    pfMvaTag = cms.InputTag("pfElectronTranslator","pf"),
    pflowGsfElectronsTag = cms.InputTag("pfElectronTranslator","pf"),
    previousGsfElectronsTag = cms.InputTag("ecalDrivenGsfElectrons"),
    ptMinTk = cms.double(0.7),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    seedFromTEC = cms.bool(True),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    stripBarrelTk = cms.double(0.015),
    stripEndcapTk = cms.double(0.015),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    useCombinationRegression = cms.bool(False),
    useEcalRegression = cms.bool(False),
    useGsfPfRecTracks = cms.bool(True),
    useIsolationValues = cms.bool(True),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False),
    vtxTag = cms.InputTag("offlinePrimaryVertices")
)


process.gtDigis = cms.EDProducer("L1GlobalTriggerRawToDigi",
    ActiveBoardsMask = cms.uint32(65535),
    DaqGtFedId = cms.untracked.int32(813),
    DaqGtInputTag = cms.InputTag("rawDataRepacker"),
    UnpackBxInEvent = cms.int32(-1),
    Verbosity = cms.untracked.int32(0)
)


process.gtDigisAlCaMB = cms.EDProducer("L1GlobalTriggerRawToDigi",
    ActiveBoardsMask = cms.uint32(65535),
    DaqGtFedId = cms.untracked.int32(813),
    DaqGtInputTag = cms.InputTag("source"),
    UnpackBxInEvent = cms.int32(-1),
    Verbosity = cms.untracked.int32(0)
)


process.gtEvmDigis = cms.EDProducer("L1GlobalTriggerEvmRawToDigi",
    ActiveBoardsMask = cms.uint32(65535),
    BstLengthBytes = cms.int32(-1),
    EvmGtFedId = cms.untracked.int32(812),
    EvmGtInputTag = cms.InputTag("rawDataRepacker"),
    UnpackBxInEvent = cms.int32(-1)
)


process.hbheprereco = cms.EDProducer("HcalHitReconstructor",
    Subdetector = cms.string('HBHE'),
    applyPedConstraint = cms.bool(True),
    applyPulseJitter = cms.bool(False),
    applyTimeConstraint = cms.bool(True),
    applyTimeSlew = cms.bool(True),
    applyUnconstrainedFit = cms.bool(False),
    chargeMax = cms.double(6.0),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(6.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string('HBHE'),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(4),
    firstSample = cms.int32(4),
    fitTimes = cms.int32(1),
    flagParameters = cms.PSet(
        hitEnergyMinimum = cms.double(1.0),
        hitMultiplicityThreshold = cms.int32(17),
        nominalPedestal = cms.double(3.0),
        pulseShapeParameterSets = cms.VPSet(cms.PSet(
            pulseShapeParameters = cms.vdouble(0.0, 100.0, -50.0, 0.0, -15.0, 
                0.15)
        ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(-1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0)
            ))
    ),
    hscpParameters = cms.PSet(
        TimingEnergyThreshold = cms.double(30.0),
        fracLeaderMax = cms.double(0.7),
        fracLeaderMin = cms.double(0.4),
        outerMax = cms.double(0.1),
        outerMin = cms.double(0.0),
        r1Max = cms.double(1.0),
        r1Min = cms.double(0.15),
        r2Max = cms.double(0.5),
        r2Min = cms.double(0.1),
        slopeMax = cms.double(-0.6),
        slopeMin = cms.double(-1.5)
    ),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string('HBHE'),
    meanPed = cms.double(0.0),
    meanTime = cms.double(0.0),
    noise = cms.double(1),
    pedSigma = cms.double(0.5),
    pedestalSubtractionType = cms.int32(1),
    pedestalUpperLimit = cms.double(2.7),
    puCorrMethod = cms.int32(2),
    pulseJitter = cms.double(1.0),
    pulseShapeParameters = cms.PSet(
        LeftSlopeCut = cms.vdouble(5, 2.55, 2.55),
        LeftSlopeThreshold = cms.vdouble(250, 500, 100000),
        LinearCut = cms.vdouble(-3, -0.054, -0.054),
        LinearThreshold = cms.vdouble(20, 100, 100000),
        MinimumChargeThreshold = cms.double(20),
        MinimumTS4TS5Threshold = cms.double(100),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        RMS8MaxThreshold = cms.vdouble(20, 100, 100000),
        RightSlopeCut = cms.vdouble(5, 4.15, 4.15),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        RightSlopeSmallThreshold = cms.vdouble(150, 200, 100000),
        RightSlopeThreshold = cms.vdouble(250, 400, 100000),
        TS4TS5ChargeThreshold = cms.double(70),
        TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.5, -0.4, -0.3, 
            0.1),
        TS4TS5LowerThreshold = cms.vdouble(100, 120, 160, 200, 300, 
            500),
        TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72),
        TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400),
        TriangleIgnoreSlow = cms.bool(False),
        TrianglePeakTS = cms.uint32(4),
        UseDualFit = cms.bool(True)
    ),
    recoParamsFromDB = cms.bool(True),
    respCorrM3 = cms.double(0.95),
    samplesToAdd = cms.int32(2),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNegativeFlags = cms.bool(True),
    setNoiseFlags = cms.bool(True),
    setPulseShapeFlags = cms.bool(True),
    setSaturationFlags = cms.bool(True),
    setTimingShapedCutsFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False),
    timeMax = cms.double(12.5),
    timeMin = cms.double(-12.5),
    timeSigma = cms.double(5.0),
    timeSlewPars = cms.vdouble(15.5, -3.2, 32, 15.5, -3.2, 
        32, 15.5, -3.2, 32),
    timeSlewParsType = cms.int32(1),
    timingshapedcutsParameters = cms.PSet(
        ignorehighest = cms.bool(False),
        ignorelowest = cms.bool(True),
        tfilterEnvelope = cms.vdouble(50.0, -2.0, 4.25, 52.0, -2.0, 
            4.09, 54.0, -2.0, 3.95, 56.0, 
            -2.0, 3.82, 58.0, -2.0, 3.71, 
            60.0, -2.0, 3.6, 63.0, -2.0, 
            3.46, 66.0, -2.0, 3.33, 69.0, 
            -2.0, 3.22, 73.0, -2.0, 3.1, 
            77.0, -2.0, 2.99, 82.0, -2.0, 
            2.87, 88.0, -2.0, 2.75, 95.0, 
            -2.0, 2.64, 103.0, -2.0, 2.54, 
            113.0, -2.0, 2.44, 127.0, -2.0, 
            2.33, 146.0, -2.0, 2.23, 176.0, 
            -2.0, 2.13, 250.0, -2.0, 2.0),
        win_gain = cms.double(3.0),
        win_offset = cms.double(0.0)
    ),
    ts345chi2 = cms.double(100.0),
    ts3chi2 = cms.double(5.0),
    ts4Max = cms.double(100.0),
    ts4Min = cms.double(0.0),
    ts4chi2 = cms.double(15.0),
    tsFromDB = cms.bool(True),
    useLeakCorrection = cms.bool(False)
)


process.hbhereco = cms.EDProducer("HcalHitReconstructor",
    Subdetector = cms.string('HBHE'),
    applyPedConstraint = cms.bool(True),
    applyPulseJitter = cms.bool(False),
    applyTimeConstraint = cms.bool(True),
    applyTimeSlew = cms.bool(True),
    applyUnconstrainedFit = cms.bool(False),
    chargeMax = cms.double(6.0),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(6.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string('HBHE'),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(4),
    firstSample = cms.int32(4),
    fitTimes = cms.int32(1),
    flagParameters = cms.PSet(
        hitEnergyMinimum = cms.double(1.0),
        hitMultiplicityThreshold = cms.int32(17),
        nominalPedestal = cms.double(3.0),
        pulseShapeParameterSets = cms.VPSet(cms.PSet(
            pulseShapeParameters = cms.vdouble(0.0, 100.0, -50.0, 0.0, -15.0, 
                0.15)
        ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(-1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0)
            ))
    ),
    hscpParameters = cms.PSet(
        TimingEnergyThreshold = cms.double(30.0),
        fracLeaderMax = cms.double(0.7),
        fracLeaderMin = cms.double(0.4),
        outerMax = cms.double(0.1),
        outerMin = cms.double(0.0),
        r1Max = cms.double(1.0),
        r1Min = cms.double(0.15),
        r2Max = cms.double(0.5),
        r2Min = cms.double(0.1),
        slopeMax = cms.double(-0.6),
        slopeMin = cms.double(-1.5)
    ),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string('HBHE'),
    meanPed = cms.double(0.0),
    meanTime = cms.double(0.0),
    noise = cms.double(1),
    pedSigma = cms.double(0.5),
    pedestalSubtractionType = cms.int32(1),
    pedestalUpperLimit = cms.double(2.7),
    puCorrMethod = cms.int32(2),
    pulseJitter = cms.double(1.0),
    pulseShapeParameters = cms.PSet(
        LeftSlopeCut = cms.vdouble(5, 2.55, 2.55),
        LeftSlopeThreshold = cms.vdouble(250, 500, 100000),
        LinearCut = cms.vdouble(-3, -0.054, -0.054),
        LinearThreshold = cms.vdouble(20, 100, 100000),
        MinimumChargeThreshold = cms.double(20),
        MinimumTS4TS5Threshold = cms.double(100),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        RMS8MaxThreshold = cms.vdouble(20, 100, 100000),
        RightSlopeCut = cms.vdouble(5, 4.15, 4.15),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        RightSlopeSmallThreshold = cms.vdouble(150, 200, 100000),
        RightSlopeThreshold = cms.vdouble(250, 400, 100000),
        TS4TS5ChargeThreshold = cms.double(70),
        TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.5, -0.4, -0.3, 
            0.1),
        TS4TS5LowerThreshold = cms.vdouble(100, 120, 160, 200, 300, 
            500),
        TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72),
        TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400),
        TriangleIgnoreSlow = cms.bool(False),
        TrianglePeakTS = cms.uint32(4),
        UseDualFit = cms.bool(True)
    ),
    recoParamsFromDB = cms.bool(True),
    respCorrM3 = cms.double(0.95),
    samplesToAdd = cms.int32(2),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNegativeFlags = cms.bool(True),
    setNoiseFlags = cms.bool(True),
    setPulseShapeFlags = cms.bool(True),
    setSaturationFlags = cms.bool(True),
    setTimingShapedCutsFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False),
    timeMax = cms.double(12.5),
    timeMin = cms.double(-12.5),
    timeSigma = cms.double(5.0),
    timeSlewPars = cms.vdouble(15.5, -3.2, 32, 15.5, -3.2, 
        32, 15.5, -3.2, 32),
    timeSlewParsType = cms.int32(1),
    timingshapedcutsParameters = cms.PSet(
        ignorehighest = cms.bool(False),
        ignorelowest = cms.bool(True),
        tfilterEnvelope = cms.vdouble(50.0, -2.0, 4.25, 52.0, -2.0, 
            4.09, 54.0, -2.0, 3.95, 56.0, 
            -2.0, 3.82, 58.0, -2.0, 3.71, 
            60.0, -2.0, 3.6, 63.0, -2.0, 
            3.46, 66.0, -2.0, 3.33, 69.0, 
            -2.0, 3.22, 73.0, -2.0, 3.1, 
            77.0, -2.0, 2.99, 82.0, -2.0, 
            2.87, 88.0, -2.0, 2.75, 95.0, 
            -2.0, 2.64, 103.0, -2.0, 2.54, 
            113.0, -2.0, 2.44, 127.0, -2.0, 
            2.33, 146.0, -2.0, 2.23, 176.0, 
            -2.0, 2.13, 250.0, -2.0, 2.0),
        win_gain = cms.double(3.0),
        win_offset = cms.double(0.0)
    ),
    ts345chi2 = cms.double(100.0),
    ts3chi2 = cms.double(5.0),
    ts4Max = cms.double(100.0),
    ts4Min = cms.double(0.0),
    ts4chi2 = cms.double(15.0),
    tsFromDB = cms.bool(True),
    useLeakCorrection = cms.bool(False)
)


process.hbherecoMB = cms.EDProducer("HcalSimpleReconstructor",
    Subdetector = cms.string('HBHE'),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(False),
    firstSample = cms.int32(4),
    samplesToAdd = cms.int32(4),
    tsFromDB = cms.bool(True)
)


process.hbherecoNoise = cms.EDProducer("HcalSimpleReconstructor",
    Subdetector = cms.string('HBHE'),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigiAlCaMB"),
    dropZSmarkedPassed = cms.bool(False),
    firstSample = cms.int32(0),
    samplesToAdd = cms.int32(4),
    tsFromDB = cms.bool(False)
)


process.hcalDigiAlCaMB = cms.EDProducer("HcalRawToDigi",
    ComplainEmptyData = cms.untracked.bool(False),
    ElectronicsMap = cms.string(''),
    ExpectedOrbitMessageTime = cms.untracked.int32(-1),
    FEDs = cms.untracked.vint32(),
    FilterDataQuality = cms.bool(True),
    HcalFirstFED = cms.untracked.int32(700),
    InputLabel = cms.InputTag("rawDataRepacker"),
    UnpackCalib = cms.untracked.bool(True),
    UnpackTTP = cms.untracked.bool(True),
    UnpackZDC = cms.untracked.bool(True),
    UnpackerMode = cms.untracked.int32(0),
    firstSample = cms.int32(0),
    lastSample = cms.int32(9),
    silent = cms.untracked.bool(True)
)


process.hcalDigis = cms.EDProducer("HcalRawToDigi",
    ComplainEmptyData = cms.untracked.bool(False),
    ElectronicsMap = cms.string(''),
    ExpectedOrbitMessageTime = cms.untracked.int32(-1),
    FEDs = cms.untracked.vint32(),
    FilterDataQuality = cms.bool(True),
    HcalFirstFED = cms.untracked.int32(700),
    InputLabel = cms.InputTag("rawDataRepacker"),
    UnpackCalib = cms.untracked.bool(True),
    UnpackTTP = cms.untracked.bool(True),
    UnpackZDC = cms.untracked.bool(True),
    UnpackerMode = cms.untracked.int32(0),
    firstSample = cms.int32(0),
    lastSample = cms.int32(9),
    silent = cms.untracked.bool(True)
)


process.hcalnoise = cms.EDProducer("HcalNoiseInfoProducer",
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalRecHitFlagsToBeExcluded = cms.vint32(11, 12, 13, 14, 15),
    TS4TS5EnergyThreshold = cms.double(50),
    TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.4, -0.2, -0.08, 
        0, 0.1),
    TS4TS5LowerThreshold = cms.vdouble(100, 120, 150, 200, 300, 
        400, 500),
    TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72, 0.72),
    TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400, 4000),
    calibdigiHBHEthreshold = cms.double(15),
    calibdigiHBHEtimeslices = cms.vint32(3, 4, 5, 6),
    calibdigiHFthreshold = cms.double(-999),
    calibdigiHFtimeslices = cms.vint32(0, 1, 2, 3, 4, 
        5, 6, 7, 8, 9),
    caloTowerCollName = cms.string('towerMaker'),
    digiCollName = cms.string('hcalDigis'),
    fillCaloTowers = cms.bool(True),
    fillDigis = cms.bool(True),
    fillRecHits = cms.bool(True),
    fillTracks = cms.bool(True),
    hlMaxHPDEMF = cms.double(-9999.0),
    hlMaxRBXEMF = cms.double(0.01),
    jetCollName = cms.string('ak4PFJets'),
    lMaxHighEHitTime = cms.double(9999.0),
    lMaxLowEHitTime = cms.double(9999.0),
    lMaxRatio = cms.double(999.0),
    lMinHPDHits = cms.int32(17),
    lMinHPDNoOtherHits = cms.int32(10),
    lMinHighEHitTime = cms.double(-9999.0),
    lMinLowEHitTime = cms.double(-9999.0),
    lMinRBXHits = cms.int32(999),
    lMinRatio = cms.double(-999.0),
    lMinZeros = cms.int32(10),
    lRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.5, 0.0, 
        0.0, 1.0, -0.5),
    maxCaloTowerIEta = cms.int32(20),
    maxNHF = cms.double(0.9),
    maxProblemRBXs = cms.int32(72),
    maxTrackEta = cms.double(2.0),
    maxjetindex = cms.int32(0),
    minEEMF = cms.double(50.0),
    minERatio = cms.double(50.0),
    minEZeros = cms.double(10.0),
    minHighHitE = cms.double(25.0),
    minLowHitE = cms.double(10.0),
    minR45HitE = cms.double(5.0),
    minRecHitE = cms.double(1.5),
    minTrackPt = cms.double(1.0),
    pMaxHPDEMF = cms.double(0.02),
    pMaxHighEHitTime = cms.double(5.0),
    pMaxLowEHitTime = cms.double(6.0),
    pMaxRBXEMF = cms.double(0.02),
    pMaxRatio = cms.double(0.85),
    pMinE = cms.double(40.0),
    pMinEEMF = cms.double(10.0),
    pMinERatio = cms.double(25.0),
    pMinEZeros = cms.double(5.0),
    pMinHPDHits = cms.int32(10),
    pMinHPDNoOtherHits = cms.int32(7),
    pMinHighEHitTime = cms.double(-4.0),
    pMinLowEHitTime = cms.double(-6.0),
    pMinRBXHits = cms.int32(20),
    pMinRBXRechitR45Count = cms.int32(1),
    pMinRBXRechitR45EnergyFraction = cms.double(0.1),
    pMinRBXRechitR45Fraction = cms.double(0.1),
    pMinRatio = cms.double(0.75),
    pMinZeros = cms.int32(4),
    recHitCollName = cms.string('hbhereco'),
    tMaxHighEHitTime = cms.double(6.0),
    tMaxLowEHitTime = cms.double(9999.0),
    tMaxRatio = cms.double(999.0),
    tMinHPDHits = cms.int32(16),
    tMinHPDNoOtherHits = cms.int32(9),
    tMinHighEHitTime = cms.double(-7.0),
    tMinLowEHitTime = cms.double(-9999.0),
    tMinRBXHits = cms.int32(50),
    tMinRatio = cms.double(-999.0),
    tMinZeros = cms.int32(8),
    tRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.2, 0.0, 
        0.0, 1.0, -0.2),
    trackCollName = cms.string('hiGeneralTracks')
)


process.hfreco = cms.EDProducer("HcalHitReconstructor",
    HFInWindowStat = cms.PSet(
        hflongEthresh = cms.double(40.0),
        hflongMaxWindowTime = cms.vdouble(10),
        hflongMinWindowTime = cms.vdouble(-10),
        hfshortEthresh = cms.double(40.0),
        hfshortMaxWindowTime = cms.vdouble(10),
        hfshortMinWindowTime = cms.vdouble(-12)
    ),
    PETstat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        long_R = cms.vdouble(0.98),
        long_R_29 = cms.vdouble(0.8),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        short_R = cms.vdouble(0.8),
        short_R_29 = cms.vdouble(0.8)
    ),
    S8S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(True),
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        longEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        long_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        shortEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        short_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1)
    ),
    S9S1stat = cms.PSet(
        HcalAcceptSeverityLevel = cms.int32(9),
        isS8S1 = cms.bool(False),
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        long_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        short_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927)
    ),
    Subdetector = cms.string('HF'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string(''),
    digiLabel = cms.InputTag("hcalDigis"),
    digiTimeFromDB = cms.bool(True),
    digistat = cms.PSet(
        HFdigiflagCoef = cms.vdouble(0.93, -0.38275, -0.012667),
        HFdigiflagExpectedPeak = cms.int32(2),
        HFdigiflagFirstSample = cms.int32(1),
        HFdigiflagMinEthreshold = cms.double(40),
        HFdigiflagSamplesToAdd = cms.int32(3)
    ),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(1),
    firstSample = cms.int32(2),
    hfTimingTrustParameters = cms.PSet(
        hfTimingTrustLevel1 = cms.int32(1),
        hfTimingTrustLevel2 = cms.int32(4)
    ),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string(''),
    puCorrMethod = cms.int32(0),
    recoParamsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(1),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(False),
    setNegativeFlags = cms.bool(False),
    setNoiseFlags = cms.bool(True),
    setPulseShapeFlags = cms.bool(False),
    setSaturationFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(True),
    tsFromDB = cms.bool(True),
    useLeakCorrection = cms.bool(False)
)


process.hfrecoMB = cms.EDProducer("HcalSimpleReconstructor",
    Subdetector = cms.string('HF'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(False),
    firstSample = cms.int32(4),
    samplesToAdd = cms.int32(2),
    tsFromDB = cms.bool(True)
)


process.hfrecoMBspecial = cms.EDProducer("HcalSimpleReconstructor",
    Subdetector = cms.string('HF'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("hcalDigiAlCaMB"),
    dropZSmarkedPassed = cms.bool(False),
    firstSample = cms.int32(2),
    samplesToAdd = cms.int32(2),
    tsFromDB = cms.bool(False)
)


process.hfrecoNoise = cms.EDProducer("HcalSimpleReconstructor",
    Subdetector = cms.string('HF'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("hcalDigiAlCaMB"),
    dropZSmarkedPassed = cms.bool(False),
    firstSample = cms.int32(0),
    samplesToAdd = cms.int32(2),
    tsFromDB = cms.bool(False)
)


process.hiAkPu4CaloJetsCorrectedPreSplitting = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ak4CaloL2L3'),
    src = cms.InputTag("hiAkPu4CaloJetsForTrkPreSplitting")
)


process.hiAkPu4CaloJetsForTrkPreSplitting = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('AntiKt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(8),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("hiCaloTowerForTrkPreSplitting"),
    srcPVs = cms.InputTag("hiSelectedVertexPreSplitting"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.hiCaloTowerForTrk = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.8),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.8),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.hiCaloTowerForTrkPreSplitting = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.8),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.8),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.hiCentrality = cms.EDProducer("CentralityProducer",
    TrackQuality = cms.string('highPurity'),
    UseQuality = cms.bool(True),
    doPixelCut = cms.bool(True),
    hfEtaCut = cms.double(4),
    lowGainZDC = cms.bool(True),
    midRapidityRange = cms.double(1),
    produceETmidRapidity = cms.bool(True),
    produceEcalhits = cms.bool(True),
    produceHFhits = cms.bool(True),
    produceHFtowers = cms.bool(True),
    producePixelTracks = cms.bool(True),
    producePixelhits = cms.bool(True),
    produceTracks = cms.bool(True),
    produceZDChits = cms.bool(True),
    reUseCentrality = cms.bool(False),
    srcEBhits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    srcEEhits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    srcHFhits = cms.InputTag("hfreco"),
    srcPixelTracks = cms.InputTag("hiPixel3PrimTracks"),
    srcPixelhits = cms.InputTag("siPixelRecHits"),
    srcReUse = cms.InputTag("hiCentrality"),
    srcTowers = cms.InputTag("towerMaker"),
    srcTracks = cms.InputTag("hiGeneralTracks"),
    srcVertex = cms.InputTag("hiSelectedVertex"),
    srcZDChits = cms.InputTag("zdcreco"),
    trackEtaCut = cms.double(2),
    trackPtCut = cms.double(1)
)


process.hiClusterCompatibility = cms.EDProducer("ClusterCompatibilityProducer",
    inputTag = cms.InputTag("siPixelRecHits"),
    maxZ = cms.double(40.05),
    minZ = cms.double(-40.0),
    zStep = cms.double(0.2)
)


process.hiConformalPixelTracks = cms.EDProducer("PixelTrackProducer",
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('TrackCleaner')
    ),
    FilterPSet = cms.PSet(
        ComponentName = cms.string('HIPixelTrackFilter'),
        VertexCollection = cms.InputTag("hiSelectedVertex"),
        chi2 = cms.double(80.0),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        lipMax = cms.double(999.0),
        nSigmaLipMaxTolerance = cms.double(14.0),
        nSigmaTipMaxTolerance = cms.double(999.0),
        ptMin = cms.double(0.25),
        tipMax = cms.double(999.0),
        useClusterShape = cms.bool(False)
    ),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByConformalMappingAndLine'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        fixImpactParameter = cms.double(0.0)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(5000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("PixelLayerTriplets")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("hiSelectedVertex"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            fixedError = cms.double(0.2),
            nSigmaZ = cms.double(3.0),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.25),
            sigmaZVertex = cms.double(3.0),
            useFixedError = cms.bool(True),
            useFoundVertices = cms.bool(True)
        )
    ),
    useFilterWithES = cms.bool(True)
)


process.hiDetachedTripletStepClusters = cms.EDProducer("HITrackClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    Strip = cms.PSet(
        maxChi2 = cms.double(9.0),
        maxSize = cms.uint32(2)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    overrideTrkQuals = cms.InputTag("hiInitialStepSelector","hiInitialStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("hiGlobalPrimTracks")
)


process.hiDetachedTripletStepPixelTracks = cms.EDProducer("PixelTrackProducer",
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('TrackCleaner')
    ),
    FilterPSet = cms.PSet(
        ComponentName = cms.string('HIPixelTrackFilter'),
        VertexCollection = cms.InputTag("hiSelectedVertex"),
        chi2 = cms.double(1000.0),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        lipMax = cms.double(1.0),
        nSigmaLipMaxTolerance = cms.double(0),
        nSigmaTipMaxTolerance = cms.double(0),
        ptMin = cms.double(0.95),
        tipMax = cms.double(1.0),
        useClusterShape = cms.bool(False)
    ),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
                clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache")
            ),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(1000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("hiDetachedTripletStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("hiSelectedVertex"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            fixedError = cms.double(0.5),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.5),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            sigmaZVertex = cms.double(4.0),
            useFixedError = cms.bool(True),
            useFoundVertices = cms.bool(True)
        )
    ),
    passLabel = cms.string('Pixel detached tracks with vertex constraint'),
    useFilterWithES = cms.bool(True)
)


process.hiDetachedTripletStepQual = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("hiDetachedTripletStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("hiDetachedTripletStepSelector","hiDetachedTripletStep")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1)
    ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(2, 3)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(4, 5)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(2, 3, 4, 5)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(0, 1, 2, 3, 4, 
                5)
        )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hiDetachedTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hiDetachedTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hiDetachedTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.hiDetachedTripletStepSeeds = cms.EDProducer("SeedGeneratorFromProtoTracksEDProducer",
    InputCollection = cms.InputTag("hiDetachedTripletStepPixelTracks"),
    InputVertexCollection = cms.InputTag(""),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1),
        OriginTransverseErrorMultiplier = cms.double(1),
        SeedMomentumForBOFF = cms.double(5),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string(''),
        propagator = cms.string('PropagatorWithMaterial')
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    originHalfLength = cms.double(1000000000),
    originRadius = cms.double(1000000000),
    useEventsWithNoVertex = cms.bool(True),
    usePV = cms.bool(False),
    useProtoTrackKinematics = cms.bool(False)
)


process.hiDetachedTripletStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string('HIMVASelectorIter7'),
    GBRForestVars = cms.vstring('chi2perdofperlayer', 
        'nhits', 
        'nlayers', 
        'eta'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiDetachedTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(False),
        chi2n_no1Dmod_par = cms.double(9999.0),
        chi2n_par = cms.double(0.3),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(True),
        d0_par1 = cms.vdouble(9999.0, 0.0),
        d0_par2 = cms.vdouble(0.4, 4.0),
        dz_par1 = cms.vdouble(9999.0, 0.0),
        dz_par2 = cms.vdouble(0.4, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(0.2),
        max_z0 = cms.double(100),
        minHitsToBypassChecks = cms.uint32(999),
        minMVA = cms.double(-1),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(9999.0),
        name = cms.string('hiDetachedTripletStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(99999.0, 99999.0),
        useMVA = cms.bool(False),
        vertexCut = cms.string(''),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.2),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiDetachedTripletStepTight'),
            preFilterName = cms.string('hiDetachedTripletStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.09),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiDetachedTripletStep'),
            preFilterName = cms.string('hiDetachedTripletStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiDetachedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('hiDetachedTripletStepTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hiDetachedTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("hiDetachedTripletStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("hiDetachedTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.hiDetachedTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('detachedTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiDetachedTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiEarlyGeneralTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("hiGlobalPrimTracks"), cms.InputTag("hiDetachedTripletStepTracks"), cms.InputTag("hiLowPtTripletStepTracks"), cms.InputTag("hiPixelPairGlobalPrimTracks"), cms.InputTag("hiJetCoreRegionalStepTracks"), 
        cms.InputTag("hiRegitMuInitialStepTracks"), cms.InputTag("hiRegitMuPixelPairStepTracks"), cms.InputTag("hiRegitMuMixedTripletStepTracks"), cms.InputTag("hiRegitMuPixelLessStepTracks"), cms.InputTag("hiRegitMuDetachedTripletStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("hiInitialStepSelector","hiInitialStep"), cms.InputTag("hiDetachedTripletStepSelector","hiDetachedTripletStep"), cms.InputTag("hiLowPtTripletStepSelector","hiLowPtTripletStep"), cms.InputTag("hiPixelPairStepSelector","hiPixelPairStep"), cms.InputTag("hiJetCoreRegionalStepSelector","hiJetCoreRegionalStep"), 
        cms.InputTag("hiRegitMuInitialStepSelector","hiRegitMuInitialStepLoose"), cms.InputTag("hiRegitMuPixelPairStepSelector","hiRegitMuPixelPairStep"), cms.InputTag("hiRegitMuMixedTripletStepSelector","hiRegitMuMixedTripletStep"), cms.InputTag("hiRegitMuPixelLessStepSelector","hiRegitMuPixelLessStep"), cms.InputTag("hiRegitMuDetachedTripletStepSelector","hiRegitMuDetachedTripletStep")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1, 2, 3, 4, 
            5, 6, 7, 8, 9)
    )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hiEarlyMuons = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(False),
    fillEnergy = cms.bool(False),
    fillGlobalTrackQuality = cms.bool(False),
    fillGlobalTrackRefits = cms.bool(False),
    fillIsolation = cms.bool(False),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(False),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("hiEarlyGeneralTracks"), cms.InputTag("standAloneMuons","UpdatedAtVtx")),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(3.0),
    minPCaloMuon = cms.double(3.0),
    minPt = cms.double(2.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.hiEvtPlane = cms.EDProducer("EvtPlaneProducer",
    CentBinCompression = cms.int32(5),
    FlatOrder = cms.int32(9),
    NumFlatBins = cms.int32(40),
    caloCentRef = cms.double(80.0),
    caloCentRefWidth = cms.double(5.0),
    caloTag = cms.InputTag("towerMaker"),
    castorTag = cms.InputTag("CastorTowerReco"),
    centralityBinTag = cms.InputTag("centralityBin","HFtowers"),
    centralityVariable = cms.string('HFtowers'),
    chi2 = cms.double(40.0),
    dzerr = cms.double(10.0),
    loadDB = cms.bool(False),
    maxet = cms.double(-1.0),
    maxpt = cms.double(3.0),
    maxvtx = cms.double(25.0),
    minet = cms.double(-1.0),
    minpt = cms.double(0.3),
    minvtx = cms.double(-25.0),
    nonDefaultGlauberModel = cms.string(''),
    trackTag = cms.InputTag("hiGeneralTracks"),
    vertexTag = cms.InputTag("hiSelectedVertex")
)


process.hiGeneralAndPixelTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("hiConformalPixelTracks"), cms.InputTag("hiGeneralTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("hiPixelOnlyStepSelector","hiPixelOnlyTrkHighPurity"), cms.InputTag("hiHighPtStepSelector","hiHighPtTrkTrunc")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1)
    )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hiGeneralAndRegitMuTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("hiRegitMuInitialStepTracks"), cms.InputTag("hiRegitMuPixelPairStepTracks"), cms.InputTag("hiRegitMuMixedTripletStepTracks"), cms.InputTag("hiRegitMuPixelLessStepTracks"), cms.InputTag("hiRegitMuDetachedTripletStepTracks"), 
        cms.InputTag("hiRegitMuonSeededTracksOutIn"), cms.InputTag("hiRegitMuonSeededTracksInOut")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1, 1, 1, 1, 
        1, 1),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("hiRegitMuInitialStepSelector","hiRegitMuInitialStepLoose"), cms.InputTag("hiRegitMuPixelPairStepSelector","hiRegitMuPixelPairStep"), cms.InputTag("hiRegitMuMixedTripletStepSelector","hiRegitMuMixedTripletStep"), cms.InputTag("hiRegitMuPixelLessStepSelector","hiRegitMuPixelLessStep"), cms.InputTag("hiRegitMuDetachedTripletStepSelector","hiRegitMuDetachedTripletStep"), 
        cms.InputTag("hiRegitMuonSeededTracksOutInSelector","hiRegitMuonSeededTracksOutInHighPurity"), cms.InputTag("hiRegitMuonSeededTracksInOutSelector","hiRegitMuonSeededTracksInOutHighPurity")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1, 2, 3, 4, 
            5, 6)
    )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hiGeneralTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("hiGlobalPrimTracks"), cms.InputTag("hiDetachedTripletStepTracks"), cms.InputTag("hiLowPtTripletStepTracks"), cms.InputTag("hiPixelPairGlobalPrimTracks"), cms.InputTag("hiJetCoreRegionalStepTracks"), 
        cms.InputTag("hiRegitMuInitialStepTracks"), cms.InputTag("hiRegitMuPixelPairStepTracks"), cms.InputTag("hiRegitMuMixedTripletStepTracks"), cms.InputTag("hiRegitMuPixelLessStepTracks"), cms.InputTag("hiRegitMuDetachedTripletStepTracks"), 
        cms.InputTag("hiRegitMuonSeededTracksOutIn"), cms.InputTag("hiRegitMuonSeededTracksInOut")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("hiInitialStepSelector","hiInitialStep"), cms.InputTag("hiDetachedTripletStepSelector","hiDetachedTripletStep"), cms.InputTag("hiLowPtTripletStepSelector","hiLowPtTripletStep"), cms.InputTag("hiPixelPairStepSelector","hiPixelPairStep"), cms.InputTag("hiJetCoreRegionalStepSelector","hiJetCoreRegionalStep"), 
        cms.InputTag("hiRegitMuInitialStepSelector","hiRegitMuInitialStepLoose"), cms.InputTag("hiRegitMuPixelPairStepSelector","hiRegitMuPixelPairStep"), cms.InputTag("hiRegitMuMixedTripletStepSelector","hiRegitMuMixedTripletStep"), cms.InputTag("hiRegitMuPixelLessStepSelector","hiRegitMuPixelLessStep"), cms.InputTag("hiRegitMuDetachedTripletStepSelector","hiRegitMuDetachedTripletStep"), 
        cms.InputTag("hiRegitMuonSeededTracksOutInSelector","hiRegitMuonSeededTracksOutInHighPurity"), cms.InputTag("hiRegitMuonSeededTracksInOutSelector","hiRegitMuonSeededTracksInOutHighPurity")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1, 2, 3, 4, 
            5, 6, 7, 8, 9, 
            10, 11)
    )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hiGeneralTracksNoRegitMu = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("hiGlobalPrimTracks"), cms.InputTag("hiDetachedTripletStepTracks"), cms.InputTag("hiLowPtTripletStepTracks"), cms.InputTag("hiPixelPairGlobalPrimTracks"), cms.InputTag("hiJetCoreRegionalStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1, 1, 1, 1),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("hiInitialStepSelector","hiInitialStep"), cms.InputTag("hiDetachedTripletStepSelector","hiDetachedTripletStep"), cms.InputTag("hiLowPtTripletStepSelector","hiLowPtTripletStep"), cms.InputTag("hiPixelPairStepSelector","hiPixelPairStep")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1, 2, 3)
    )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hiGlobalPrimTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('initialStep'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiPrimTrackCandidates"),
    useHitsSplitting = cms.bool(True),
    useSimpleMF = cms.bool(False)
)


process.hiHighPtStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string(''),
    GBRForestVars = cms.vstring(),
    applyPixelMergingCuts = cms.bool(True),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiGeneralTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999.0),
        chi2n_par = cms.double(0.3),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(True),
        d0_par1 = cms.vdouble(9999.0, 0.0),
        d0_par2 = cms.vdouble(9999.0, 0.0),
        dz_par1 = cms.vdouble(9999.0, 0.0),
        dz_par2 = cms.vdouble(9999.0, 0.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100),
        minHitsToBypassChecks = cms.uint32(9999),
        minMVA = cms.double(-1),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(12),
        nSigmaZ = cms.double(9999.0),
        name = cms.string('hiHighPtTrkTrunc'),
        pixel_pTMaxCut = cms.vdouble(9998, 9999, 9999, 1.0),
        pixel_pTMinCut = cms.vdouble(1.0, 1.8, 0.15, 2.5),
        preFilterName = cms.string(''),
        qualityBit = cms.string(''),
        res_par = cms.vdouble(99999.0, 99999.0),
        useMVA = cms.bool(False),
        vertexCut = cms.string(''),
        vtxNumber = cms.int32(-1)
    )),
    useAnyMVA = cms.bool(False),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiInitialStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string('HIMVASelectorIter4'),
    GBRForestVars = cms.vstring('chi2perdofperlayer', 
        'dxyperdxyerror', 
        'dzperdzerror', 
        'nhits', 
        'nlayers', 
        'eta'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiGlobalPrimTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999.0),
        chi2n_par = cms.double(0.3),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(True),
        d0_par1 = cms.vdouble(9999.0, 0.0),
        d0_par2 = cms.vdouble(0.4, 4.0),
        dz_par1 = cms.vdouble(9999.0, 0.0),
        dz_par2 = cms.vdouble(0.4, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(0.2),
        max_z0 = cms.double(100),
        minHitsToBypassChecks = cms.uint32(999),
        minMVA = cms.double(-1),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(9999.0),
        name = cms.string('hiInitialStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(99999.0, 99999.0),
        useMVA = cms.bool(False),
        vertexCut = cms.string(''),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.77),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiInitialStepTight'),
            preFilterName = cms.string('hiInitialStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.77),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiInitialStep'),
            preFilterName = cms.string('hiInitialStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiInitialStepTrackRefsForJets = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("hiGlobalPrimTracks")
)


process.hiJetCoreRegionalStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        hitErrorRPhi = cms.double(0.0027),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True)
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        hitErrorRPhi = cms.double(0.0051),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True)
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix1+BPix2+TIB1', 
        'BPix1+BPix3+TIB1', 
        'BPix2+BPix3+TIB1')
)


process.hiJetCoreRegionalStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(False)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(1000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("hiJetCoreRegionalStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('TauRegionalPixelSeedGenerator'),
        RegionPSet = cms.PSet(
            JetSrc = cms.InputTag("hiJetsForCoreTracking"),
            deltaEtaRegion = cms.double(0.3),
            deltaPhiRegion = cms.double(0.3),
            howToUseMeasurementTracker = cms.double(-1.0),
            measurementTrackerName = cms.string('MeasurementTrackerEvent'),
            originHalfLength = cms.double(0.2),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(10.0),
            vertexSrc = cms.InputTag("hiFirstStepGoodPrimaryVertices")
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(True),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.hiJetCoreRegionalStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string(''),
    GBRForestVars = cms.vstring(),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiJetCoreRegionalStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999.0),
        chi2n_par = cms.double(0.3),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(True),
        d0_par1 = cms.vdouble(9999.0, 0.0),
        d0_par2 = cms.vdouble(0.4, 4.0),
        dz_par1 = cms.vdouble(9999.0, 0.0),
        dz_par2 = cms.vdouble(0.4, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(0.2),
        max_z0 = cms.double(100),
        minHitsToBypassChecks = cms.uint32(999),
        minMVA = cms.double(-1),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(9999.0),
        name = cms.string('hiJetCoreRegionalStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(99999.0, 99999.0),
        useMVA = cms.bool(False),
        vertexCut = cms.string(''),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-1),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiJetCoreRegionalStepTight'),
            preFilterName = cms.string('hiJetCoreRegionalStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(False),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-1),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(14),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiJetCoreRegionalStep'),
            preFilterName = cms.string('hiJetCoreRegionalStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(False),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(False),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiFirstStepGoodPrimaryVertices")
)


process.hiJetCoreRegionalStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hiJetCoreRegionalStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(10000),
    src = cms.InputTag("hiJetCoreRegionalStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.hiJetCoreRegionalStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('jetCoreRegionalStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiJetCoreRegionalStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiLowPtTripletStepClusters = cms.EDProducer("HITrackClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    Strip = cms.PSet(
        maxChi2 = cms.double(9.0),
        maxSize = cms.uint32(2)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("hiDetachedTripletStepClusters"),
    overrideTrkQuals = cms.InputTag("hiDetachedTripletStepSelector","hiDetachedTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("hiDetachedTripletStepTracks")
)


process.hiLowPtTripletStepPixelTracks = cms.EDProducer("PixelTrackProducer",
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('TrackCleaner')
    ),
    FilterPSet = cms.PSet(
        ComponentName = cms.string('HIPixelTrackFilter'),
        VertexCollection = cms.InputTag("hiSelectedVertex"),
        chi2 = cms.double(1000.0),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        lipMax = cms.double(0),
        nSigmaLipMaxTolerance = cms.double(4.0),
        nSigmaTipMaxTolerance = cms.double(4.0),
        ptMin = cms.double(0.4),
        tipMax = cms.double(0),
        useClusterShape = cms.bool(False)
    ),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
                clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache")
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(5000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("hiLowPtTripletStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("hiSelectedVertex"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            fixedError = cms.double(0.2),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.02),
            precise = cms.bool(True),
            ptMin = cms.double(0.4),
            sigmaZVertex = cms.double(4.0),
            useFixedError = cms.bool(False),
            useFoundVertices = cms.bool(True)
        )
    ),
    passLabel = cms.string('Pixel primary tracks with vertex constraint'),
    useFilterWithES = cms.bool(True)
)


process.hiLowPtTripletStepQual = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("hiLowPtTripletStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("hiLowPtTripletStepSelector","hiLowPtTripletStep")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1)
    ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(2, 3)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(4, 5)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(2, 3, 4, 5)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(0, 1, 2, 3, 4, 
                5)
        )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hiLowPtTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hiLowPtTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hiLowPtTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.hiLowPtTripletStepSeeds = cms.EDProducer("SeedGeneratorFromProtoTracksEDProducer",
    InputCollection = cms.InputTag("hiLowPtTripletStepPixelTracks"),
    InputVertexCollection = cms.InputTag(""),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1),
        OriginTransverseErrorMultiplier = cms.double(1),
        SeedMomentumForBOFF = cms.double(5),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string(''),
        propagator = cms.string('PropagatorWithMaterial')
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    originHalfLength = cms.double(1000000000),
    originRadius = cms.double(1000000000),
    useEventsWithNoVertex = cms.bool(True),
    usePV = cms.bool(False),
    useProtoTrackKinematics = cms.bool(False)
)


process.hiLowPtTripletStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string('HIMVASelectorIter5'),
    GBRForestVars = cms.vstring('chi2perdofperlayer', 
        'dxyperdxyerror', 
        'dzperdzerror', 
        'relpterr', 
        'nhits', 
        'nlayers', 
        'eta'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiLowPtTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999.0),
        chi2n_par = cms.double(0.3),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(True),
        d0_par1 = cms.vdouble(9999.0, 0.0),
        d0_par2 = cms.vdouble(0.4, 4.0),
        dz_par1 = cms.vdouble(9999.0, 0.0),
        dz_par2 = cms.vdouble(0.4, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(0.2),
        max_z0 = cms.double(100),
        minHitsToBypassChecks = cms.uint32(999),
        minMVA = cms.double(-1),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(9999.0),
        name = cms.string('hiLowPtTripletStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(99999.0, 99999.0),
        useMVA = cms.bool(False),
        vertexCut = cms.string(''),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.58),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiLowPtTripletStepTight'),
            preFilterName = cms.string('hiLowPtTripletStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(0.35),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiLowPtTripletStep'),
            preFilterName = cms.string('hiLowPtTripletStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiLowPtTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hiLowPtTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("hiLowPtTripletStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("hiLowPtTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.hiLowPtTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('lowPtTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiLowPtTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiMixedTripletClusters = cms.EDProducer("HITrackClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    Strip = cms.PSet(
        maxChi2 = cms.double(9.0),
        maxSize = cms.uint32(2)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True),
    oldClusterRemovalInfo = cms.InputTag("hiLowPtTripletStepClusters"),
    overrideTrkQuals = cms.InputTag("hiLowPtTripletStepSelector","hiLowPtTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("hiLowPtTripletStepTracks")
)


process.hiMixedTripletGlobalPrimTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('mixedTripletStep'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiMixedTripletTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiMixedTripletSeedLayersA = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        skipClusters = cms.InputTag("hiMixedTripletClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        skipClusters = cms.InputTag("hiMixedTripletClusters")
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(1),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("hiMixedTripletClusters"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('FPix1_pos+FPix2_pos+TEC1_pos', 
        'FPix1_neg+FPix2_neg+TEC1_neg')
)


process.hiMixedTripletSeedLayersB = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        skipClusters = cms.InputTag("hiMixedTripletClusters")
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("hiMixedTripletClusters")
    ),
    layerList = cms.vstring('BPix2+BPix3+TIB1', 
        'BPix2+BPix3+TIB2')
)


process.hiMixedTripletSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("hiMixedTripletSeedsA"), cms.InputTag("hiMixedTripletSeedsB"))
)


process.hiMixedTripletSeedsA = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(50000000),
        MaxNumberOfPixelClusters = cms.uint32(5000000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(5000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("hiMixedTripletSeedLayersA")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(10.0),
            originRadius = cms.double(0.005),
            precise = cms.bool(True),
            ptMin = cms.double(4.0)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.hiMixedTripletSeedsB = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(50000000),
        MaxNumberOfPixelClusters = cms.uint32(5000000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(5000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("hiMixedTripletSeedLayersB")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(10.0),
            originRadius = cms.double(0.005),
            precise = cms.bool(True),
            ptMin = cms.double(4.0)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.hiMixedTripletStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string(''),
    GBRForestVars = cms.vstring(),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiMixedTripletGlobalPrimTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999.0),
        chi2n_par = cms.double(0.3),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(True),
        d0_par1 = cms.vdouble(9999.0, 0.0),
        d0_par2 = cms.vdouble(0.4, 4.0),
        dz_par1 = cms.vdouble(9999.0, 0.0),
        dz_par2 = cms.vdouble(0.4, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(0.2),
        max_z0 = cms.double(100),
        minHitsToBypassChecks = cms.uint32(999),
        minMVA = cms.double(-1),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(9999.0),
        name = cms.string('hiMixedTripletStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(99999.0, 99999.0),
        useMVA = cms.bool(False),
        vertexCut = cms.string(''),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-1),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiMixedTripletStepTight'),
            preFilterName = cms.string('hiMixedTripletStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(False),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-1),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(14),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiMixedTripletStep'),
            preFilterName = cms.string('hiMixedTripletStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(False),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(False),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiMixedTripletTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hiMixedTripletTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("hiMixedTripletSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.hiMultiTrackSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string(''),
    GBRForestVars = cms.vstring(),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiGeneralTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999.0),
        chi2n_par = cms.double(0.3),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(True),
        d0_par1 = cms.vdouble(9999.0, 0.0),
        d0_par2 = cms.vdouble(0.4, 4.0),
        dz_par1 = cms.vdouble(9999.0, 0.0),
        dz_par2 = cms.vdouble(0.4, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(0.2),
        max_z0 = cms.double(100),
        minHitsToBypassChecks = cms.uint32(999),
        minMVA = cms.double(-1),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(9999.0),
        name = cms.string('hiTrkLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(99999.0, 99999.0),
        useMVA = cms.bool(False),
        vertexCut = cms.string(''),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-1),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiTrkTight'),
            preFilterName = cms.string('hiTrkLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(False),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-1),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiTrkHighPurity'),
            preFilterName = cms.string('hiTrkTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(False),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(False),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiMuons1stStep = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("iterativeConePu5CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("hiGeneralTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(True),
    fillGlobalTrackRefits = cms.bool(True),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("hiGeneralTracks", "globalMuons", "standAloneMuons:UpdatedAtVtx", "tevMuons:firstHit", "tevMuons:picky", 
        "tevMuons:dyt"),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks', 
        'tev firstHit', 
        'tev picky', 
        'tev dyt'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1000000000.0),
    minPt = cms.double(0.8),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.hiPixel3PrimTracks = cms.EDProducer("PixelTrackProducer",
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('TrackCleaner')
    ),
    FilterPSet = cms.PSet(
        ComponentName = cms.string('HIPixelTrackFilter'),
        VertexCollection = cms.InputTag("hiSelectedVertex"),
        chi2 = cms.double(1000.0),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        lipMax = cms.double(0.3),
        nSigmaLipMaxTolerance = cms.double(0),
        nSigmaTipMaxTolerance = cms.double(6.0),
        ptMin = cms.double(0.9),
        tipMax = cms.double(0),
        useClusterShape = cms.bool(False)
    ),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(1000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("PixelLayerTriplets")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("hiSelectedVertex"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            fixedError = cms.double(0.2),
            nSigmaZ = cms.double(3.0),
            originRadius = cms.double(0.1),
            precise = cms.bool(True),
            ptMin = cms.double(0.9),
            sigmaZVertex = cms.double(3.0),
            useFixedError = cms.bool(True),
            useFoundVertices = cms.bool(True)
        )
    ),
    passLabel = cms.string('Pixel triplet primary tracks with vertex constraint'),
    useFilterWithES = cms.bool(True)
)


process.hiPixel3ProtoTracks = cms.EDProducer("PixelTrackProducer",
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('PixelTrackCleanerBySharedHits')
    ),
    FilterPSet = cms.PSet(
        ComponentName = cms.string('HIProtoTrackFilter'),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        chi2 = cms.double(1000.0),
        doVariablePtMin = cms.bool(True),
        ptMin = cms.double(1.0),
        siPixelRecHits = cms.InputTag("siPixelRecHits"),
        tipMax = cms.double(1.0)
    ),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("PixelLayerTriplets")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('HITrackingRegionForPrimaryVtxProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("hiPixelClusterVertex"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            directionXCoord = cms.double(1.0),
            directionYCoord = cms.double(1.0),
            directionZCoord = cms.double(0.0),
            doVariablePtMin = cms.bool(True),
            fixedError = cms.double(3.0),
            nSigmaZ = cms.double(3.0),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.7),
            siPixelRecHits = cms.InputTag("siPixelRecHits"),
            sigmaZVertex = cms.double(3.0),
            useFixedError = cms.bool(True),
            useFoundVertices = cms.bool(True)
        )
    ),
    passLabel = cms.string('Pixel triplet tracks for vertexing'),
    useFilterWithES = cms.bool(False)
)


process.hiPixel3ProtoTracksPreSplitting = cms.EDProducer("PixelTrackProducer",
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('PixelTrackCleanerBySharedHits')
    ),
    FilterPSet = cms.PSet(
        ComponentName = cms.string('HIProtoTrackFilter'),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        chi2 = cms.double(1000.0),
        doVariablePtMin = cms.bool(True),
        ptMin = cms.double(1.0),
        siPixelRecHits = cms.InputTag("siPixelRecHitsPreSplitting"),
        tipMax = cms.double(1.0)
    ),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("PixelLayerTripletsPreSplitting")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('HITrackingRegionForPrimaryVtxProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("hiPixelClusterVertexPreSplitting"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            directionXCoord = cms.double(1.0),
            directionYCoord = cms.double(1.0),
            directionZCoord = cms.double(0.0),
            doVariablePtMin = cms.bool(True),
            fixedError = cms.double(3.0),
            nSigmaZ = cms.double(3.0),
            originRadius = cms.double(0.2),
            precise = cms.bool(True),
            ptMin = cms.double(0.7),
            siPixelRecHits = cms.InputTag("siPixelRecHitsPreSplitting"),
            sigmaZVertex = cms.double(3.0),
            useFixedError = cms.bool(True),
            useFoundVertices = cms.bool(True)
        )
    ),
    passLabel = cms.string('Pixel triplet tracks for vertexing'),
    useFilterWithES = cms.bool(False)
)


process.hiPixelAdaptiveVertex = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkGapClusParameters = cms.PSet(
            zSeparation = cms.double(1.0)
        ),
        algorithm = cms.string('gap')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filterWithThreshold'),
        maxD0Significance = cms.double(3.0),
        maxNormalizedChi2 = cms.double(5.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(0),
        numTracksThreshold = cms.int32(2),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("hiSelectedProtoTracks"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(0.1),
        minNdof = cms.double(0.0),
        useBeamConstraint = cms.bool(False)
    ))
)


process.hiPixelAdaptiveVertexPreSplitting = cms.EDProducer("PrimaryVertexProducer",
    TkClusParameters = cms.PSet(
        TkGapClusParameters = cms.PSet(
            zSeparation = cms.double(1.0)
        ),
        algorithm = cms.string('gap')
    ),
    TkFilterParameters = cms.PSet(
        algorithm = cms.string('filterWithThreshold'),
        maxD0Significance = cms.double(3.0),
        maxNormalizedChi2 = cms.double(5.0),
        minPixelLayersWithHits = cms.int32(2),
        minPt = cms.double(0.0),
        minSiliconLayersWithHits = cms.int32(0),
        numTracksThreshold = cms.int32(2),
        trackQuality = cms.string('any')
    ),
    TrackLabel = cms.InputTag("hiSelectedProtoTracksPreSplitting"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    verbose = cms.untracked.bool(False),
    vertexCollections = cms.VPSet(cms.PSet(
        algorithm = cms.string('AdaptiveVertexFitter'),
        label = cms.string(''),
        maxDistanceToBeam = cms.double(0.1),
        minNdof = cms.double(0.0),
        useBeamConstraint = cms.bool(False)
    ))
)


process.hiPixelClusterVertex = cms.EDProducer("HIPixelClusterVtxProducer",
    maxZ = cms.double(30.05),
    minZ = cms.double(-30.0),
    pixelRecHits = cms.string('siPixelRecHits'),
    zStep = cms.double(0.1)
)


process.hiPixelClusterVertexPreSplitting = cms.EDProducer("HIPixelClusterVtxProducer",
    maxZ = cms.double(30.05),
    minZ = cms.double(-30.0),
    pixelRecHits = cms.string('siPixelRecHitsPreSplitting'),
    zStep = cms.double(0.1)
)


process.hiPixelMedianVertex = cms.EDProducer("HIPixelMedianVtxProducer",
    FitBinsPerCm = cms.int32(500),
    FitMaxZ = cms.double(0.1),
    FitThreshold = cms.int32(5),
    PeakFindBinsPerCm = cms.int32(10),
    PeakFindMaxZ = cms.double(30.0),
    PeakFindThreshold = cms.uint32(100),
    PtMin = cms.double(0.075),
    TrackCollection = cms.InputTag("hiPixel3ProtoTracks")
)


process.hiPixelMedianVertexPreSplitting = cms.EDProducer("HIPixelMedianVtxProducer",
    FitBinsPerCm = cms.int32(500),
    FitMaxZ = cms.double(0.1),
    FitThreshold = cms.int32(5),
    PeakFindBinsPerCm = cms.int32(10),
    PeakFindMaxZ = cms.double(30.0),
    PeakFindThreshold = cms.uint32(100),
    PtMin = cms.double(0.075),
    TrackCollection = cms.InputTag("hiPixel3ProtoTracksPreSplitting")
)


process.hiPixelOnlyStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string(''),
    GBRForestVars = cms.vstring(),
    applyPixelMergingCuts = cms.bool(True),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiConformalPixelTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(25.0),
        chi2n_par = cms.double(0.3),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(True),
        d0_par1 = cms.vdouble(9999.0, 0.0),
        d0_par2 = cms.vdouble(9999.0, 0.0),
        dz_par1 = cms.vdouble(9999.0, 0.0),
        dz_par2 = cms.vdouble(14.0, 0.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100),
        minHitsToBypassChecks = cms.uint32(999),
        minMVA = cms.double(-1),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        nSigmaZ = cms.double(9999.0),
        name = cms.string('hiPixelOnlyTrkLoose'),
        pixel_pTMaxCut = cms.vdouble(10, 5, 25, 2.5),
        pixel_pTMinCut = cms.vdouble(0.0001, 0.0, 9999, 1.0),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(99999.0, 99999.0),
        useMVA = cms.bool(False),
        vertexCut = cms.string(''),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(18.0),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(9999.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(12.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-1),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiPixelOnlyTrkTight'),
            pixel_pTMaxCut = cms.vdouble(4, 2, 18, 2.5),
            pixel_pTMinCut = cms.vdouble(0.0001, 0.0, 9999, 1.0),
            preFilterName = cms.string('hiPixelOnlyTrkLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(False),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(12.0),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(9999.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(10.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-1),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiPixelOnlyTrkHighPurity'),
            pixel_pTMaxCut = cms.vdouble(2.4, 1.6, 12, 2.5),
            pixel_pTMinCut = cms.vdouble(0.0001, 0.0, 9999, 1.0),
            preFilterName = cms.string('hiPixelOnlyTrkTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(False),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(False),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiPixelPairClusters = cms.EDProducer("HITrackClusterRemover",
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    Strip = cms.PSet(
        maxChi2 = cms.double(9.0),
        maxSize = cms.uint32(2)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("hiLowPtTripletStepClusters"),
    overrideTrkQuals = cms.InputTag("hiLowPtTripletStepSelector","hiLowPtTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("hiLowPtTripletStepTracks")
)


process.hiPixelPairGlobalPrimTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('pixelPairStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiPixelPairTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiPixelPairSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("hiPixelPairClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("hiPixelPairClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg')
)


process.hiPixelPairSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(50000000),
        MaxNumberOfPixelClusters = cms.uint32(5000000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("hiPixelPairSeedLayers"),
        maxElement = cms.uint32(5000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("hiSelectedVertex"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            fixedError = cms.double(0.2),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.005),
            precise = cms.bool(True),
            ptMin = cms.double(1.0),
            sigmaZVertex = cms.double(4.0),
            useFakeVertices = cms.bool(False),
            useFixedError = cms.bool(False),
            useFoundVertices = cms.bool(True)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(True),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.hiPixelPairStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string('HIMVASelectorIter6'),
    GBRForestVars = cms.vstring('chi2perdofperlayer', 
        'dxyperdxyerror', 
        'dzperdzerror', 
        'nhits', 
        'nlayers', 
        'eta'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiPixelPairGlobalPrimTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999.0),
        chi2n_par = cms.double(0.3),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(True),
        d0_par1 = cms.vdouble(9999.0, 0.0),
        d0_par2 = cms.vdouble(0.4, 4.0),
        dz_par1 = cms.vdouble(9999.0, 0.0),
        dz_par2 = cms.vdouble(0.4, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(0.2),
        max_z0 = cms.double(100),
        minHitsToBypassChecks = cms.uint32(999),
        minMVA = cms.double(-1),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(9999.0),
        name = cms.string('hiPixelPairStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(99999.0, 99999.0),
        useMVA = cms.bool(False),
        vertexCut = cms.string(''),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.58),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiPixelPairStepTight'),
            preFilterName = cms.string('hiPixelPairStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(0.77),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiPixelPairStep'),
            preFilterName = cms.string('hiPixelPairStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiPixelPairTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hiPixelPairTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("hiPixelPairClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("hiPixelPairSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.hiPixelTrackSeeds = cms.EDProducer("SeedGeneratorFromProtoTracksEDProducer",
    InputCollection = cms.InputTag("hiPixel3PrimTracks"),
    InputVertexCollection = cms.InputTag(""),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1),
        OriginTransverseErrorMultiplier = cms.double(1),
        SeedMomentumForBOFF = cms.double(5),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string(''),
        propagator = cms.string('PropagatorWithMaterial')
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    originHalfLength = cms.double(1000000000),
    originRadius = cms.double(1000000000),
    useEventsWithNoVertex = cms.bool(True),
    usePV = cms.bool(False),
    useProtoTrackKinematics = cms.bool(False)
)


process.hiPrimTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('none'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('CkfTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedSeeds'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("hiPixelTrackSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.hiRegitMuDetachedTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('tight'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag("hiRegitMuPixelLessStepSelector","hiRegitMuPixelLessStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trackClassifier = cms.InputTag(""),
    trajectories = cms.InputTag("hiRegitMuPixelLessStepTracks")
)


process.hiRegitMuDetachedTripletStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hiRegitMuDetachedTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hiRegitMuDetachedTripletStepClusters")
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.hiRegitMuDetachedTripletStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(False)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("hiRegitMuDetachedTripletStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('HIMuonTrackingRegionProducer'),
        MuonSrc = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.3),
            DeltaR = cms.double(2.0),
            DeltaZ = cms.double(2.0),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(True),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(True),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(0.9),
            Rescale_Dz = cms.double(4.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(True),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("hiSelectedVertex")
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.hiRegitMuDetachedTripletStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string('HIMVASelectorIter7'),
    GBRForestVars = cms.vstring('chi2perdofperlayer', 
        'nhits', 
        'nlayers', 
        'eta'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiRegitMuDetachedTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(4.0),
        name = cms.string('hiRegitMuDetachedTripletStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.2),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuDetachedTripletStepTight'),
            preFilterName = cms.string('hiRegitMuDetachedTripletStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.09),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuDetachedTripletStep'),
            preFilterName = cms.string('hiRegitMuDetachedTripletStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiRegitMuDetachedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('hiRegitMuDetachedTripletStepTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('detachedTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("hiRegitMuDetachedTripletStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("hiRegitMuDetachedTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.hiRegitMuDetachedTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('hiRegitMuDetachedTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiRegitMuDetachedTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiRegitMuInitialStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.hiRegitMuInitialStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(False)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
                clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache")
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(1000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("hiRegitMuInitialStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('HIMuonTrackingRegionProducer'),
        MuonSrc = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.3),
            DeltaR = cms.double(1),
            DeltaZ = cms.double(1),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(True),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(True),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(3.0),
            Rescale_Dz = cms.double(4.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(True),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("hiSelectedVertex")
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.hiRegitMuInitialStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string('HIMVASelectorIter4'),
    GBRForestVars = cms.vstring('chi2perdofperlayer', 
        'dxyperdxyerror', 
        'dzperdzerror', 
        'nhits', 
        'nlayers', 
        'eta'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiRegitMuInitialStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(4.0),
        name = cms.string('hiRegitMuInitialStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.38),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuInitialStepTight'),
            preFilterName = cms.string('hiRegitMuInitialStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.77),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuInitialStep'),
            preFilterName = cms.string('hiRegitMuInitialStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiRegitMuInitialStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hiRegitMuInitialStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(1000000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("hiRegitMuInitialStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.hiRegitMuInitialStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('hiRegitMuInitialStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiRegitMuInitialStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiRegitMuMixedTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('tight'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("hiRegitMuPixelPairStepClusters"),
    overrideTrkQuals = cms.InputTag("hiRegitMuPixelPairStepSelector","hiRegitMuPixelPairStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("hiRegitMuPixelPairStepTracks")
)


process.hiRegitMuMixedTripletStepSeedLayersA = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hiRegitMuMixedTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hiRegitMuMixedTripletStepClusters")
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(1),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("hiRegitMuMixedTripletStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg')
)


process.hiRegitMuMixedTripletStepSeedLayersB = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hiRegitMuMixedTripletStepClusters")
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("hiRegitMuMixedTripletStepClusters")
    ),
    layerList = cms.vstring('BPix2+BPix3+TIB1')
)


process.hiRegitMuMixedTripletStepSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("hiRegitMuMixedTripletStepSeedsA"), cms.InputTag("hiRegitMuMixedTripletStepSeedsB"))
)


process.hiRegitMuMixedTripletStepSeedsA = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(False)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("hiRegitMuMixedTripletStepSeedLayersA")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('HIMuonTrackingRegionProducer'),
        MuonSrc = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.3),
            DeltaR = cms.double(0.5),
            DeltaZ = cms.double(0.5),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(True),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(True),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(1.3),
            Rescale_Dz = cms.double(4.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(True),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("hiSelectedVertex")
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('mixedTripletStepClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.hiRegitMuMixedTripletStepSeedsB = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(False)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("hiRegitMuMixedTripletStepSeedLayersB")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('HIMuonTrackingRegionProducer'),
        MuonSrc = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.3),
            DeltaR = cms.double(0.5),
            DeltaZ = cms.double(0.5),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(True),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(True),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(1.5),
            Rescale_Dz = cms.double(4.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(True),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("hiSelectedVertex")
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('mixedTripletStepClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.hiRegitMuMixedTripletStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string('HIMVASelectorIter7'),
    GBRForestVars = cms.vstring('chi2perdofperlayer', 
        'nhits', 
        'nlayers', 
        'eta'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiRegitMuMixedTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(4.0),
        name = cms.string('hiRegitMuMixedTripletStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.2),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuMixedTripletStepTight'),
            preFilterName = cms.string('hiRegitMuMixedTripletStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.09),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuMixedTripletStep'),
            preFilterName = cms.string('hiRegitMuMixedTripletStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiRegitMuMixedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hiRegitMuMixedTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('mixedTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("hiRegitMuMixedTripletStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(1000000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    src = cms.InputTag("hiRegitMuMixedTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.hiRegitMuMixedTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('hiRegitMuMixedTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiRegitMuMixedTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiRegitMuPixelLessStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('tight'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("hiRegitMuMixedTripletStepClusters"),
    overrideTrkQuals = cms.InputTag("hiRegitMuMixedTripletStepSelector","hiRegitMuMixedTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("hiRegitMuMixedTripletStepTracks")
)


process.hiRegitMuPixelLessStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    MTEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        maxRing = cms.int32(3),
        minRing = cms.int32(3),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("hiRegitMuPixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    MTIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("hiRegitMuPixelLessStepClusters")
    ),
    MTID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        maxRing = cms.int32(3),
        minRing = cms.int32(3),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("hiRegitMuPixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("hiRegitMuPixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("hiRegitMuPixelLessStepClusters")
    ),
    TID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("hiRegitMuPixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TIB1+TIB2+MTIB3', 
        'TIB1+TIB2+MTID1_pos', 
        'TIB1+TIB2+MTID1_neg', 
        'TID1_pos+TID2_pos+TID3_pos', 
        'TID1_neg+TID2_neg+TID3_neg', 
        'TID1_pos+TID2_pos+MTID3_pos', 
        'TID1_neg+TID2_neg+MTID3_neg', 
        'TID1_pos+TID2_pos+MTEC1_pos', 
        'TID1_neg+TID2_neg+MTEC1_neg', 
        'TID2_pos+TID3_pos+TEC1_pos', 
        'TID2_neg+TID3_neg+TEC1_neg', 
        'TID2_pos+TID3_pos+MTEC1_pos', 
        'TID2_neg+TID3_neg+MTEC1_neg', 
        'TEC1_pos+TEC2_pos+TEC3_pos', 
        'TEC1_neg+TEC2_neg+TEC3_neg', 
        'TEC1_pos+TEC2_pos+MTEC3_pos', 
        'TEC1_neg+TEC2_neg+MTEC3_neg', 
        'TEC1_pos+TEC2_pos+TEC4_pos', 
        'TEC1_neg+TEC2_neg+TEC4_neg', 
        'TEC1_pos+TEC2_pos+MTEC4_pos', 
        'TEC1_neg+TEC2_neg+MTEC4_neg', 
        'TEC2_pos+TEC3_pos+TEC4_pos', 
        'TEC2_neg+TEC3_neg+TEC4_neg', 
        'TEC2_pos+TEC3_pos+MTEC4_pos', 
        'TEC2_neg+TEC3_neg+MTEC4_neg', 
        'TEC2_pos+TEC3_pos+TEC5_pos', 
        'TEC2_neg+TEC3_neg+TEC5_neg', 
        'TEC2_pos+TEC3_pos+TEC6_pos', 
        'TEC2_neg+TEC3_neg+TEC6_neg', 
        'TEC3_pos+TEC4_pos+TEC5_pos', 
        'TEC3_neg+TEC4_neg+TEC5_neg', 
        'TEC3_pos+TEC4_pos+MTEC5_pos', 
        'TEC3_neg+TEC4_neg+MTEC5_neg', 
        'TEC3_pos+TEC5_pos+TEC6_pos', 
        'TEC3_neg+TEC5_neg+TEC6_neg', 
        'TEC4_pos+TEC5_pos+TEC6_pos', 
        'TEC4_neg+TEC5_neg+TEC6_neg')
)


process.hiRegitMuPixelLessStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(False)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardMultiHitGenerator'),
        GeneratorPSet = cms.PSet(
            ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
            ComponentName = cms.string('MultiHitGeneratorFromChi2'),
            TTRHBuilder = cms.string('WithTrackAngle'),
            chi2VsPtCut = cms.bool(True),
            chi2_cuts = cms.vdouble(3.0, 4.0, 5.0, 5.0),
            debug = cms.bool(False),
            detIdsToDebug = cms.vint32(0, 0, 0),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            extraPhiKDBox = cms.double(0.005),
            extraRKDBox = cms.double(0.2),
            extraZKDBox = cms.double(0.2),
            fnSigmaRZ = cms.double(2.0),
            maxChi2 = cms.double(5.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            pt_interv = cms.vdouble(0.4, 0.7, 1.0, 2.0),
            refitHits = cms.bool(True),
            useFixedPreFiltering = cms.bool(False)
        ),
        SeedingLayers = cms.InputTag("hiRegitMuPixelLessStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('HIMuonTrackingRegionProducer'),
        MuonSrc = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.1),
            DeltaPhi = cms.double(0.2),
            DeltaR = cms.double(0.2),
            DeltaZ = cms.double(0.2),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(True),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(True),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(2.0),
            Rescale_Dz = cms.double(4.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(True),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("hiSelectedVertex")
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('CombinedSeedComparitor'),
        comparitors = cms.VPSet(cms.PSet(
            ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
            ClusterShapeHitFilterName = cms.string('pixelLessStepClusterShapeHitFilter'),
            ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
            FilterAtHelixStage = cms.bool(True),
            FilterPixelHits = cms.bool(False),
            FilterStripHits = cms.bool(True)
        ), 
            cms.PSet(
                ComponentName = cms.string('StripSubClusterShapeSeedFilter'),
                FilterAtHelixStage = cms.bool(False),
                label = cms.untracked.string('Seeds'),
                maxNSat = cms.uint32(3),
                maxTrimmedSizeDiffNeg = cms.double(1.0),
                maxTrimmedSizeDiffPos = cms.double(0.7),
                seedCutMIPs = cms.double(0.35),
                seedCutSN = cms.double(7.0),
                subclusterCutMIPs = cms.double(0.45),
                subclusterCutSN = cms.double(12.0),
                subclusterWindow = cms.double(0.7),
                trimMaxADC = cms.double(30.0),
                trimMaxFracNeigh = cms.double(0.25),
                trimMaxFracTotal = cms.double(0.15)
            )),
        mode = cms.string('and')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.hiRegitMuPixelLessStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string('HIMVASelectorIter7'),
    GBRForestVars = cms.vstring('chi2perdofperlayer', 
        'nhits', 
        'nlayers', 
        'eta'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiRegitMuPixelLessStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(4.0),
        name = cms.string('hiRegitMuPixelLessStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.2),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuPixelLessStepTight'),
            preFilterName = cms.string('hiRegitMuPixelLessStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.09),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuPixelLessStep'),
            preFilterName = cms.string('hiRegitMuPixelLessStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiRegitMuPixelLessStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('hiRegitMuPixelLessStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('pixelLessStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("hiRegitMuPixelLessStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(1000000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    src = cms.InputTag("hiRegitMuPixelLessStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.hiRegitMuPixelLessStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('hiRegitMuPixelLessStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiRegitMuPixelLessStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiRegitMuPixelPairStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('tight'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag("hiRegitMuInitialStepSelector","hiRegitMuInitialStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("hiRegitMuInitialStepTracks")
)


process.hiRegitMuPixelPairStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hiRegitMuPixelPairStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("hiRegitMuPixelPairStepClusters")
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg')
)


process.hiRegitMuPixelPairStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(False)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("hiRegitMuPixelPairStepSeedLayers"),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('HIMuonTrackingRegionProducer'),
        MuonSrc = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.3),
            DeltaR = cms.double(0.01),
            DeltaZ = cms.double(0.09),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(True),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(True),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(1.0),
            Rescale_Dz = cms.double(0.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(True),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("hiSelectedVertex")
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(True),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.hiRegitMuPixelPairStepSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string('HIMVASelectorIter6'),
    GBRForestVars = cms.vstring('chi2perdofperlayer', 
        'dxyperdxyerror', 
        'dzperdzerror', 
        'nhits', 
        'nlayers', 
        'eta'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiRegitMuPixelPairStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(4.0),
        name = cms.string('hiRegitMuPixelPairStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.58),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuPixelPairStepTight'),
            preFilterName = cms.string('hiRegitMuPixelPairStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(0.77),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuPixelPairStep'),
            preFilterName = cms.string('hiRegitMuPixelPairStepTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiRegitMuPixelPairStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('hiRegitMuPixelPairStepTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('pixelPairStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("hiRegitMuPixelPairStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(1000000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("hiRegitMuPixelPairStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.hiRegitMuPixelPairStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('hiRegitMuPixelPairStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    clustersToSkip = cms.InputTag("hiRegitMuPixelPairStepClusters"),
    src = cms.InputTag("hiRegitMuPixelPairStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiRegitMuonSeededSeedsInOut = cms.EDProducer("MuonReSeeder",
    DoPredictionsOnly = cms.bool(False),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RefitDirection = cms.string('alongMomentum'),
    RefitRPCHits = cms.bool(True),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
    cut = cms.string('pt > 2'),
    debug = cms.untracked.bool(False),
    insideOut = cms.bool(True),
    layersToKeep = cms.int32(5),
    src = cms.InputTag("hiEarlyMuons")
)


process.hiRegitMuonSeededSeedsOutIn = cms.EDProducer("OutsideInMuonSeeder",
    cut = cms.string('pt > 10 && outerTrack.hitPattern.muonStationsWithValidHits >= 2'),
    debug = cms.untracked.bool(False),
    errorRescaleFactor = cms.double(2.0),
    fromVertex = cms.bool(True),
    hitCollector = cms.string('hitCollectorForOutInMuonSeeds'),
    hitsToTry = cms.int32(3),
    layersToTry = cms.int32(3),
    maxEtaForTOB = cms.double(1.8),
    minEtaForTEC = cms.double(0.7),
    muonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    src = cms.InputTag("hiEarlyMuons"),
    trackerPropagator = cms.string('PropagatorWithMaterial')
)


process.hiRegitMuonSeededTrackCandidatesInOut = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('none'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryBuilderForInOut')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("hiRegitMuonSeededSeedsInOut"),
    useHitsSplitting = cms.bool(True)
)


process.hiRegitMuonSeededTrackCandidatesOutIn = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryBuilderForOutIn')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(False),
    src = cms.InputTag("hiRegitMuonSeededSeedsOutIn"),
    useHitsSplitting = cms.bool(True)
)


process.hiRegitMuonSeededTracksInOut = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('hiRegitMuMuonSeededStepInOut'),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiRegitMuonSeededTrackCandidatesInOut"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiRegitMuonSeededTracksInOutSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string('HIMVASelectorIter7'),
    GBRForestVars = cms.vstring('chi2perdofperlayer', 
        'nhits', 
        'nlayers', 
        'eta'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiRegitMuonSeededTracksInOut"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(4.0),
        name = cms.string('hiRegitMuonSeededTracksInOutLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.2),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuonSeededTracksInOutTight'),
            preFilterName = cms.string('hiRegitMuonSeededTracksInOutLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.09),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuonSeededTracksInOutHighPurity'),
            preFilterName = cms.string('hiRegitMuonSeededTracksInOutTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiRegitMuonSeededTracksOutIn = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('hiRegitMuMuonSeededStepOutIn'),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("hiRegitMuonSeededTrackCandidatesOutIn"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.hiRegitMuonSeededTracksOutInSelector = cms.EDProducer("HIMultiTrackSelector",
    GBRForestLabel = cms.string('HIMVASelectorIter7'),
    GBRForestVars = cms.vstring('chi2perdofperlayer', 
        'nhits', 
        'nlayers', 
        'eta'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("hiRegitMuonSeededTracksOutIn"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(8),
        nSigmaZ = cms.double(4.0),
        name = cms.string('hiRegitMuonSeededTracksOutInLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.25),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(5.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(5.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.075),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.2),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuonSeededTracksOutInTight'),
            preFilterName = cms.string('hiRegitMuonSeededTracksOutInLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(0.15),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(True),
            d0_par1 = cms.vdouble(9999.0, 0.0),
            d0_par2 = cms.vdouble(3.0, 0.0),
            dz_par1 = cms.vdouble(9999.0, 0.0),
            dz_par2 = cms.vdouble(3.0, 0.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(0.05),
            max_z0 = cms.double(100),
            minHitsToBypassChecks = cms.uint32(999),
            minMVA = cms.double(-0.09),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(8),
            nSigmaZ = cms.double(9999.0),
            name = cms.string('hiRegitMuonSeededTracksOutInHighPurity'),
            preFilterName = cms.string('hiRegitMuonSeededTracksOutInTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(99999.0, 99999.0),
            useMVA = cms.bool(True),
            vertexCut = cms.string(''),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(True),
    vertices = cms.InputTag("hiSelectedVertex")
)


process.hiSelectedTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("hiGlobalPrimTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("hiInitialStepSelector","hiInitialStep")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1)
    ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(2, 3)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(4, 5)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(2, 3, 4, 5)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(0, 1, 2, 3, 4, 
                5)
        )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.hiSelectedVertex = cms.EDProducer("HIBestVertexProducer",
    adaptiveVertexCollection = cms.InputTag("hiBestAdaptiveVertex"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    medianVertexCollection = cms.InputTag("hiPixelMedianVertex")
)


process.hiSelectedVertexPreSplitting = cms.EDProducer("HIBestVertexProducer",
    adaptiveVertexCollection = cms.InputTag("hiBestAdaptiveVertexPreSplitting"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    medianVertexCollection = cms.InputTag("hiPixelMedianVertexPreSplitting")
)


process.hiSpikeCleanedSC = cms.EDProducer("HiSpikeCleaner",
    TimingCut = cms.untracked.double(4.0),
    etCut = cms.double(10),
    originalSuperClusterProducer = cms.InputTag("correctedIslandBarrelSuperClusters"),
    outputColl = cms.string(''),
    recHitProducerBarrel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    recHitProducerEndcap = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    swissCutThr = cms.untracked.double(0.95)
)


process.hltTrackRefitterForSiStripMonitorTrack = cms.EDProducer("TrackRefitter",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    TTRHBuilder = cms.string('hltESPTTRHBWithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    beamSpot = cms.InputTag("hltOnlineBeamSpot"),
    constraint = cms.string(''),
    src = cms.InputTag("hltIter2Merged"),
    srcConstr = cms.InputTag(""),
    useHitsSplitting = cms.bool(False)
)


process.hoCalibCosmicsProducer = cms.EDProducer("AlCaHOCalibProducer",
    PedestalFile = cms.untracked.string('peds_mtcc2_4333.log'),
    RootFileName = cms.untracked.string('test.root'),
    debug = cms.untracked.bool(False),
    digiInput = cms.untracked.bool(False),
    firstTS = cms.untracked.int32(5),
    hbheInput = cms.InputTag("hbhereco"),
    hbinfo = cms.untracked.bool(False),
    hltInput = cms.InputTag("TriggerResults"),
    hoInput = cms.InputTag("horeco"),
    hotime = cms.untracked.bool(False),
    l1Input = cms.InputTag("l1extraParticleMap"),
    lastTS = cms.untracked.int32(8),
    m_scale = cms.untracked.double(4.0),
    muons = cms.untracked.InputTag("cosmicMuons"),
    sigma = cms.untracked.double(1.0),
    towerInput = cms.InputTag("towerMaker")
)


process.hoCalibProducer = cms.EDProducer("AlCaHOCalibProducer",
    PedestalFile = cms.untracked.string('peds_mtcc2_4333.log'),
    RootFileName = cms.untracked.string('test.root'),
    debug = cms.untracked.bool(False),
    digiInput = cms.untracked.bool(False),
    firstTS = cms.untracked.int32(5),
    hbheInput = cms.InputTag("hbhereco"),
    hbinfo = cms.untracked.bool(False),
    hltInput = cms.InputTag("TriggerResults"),
    hoInput = cms.InputTag("horeco"),
    hotime = cms.untracked.bool(False),
    l1Input = cms.InputTag("l1extraParticleMap"),
    lastTS = cms.untracked.int32(8),
    m_scale = cms.untracked.double(4.0),
    muons = cms.untracked.InputTag("standAloneMuons"),
    sigma = cms.untracked.double(1.0),
    towerInput = cms.InputTag("towerMaker")
)


process.horeco = cms.EDProducer("HcalHitReconstructor",
    Subdetector = cms.string('HO'),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    dataOOTCorrectionCategory = cms.string('Data'),
    dataOOTCorrectionName = cms.string(''),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    firstAuxTS = cms.int32(4),
    firstSample = cms.int32(4),
    mcOOTCorrectionCategory = cms.string('MC'),
    mcOOTCorrectionName = cms.string(''),
    puCorrMethod = cms.int32(0),
    recoParamsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(4),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNegativeFlags = cms.bool(False),
    setNoiseFlags = cms.bool(True),
    setPulseShapeFlags = cms.bool(False),
    setSaturationFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False),
    tsFromDB = cms.bool(True),
    useLeakCorrection = cms.bool(False)
)


process.horecoMB = cms.EDProducer("HcalSimpleReconstructor",
    Subdetector = cms.string('HO'),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(False),
    firstSample = cms.int32(4),
    samplesToAdd = cms.int32(4),
    tsFromDB = cms.bool(True)
)


process.horecoNoise = cms.EDProducer("HcalSimpleReconstructor",
    Subdetector = cms.string('HO'),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigiAlCaMB"),
    dropZSmarkedPassed = cms.bool(False),
    firstSample = cms.int32(0),
    samplesToAdd = cms.int32(4),
    tsFromDB = cms.bool(False)
)


process.hybridSuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollection = cms.string('hybridBarrelBasicClusters'),
    bcCollectionUncleanOnly = cms.string('uncleanOnlyHybridBarrelBasicClusters'),
    cleanBcCollection = cms.InputTag("cleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    cleanScCollection = cms.InputTag("cleanedHybridSuperClusters"),
    scCollection = cms.string(''),
    scCollectionUncleanOnly = cms.string('uncleanOnlyHybridSuperClusters'),
    uncleanBcCollection = cms.InputTag("uncleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    uncleanScCollection = cms.InputTag("uncleanedHybridSuperClusters")
)


process.ic5CaloJetsL1FastL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ic5CaloL1FastL2L3'),
    src = cms.InputTag("iterativeCone5CaloJets")
)


process.ic5CaloJetsL1FastL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ic5CaloL1FastL2L3Residual'),
    src = cms.InputTag("iterativeCone5CaloJets")
)


process.ic5CaloJetsL1L2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ic5CaloL1L2L3'),
    src = cms.InputTag("iterativeCone5CaloJets")
)


process.ic5CaloJetsL1L2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ic5CaloL1L2L3Residual'),
    src = cms.InputTag("iterativeCone5CaloJets")
)


process.ic5CaloJetsL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ic5CaloL2L3'),
    src = cms.InputTag("iterativeCone5CaloJets")
)


process.ic5CaloJetsL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('ic5CaloL2L3Residual'),
    src = cms.InputTag("iterativeCone5CaloJets")
)


process.ic5PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ic5PFL1FastL2L3'),
    src = cms.InputTag("iterativeCone5PFJets")
)


process.ic5PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ic5PFL1FastL2L3Residual'),
    src = cms.InputTag("iterativeCone5PFJets")
)


process.ic5PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ic5PFL1L2L3'),
    src = cms.InputTag("iterativeCone5PFJets")
)


process.ic5PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ic5PFL1L2L3Residual'),
    src = cms.InputTag("iterativeCone5PFJets")
)


process.ic5PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ic5PFL2L3'),
    src = cms.InputTag("iterativeCone5PFJets")
)


process.ic5PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('ic5PFL2L3Residual'),
    src = cms.InputTag("iterativeCone5PFJets")
)


process.initialStep = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("initialStepTracks"), cms.InputTag("initialStepTracks"), cms.InputTag("initialStepTracks"), cms.InputTag("initialStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1, 1, 1),
    indivShareFrac = cms.vdouble(1.0, 1.0, 1.0, 1.0),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("initialStepSelector","initialStepV1"), cms.InputTag("initialStepSelector","initialStepV4"), cms.InputTag("initialStepSelector","initialStepV2"), cms.InputTag("initialStepSelector","initialStepV3")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1, 2, 3)
    )),
    shareFrac = cms.double(0.99),
    writeOnlyTrkQuals = cms.bool(True)
)


process.initialStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg')
)


process.initialStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletHLTGenerator'),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
                clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache")
            ),
            extraHitRPhitolerance = cms.double(0.032),
            extraHitRZtolerance = cms.double(0.037),
            maxElement = cms.uint32(1000000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("initialStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.02),
            precise = cms.bool(True),
            ptMin = cms.double(0.6)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.initialStepSelector = cms.EDProducer("MultiTrackSelector",
    GBRForestLabel = cms.string('MVASelectorIter0_13TeV'),
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("initialStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        GBRForestLabel = cms.string('MVASelectorIter0_13TeV'),
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minMVA = cms.double(-0.9),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        mvaType = cms.string('Prompt'),
        nSigmaZ = cms.double(4.0),
        name = cms.string('initialStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        useMVA = cms.bool(True),
        useMVAonly = cms.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter0_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStepTight'),
            preFilterName = cms.string('initialStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter0_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.6),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.55, 4.0),
            d0_par2 = cms.vdouble(0.55, 4.0),
            dz_par1 = cms.vdouble(0.65, 4.0),
            dz_par2 = cms.vdouble(0.45, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(-0.7),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStepV1'),
            preFilterName = cms.string('initialStepLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter1_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.55, 4.0),
            d0_par2 = cms.vdouble(0.55, 4.0),
            dz_par1 = cms.vdouble(0.65, 4.0),
            dz_par2 = cms.vdouble(0.45, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(-0.1),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStepV4'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter0_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 3.0),
            d0_par2 = cms.vdouble(1.1, 3.0),
            dz_par1 = cms.vdouble(1.0, 3.0),
            dz_par2 = cms.vdouble(1.1, 3.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.4),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStepV2'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter3_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 4.0),
            d0_par2 = cms.vdouble(1.0, 4.0),
            dz_par1 = cms.vdouble(1.0, 4.0),
            dz_par2 = cms.vdouble(1.0, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('initialStepV3'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.initialStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("initialStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.initialStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('initialStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("initialStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.islandBasicClusters = cms.EDProducer("IslandClusterProducer",
    IslandBarrelSeedThr = cms.double(0.5),
    IslandEndcapSeedThr = cms.double(0.18),
    VerbosityLevel = cms.string('ERROR'),
    barrelClusterCollection = cms.string('islandBarrelBasicClusters'),
    barrelHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    barrelShapeAssociation = cms.string('islandBarrelShapeAssoc'),
    clustershapecollectionEB = cms.string('islandBarrelShape'),
    clustershapecollectionEE = cms.string('islandEndcapShape'),
    endcapClusterCollection = cms.string('islandEndcapBasicClusters'),
    endcapHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    endcapShapeAssociation = cms.string('islandEndcapShapeAssoc'),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    )
)


process.islandSuperClusters = cms.EDProducer("HiSuperClusterProducer",
    VerbosityLevel = cms.string('ERROR'),
    barrelBCEnergyThreshold = cms.double(0),
    barrelClusterCollection = cms.string('islandBarrelBasicClusters'),
    barrelClusterProducer = cms.string('islandBasicClusters'),
    barrelEtaSearchRoad = cms.double(0.07),
    barrelPhiSearchRoad = cms.double(0.8),
    barrelSuperclusterCollection = cms.string('islandBarrelSuperClusters'),
    doBarrel = cms.bool(True),
    doEndcaps = cms.bool(True),
    endcapBCEnergyThreshold = cms.double(0),
    endcapClusterCollection = cms.string('islandEndcapBasicClusters'),
    endcapClusterProducer = cms.string('islandBasicClusters'),
    endcapEtaSearchRoad = cms.double(0.14),
    endcapPhiSearchRoad = cms.double(0.6),
    endcapSuperclusterCollection = cms.string('islandEndcapSuperClusters'),
    seedTransverseEnergyThreshold = cms.double(1.0)
)


process.isoDeposits = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag(""),
    trackType = cms.string('candidate')
)


process.iterativeConePu5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('IterativeCone'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.5),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.jetCoreClusterSplitter = cms.EDProducer("JetCoreClusterSplitter",
    centralMIPCharge = cms.double(26000),
    chargeFractionMin = cms.double(2.0),
    chargePerUnit = cms.double(2000),
    cores = cms.InputTag("ak5CaloJets"),
    deltaRmax = cms.double(0.05),
    forceXError = cms.double(100),
    forceYError = cms.double(150),
    fractionalWidth = cms.double(0.4),
    pixelCPE = cms.string('PixelCPEGeneric'),
    pixelClusters = cms.InputTag("siPixelCluster"),
    ptMin = cms.double(200),
    verbose = cms.bool(False),
    vertices = cms.InputTag("offlinePrimaryVertices")
)


process.kt4CaloJetsL1FastL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt4CaloL1FastL2L3'),
    src = cms.InputTag("kt4CaloJets")
)


process.kt4CaloJetsL1FastL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt4CaloL1FastL2L3Residual'),
    src = cms.InputTag("kt4CaloJets")
)


process.kt4CaloJetsL1L2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt4CaloL1L2L3'),
    src = cms.InputTag("kt4CaloJets")
)


process.kt4CaloJetsL1L2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt4CaloL1L2L3Residual'),
    src = cms.InputTag("kt4CaloJets")
)


process.kt4CaloJetsL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt4CaloL2L3'),
    src = cms.InputTag("kt4CaloJets")
)


process.kt4CaloJetsL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt4CaloL2L3Residual'),
    src = cms.InputTag("kt4CaloJets")
)


process.kt4PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt4PFL1FastL2L3'),
    src = cms.InputTag("kt4PFJets")
)


process.kt4PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt4PFL1FastL2L3Residual'),
    src = cms.InputTag("kt4PFJets")
)


process.kt4PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt4PFL1L2L3'),
    src = cms.InputTag("kt4PFJets")
)


process.kt4PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt4PFL1L2L3Residual'),
    src = cms.InputTag("kt4PFJets")
)


process.kt4PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt4PFL2L3'),
    src = cms.InputTag("kt4PFJets")
)


process.kt4PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt4PFL2L3Residual'),
    src = cms.InputTag("kt4PFJets")
)


process.kt6CaloJetsL1FastL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt6CaloL1FastL2L3'),
    src = cms.InputTag("kt6CaloJets")
)


process.kt6CaloJetsL1FastL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt6CaloL1FastL2L3Residual'),
    src = cms.InputTag("kt6CaloJets")
)


process.kt6CaloJetsL1L2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt6CaloL1L2L3'),
    src = cms.InputTag("kt6CaloJets")
)


process.kt6CaloJetsL1L2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt6CaloL1L2L3Residual'),
    src = cms.InputTag("kt6CaloJets")
)


process.kt6CaloJetsL2L3 = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt6CaloL2L3'),
    src = cms.InputTag("kt6CaloJets")
)


process.kt6CaloJetsL2L3Residual = cms.EDProducer("CaloJetCorrectionProducer",
    correctors = cms.vstring('kt6CaloL2L3Residual'),
    src = cms.InputTag("kt6CaloJets")
)


process.kt6PFJetsL1FastL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt6PFL1FastL2L3'),
    src = cms.InputTag("kt6PFJets")
)


process.kt6PFJetsL1FastL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt6PFL1FastL2L3Residual'),
    src = cms.InputTag("kt6PFJets")
)


process.kt6PFJetsL1L2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt6PFL1L2L3'),
    src = cms.InputTag("kt6PFJets")
)


process.kt6PFJetsL1L2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt6PFL1L2L3Residual'),
    src = cms.InputTag("kt6PFJets")
)


process.kt6PFJetsL2L3 = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt6PFL2L3'),
    src = cms.InputTag("kt6PFJets")
)


process.kt6PFJetsL2L3Residual = cms.EDProducer("PFJetCorrectionProducer",
    correctors = cms.vstring('kt6PFL2L3Residual'),
    src = cms.InputTag("kt6PFJets")
)


process.ktPu4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('Kt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.4),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.ktPu6CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetAlgorithm = cms.string('Kt'),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    rParam = cms.double(0.6),
    radiusPU = cms.double(0.7),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)


process.l1GtRecord = cms.EDProducer("L1GlobalTriggerRecordProducer",
    L1GtReadoutRecordTag = cms.InputTag("gtDigis")
)


process.l1GtTriggerMenuLite = cms.EDProducer("L1GtTriggerMenuLiteProducer")


process.l1L1GtObjectMap = cms.EDProducer("ConvertObjectMapRecord",
    L1GtObjectMapTag = cms.InputTag("hltL1GtObjectMap")
)


process.l1compare = cms.EDProducer("L1Comparator",
    COMPARE_COLLS = cms.untracked.vuint32(0, 0, 1, 1, 0, 
        1, 0, 0, 1, 0, 
        1, 0),
    DTFsourceData = cms.InputTag("dttfDigis"),
    DTFsourceEmul = cms.InputTag("valDttfDigis"),
    DTPsourceData = cms.InputTag("dttfDigis"),
    DTPsourceEmul = cms.InputTag("valDtTriggerPrimitiveDigis"),
    DumpFile = cms.untracked.string('dump.txt'),
    DumpMode = cms.untracked.int32(0),
    FEDsourceData = cms.untracked.InputTag("rawDataRepacker"),
    FEDsourceEmul = cms.untracked.InputTag("rawDataRepacker"),
    GCTsourceData = cms.InputTag("gctDigis"),
    GCTsourceEmul = cms.InputTag("valGctDigis"),
    GMTsourceData = cms.InputTag("gtDigis"),
    GMTsourceEmul = cms.InputTag("valGmtDigis"),
    RCTsourceData = cms.InputTag("gctDigis"),
    RCTsourceEmul = cms.InputTag("valRctDigis"),
    RPCsourceData = cms.InputTag("gtDigis"),
    RPCsourceEmul = cms.InputTag("valRpcTriggerDigis"),
    VerboseFlag = cms.untracked.int32(0),
    stage1_layer2_ = cms.bool(False)
)


process.l1compareforstage1 = cms.EDProducer("L1Comparator",
    COMPARE_COLLS = cms.untracked.vuint32(0, 0, 1, 1, 0, 
        1, 0, 0, 1, 0, 
        1, 0),
    DTFsourceData = cms.InputTag("dttfDigis"),
    DTFsourceEmul = cms.InputTag("valDttfDigis"),
    DTPsourceData = cms.InputTag("dttfDigis"),
    DTPsourceEmul = cms.InputTag("valDtTriggerPrimitiveDigis"),
    DumpFile = cms.untracked.string('dump.txt'),
    DumpMode = cms.untracked.int32(0),
    FEDsourceData = cms.untracked.InputTag("rawDataCollector"),
    FEDsourceEmul = cms.untracked.InputTag("rawDataCollector"),
    GCTsourceData = cms.InputTag("caloStage1LegacyFormatDigis"),
    GCTsourceEmul = cms.InputTag("valCaloStage1LegacyFormatDigis"),
    GMTsourceData = cms.InputTag("gtDigis"),
    GMTsourceEmul = cms.InputTag("valGmtDigis"),
    RCTsourceData = cms.InputTag("gctDigis"),
    RCTsourceEmul = cms.InputTag("valRctDigis"),
    RPCsourceData = cms.InputTag("gtDigis"),
    RPCsourceEmul = cms.InputTag("valRpcTriggerDigis"),
    VerboseFlag = cms.untracked.int32(0),
    stage1_layer2_ = cms.bool(True)
)


process.l1extraParticles = cms.EDProducer("L1ExtraParticlesProd",
    centralBxOnly = cms.bool(False),
    centralJetSource = cms.InputTag("caloStage1LegacyFormatDigis","cenJets"),
    etHadSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    etMissSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    etTotalSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    forwardJetSource = cms.InputTag("caloStage1LegacyFormatDigis","forJets"),
    hfRingBitCountsSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    hfRingEtSumsSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    htMissSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    ignoreHtMiss = cms.bool(False),
    isoTauJetSource = cms.InputTag("caloStage1LegacyFormatDigis","isoTauJets"),
    isolatedEmSource = cms.InputTag("caloStage1LegacyFormatDigis","isoEm"),
    muonSource = cms.InputTag("gtDigis"),
    nonIsolatedEmSource = cms.InputTag("caloStage1LegacyFormatDigis","nonIsoEm"),
    produceCaloParticles = cms.bool(True),
    produceMuonParticles = cms.bool(True),
    tauJetSource = cms.InputTag("caloStage1LegacyFormatDigis","tauJets")
)


process.lowPtTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("lowPtTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        GBRForestLabel = cms.string('MVASelectorIter1_13TeV'),
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(9999),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minMVA = cms.double(-0.6),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        mvaType = cms.string('Prompt'),
        nSigmaZ = cms.double(4.0),
        name = cms.string('lowPtTripletStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        useMVA = cms.bool(True),
        useMVAonly = cms.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter1_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('lowPtTripletStepTight'),
            preFilterName = cms.string('lowPtTripletStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter1_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.55, 4.0),
            d0_par2 = cms.vdouble(0.55, 4.0),
            dz_par1 = cms.vdouble(0.65, 4.0),
            dz_par2 = cms.vdouble(0.45, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(-0.1),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('lowPtTripletStep'),
            preFilterName = cms.string('lowPtTripletStepLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.lumiProducer = cms.EDProducer("LumiProducer",
    connect = cms.string('frontier://LumiProd/CMS_LUMI_PROD'),
    lumiversion = cms.untracked.string(''),
    ncacheEntries = cms.untracked.uint32(5)
)


process.mergedDuplicateDisplacedTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("duplicateDisplacedTrackCandidates","candidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.mergedDuplicateTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('undefAlgorithm'),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("duplicateTrackCandidates","candidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.mergedStandAloneMuonSeeds = cms.EDProducer("MuonSeedMerger",
    SeedCollections = cms.VInputTag(cms.InputTag("ancientMuonSeed"), cms.InputTag("MuonSeed"))
)


process.mergedSuperClusters = cms.EDProducer("SuperClusterMerger",
    src = cms.VInputTag(cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"), cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"))
)


process.mixedTripletStep = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("mixedTripletStepTracks"), cms.InputTag("mixedTripletStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1),
    indivShareFrac = cms.vdouble(0.11, 0.11),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("mixedTripletStepSelector","mixedTripletStepVtx"), cms.InputTag("mixedTripletStepSelector","mixedTripletStepTrk")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    shareFrac = cms.double(0.11),
    writeOnlyTrkQuals = cms.bool(True)
)


process.mixedTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("chargeCut2069Clusters"),
    overrideTrkQuals = cms.InputTag("pixelPairStepSelector","pixelPairStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("pixelPairStepTracks")
)


process.mixedTripletStepSeedLayersA = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(1),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg')
)


process.mixedTripletStepSeedLayersB = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("mixedTripletStepClusters")
    ),
    layerList = cms.vstring('BPix2+BPix3+TIB1')
)


process.mixedTripletStepSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("mixedTripletStepSeedsA"), cms.InputTag("mixedTripletStepSeedsB"))
)


process.mixedTripletStepSeedsA = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("mixedTripletStepSeedLayersA")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(15.0),
            originRadius = cms.double(1.5),
            precise = cms.bool(True),
            ptMin = cms.double(0.4)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('mixedTripletStepClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.mixedTripletStepSeedsB = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            useMultScattering = cms.bool(True)
        ),
        SeedingLayers = cms.InputTag("mixedTripletStepSeedLayersB")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(10.0),
            originRadius = cms.double(1.5),
            precise = cms.bool(True),
            ptMin = cms.double(0.6)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('mixedTripletStepClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(False),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.mixedTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("mixedTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        GBRForestLabel = cms.string('MVASelectorIter0_13TeV'),
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(9999),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(1.2, 3.0),
        d0_par2 = cms.vdouble(1.3, 3.0),
        dz_par1 = cms.vdouble(1.2, 3.0),
        dz_par2 = cms.vdouble(1.3, 3.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minMVA = cms.double(-0.2),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        mvaType = cms.string('Prompt'),
        nSigmaZ = cms.double(4.0),
        name = cms.string('mixedTripletStepVtxLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.001),
        useMVA = cms.bool(True),
        useMVAonly = cms.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter4_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 4.0),
            d0_par2 = cms.vdouble(1.1, 4.0),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(-0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepTrkLoose'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('loose'),
            res_par = cms.vdouble(0.003, 0.001),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter4_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.6),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.1, 3.0),
            d0_par2 = cms.vdouble(1.2, 3.0),
            dz_par1 = cms.vdouble(1.1, 3.0),
            dz_par2 = cms.vdouble(1.2, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepVtxTight'),
            preFilterName = cms.string('mixedTripletStepVtxLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter4_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 4.0),
            d0_par2 = cms.vdouble(1.0, 4.0),
            dz_par1 = cms.vdouble(1.0, 4.0),
            dz_par2 = cms.vdouble(1.0, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(4),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepTrkTight'),
            preFilterName = cms.string('mixedTripletStepTrkLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter0_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 3.0),
            d0_par2 = cms.vdouble(1.1, 3.0),
            dz_par1 = cms.vdouble(1.0, 3.0),
            dz_par2 = cms.vdouble(1.1, 3.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(-0.2),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepVtx'),
            preFilterName = cms.string('mixedTripletStepVtxLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter4_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.8, 4.0),
            d0_par2 = cms.vdouble(0.8, 4.0),
            dz_par1 = cms.vdouble(0.8, 4.0),
            dz_par2 = cms.vdouble(0.8, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.5),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            nSigmaZ = cms.double(4.0),
            name = cms.string('mixedTripletStepTrk'),
            preFilterName = cms.string('mixedTripletStepTrkLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.mixedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('mixedTripletStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('mixedTripletStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("mixedTripletStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    src = cms.InputTag("mixedTripletStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.mixedTripletStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('mixedTripletStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("mixedTripletStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.muIsoDepositCalByAssociatorHits = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.025),
        Threshold_H = cms.double(0.1),
        Threshold_HO = cms.double(0.1),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(False),
            useEcal = cms.bool(True),
            useHO = cms.bool(True),
            useHcal = cms.bool(True),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(True)
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        inputMuonCollection = cms.InputTag("muons1stStep")
    )
)


process.muIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    inputTags = cms.VInputTag(cms.InputTag("hiMuons1stStep","ecal"), cms.InputTag("hiMuons1stStep","hcal"), cms.InputTag("hiMuons1stStep","ho"))
)


process.muIsoDepositJets = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("hiMuons1stStep","jets"))
)


process.muIsoDepositTk = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("hiMuons1stStep","tracker"))
)


process.muParamGlobalIsoDepositCalByAssociatorHits = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.025),
        Threshold_H = cms.double(0.1),
        Threshold_HO = cms.double(0.1),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(False),
            useEcal = cms.bool(True),
            useHO = cms.bool(True),
            useHcal = cms.bool(True),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(True)
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositCalEcal = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        ComponentName = cms.string('CaloExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Vertex_Constraint_XY = cms.bool(False),
        Vertex_Constraint_Z = cms.bool(False),
        Weight_E = cms.double(1.0),
        Weight_H = cms.double(0.0)
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositCalHcal = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        ComponentName = cms.string('CaloExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Vertex_Constraint_XY = cms.bool(False),
        Vertex_Constraint_Z = cms.bool(False),
        Weight_E = cms.double(0.0),
        Weight_H = cms.double(1.0)
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositCtfTk = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks")
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('bestTrkSta'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositGsTk = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks")
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositJets = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('bestTrkSta'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muParamGlobalIsoDepositTk = cms.EDProducer("MuIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        InputType = cms.string('MuonCollection'),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
    )
)


process.muidAllArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('AllArbitrated')
)


process.muidGMStaChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMStaChiCompatibility')
)


process.muidGMTkChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMTkChiCompatibility')
)


process.muidGMTkKinkTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMTkKinkTight')
)


process.muidGlobalMuonPromptTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GlobalMuonPromptTight')
)


process.muidRPCMuLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('RPCMuLoose')
)


process.muidTM2DCompatibilityLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TM2DCompatibilityLoose')
)


process.muidTM2DCompatibilityTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TM2DCompatibilityTight')
)


process.muidTMLastStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationAngLoose')
)


process.muidTMLastStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationAngTight')
)


process.muidTMLastStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationLoose')
)


process.muidTMLastStationOptimizedLowPtLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationOptimizedLowPtLoose')
)


process.muidTMLastStationOptimizedLowPtTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationOptimizedLowPtTight')
)


process.muidTMLastStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationTight')
)


process.muidTMOneStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationAngLoose')
)


process.muidTMOneStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationAngTight')
)


process.muidTMOneStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationLoose')
)


process.muidTMOneStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationTight')
)


process.muidTrackerMuonArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TrackerMuonArbitrated')
)


process.multi5x5BasicClustersCleaned = cms.EDProducer("Multi5x5ClusterProducer",
    IslandBarrelSeedThr = cms.double(0.5),
    IslandEndcapSeedThr = cms.double(0.18),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    barrelHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    doBarrel = cms.bool(False),
    doEndcap = cms.bool(True),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    endcapHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    reassignSeedCrysToClusterItSeeds = cms.bool(True)
)


process.multi5x5BasicClustersUncleaned = cms.EDProducer("Multi5x5ClusterProducer",
    IslandBarrelSeedThr = cms.double(0.5),
    IslandEndcapSeedThr = cms.double(0.18),
    RecHitFlagToBeExcluded = cms.vstring(),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    barrelHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    doBarrel = cms.bool(False),
    doEndcap = cms.bool(True),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    endcapHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    reassignSeedCrysToClusterItSeeds = cms.bool(True)
)


process.multi5x5PreshowerClusterShape = cms.EDProducer("PreshowerClusterShapeProducer",
    PreshowerClusterShapeCollectionX = cms.string('multi5x5PreshowerXClustersShape'),
    PreshowerClusterShapeCollectionY = cms.string('multi5x5PreshowerYClustersShape'),
    debugLevel = cms.string('INFO'),
    endcapSClusterProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    preshPi0Nstrip = cms.int32(5),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    preshStripEnergyCut = cms.double(0.0)
)


process.multi5x5SuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollection = cms.string('multi5x5EndcapBasicClusters'),
    bcCollectionUncleanOnly = cms.string('uncleanOnlyMulti5x5EndcapBasicClusters'),
    cleanBcCollection = cms.InputTag("multi5x5BasicClustersCleaned","multi5x5EndcapBasicClusters"),
    cleanScCollection = cms.InputTag("multi5x5SuperClustersCleaned","multi5x5EndcapSuperClusters"),
    scCollection = cms.string('multi5x5EndcapSuperClusters'),
    scCollectionUncleanOnly = cms.string('uncleanOnlyMulti5x5EndcapSuperClusters'),
    uncleanBcCollection = cms.InputTag("multi5x5BasicClustersUncleaned","multi5x5EndcapBasicClusters"),
    uncleanScCollection = cms.InputTag("multi5x5SuperClustersUncleaned","multi5x5EndcapSuperClusters")
)


process.multi5x5SuperClustersCleaned = cms.EDProducer("Multi5x5SuperClusterProducer",
    barrelClusterTag = cms.InputTag("multi5x5BasicClusters","multi5x5BarrelBasicClustersCleaned"),
    barrelEtaSearchRoad = cms.double(0.06),
    barrelPhiSearchRoad = cms.double(0.8),
    barrelSuperclusterCollection = cms.string('multi5x5BarrelSuperClusters'),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryMin = cms.int32(2),
            cryVec = cms.vint32(16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3),
            etVec = cms.vdouble(5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0)
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            b = cms.double(108.8),
            c = cms.double(0.1201)
        )
    ),
    doBarrel = cms.bool(False),
    doEndcaps = cms.bool(True),
    dynamicPhiRoad = cms.bool(False),
    endcapClusterTag = cms.InputTag("multi5x5BasicClustersCleaned","multi5x5EndcapBasicClusters"),
    endcapEtaSearchRoad = cms.double(0.14),
    endcapPhiSearchRoad = cms.double(0.6),
    endcapSuperclusterCollection = cms.string('multi5x5EndcapSuperClusters'),
    seedTransverseEnergyThreshold = cms.double(1.0)
)


process.multi5x5SuperClustersUncleaned = cms.EDProducer("Multi5x5SuperClusterProducer",
    barrelClusterTag = cms.InputTag("multi5x5BasicClusters","multi5x5BarrelBasicClustersCleaned"),
    barrelEtaSearchRoad = cms.double(0.06),
    barrelPhiSearchRoad = cms.double(0.8),
    barrelSuperclusterCollection = cms.string('multi5x5BarrelSuperClusters'),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryMin = cms.int32(2),
            cryVec = cms.vint32(16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3),
            etVec = cms.vdouble(5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0)
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            b = cms.double(108.8),
            c = cms.double(0.1201)
        )
    ),
    doBarrel = cms.bool(False),
    doEndcaps = cms.bool(True),
    dynamicPhiRoad = cms.bool(False),
    endcapClusterProducer = cms.string('multi5x5BasicClustersUncleaned'),
    endcapClusterTag = cms.InputTag("multi5x5BasicClustersCleaned","multi5x5EndcapBasicClusters"),
    endcapEtaSearchRoad = cms.double(0.14),
    endcapPhiSearchRoad = cms.double(0.6),
    endcapSuperclusterCollection = cms.string('multi5x5EndcapSuperClusters'),
    seedTransverseEnergyThreshold = cms.double(1.0)
)


process.multi5x5SuperClustersWithPreshower = cms.EDProducer("PreshowerPhiClusterProducer",
    assocSClusterCollection = cms.string(''),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapSuperClusters"),
    esPhiClusterDeltaEta = cms.double(0.15),
    esPhiClusterDeltaPhi = cms.double(0.12),
    esStripEnergyCut = cms.double(0.0),
    etThresh = cms.double(0.0),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES")
)


process.muonCSCDigis = cms.EDProducer("CSCDCCUnpacker",
    Debug = cms.untracked.bool(False),
    ErrorMask = cms.uint32(0),
    ExaminerMask = cms.uint32(535557110),
    FormatedEventDump = cms.untracked.bool(False),
    InputObjects = cms.InputTag("rawDataRepacker"),
    PrintEventNumber = cms.untracked.bool(False),
    SuppressZeroLCT = cms.untracked.bool(True),
    UnpackStatusDigis = cms.bool(False),
    UseExaminer = cms.bool(True),
    UseFormatStatus = cms.bool(True),
    UseSelectiveUnpacking = cms.bool(True),
    VisualFEDInspect = cms.untracked.bool(False),
    VisualFEDShort = cms.untracked.bool(False),
    runDQM = cms.untracked.bool(False)
)


process.muonDTDigis = cms.EDProducer("DTUnpackingModule",
    dataType = cms.string('DDU'),
    dqmOnly = cms.bool(False),
    inputLabel = cms.InputTag("rawDataRepacker"),
    maxFEDid = cms.untracked.int32(779),
    minFEDid = cms.untracked.int32(770),
    readOutParameters = cms.PSet(
        debug = cms.untracked.bool(False),
        localDAQ = cms.untracked.bool(False),
        performDataIntegrityMonitor = cms.untracked.bool(False),
        rosParameters = cms.PSet(
            debug = cms.untracked.bool(False),
            localDAQ = cms.untracked.bool(False),
            performDataIntegrityMonitor = cms.untracked.bool(False),
            readDDUIDfromDDU = cms.untracked.bool(True),
            readingDDU = cms.untracked.bool(True),
            writeSC = cms.untracked.bool(True)
        )
    ),
    useStandardFEDid = cms.bool(True)
)


process.muonEcalDetIds = cms.EDProducer("InterestingEcalDetIdProducer",
    inputCollection = cms.InputTag("hiMuons1stStep")
)


process.muonRPCDigis = cms.EDProducer("RPCUnpackingModule",
    InputLabel = cms.InputTag("rawDataRepacker"),
    doSynchro = cms.bool(True)
)


process.muonSeededSeedsInOut = cms.EDProducer("MuonReSeeder",
    DoPredictionsOnly = cms.bool(False),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RefitDirection = cms.string('alongMomentum'),
    RefitRPCHits = cms.bool(True),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
    cut = cms.string('pt > 2'),
    debug = cms.untracked.bool(False),
    insideOut = cms.bool(True),
    layersToKeep = cms.int32(5),
    src = cms.InputTag("earlyMuons")
)


process.muonSeededSeedsInOutAsTracks = cms.EDProducer("FakeTrackProducerFromSeed",
    src = cms.InputTag("muonSeededSeedsInOut")
)


process.muonSeededSeedsOutIn = cms.EDProducer("OutsideInMuonSeeder",
    cut = cms.string('pt > 10 && outerTrack.hitPattern.muonStationsWithValidHits >= 2'),
    debug = cms.untracked.bool(False),
    errorRescaleFactor = cms.double(2.0),
    fromVertex = cms.bool(True),
    hitCollector = cms.string('hitCollectorForOutInMuonSeeds'),
    hitsToTry = cms.int32(3),
    layersToTry = cms.int32(3),
    maxEtaForTOB = cms.double(1.8),
    minEtaForTEC = cms.double(0.7),
    muonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    src = cms.InputTag("earlyMuons"),
    trackerPropagator = cms.string('PropagatorWithMaterial')
)


process.muonSeededSeedsOutInAsTracks = cms.EDProducer("FakeTrackProducerFromSeed",
    src = cms.InputTag("muonSeededSeedsOutIn")
)


process.muonSeededSeedsOutInDisplaced = cms.EDProducer("OutsideInMuonSeeder",
    cut = cms.string('pt > 10 && outerTrack.hitPattern.muonStationsWithValidHits >= 2'),
    debug = cms.untracked.bool(False),
    errorRescaleFactor = cms.double(2.0),
    fromVertex = cms.bool(False),
    hitCollector = cms.string('hitCollectorForOutInMuonSeeds'),
    hitsToTry = cms.int32(3),
    layersToTry = cms.int32(3),
    maxEtaForTOB = cms.double(1.8),
    minEtaForTEC = cms.double(0.7),
    muonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    src = cms.InputTag("earlyDisplacedMuons"),
    trackerPropagator = cms.string('PropagatorWithMaterial')
)


process.muonSeededSeedsOutInDisplacedAsTracks = cms.EDProducer("FakeTrackProducerFromSeed",
    src = cms.InputTag("muonSeededSeedsOutInDisplaced")
)


process.muonSeededTrackCandidatesInOut = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('none'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryBuilderForInOut')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("muonSeededSeedsInOut"),
    useHitsSplitting = cms.bool(True)
)


process.muonSeededTrackCandidatesInOutAsTracks = cms.EDProducer("FakeTrackProducerFromCandidate",
    src = cms.InputTag("muonSeededTrackCandidatesInOut")
)


process.muonSeededTrackCandidatesOutIn = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryBuilderForOutIn')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(False),
    src = cms.InputTag("muonSeededSeedsOutIn"),
    useHitsSplitting = cms.bool(True)
)


process.muonSeededTrackCandidatesOutInAsTracks = cms.EDProducer("FakeTrackProducerFromCandidate",
    src = cms.InputTag("muonSeededTrackCandidatesOutIn")
)


process.muonSeededTrackCandidatesOutInDisplaced = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryBuilderForOutInDisplaced')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(False),
    src = cms.InputTag("muonSeededSeedsOutInDisplaced"),
    useHitsSplitting = cms.bool(True)
)


process.muonSeededTrackCandidatesOutInDisplacedAsTracks = cms.EDProducer("FakeTrackProducerFromCandidate",
    src = cms.InputTag("muonSeededTrackCandidatesOutInDisplaced")
)


process.muonSeededTracksInOut = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('muonSeededStepInOut'),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("muonSeededTrackCandidatesInOut"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.muonSeededTracksInOutSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("muonSeededTracksInOut"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(False),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(10.0),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(4),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(7),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(3),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(5),
        nSigmaZ = cms.double(4.0),
        name = cms.string('muonSeededTracksInOutLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(3),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(10),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(6),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksInOutTight'),
            preFilterName = cms.string('muonSeededTracksInOutLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(7),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksInOutHighPurity'),
            preFilterName = cms.string('muonSeededTracksInOutTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.muonSeededTracksOutIn = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('muonSeededStepOutIn'),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("muonSeededTrackCandidatesOutIn"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.muonSeededTracksOutInDisplaced = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('muonSeededStepOutIn'),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("muonSeededTrackCandidatesOutInDisplaced"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.muonSeededTracksOutInDisplacedSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("muonSeededTracksOutInDisplaced"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(False),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(10.0),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(4),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(7),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(3),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(5),
        nSigmaZ = cms.double(4.0),
        name = cms.string('muonSeededTracksOutInDisplacedLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(3),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(10),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(6),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksOutInDisplacedTight'),
            preFilterName = cms.string('muonSeededTracksOutInDisplacedLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(7),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksOutInDisplacedHighPurity'),
            preFilterName = cms.string('muonSeededTracksOutInDisplacedTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.muonSeededTracksOutInSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("muonSeededTracksOutIn"),
    trackSelectors = cms.VPSet(cms.PSet(
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(False),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(10.0),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(4),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(7),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(3),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(5),
        nSigmaZ = cms.double(4.0),
        name = cms.string('muonSeededTracksOutInLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.0),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(3),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(10),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(6),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksOutInTight'),
            preFilterName = cms.string('muonSeededTracksOutInLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(False),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.4),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(2),
            minNumberLayers = cms.uint32(5),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(7),
            nSigmaZ = cms.double(4.0),
            name = cms.string('muonSeededTracksOutInHighPurity'),
            preFilterName = cms.string('muonSeededTracksOutInTight'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.muonSelectionTypeValueMapProducer = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('All')
)


process.muonShowerInformation = cms.EDProducer("MuonShowerInformationProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    ShowerInformationFillerParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    ),
    muonCollection = cms.InputTag("hiMuons1stStep"),
    trackCollection = cms.InputTag("generalTracks")
)


process.muons = cms.EDProducer("MuonProducer",
    ActivateDebug = cms.untracked.bool(False),
    CosmicIdMap = cms.InputTag("cosmicsVeto"),
    EcalIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","ecal"),
    FillCosmicsIdMap = cms.bool(False),
    FillDetectorBasedIsolation = cms.bool(False),
    FillPFIsolation = cms.bool(False),
    FillPFMomentumAndAssociation = cms.bool(True),
    FillSelectorMaps = cms.bool(False),
    FillShoweringInfo = cms.bool(False),
    FillTimingInfo = cms.bool(True),
    HcalIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","hcal"),
    HoIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","ho"),
    InputMuons = cms.InputTag("hiMuons1stStep"),
    JetIsoDeposits = cms.InputTag("muIsoDepositJets"),
    PFCandidates = cms.InputTag("particleFlowTmp"),
    PFIsolation = cms.PSet(
        pfIsoMeanDRProfileR03 = cms.PSet(
            chargedHadron = cms.InputTag("muPFMeanDRIsoValueCharged03"),
            chargedParticle = cms.InputTag("muPFMeanDRIsoValueChargedAll03"),
            neutralHadron = cms.InputTag("muPFMeanDRIsoValueNeutral03"),
            neutralHadronHighThreshold = cms.InputTag("muPFMeanDRIsoValueNeutralHighThreshold03"),
            photon = cms.InputTag("muPFMeanDRIsoValueGamma03"),
            photonHighThreshold = cms.InputTag("muPFMeanDRIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFMeanDRIsoValuePU03")
        ),
        pfIsoMeanDRProfileR04 = cms.PSet(
            chargedHadron = cms.InputTag("muPFMeanDRIsoValueCharged04"),
            chargedParticle = cms.InputTag("muPFMeanDRIsoValueChargedAll04"),
            neutralHadron = cms.InputTag("muPFMeanDRIsoValueNeutral04"),
            neutralHadronHighThreshold = cms.InputTag("muPFMeanDRIsoValueNeutralHighThreshold04"),
            photon = cms.InputTag("muPFMeanDRIsoValueGamma04"),
            photonHighThreshold = cms.InputTag("muPFMeanDRIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFMeanDRIsoValuePU04")
        ),
        pfIsoSumDRProfileR03 = cms.PSet(
            chargedHadron = cms.InputTag("muPFSumDRIsoValueCharged03"),
            chargedParticle = cms.InputTag("muPFSumDRIsoValueChargedAll03"),
            neutralHadron = cms.InputTag("muPFSumDRIsoValueNeutral03"),
            neutralHadronHighThreshold = cms.InputTag("muPFSumDRIsoValueNeutralHighThreshold03"),
            photon = cms.InputTag("muPFSumDRIsoValueGamma03"),
            photonHighThreshold = cms.InputTag("muPFSumDRIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFSumDRIsoValuePU03")
        ),
        pfIsoSumDRProfileR04 = cms.PSet(
            chargedHadron = cms.InputTag("muPFSumDRIsoValueCharged04"),
            chargedParticle = cms.InputTag("muPFSumDRIsoValueChargedAll04"),
            neutralHadron = cms.InputTag("muPFSumDRIsoValueNeutral04"),
            neutralHadronHighThreshold = cms.InputTag("muPFSumDRIsoValueNeutralHighThreshold04"),
            photon = cms.InputTag("muPFSumDRIsoValueGamma04"),
            photonHighThreshold = cms.InputTag("muPFSumDRIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFSumDRIsoValuePU04")
        ),
        pfIsolationR03 = cms.PSet(
            chargedHadron = cms.InputTag("muPFIsoValueCharged03"),
            chargedParticle = cms.InputTag("muPFIsoValueChargedAll03"),
            neutralHadron = cms.InputTag("muPFIsoValueNeutral03"),
            neutralHadronHighThreshold = cms.InputTag("muPFIsoValueNeutralHighThreshold03"),
            photon = cms.InputTag("muPFIsoValueGamma03"),
            photonHighThreshold = cms.InputTag("muPFIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFIsoValuePU03")
        ),
        pfIsolationR04 = cms.PSet(
            chargedHadron = cms.InputTag("muPFIsoValueCharged04"),
            chargedParticle = cms.InputTag("muPFIsoValueChargedAll04"),
            neutralHadron = cms.InputTag("muPFIsoValueNeutral04"),
            neutralHadronHighThreshold = cms.InputTag("muPFIsoValueNeutralHighThreshold04"),
            photon = cms.InputTag("muPFIsoValueGamma04"),
            photonHighThreshold = cms.InputTag("muPFIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFIsoValuePU04")
        )
    ),
    SelectorMaps = cms.VInputTag(cms.InputTag("muidTMLastStationOptimizedLowPtLoose"), cms.InputTag("muidTMLastStationOptimizedLowPtTight"), cms.InputTag("muidTM2DCompatibilityLoose"), cms.InputTag("muidTM2DCompatibilityTight"), cms.InputTag("muidTrackerMuonArbitrated"), 
        cms.InputTag("muidTMLastStationAngLoose"), cms.InputTag("muidGlobalMuonPromptTight"), cms.InputTag("muidGMStaChiCompatibility"), cms.InputTag("muidTMLastStationAngTight"), cms.InputTag("muidGMTkChiCompatibility"), 
        cms.InputTag("muidTMOneStationAngTight"), cms.InputTag("muidTMOneStationAngLoose"), cms.InputTag("muidTMLastStationLoose"), cms.InputTag("muidTMLastStationTight"), cms.InputTag("muidTMOneStationTight"), 
        cms.InputTag("muidTMOneStationLoose"), cms.InputTag("muidAllArbitrated"), cms.InputTag("muidGMTkKinkTight"), cms.InputTag("muidRPCMuLoose")),
    ShowerInfoMap = cms.InputTag("muonShowerInformation"),
    TrackIsoDeposits = cms.InputTag("muIsoDepositTk")
)


process.muons1stStep = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(True),
    fillGlobalTrackRefits = cms.bool(True),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("globalMuons"), cms.InputTag("standAloneMuons","UpdatedAtVtx"), cms.InputTag("tevMuons","firstHit"), cms.InputTag("tevMuons","picky"), 
        cms.InputTag("tevMuons","dyt")),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks', 
        'tev firstHit', 
        'tev picky', 
        'tev dyt'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muonsWithSET = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(True),
    fillGlobalTrackRefits = cms.bool(True),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("generalTracks", "globalSETMuons", cms.InputTag("standAloneSETMuons","UpdatedAtVtx")),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1.0),
    minPt = cms.double(0.5),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.muontiming = cms.EDProducer("MuonTimingProducer",
    MuonCollection = cms.InputTag("muons1stStep"),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    )
)


process.offlineBeamSpot = cms.EDProducer("BeamSpotOnlineProducer",
    changeToCMSCoordinates = cms.bool(False),
    gtEvmLabel = cms.InputTag("gtEvmDigis"),
    maxRadius = cms.double(2),
    maxZ = cms.double(40),
    setSigmaZ = cms.double(-1),
    src = cms.InputTag("scalersRawToDigi")
)


process.particleBasedIsolation = cms.EDProducer("ParticleBasedIsoProducer",
    electronProducer = cms.InputTag("gedGsfElectrons"),
    electronTmpProducer = cms.InputTag("gedGsfElectronsTmp"),
    pfBlockBasedIsolationSetUp = cms.PSet(
        ComponentName = cms.string('pfBlockBasedIsolation'),
        coneSize = cms.double(9999999999)
    ),
    pfCandidates = cms.InputTag("particleFlow"),
    pfEgammaCandidates = cms.InputTag("particleFlowEGamma"),
    photonProducer = cms.InputTag("gedPhotons"),
    photonTmpProducer = cms.InputTag("gedPhotonsTmp"),
    valueMapElePFblockIso = cms.string('gedGsfElectrons'),
    valueMapEleToEG = cms.string(''),
    valueMapPhoPFblockIso = cms.string('gedPhotons'),
    valueMapPhoToEG = cms.string('valMapPFEgammaCandToPhoton')
)


process.particleFlow = cms.EDProducer("PFLinker",
    FillMuonRefs = cms.bool(True),
    GsfElectrons = cms.InputTag("gedGsfElectrons"),
    Muons = cms.InputTag("muons","muons1stStep2muonsMap"),
    OutputPF = cms.string(''),
    PFCandidate = cms.VInputTag(cms.InputTag("particleFlowTmp")),
    Photons = cms.InputTag("gedPhotons"),
    ProducePFCandidates = cms.bool(True),
    ValueMapElectrons = cms.string('electrons'),
    ValueMapMerged = cms.string('all'),
    ValueMapPhotons = cms.string('photons')
)


process.particleFlowBlock = cms.EDProducer("PFBlockProducer",
    debug = cms.untracked.bool(False),
    elementImporters = cms.VPSet(cms.PSet(
        gsfsAreSecondary = cms.bool(False),
        importerName = cms.string('GSFTrackImporter'),
        source = cms.InputTag("pfTrackElec"),
        superClustersArePF = cms.bool(True)
    ), 
        cms.PSet(
            importerName = cms.string('SuperClusterImporter'),
            maximumHoverE = cms.double(0.5),
            minPTforBypass = cms.double(100.0),
            minSuperClusterPt = cms.double(10.0),
            source_eb = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALBarrel"),
            source_ee = cms.InputTag("particleFlowSuperClusterECAL","particleFlowSuperClusterECALEndcapWithPreshower"),
            source_towers = cms.InputTag("towerMaker"),
            superClustersArePF = cms.bool(True)
        ), 
        cms.PSet(
            DPtOverPtCuts_byTrackAlgo = cms.vdouble(-1.0, -1.0, -1.0, 1.0, 1.0),
            NHitCuts_byTrackAlgo = cms.vuint32(3, 3, 3, 3, 3),
            importerName = cms.string('GeneralTracksImporter'),
            muonSrc = cms.InputTag("hiMuons1stStep"),
            source = cms.InputTag("pfTrack"),
            useIterativeTracking = cms.bool(False)
        ), 
        cms.PSet(
            BCtoPFCMap = cms.InputTag("particleFlowSuperClusterECAL","PFClusterAssociationEBEE"),
            importerName = cms.string('ECALClusterImporter'),
            source = cms.InputTag("particleFlowClusterECAL")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterHCAL")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterHO")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterHF")
        ), 
        cms.PSet(
            importerName = cms.string('GenericClusterImporter'),
            source = cms.InputTag("particleFlowClusterPS")
        )),
    linkDefinitions = cms.VPSet(cms.PSet(
        linkType = cms.string('PS1:ECAL'),
        linkerName = cms.string('PreshowerAndECALLinker'),
        useKDTree = cms.bool(True)
    ), 
        cms.PSet(
            linkType = cms.string('PS2:ECAL'),
            linkerName = cms.string('PreshowerAndECALLinker'),
            useKDTree = cms.bool(True)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:ECAL'),
            linkerName = cms.string('TrackAndECALLinker'),
            useKDTree = cms.bool(True)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:HCAL'),
            linkerName = cms.string('TrackAndHCALLinker'),
            useKDTree = cms.bool(True)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:HO'),
            linkerName = cms.string('TrackAndHOLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('ECAL:HCAL'),
            linkerName = cms.string('ECALAndHCALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('HCAL:HO'),
            linkerName = cms.string('HCALAndHOLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('HFEM:HFHAD'),
            linkerName = cms.string('HFEMAndHFHADLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:TRACK'),
            linkerName = cms.string('TrackAndTrackLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('ECAL:ECAL'),
            linkerName = cms.string('ECALAndECALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:ECAL'),
            linkerName = cms.string('GSFAndECALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('TRACK:GSF'),
            linkerName = cms.string('TrackAndGSFLinker'),
            useConvertedBrems = cms.bool(True),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:BREM'),
            linkerName = cms.string('GSFAndBREMLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:GSF'),
            linkerName = cms.string('GSFAndGSFLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('ECAL:BREM'),
            linkerName = cms.string('ECALAndBREMLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('GSF:HCAL'),
            linkerName = cms.string('GSFAndHCALLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            linkType = cms.string('HCAL:BREM'),
            linkerName = cms.string('HCALAndBREMLinker'),
            useKDTree = cms.bool(False)
        ), 
        cms.PSet(
            SuperClusterMatchByRef = cms.bool(True),
            linkType = cms.string('SC:ECAL'),
            linkerName = cms.string('SCAndECALLinker'),
            useKDTree = cms.bool(False)
        )),
    verbose = cms.untracked.bool(False)
)


process.particleFlowClusterECAL = cms.EDProducer("CorrectedECALPFClusterProducer",
    energyCorrector = cms.PSet(
        algoName = cms.string('PFClusterEMEnergyCorrector'),
        applyCrackCorrections = cms.bool(False),
        applyMVACorrections = cms.bool(True),
        autoDetectBunchSpacing = cms.bool(True),
        maxPtForMVAEvaluation = cms.double(90.0),
        recHitsEBLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        recHitsEELabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        verticesLabel = cms.InputTag("hiPixelAdaptiveVertex")
    ),
    inputECAL = cms.InputTag("particleFlowClusterECALUncorrected"),
    inputPS = cms.InputTag("particleFlowClusterPS"),
    minimumPSEnergy = cms.double(0.0)
)


process.particleFlowClusterECALUncorrected = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('ECAL_BARREL'),
            gatheringThreshold = cms.double(0.08),
            gatheringThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                gatheringThreshold = cms.double(0.3),
                gatheringThresholdPt = cms.double(0.0)
            )),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.08),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(9),
            timeResolutionCalcBarrel = cms.PSet(
                constantTerm = cms.double(0.428192),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0510871),
                noiseTerm = cms.double(1.10889),
                noiseTermLowE = cms.double(1.31883),
                threshHighE = cms.double(5.0),
                threshLowE = cms.double(0.5)
            ),
            timeResolutionCalcEndcap = cms.PSet(
                constantTerm = cms.double(0.0),
                constantTermLowE = cms.double(0.0),
                corrTermLowE = cms.double(0.0),
                noiseTerm = cms.double(5.72489999999),
                noiseTermLowE = cms.double(6.92683000001),
                threshHighE = cms.double(10.0),
                threshLowE = cms.double(1.0)
            )
        ),
        positionCalcForConvergence = cms.PSet(
            T0_EB = cms.double(7.4),
            T0_EE = cms.double(3.1),
            T0_ES = cms.double(1.2),
            W0 = cms.double(4.2),
            X0 = cms.double(0.89),
            algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
            minAllowedNormalization = cms.double(0.0),
            minFractionInCalc = cms.double(0.0)
        ),
        recHitEnergyNorms = cms.VPSet(cms.PSet(
            detector = cms.string('ECAL_BARREL'),
            recHitEnergyNorm = cms.double(0.08)
        ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                recHitEnergyNorm = cms.double(0.3)
            )),
        showerSigma = cms.double(1.5),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(
        T0_EB = cms.double(7.4),
        T0_EE = cms.double(3.1),
        T0_ES = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89),
        algoName = cms.string('ECAL2DPositionCalcWithDepthCorr'),
        minAllowedNormalization = cms.double(0.0),
        minFractionInCalc = cms.double(0.0)
    ),
    recHitCleaners = cms.VPSet(cms.PSet(
        algoName = cms.string('SpikeAndDoubleSpikeCleaner'),
        cleaningByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('ECAL_BARREL'),
            doubleSpikeS6S2 = cms.double(0.04),
            doubleSpikeThresh = cms.double(10.0),
            energyThresholdModifier = cms.double(2.0),
            fractionThresholdModifier = cms.double(3.0),
            minS4S1_a = cms.double(0.04),
            minS4S1_b = cms.double(-0.024),
            singleSpikeThresh = cms.double(4.0)
        ), 
            cms.PSet(
                detector = cms.string('ECAL_ENDCAP'),
                doubleSpikeS6S2 = cms.double(-1.0),
                doubleSpikeThresh = cms.double(1000000000.0),
                energyThresholdModifier = cms.double(2.0),
                fractionThresholdModifier = cms.double(3.0),
                minS4S1_a = cms.double(0.02),
                minS4S1_b = cms.double(-0.0125),
                singleSpikeThresh = cms.double(15.0)
            ))
    )),
    recHitsSource = cms.InputTag("particleFlowRecHitECAL"),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(8),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('ECAL_ENDCAP'),
            seedingThreshold = cms.double(0.6),
            seedingThresholdPt = cms.double(0.15)
        ), 
            cms.PSet(
                detector = cms.string('ECAL_BARREL'),
                seedingThreshold = cms.double(0.23),
                seedingThresholdPt = cms.double(0.0)
            ))
    )
)


process.particleFlowClusterHBHE = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL1'),
            gatheringThreshold = cms.double(0.8),
            gatheringThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_ENDCAP'),
                gatheringThreshold = cms.double(0.8),
                gatheringThresholdPt = cms.double(0.0)
            )),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        clusterTimeResFromSeed = cms.bool(False),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        maxNSigmaTime = cms.double(10.0),
        minChi2Prob = cms.double(0.0),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL1'),
            recHitEnergyNorm = cms.double(0.8)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_ENDCAP'),
                recHitEnergyNorm = cms.double(0.8)
            )),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08),
        timeResolutionCalcBarrel = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeResolutionCalcEndcap = cms.PSet(
            constantTerm = cms.double(2.82),
            constantTermLowE = cms.double(4.24),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(21.86),
            noiseTermLowE = cms.double(8),
            threshHighE = cms.double(15.0),
            threshLowE = cms.double(6.0)
        ),
        timeSigmaEB = cms.double(10.0),
        timeSigmaEE = cms.double(10.0)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitHBHE"),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL1'),
            seedingThreshold = cms.double(1.0),
            seedingThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_ENDCAP'),
                seedingThreshold = cms.double(1.1),
                seedingThresholdPt = cms.double(0.0)
            ))
    )
)


process.particleFlowClusterHBHETimeSelected = cms.EDProducer("PFClusterTimeSelector",
    cuts = cms.VPSet(cms.PSet(
        depth = cms.double(1.0),
        endcap = cms.bool(False),
        maxEnergy = cms.double(1.0),
        maxTime = cms.double(30.0),
        minEnergy = cms.double(0.0),
        minTime = cms.double(-30.0)
    ), 
        cms.PSet(
            depth = cms.double(1.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(1.0),
            maxTime = cms.double(30.0),
            minEnergy = cms.double(0.0),
            minTime = cms.double(-30.0)
        ), 
        cms.PSet(
            depth = cms.double(2.0),
            endcap = cms.bool(False),
            maxEnergy = cms.double(1.0),
            maxTime = cms.double(30.0),
            minEnergy = cms.double(0.0),
            minTime = cms.double(-30.0)
        ), 
        cms.PSet(
            depth = cms.double(2.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(1.0),
            maxTime = cms.double(30.0),
            minEnergy = cms.double(0.0),
            minTime = cms.double(-30.0)
        ), 
        cms.PSet(
            depth = cms.double(3.0),
            endcap = cms.bool(False),
            maxEnergy = cms.double(1.0),
            maxTime = cms.double(30.0),
            minEnergy = cms.double(0.0),
            minTime = cms.double(-30.0)
        ), 
        cms.PSet(
            depth = cms.double(3.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(1.0),
            maxTime = cms.double(30.0),
            minEnergy = cms.double(0.0),
            minTime = cms.double(-30.0)
        ), 
        cms.PSet(
            depth = cms.double(1.0),
            endcap = cms.bool(False),
            maxEnergy = cms.double(2.0),
            maxTime = cms.double(15.0),
            minEnergy = cms.double(1.0),
            minTime = cms.double(-20.0)
        ), 
        cms.PSet(
            depth = cms.double(1.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(2.0),
            maxTime = cms.double(16.0),
            minEnergy = cms.double(1.0),
            minTime = cms.double(-20.0)
        ), 
        cms.PSet(
            depth = cms.double(2.0),
            endcap = cms.bool(False),
            maxEnergy = cms.double(2.0),
            maxTime = cms.double(15.0),
            minEnergy = cms.double(1.0),
            minTime = cms.double(-20.0)
        ), 
        cms.PSet(
            depth = cms.double(2.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(2.0),
            maxTime = cms.double(15.0),
            minEnergy = cms.double(1.0),
            minTime = cms.double(-20.0)
        ), 
        cms.PSet(
            depth = cms.double(3.0),
            endcap = cms.bool(False),
            maxEnergy = cms.double(2.0),
            maxTime = cms.double(15.0),
            minEnergy = cms.double(1.0),
            minTime = cms.double(-20.0)
        ), 
        cms.PSet(
            depth = cms.double(3.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(2.0),
            maxTime = cms.double(15.0),
            minEnergy = cms.double(1.0),
            minTime = cms.double(-20.0)
        ), 
        cms.PSet(
            depth = cms.double(1.0),
            endcap = cms.bool(False),
            maxEnergy = cms.double(5.0),
            maxTime = cms.double(25.0),
            minEnergy = cms.double(2.0),
            minTime = cms.double(-20.0)
        ), 
        cms.PSet(
            depth = cms.double(1.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(5.0),
            maxTime = cms.double(25.0),
            minEnergy = cms.double(2.0),
            minTime = cms.double(-20.0)
        ), 
        cms.PSet(
            depth = cms.double(2.0),
            endcap = cms.bool(False),
            maxEnergy = cms.double(5.0),
            maxTime = cms.double(25.0),
            minEnergy = cms.double(2.0),
            minTime = cms.double(-15.0)
        ), 
        cms.PSet(
            depth = cms.double(2.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(5.0),
            maxTime = cms.double(25.0),
            minEnergy = cms.double(2.0),
            minTime = cms.double(-15.0)
        ), 
        cms.PSet(
            depth = cms.double(3.0),
            endcap = cms.bool(False),
            maxEnergy = cms.double(5.0),
            maxTime = cms.double(25.0),
            minEnergy = cms.double(2.0),
            minTime = cms.double(-15.0)
        ), 
        cms.PSet(
            depth = cms.double(3.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(5.0),
            maxTime = cms.double(25.0),
            minEnergy = cms.double(2.0),
            minTime = cms.double(-15.0)
        ), 
        cms.PSet(
            depth = cms.double(1.0),
            endcap = cms.bool(False),
            maxEnergy = cms.double(9999999.0),
            maxTime = cms.double(20.0),
            minEnergy = cms.double(5.0),
            minTime = cms.double(-5)
        ), 
        cms.PSet(
            depth = cms.double(1.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(9999999.0),
            maxTime = cms.double(20.0),
            minEnergy = cms.double(5.0),
            minTime = cms.double(-5)
        ), 
        cms.PSet(
            depth = cms.double(2.0),
            endcap = cms.bool(False),
            maxEnergy = cms.double(9999999.0),
            maxTime = cms.double(20.0),
            minEnergy = cms.double(5.0),
            minTime = cms.double(-5)
        ), 
        cms.PSet(
            depth = cms.double(2.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(9999999.0),
            maxTime = cms.double(20.0),
            minEnergy = cms.double(5.0),
            minTime = cms.double(-5)
        ), 
        cms.PSet(
            depth = cms.double(3.0),
            endcap = cms.bool(False),
            maxEnergy = cms.double(9999999.0),
            maxTime = cms.double(20.0),
            minEnergy = cms.double(5.0),
            minTime = cms.double(-5)
        ), 
        cms.PSet(
            depth = cms.double(3.0),
            endcap = cms.bool(True),
            maxEnergy = cms.double(9999999.0),
            maxTime = cms.double(20.0),
            minEnergy = cms.double(5.0),
            minTime = cms.double(-5)
        )),
    src = cms.InputTag("particleFlowClusterHBHE")
)


process.particleFlowClusterHCAL = cms.EDProducer("PFMultiDepthClusterProducer",
    clustersSource = cms.InputTag("particleFlowClusterHBHE"),
    energyCorrector = cms.PSet(

    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('PFMultiDepthClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        minFractionToKeep = cms.double(1e-07),
        nSigmaEta = cms.double(2.0),
        nSigmaPhi = cms.double(2.0)
    ),
    positionReCalc = cms.PSet(

    )
)


process.particleFlowClusterHF = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HF_EM'),
            gatheringThreshold = cms.double(0.8),
            gatheringThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HF_HAD'),
                gatheringThreshold = cms.double(0.8),
                gatheringThresholdPt = cms.double(0.0)
            )),
        useCornerCells = cms.bool(False)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.8),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(cms.PSet(
            detector = cms.string('HF_EM'),
            recHitEnergyNorm = cms.double(0.8)
        ), 
            cms.PSet(
                detector = cms.string('HF_HAD'),
                recHitEnergyNorm = cms.double(0.8)
            )),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(cms.PSet(
        algoName = cms.string('SpikeAndDoubleSpikeCleaner'),
        cleaningByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HF_EM'),
            doubleSpikeS6S2 = cms.double(-1.0),
            doubleSpikeThresh = cms.double(1000000000.0),
            energyThresholdModifier = cms.double(1.0),
            fractionThresholdModifier = cms.double(1.0),
            minS4S1_a = cms.double(0.11),
            minS4S1_b = cms.double(-0.19),
            singleSpikeThresh = cms.double(80.0)
        ), 
            cms.PSet(
                detector = cms.string('HF_HAD'),
                doubleSpikeS6S2 = cms.double(-1.0),
                doubleSpikeThresh = cms.double(1000000000.0),
                energyThresholdModifier = cms.double(1.0),
                fractionThresholdModifier = cms.double(1.0),
                minS4S1_a = cms.double(0.045),
                minS4S1_b = cms.double(-0.08),
                singleSpikeThresh = cms.double(120.0)
            ))
    )),
    recHitsSource = cms.InputTag("particleFlowRecHitHF"),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(0),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HF_EM'),
            seedingThreshold = cms.double(1.4),
            seedingThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HF_HAD'),
                seedingThreshold = cms.double(1.4),
                seedingThresholdPt = cms.double(0.0)
            ))
    )
)


process.particleFlowClusterHO = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL2_RING0'),
            gatheringThreshold = cms.double(0.5),
            gatheringThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                gatheringThreshold = cms.double(1.0),
                gatheringThresholdPt = cms.double(0.0)
            )),
        useCornerCells = cms.bool(True)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        allCellsPositionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.5),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(0.5),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(5)
        ),
        recHitEnergyNorms = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL2_RING0'),
            recHitEnergyNorm = cms.double(0.5)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                recHitEnergyNorm = cms.double(1.0)
            )),
        showerSigma = cms.double(10.0),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitHO"),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('HCAL_BARREL2_RING0'),
            seedingThreshold = cms.double(1.0),
            seedingThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('HCAL_BARREL2_RING1'),
                seedingThreshold = cms.double(3.1),
                seedingThresholdPt = cms.double(0.0)
            ))
    )
)


process.particleFlowClusterPS = cms.EDProducer("PFClusterProducer",
    energyCorrector = cms.PSet(

    ),
    initialClusteringStep = cms.PSet(
        algoName = cms.string('Basic2DGenericTopoClusterizer'),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('PS1'),
            gatheringThreshold = cms.double(6e-05),
            gatheringThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('PS2'),
                gatheringThreshold = cms.double(6e-05),
                gatheringThresholdPt = cms.double(0.0)
            )),
        useCornerCells = cms.bool(False)
    ),
    pfClusterBuilder = cms.PSet(
        algoName = cms.string('Basic2DGenericPFlowClusterizer'),
        excludeOtherSeeds = cms.bool(True),
        maxIterations = cms.uint32(50),
        minFracTot = cms.double(1e-20),
        minFractionToKeep = cms.double(1e-07),
        positionCalc = cms.PSet(
            algoName = cms.string('Basic2DGenericPFlowPositionCalc'),
            logWeightDenominator = cms.double(6e-05),
            minAllowedNormalization = cms.double(1e-09),
            minFractionInCalc = cms.double(1e-09),
            posCalcNCrystals = cms.int32(-1)
        ),
        recHitEnergyNorms = cms.VPSet(cms.PSet(
            detector = cms.string('PS1'),
            recHitEnergyNorm = cms.double(6e-05)
        ), 
            cms.PSet(
                detector = cms.string('PS2'),
                recHitEnergyNorm = cms.double(6e-05)
            )),
        showerSigma = cms.double(0.3),
        stoppingTolerance = cms.double(1e-08)
    ),
    positionReCalc = cms.PSet(

    ),
    recHitCleaners = cms.VPSet(),
    recHitsSource = cms.InputTag("particleFlowRecHitPS"),
    seedFinder = cms.PSet(
        algoName = cms.string('LocalMaximumSeedFinder'),
        nNeighbours = cms.int32(4),
        thresholdsByDetector = cms.VPSet(cms.PSet(
            detector = cms.string('PS1'),
            seedingThreshold = cms.double(0.00012),
            seedingThresholdPt = cms.double(0.0)
        ), 
            cms.PSet(
                detector = cms.string('PS2'),
                seedingThreshold = cms.double(0.00012),
                seedingThresholdPt = cms.double(0.0)
            ))
    )
)


process.particleFlowDisplacedVertex = cms.EDProducer("PFDisplacedVertexProducer",
    avfParameters = cms.PSet(
        Tini = cms.double(256.0),
        ratio = cms.double(0.25),
        sigmacut = cms.double(6.0)
    ),
    debug = cms.untracked.bool(False),
    longSize = cms.double(5),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    minAdaptWeight = cms.double(0.5),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    primaryVertexCut = cms.double(1.8),
    switchOff2TrackVertex = cms.untracked.bool(True),
    tecCut = cms.double(220),
    tobCut = cms.double(100),
    tracksSelectorParameters = cms.PSet(
        bSelectTracks = cms.bool(True),
        dxy_min = cms.double(0.2),
        nChi2_max = cms.double(5.0),
        nChi2_min = cms.double(0.5),
        nHits_min = cms.int32(6),
        nOuterHits_max = cms.int32(9),
        pt_min = cms.double(0.2),
        quality = cms.string('HighPurity')
    ),
    transvSize = cms.double(1.0),
    verbose = cms.untracked.bool(False),
    vertexCandidatesLabel = cms.InputTag("particleFlowDisplacedVertexCandidate"),
    vertexIdentifierParameters = cms.PSet(
        angles = cms.vdouble(15, 15),
        bIdentifyVertices = cms.bool(True),
        logPrimSec_min = cms.double(0.0),
        looper_eta_max = cms.double(0.1),
        masses = cms.vdouble(0.05, 0.485, 0.515, 0.48, 0.52, 
            1.107, 1.125, 0.2),
        pt_kink_min = cms.double(3.0),
        pt_min = cms.double(0.5)
    )
)


process.particleFlowDisplacedVertexCandidate = cms.EDProducer("PFDisplacedVertexCandidateProducer",
    dcaCut = cms.double(0.5),
    dcaPInnerHitCut = cms.double(1000.0),
    debug = cms.untracked.bool(False),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    primaryVertexCut = cms.double(1.8),
    trackCollection = cms.InputTag("generalTracks"),
    tracksSelectorParameters = cms.PSet(
        dxy = cms.double(0.2),
        nChi2_max = cms.double(5.0),
        pt_min = cms.double(0.2),
        pt_min_prim = cms.double(0.8)
    ),
    verbose = cms.untracked.bool(False)
)


process.particleFlowEGamma = cms.EDProducer("PFEGammaProducer",
    EEtoPS_source = cms.InputTag("particleFlowClusterECAL"),
    X0_Map = cms.string('RecoParticleFlow/PFProducer/data/allX0histos.root'),
    algoType = cms.uint32(0),
    blocks = cms.InputTag("particleFlowBlock"),
    calibHF_a_EMHAD = cms.vdouble(1.42215, 1.00496, 0.68961, 0.81656, 0.98504, 
        0.98504, 1.00802, 1.0593, 1.4576, 1.4576),
    calibHF_a_EMonly = cms.vdouble(0.96945, 0.96701, 0.76309, 0.82268, 0.87583, 
        0.89718, 0.98674, 1.4681, 1.458, 1.458),
    calibHF_b_EMHAD = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    calibHF_b_HADonly = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    calibHF_eta_step = cms.vdouble(0.0, 2.9, 3.0, 3.2, 4.2, 
        4.4, 4.6, 4.8, 5.2, 5.4),
    calibHF_use = cms.bool(False),
    calibPFSCEle_Fbrem_barrel = cms.vdouble(0.6, 6, -0.0255975, 0.0576727, 0.975442, 
        -0.000546394, 1.26147, 25, -0.02025, 0.04537, 
        0.9728, -0.0008962, 1.172),
    calibPFSCEle_Fbrem_endcap = cms.vdouble(0.9, 6.5, -0.0692932, 0.101776, 0.995338, 
        -0.00236548, 0.874998, 1.653, -0.0750184, 0.147, 
        0.923165, 0.000474665, 1.10782),
    calibPFSCEle_barrel = cms.vdouble(1.004, -1.536, 22.88, -1.467, 0.3555, 
        0.6227, 14.65, 2051, 25, 0.9932, 
        -0.5444, 0, 0.5438, 0.7109, 7.645, 
        0.2904, 0),
    calibPFSCEle_endcap = cms.vdouble(1.153, -16.5975, 5.668, -0.1772, 16.22, 
        7.326, 0.0483, -4.068, 9.406),
    cleanedHF = cms.VInputTag(cms.InputTag("particleFlowRecHitHCAL","Cleaned"), cms.InputTag("particleFlowClusterHF","Cleaned")),
    coneEcalIsoForEgammaSC = cms.double(0.3),
    coneTrackIsoForEgammaSC = cms.double(0.3),
    cosmicRejectionDistance = cms.double(1.0),
    debug = cms.untracked.bool(True),
    dptRel_DispVtx = cms.double(10.0),
    dzPV = cms.double(0.2),
    egammaElectrons = cms.InputTag("mvaElectrons"),
    eventFactorForCosmics = cms.double(10.0),
    eventFractionForCleaning = cms.double(0.5),
    eventFractionForRejection = cms.double(0.8),
    factors_45 = cms.vdouble(10.0, 100.0),
    iCfgCandConnector = cms.PSet(
        bCalibPrimary = cms.bool(True),
        bCorrect = cms.bool(True),
        dptRel_MergedTrack = cms.double(5.0),
        dptRel_PrimaryTrack = cms.double(10.0),
        nuclCalibFactors = cms.vdouble(0.8, 0.15, 0.5, 0.5, 0.05),
        ptErrorSecondary = cms.double(1.0)
    ),
    maxDPtOPt = cms.double(1.0),
    maxDeltaPhiPt = cms.double(7.0),
    maxSignificance = cms.double(2.5),
    metFactorForCleaning = cms.double(4.0),
    metFactorForFakes = cms.double(4.0),
    metFactorForHighEta = cms.double(25.0),
    metFactorForRejection = cms.double(4.0),
    metSignificanceForCleaning = cms.double(3.0),
    metSignificanceForRejection = cms.double(4.0),
    minDeltaMet = cms.double(0.4),
    minEnergyForPunchThrough = cms.double(100.0),
    minHFCleaningPt = cms.double(5.0),
    minMomentumForPunchThrough = cms.double(100.0),
    minPixelHits = cms.int32(1),
    minPtForPostCleaning = cms.double(20.0),
    minSignificance = cms.double(2.5),
    minSignificanceReduction = cms.double(1.4),
    minTrackerHits = cms.int32(8),
    muon_ECAL = cms.vdouble(0.5, 0.5),
    muon_HCAL = cms.vdouble(3.0, 3.0),
    muon_HO = cms.vdouble(0.9, 0.9),
    muons = cms.InputTag("muons1stStep"),
    nTrackIsoForEgammaSC = cms.uint32(2),
    nsigma_TRACK = cms.double(1.0),
    pf_GlobC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFGlobalCorr_14Dec2011.root'),
    pf_Res_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFRes_14Dec2011.root'),
    pf_convID_mvaWeightFile = cms.FileInPath('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_pfConversionAug0411.txt'),
    pf_conv_mvaCut = cms.double(0.0),
    pf_electronID_crackCorrection = cms.bool(False),
    pf_electronID_mvaWeightFile = cms.FileInPath('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_PfElectrons23Jan_IntToFloat.txt'),
    pf_electron_mvaCut = cms.double(-0.1),
    pf_electron_output_col = cms.string('electrons'),
    pf_locC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFClusterLCorr_14Dec2011.root'),
    pf_nsigma_ECAL = cms.double(0.0),
    pf_nsigma_HCAL = cms.double(1.0),
    postHFCleaning = cms.bool(False),
    postMuonCleaning = cms.bool(True),
    produceEGCandsWithNoSuperCluster = cms.bool(False),
    ptErrorScale = cms.double(8.0),
    ptFactorForHighEta = cms.double(2.0),
    pt_Error = cms.double(1.0),
    punchThroughFactor = cms.double(3.0),
    punchThroughMETFactor = cms.double(4.0),
    rejectTracks_Bad = cms.bool(True),
    rejectTracks_Step45 = cms.bool(True),
    sumEtEcalIsoForEgammaSC_barrel = cms.double(1.0),
    sumEtEcalIsoForEgammaSC_endcap = cms.double(2.0),
    sumPtTrackIsoForEgammaSC_barrel = cms.double(4.0),
    sumPtTrackIsoForEgammaSC_endcap = cms.double(4.0),
    sumPtTrackIsoForPhoton = cms.double(2.0),
    sumPtTrackIsoSlopeForPhoton = cms.double(0.001),
    trackQuality = cms.string('highPurity'),
    useCalibrationsFromDB = cms.bool(True),
    useEGammaElectrons = cms.bool(True),
    useEGammaSupercluster = cms.bool(True),
    useHO = cms.bool(True),
    usePFConversions = cms.bool(True),
    usePFDecays = cms.bool(False),
    usePFElectrons = cms.bool(True),
    usePFNuclearInteractions = cms.bool(True),
    usePFPhotons = cms.bool(True),
    usePFSCEleCalib = cms.bool(True),
    usePhotonReg = cms.bool(False),
    useRegressionFromDB = cms.bool(True),
    useVerticesForNeutral = cms.bool(True),
    verbose = cms.untracked.bool(True),
    vertexCollection = cms.InputTag("hiSelectedVertex")
)


process.particleFlowPtrs = cms.EDProducer("PFCandidateFwdPtrProducer",
    src = cms.InputTag("particleFlow")
)


process.particleFlowRecHitECAL = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        barrel = cms.PSet(

        ),
        endcap = cms.PSet(

        ),
        name = cms.string('PFRecHitECALNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFEBRecHitCreator'),
        qualityTests = cms.VPSet(cms.PSet(
            name = cms.string('PFRecHitQTestThreshold'),
            threshold = cms.double(0.08)
        ), 
            cms.PSet(
                cleaningThreshold = cms.double(2.0),
                name = cms.string('PFRecHitQTestECAL'),
                skipTTRecoveredHits = cms.bool(True),
                timingCleaning = cms.bool(True),
                topologicalCleaning = cms.bool(True)
            )),
        src = cms.InputTag("ecalRecHit","EcalRecHitsEB")
    ), 
        cms.PSet(
            name = cms.string('PFEERecHitCreator'),
            qualityTests = cms.VPSet(cms.PSet(
                name = cms.string('PFRecHitQTestThreshold'),
                threshold = cms.double(0.3)
            ), 
                cms.PSet(
                    cleaningThreshold = cms.double(2.0),
                    name = cms.string('PFRecHitQTestECAL'),
                    skipTTRecoveredHits = cms.bool(True),
                    timingCleaning = cms.bool(True),
                    topologicalCleaning = cms.bool(True)
                )),
            src = cms.InputTag("ecalRecHit","EcalRecHitsEE")
        ))
)


process.particleFlowRecHitHBHE = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        name = cms.string('PFRecHitHCALNavigator'),
        sigmaCut = cms.double(4.0),
        timeResolutionCalc = cms.PSet(
            constantTerm = cms.double(1.92),
            constantTermLowE = cms.double(6.0),
            corrTermLowE = cms.double(0.0),
            noiseTerm = cms.double(8.64),
            noiseTermLowE = cms.double(0.0),
            threshHighE = cms.double(8.0),
            threshLowE = cms.double(2.0)
        )
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFHBHERecHitCreator'),
        qualityTests = cms.VPSet(cms.PSet(
            name = cms.string('PFRecHitQTestThreshold'),
            threshold = cms.double(0.8)
        ), 
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0),
                flags = cms.vstring('Standard'),
                maxSeverities = cms.vint32(11),
                name = cms.string('PFRecHitQTestHCALChannel')
            )),
        src = cms.InputTag("hbhereco")
    ))
)


process.particleFlowRecHitHF = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        barrel = cms.PSet(

        ),
        endcap = cms.PSet(

        ),
        name = cms.string('PFRecHitHCALNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        EMDepthCorrection = cms.double(22.0),
        HADDepthCorrection = cms.double(25.0),
        HFCalib29 = cms.double(1.07),
        LongFibre_Cut = cms.double(120.0),
        LongFibre_Fraction = cms.double(0.1),
        ShortFibre_Cut = cms.double(60.0),
        ShortFibre_Fraction = cms.double(0.01),
        name = cms.string('PFHFRecHitCreator'),
        qualityTests = cms.VPSet(cms.PSet(
            cleaningThresholds = cms.vdouble(0.0, 120.0, 60.0),
            flags = cms.vstring('Standard', 
                'HFLong', 
                'HFShort'),
            maxSeverities = cms.vint32(11, 9, 9),
            name = cms.string('PFRecHitQTestHCALChannel')
        ), 
            cms.PSet(
                cuts = cms.VPSet(cms.PSet(
                    depth = cms.int32(1),
                    threshold = cms.double(1.2)
                ), 
                    cms.PSet(
                        depth = cms.int32(2),
                        threshold = cms.double(1.8)
                    )),
                name = cms.string('PFRecHitQTestHCALThresholdVsDepth')
            )),
        src = cms.InputTag("hfreco"),
        thresh_HF = cms.double(0.4)
    ))
)


process.particleFlowRecHitHO = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        name = cms.string('PFRecHitHCALNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFHORecHitCreator'),
        qualityTests = cms.VPSet(cms.PSet(
            name = cms.string('PFRecHitQTestHOThreshold'),
            threshold_ring0 = cms.double(0.4),
            threshold_ring12 = cms.double(1.0)
        ), 
            cms.PSet(
                cleaningThresholds = cms.vdouble(0.0),
                flags = cms.vstring('Standard'),
                maxSeverities = cms.vint32(11),
                name = cms.string('PFRecHitQTestHCALChannel')
            )),
        src = cms.InputTag("horeco")
    ))
)


process.particleFlowRecHitPS = cms.EDProducer("PFRecHitProducer",
    navigator = cms.PSet(
        name = cms.string('PFRecHitPreshowerNavigator')
    ),
    producers = cms.VPSet(cms.PSet(
        name = cms.string('PFPSRecHitCreator'),
        qualityTests = cms.VPSet(cms.PSet(
            name = cms.string('PFRecHitQTestThreshold'),
            threshold = cms.double(7e-06)
        )),
        src = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES")
    ))
)


process.particleFlowSimParticle = cms.EDProducer("PFSimParticleProducer",
    Fitter = cms.string('KFFittingSmoother'),
    MCTruthMatchingInfo = cms.untracked.bool(False),
    ParticleFilter = cms.PSet(
        EMin = cms.double(0.0),
        EProton = cms.double(5000.0),
        etaMax = cms.double(5.0),
        pTMin = cms.double(0.0)
    ),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecTracks = cms.InputTag("trackerDrivenElectronSeeds"),
    TTRHBuilder = cms.string('WithTrackAngle'),
    ecalRecHitsEB = cms.InputTag("caloRecHits","EcalRecHitsEB"),
    ecalRecHitsEE = cms.InputTag("caloRecHits","EcalRecHitsEE"),
    famosSimHits = cms.untracked.InputTag("famosSimHits","EcalHitsEB"),
    process_Particles = cms.untracked.bool(True),
    process_RecTracks = cms.untracked.bool(False),
    sim = cms.InputTag("g4SimHits"),
    verbose = cms.untracked.bool(False)
)


process.particleFlowSuperClusterECAL = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("particleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterECAL"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    doSatelliteClusterMerge = cms.bool(False),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v1'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_offline_v1'),
        vertexCollection = cms.InputTag("hiSelectedVertex")
    ),
    satelliteClusterSeedThreshold = cms.double(50.0),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0.0),
    thresh_PFClusterES = cms.double(0.0),
    thresh_PFClusterEndcap = cms.double(0.0),
    thresh_PFClusterSeedBarrel = cms.double(1.0),
    thresh_PFClusterSeedEndcap = cms.double(1.0),
    thresh_SCEt = cms.double(4.0),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    use_preshower = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.particleFlowSuperClusterECALBox = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ClusteringType = cms.string('Box'),
    ESAssociation = cms.InputTag("particleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterECAL"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    doSatelliteClusterMerge = cms.bool(False),
    ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    phiwidth_SuperClusterBarrel = cms.double(0.28),
    phiwidth_SuperClusterEndcap = cms.double(0.28),
    regressionKeyEB = cms.string('pfecalsc_EBCorrection'),
    regressionKeyEE = cms.string('pfecalsc_EECorrection'),
    satelliteClusterSeedThreshold = cms.double(50.0),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0.5),
    thresh_PFClusterES = cms.double(0.0),
    thresh_PFClusterEndcap = cms.double(0.5),
    thresh_PFClusterSeedBarrel = cms.double(3.0),
    thresh_PFClusterSeedEndcap = cms.double(5.0),
    thresh_SCEt = cms.double(4.0),
    useDynamicDPhiWindow = cms.bool(False),
    useRegression = cms.bool(False),
    use_preshower = cms.bool(True),
    verbose = cms.untracked.bool(False),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.particleFlowSuperClusterECALMustache = cms.EDProducer("PFECALSuperClusterProducer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ClusteringType = cms.string('Mustache'),
    ESAssociation = cms.InputTag("particleFlowClusterECAL"),
    EnergyWeight = cms.string('Raw'),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowBasicClusterECALPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterECAL"),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    applyCrackCorrections = cms.bool(False),
    doSatelliteClusterMerge = cms.bool(False),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    phiwidth_SuperClusterBarrel = cms.double(0.6),
    phiwidth_SuperClusterEndcap = cms.double(0.6),
    regressionConfig = cms.PSet(
        ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        regressionKeyEB = cms.string('pfscecal_EBCorrection_offline_v1'),
        regressionKeyEE = cms.string('pfscecal_EECorrection_offline_v1'),
        vertexCollection = cms.InputTag("offlinePrimaryVertices")
    ),
    satelliteClusterSeedThreshold = cms.double(50.0),
    satelliteMajorityFraction = cms.double(0.5),
    seedThresholdIsET = cms.bool(True),
    thresh_PFClusterBarrel = cms.double(0.0),
    thresh_PFClusterES = cms.double(0.0),
    thresh_PFClusterEndcap = cms.double(0.0),
    thresh_PFClusterSeedBarrel = cms.double(1.0),
    thresh_PFClusterSeedEndcap = cms.double(1.0),
    thresh_SCEt = cms.double(4.0),
    useDynamicDPhiWindow = cms.bool(True),
    useRegression = cms.bool(True),
    use_preshower = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.particleFlowTmp = cms.EDProducer("PFProducer",
    GedElectronValueMap = cms.InputTag("gedGsfElectronsTmp"),
    GedPhotonValueMap = cms.InputTag("gedPhotonsTmp","valMapPFEgammaCandToPhoton"),
    PFEGammaCandidates = cms.InputTag("particleFlowEGamma"),
    X0_Map = cms.string('RecoParticleFlow/PFProducer/data/allX0histos.root'),
    algoType = cms.uint32(0),
    blocks = cms.InputTag("particleFlowBlock"),
    calibHF_a_EMHAD = cms.vdouble(1.42215, 1.00496, 0.68961, 0.81656, 0.98504, 
        0.98504, 1.00802, 1.0593, 1.4576, 1.4576),
    calibHF_a_EMonly = cms.vdouble(0.96945, 0.96701, 0.76309, 0.82268, 0.87583, 
        0.89718, 0.98674, 1.4681, 1.458, 1.458),
    calibHF_b_EMHAD = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    calibHF_b_HADonly = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    calibHF_eta_step = cms.vdouble(0.0, 2.9, 3.0, 3.2, 4.2, 
        4.4, 4.6, 4.8, 5.2, 5.4),
    calibHF_use = cms.bool(False),
    calibPFSCEle_Fbrem_barrel = cms.vdouble(0.6, 6, -0.0255975, 0.0576727, 0.975442, 
        -0.000546394, 1.26147, 25, -0.02025, 0.04537, 
        0.9728, -0.0008962, 1.172),
    calibPFSCEle_Fbrem_endcap = cms.vdouble(0.9, 6.5, -0.0692932, 0.101776, 0.995338, 
        -0.00236548, 0.874998, 1.653, -0.0750184, 0.147, 
        0.923165, 0.000474665, 1.10782),
    calibPFSCEle_barrel = cms.vdouble(1.004, -1.536, 22.88, -1.467, 0.3555, 
        0.6227, 14.65, 2051, 25, 0.9932, 
        -0.5444, 0, 0.5438, 0.7109, 7.645, 
        0.2904, 0),
    calibPFSCEle_endcap = cms.vdouble(1.153, -16.5975, 5.668, -0.1772, 16.22, 
        7.326, 0.0483, -4.068, 9.406),
    cleanedHF = cms.VInputTag(cms.InputTag("particleFlowRecHitHF","Cleaned"), cms.InputTag("particleFlowClusterHF","Cleaned")),
    coneEcalIsoForEgammaSC = cms.double(0.3),
    coneTrackIsoForEgammaSC = cms.double(0.3),
    cosmicRejectionDistance = cms.double(1.0),
    debug = cms.untracked.bool(False),
    dptRel_DispVtx = cms.double(10.0),
    dzPV = cms.double(0.2),
    egammaElectrons = cms.InputTag("mvaElectrons"),
    electron_iso_combIso_barrel = cms.double(10.0),
    electron_iso_combIso_endcap = cms.double(10.0),
    electron_iso_mva_barrel = cms.double(-0.1875),
    electron_iso_mva_endcap = cms.double(-0.1075),
    electron_iso_pt = cms.double(10.0),
    electron_missinghits = cms.uint32(1),
    electron_noniso_mvaCut = cms.double(-0.1),
    electron_protectionsForJetMET = cms.PSet(
        maxDPhiIN = cms.double(0.1),
        maxE = cms.double(50.0),
        maxEcalEOverPRes = cms.double(0.2),
        maxEcalEOverP_1 = cms.double(0.5),
        maxEcalEOverP_2 = cms.double(0.2),
        maxEeleOverPout = cms.double(0.2),
        maxEeleOverPoutRes = cms.double(0.5),
        maxEleHcalEOverEcalE = cms.double(0.1),
        maxHcalE = cms.double(10.0),
        maxHcalEOverEcalE = cms.double(0.1),
        maxHcalEOverP = cms.double(1.0),
        maxNtracks = cms.double(3.0),
        maxTrackPOverEele = cms.double(1.0)
    ),
    eventFactorForCosmics = cms.double(10.0),
    eventFractionForCleaning = cms.double(0.5),
    eventFractionForRejection = cms.double(0.8),
    factors_45 = cms.vdouble(10.0, 100.0),
    iCfgCandConnector = cms.PSet(
        bCalibPrimary = cms.bool(True),
        bCorrect = cms.bool(True),
        dptRel_MergedTrack = cms.double(5.0),
        dptRel_PrimaryTrack = cms.double(10.0),
        nuclCalibFactors = cms.vdouble(0.8, 0.15, 0.5, 0.5, 0.05),
        ptErrorSecondary = cms.double(1.0)
    ),
    isolatedElectronID_mvaWeightFile = cms.string('RecoEgamma/ElectronIdentification/data/TMVA_BDTSimpleCat_17Feb2011.weights.xml'),
    maxDPtOPt = cms.double(1.0),
    maxDeltaPhiPt = cms.double(7.0),
    maxSignificance = cms.double(2.5),
    metFactorForCleaning = cms.double(4.0),
    metFactorForFakes = cms.double(4.0),
    metFactorForHighEta = cms.double(25.0),
    metFactorForRejection = cms.double(4.0),
    metSignificanceForCleaning = cms.double(3.0),
    metSignificanceForRejection = cms.double(4.0),
    minDeltaMet = cms.double(0.4),
    minEnergyForPunchThrough = cms.double(100.0),
    minHFCleaningPt = cms.double(5.0),
    minMomentumForPunchThrough = cms.double(100.0),
    minPixelHits = cms.int32(1),
    minPtForPostCleaning = cms.double(20.0),
    minSignificance = cms.double(2.5),
    minSignificanceReduction = cms.double(1.4),
    minTrackerHits = cms.int32(8),
    muon_ECAL = cms.vdouble(0.5, 0.5),
    muon_HCAL = cms.vdouble(3.0, 3.0),
    muon_HO = cms.vdouble(0.9, 0.9),
    muons = cms.InputTag("hiMuons1stStep"),
    nTrackIsoForEgammaSC = cms.uint32(2),
    nsigma_TRACK = cms.double(1.0),
    pf_GlobC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFGlobalCorr_14Dec2011.root'),
    pf_Res_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFRes_14Dec2011.root'),
    pf_convID_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_pfConversionAug0411.txt'),
    pf_conv_mvaCut = cms.double(0.0),
    pf_electronID_crackCorrection = cms.bool(False),
    pf_electronID_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_PfElectrons23Jan_IntToFloat.txt'),
    pf_electron_mvaCut = cms.double(-0.1),
    pf_electron_output_col = cms.string('electrons'),
    pf_locC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFClusterLCorr_14Dec2011.root'),
    pf_nsigma_ECAL = cms.double(0.0),
    pf_nsigma_HCAL = cms.double(1.0),
    photon_HoE = cms.double(0.05),
    photon_MinEt = cms.double(10.0),
    photon_SigmaiEtaiEta_barrel = cms.double(0.0125),
    photon_SigmaiEtaiEta_endcap = cms.double(0.034),
    photon_combIso = cms.double(10.0),
    photon_protectionsForJetMET = cms.PSet(
        sumPtTrackIso = cms.double(4.0),
        sumPtTrackIsoSlope = cms.double(0.001)
    ),
    postHFCleaning = cms.bool(False),
    postMuonCleaning = cms.bool(False),
    ptErrorScale = cms.double(8.0),
    ptFactorForHighEta = cms.double(2.0),
    pt_Error = cms.double(1.0),
    punchThroughFactor = cms.double(3.0),
    punchThroughMETFactor = cms.double(4.0),
    rejectTracks_Bad = cms.bool(True),
    rejectTracks_Step45 = cms.bool(True),
    sumEtEcalIsoForEgammaSC_barrel = cms.double(1.0),
    sumEtEcalIsoForEgammaSC_endcap = cms.double(2.0),
    sumPtTrackIsoForEgammaSC_barrel = cms.double(4.0),
    sumPtTrackIsoForEgammaSC_endcap = cms.double(4.0),
    sumPtTrackIsoForPhoton = cms.double(2.0),
    sumPtTrackIsoSlopeForPhoton = cms.double(0.001),
    trackQuality = cms.string('highPurity'),
    useCalibrationsFromDB = cms.bool(True),
    useEGammaElectrons = cms.bool(True),
    useEGammaFilters = cms.bool(True),
    useEGammaSupercluster = cms.bool(True),
    useHO = cms.bool(True),
    usePFConversions = cms.bool(False),
    usePFDecays = cms.bool(False),
    usePFElectrons = cms.bool(True),
    usePFNuclearInteractions = cms.bool(True),
    usePFPhotons = cms.bool(False),
    usePFSCEleCalib = cms.bool(True),
    usePhotonReg = cms.bool(False),
    useProtectionsForJetMET = cms.bool(True),
    useRegressionFromDB = cms.bool(True),
    useVerticesForNeutral = cms.bool(True),
    verbose = cms.untracked.bool(False),
    vertexCollection = cms.InputTag("hiSelectedVertex")
)


process.particleFlowTmpPtrs = cms.EDProducer("PFCandidateFwdPtrProducer",
    src = cms.InputTag("particleFlowTmp")
)


process.pfAllElectronsClones = cms.EDProducer("PFCandidateProductFromFwdPtrProducer",
    src = cms.InputTag("pfAllElectrons")
)


process.pfAllMuonsClones = cms.EDProducer("PFCandidateProductFromFwdPtrProducer",
    src = cms.InputTag("pfAllMuons")
)


process.pfConversions = cms.EDProducer("PFConversionProducer",
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    conversionCollection = cms.InputTag("allConversions")
)


process.pfDisplacedTrackerVertex = cms.EDProducer("PFDisplacedTrackerVertexProducer",
    displacedTrackerVertexColl = cms.InputTag("particleFlowDisplacedVertex"),
    trackColl = cms.InputTag("generalTracks")
)


process.pfElectronInterestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("pfElectronTranslator","pf"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.pfElectronInterestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("pfElectronTranslator","pf"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    severityLevel = cms.int32(1)
)


process.pfElectronTranslator = cms.EDProducer("PFElectronTranslator",
    CheckStatusFlag = cms.bool(True),
    ElectronMVA = cms.string('pf'),
    ElectronSC = cms.string('pf'),
    GSFTracks = cms.InputTag("electronGsfTracks"),
    MVACutBlock = cms.PSet(
        MVACut = cms.double(-1.0)
    ),
    PFBasicClusters = cms.string('pf'),
    PFCandidate = cms.InputTag("pfSelectedElectrons"),
    PFCandidateElectron = cms.InputTag("particleFlowTmp","electrons"),
    PFGsfElectron = cms.string('pf'),
    PFGsfElectronCore = cms.string('pf'),
    PFPreshowerClusters = cms.string('pf'),
    PFSuperClusters = cms.string('pf'),
    emptyIsOk = cms.bool(True),
    isolationValues = cms.PSet(
        pfSumChargedHadronPt = cms.InputTag("elPFIsoValueCharged04PFId"),
        pfSumNeutralHadronEt = cms.InputTag("elPFIsoValueNeutral04PFId"),
        pfSumPUPt = cms.InputTag("elPFIsoValuePU04PFId"),
        pfSumPhotonEt = cms.InputTag("elPFIsoValueGamma04PFId")
    ),
    useIsolationValues = cms.bool(False)
)


process.pfNoPileUp = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowTmpPtrs"),
    enable = cms.bool(True),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    topCollection = cms.InputTag("pfPileUp"),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpIso = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowTmpPtrs"),
    enable = cms.bool(True),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    topCollection = cms.InputTag("pfPileUpIso"),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpJME = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowPtrs"),
    enable = cms.bool(True),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    topCollection = cms.InputTag("pfPileUpJME"),
    verbose = cms.untracked.bool(False)
)


process.pfNuclear = cms.EDProducer("PFNuclearProducer",
    likelihoodCut = cms.double(0.1),
    nuclearColList = cms.VInputTag(cms.InputTag("firstnuclearInteractionMaker"))
)


process.pfPhotonInterestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("pfPhotonTranslator","pfphot"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    severityLevel = cms.int32(1)
)


process.pfPhotonInterestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    basicClustersLabel = cms.InputTag("pfPhotonTranslator","pfphot"),
    etaSize = cms.int32(5),
    interestingDetIdCollection = cms.string(''),
    keepNextToBoundary = cms.bool(True),
    keepNextToDead = cms.bool(True),
    phiSize = cms.int32(5),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    severityLevel = cms.int32(1)
)


process.pfPhotonTranslator = cms.EDProducer("PFPhotonTranslator",
    EGPhotons = cms.string('photons'),
    PFBasicClusters = cms.string('pfphot'),
    PFCandidate = cms.InputTag("pfSelectedPhotons"),
    PFConversionCollection = cms.string('pfphot'),
    PFPhotonCores = cms.string('pfphot'),
    PFPhotons = cms.string('pfphot'),
    PFPreshowerClusters = cms.string('pfphot'),
    PFSuperClusters = cms.string('pfphot'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hOverEConeSize = cms.double(0.15),
    hcalTowers = cms.InputTag("towerMaker"),
    isolationValues = cms.PSet(
        pfChargedHadrons = cms.InputTag("phPFIsoValueCharged04PFId"),
        pfNeutralHadrons = cms.InputTag("phPFIsoValueNeutral04PFId"),
        pfPhotons = cms.InputTag("phPFIsoValueGamma04PFId")
    ),
    primaryVertexProducer = cms.string('offlinePrimaryVerticesWithBS')
)


process.pfPileUp = cms.EDProducer("PFPileUp",
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowTmpPtrs"),
    Vertices = cms.InputTag("offlinePrimaryVertices"),
    checkClosestZVertex = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.pfPileUpIso = cms.EDProducer("PFPileUp",
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowTmpPtrs"),
    Vertices = cms.InputTag("offlinePrimaryVertices"),
    checkClosestZVertex = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.pfPileUpJME = cms.EDProducer("PFPileUp",
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowPtrs"),
    Vertices = cms.InputTag("goodOfflinePrimaryVertices"),
    checkClosestZVertex = cms.bool(False),
    verbose = cms.untracked.bool(False)
)


process.pfTrack = cms.EDProducer("PFTrackProducer",
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks"),
    GsfTracksInEvents = cms.bool(True),
    MuColl = cms.InputTag("hiMuons1stStep"),
    PrimaryVertexLabel = cms.InputTag("hiSelectedVertex"),
    TkColList = cms.VInputTag("hiGeneralTracks"),
    TrackQuality = cms.string('highPurity'),
    TrajInEvents = cms.bool(False),
    UseQuality = cms.bool(True)
)


process.pfTrackElec = cms.EDProducer("PFElecTkProducer",
    AbsEtaBarrelEndcapsSeparation = cms.double(1.479),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks"),
    MaxConvBremRecoPT = cms.double(49.0),
    MinDEtaGsfSC = cms.double(0.06),
    MinDPhiGsfSC = cms.double(0.15),
    MinSCEnergy = cms.double(4.0),
    ModeMomentum = cms.bool(True),
    PFConversions = cms.InputTag("pfConversions"),
    PFEcalClusters = cms.InputTag("particleFlowClusterECAL"),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    PFRecTrackLabel = cms.InputTag("pfTrack"),
    PFV0 = cms.InputTag("pfV0"),
    PrimaryVertexLabel = cms.InputTag("hiSelectedVertex"),
    Propagator = cms.string('fwdElectronPropagator'),
    PtLowHighSeparation = cms.double(20),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajInEvents = cms.bool(False),
    applyAlsoGsfAngularCleaning = cms.bool(True),
    applyEGSelection = cms.bool(False),
    applyGsfTrackCleaning = cms.bool(True),
    debugGsfCleaning = cms.bool(False),
    maxDEtaGsfAngularCleaning = cms.double(0.05),
    maxDPhiBremTangGsfAngularCleaning = cms.double(0.05),
    pf_convBremFinderID_mvaCutBarrelHighPt = cms.double(0.97),
    pf_convBremFinderID_mvaCutBarrelLowPt = cms.double(0.6),
    pf_convBremFinderID_mvaCutEndcapsHighPt = cms.double(0.995),
    pf_convBremFinderID_mvaCutEndcapsLowPt = cms.double(0.9),
    pf_convBremFinderID_mvaWeightFileBarrelHighPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileBarrelLowPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetalt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsHighPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetgt20absetagt1_479_BDT.weights.xml'),
    pf_convBremFinderID_mvaWeightFileEndcapsLowPt = cms.string('RecoParticleFlow/PFTracking/data/TMVAClassification_ConvBremFinder_Testetlt20absetagt1_479_BDT.weights.xml'),
    useConvBremFinder = cms.bool(True),
    useConversions = cms.bool(False),
    useFifthStepForEcalDrivenGsf = cms.bool(False),
    useFifthStepForTrackerDrivenGsf = cms.bool(False),
    useNuclear = cms.bool(False),
    useV0 = cms.bool(False)
)


process.pfV0 = cms.EDProducer("PFV0Producer",
    V0List = cms.VInputTag(cms.InputTag("generalV0Candidates","Kshort"), cms.InputTag("generalV0Candidates","Lambda"))
)


process.phPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfSelectedPhotons"),
    trackType = cms.string('candidate')
)


process.phPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfSelectedPhotons"),
    trackType = cms.string('candidate')
)


process.phPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('PFCandWithSuperClusterExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        MissHitSCMatch_Veto = cms.bool(False),
        SCMatch_Veto = cms.bool(True),
        inputCandView = cms.InputTag("pfAllPhotons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfSelectedPhotons"),
    trackType = cms.string('candidate')
)


process.phPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfSelectedPhotons"),
    trackType = cms.string('candidate')
)


process.phPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    ExtractorPSet = cms.PSet(
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(99999.99),
        Diff_z = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles")
    ),
    MultipleDepositsFlag = cms.bool(False),
    src = cms.InputTag("pfSelectedPhotons"),
    trackType = cms.string('candidate')
)


process.phPFIsoValueCharged03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositCharged"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueCharged04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositCharged"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueChargedAll03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositChargedAll"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueChargedAll04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositChargedAll"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueGamma03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueGamma04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositGamma"),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueNeutral03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValueNeutral04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositNeutral"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValuePU03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.3),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositPU"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.phPFIsoValuePU04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        PivotCoordinatesForEBEE = cms.bool(True),
        deltaR = cms.double(0.4),
        mode = cms.string('sum'),
        skipDefaultVeto = cms.bool(True),
        src = cms.InputTag("phPFIsoDepositPU"),
        vetos = cms.vstring(),
        weight = cms.string('1')
    ))
)


process.photonCore = cms.EDProducer("PhotonCoreProducer",
    conversionProducer = cms.InputTag(""),
    minSCEt = cms.double(8.0),
    photonCoreCollection = cms.string(''),
    pixelSeedProducer = cms.InputTag("electronMergedSeeds"),
    risolveConversionAmbiguity = cms.bool(True),
    scHybridBarrelProducer = cms.InputTag("correctedIslandBarrelSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("correctedIslandEndcapSuperClusters")
)


process.photonIsolationHIProducer = cms.EDProducer("photonIsolationHIProducer",
    basicClusterBarrel = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    basicClusterEndcap = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    ebRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    eeRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbhe = cms.InputTag("hbhereco"),
    hf = cms.InputTag("hfreco"),
    ho = cms.InputTag("horeco"),
    photonProducer = cms.InputTag("photons"),
    trackCollection = cms.InputTag("hiGeneralTracks"),
    trackQuality = cms.string('highPurity')
)


process.photonIsolationHIProducerGED = cms.EDProducer("photonIsolationHIProducer",
    basicClusterBarrel = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    basicClusterEndcap = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    ebRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    eeRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbhe = cms.InputTag("hbhereco"),
    hf = cms.InputTag("hfreco"),
    ho = cms.InputTag("horeco"),
    photonProducer = cms.InputTag("gedPhotonsTmp"),
    trackCollection = cms.InputTag("hiGeneralTracks"),
    trackQuality = cms.string('highPurity')
)


process.photons = cms.EDProducer("PhotonProducer",
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    candidateP4type = cms.string('fromEcalEnergy'),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    hOverEConeSize = cms.double(0.15),
    hbheInstance = cms.string(''),
    hbheModule = cms.string('hbhereco'),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    hcalTowers = cms.InputTag("towerMaker"),
    highEt = cms.double(100.0),
    isolationSumsCalculatorSet = cms.PSet(
        ComponentName = cms.string('isolationSumsCalculator'),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        longImpactParameterA_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterB_Endcap = cms.double(0.2),
        moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58),
        modulePhiBoundary = cms.double(0.0087),
        trackProducer = cms.InputTag("hiGeneralTracks"),
        transImpactParameterA_Barrel = cms.double(0.1),
        transImpactParameterA_Endcap = cms.double(0.1),
        transImpactParameterB_Barrel = cms.double(0.1),
        transImpactParameterB_Endcap = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        vetoClustered = cms.bool(False)
    ),
    maxHoverEBarrel = cms.double(0.99),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(10.0),
    minR9Endcap = cms.double(10.0),
    minSCEtBarrel = cms.double(5.0),
    minSCEtEndcap = cms.double(15.0),
    mipVariableSet = cms.PSet(
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0),
        ResidualWidth = cms.double(0.23),
        XRangeFit = cms.double(180.0),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
    ),
    nTrackHollowConeBarrel = cms.double(999999999),
    nTrackHollowConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    nTrackSolidConeEndcap = cms.double(999999999),
    photonCoreProducer = cms.InputTag("photonCore"),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_logweight = cms.bool(True),
    posCalc_t0_barl = cms.double(7.7),
    posCalc_t0_endc = cms.double(6.3),
    posCalc_t0_endcPresh = cms.double(3.6),
    posCalc_w0 = cms.double(4.2),
    posCalc_x0 = cms.double(0.89),
    primaryVertexProducer = cms.InputTag("hiSelectedVertex"),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    usePrimaryVertex = cms.bool(True)
)


process.pixelLessLayerPairs4PixelLessTracking = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(

    ),
    FPix = cms.PSet(

    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB = cms.PSet(

    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TID = cms.PSet(

    ),
    TID1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(3),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TID2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(3),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TID3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        useRingSlector = cms.bool(True),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring('TIB1+TIB2', 
        'TIB1+TIB3', 
        'TIB2+TIB3', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TIB2+TID1_pos', 
        'TIB2+TID1_neg', 
        'TIB1+TID2_pos', 
        'TIB1+TID2_neg', 
        'TID1_pos+TID2_pos', 
        'TID2_pos+TID3_pos', 
        'TID3_pos+TEC2_pos', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TID1_neg+TID2_neg', 
        'TID2_neg+TID3_neg', 
        'TID3_neg+TEC2_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg')
)


process.pixelLessStep = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("pixelLessStepTracks"), cms.InputTag("pixelLessStepTracks")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1),
    indivShareFrac = cms.vdouble(0.11, 0.11),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("pixelLessStepSelector","pixelLessStep"), cms.InputTag("pixelLessStepSelector","pixelLessStepVtx")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    shareFrac = cms.double(0.11),
    writeOnlyTrkQuals = cms.bool(True)
)


process.pixelLessStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("mixedTripletStepClusters"),
    overrideTrkQuals = cms.InputTag("mixedTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("mixedTripletStepTracks")
)


process.pixelLessStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    MTEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        maxRing = cms.int32(3),
        minRing = cms.int32(3),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    MTIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters")
    ),
    MTID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        maxRing = cms.int32(3),
        minRing = cms.int32(3),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    TIB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        skipClusters = cms.InputTag("pixelLessStepClusters")
    ),
    TID = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutTight')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        useRingSlector = cms.bool(True)
    ),
    layerList = cms.vstring('TIB1+TIB2+MTIB3', 
        'TIB1+TIB2+MTID1_pos', 
        'TIB1+TIB2+MTID1_neg', 
        'TID1_pos+TID2_pos+TID3_pos', 
        'TID1_neg+TID2_neg+TID3_neg', 
        'TID1_pos+TID2_pos+MTID3_pos', 
        'TID1_neg+TID2_neg+MTID3_neg', 
        'TID1_pos+TID2_pos+MTEC1_pos', 
        'TID1_neg+TID2_neg+MTEC1_neg', 
        'TID2_pos+TID3_pos+TEC1_pos', 
        'TID2_neg+TID3_neg+TEC1_neg', 
        'TID2_pos+TID3_pos+MTEC1_pos', 
        'TID2_neg+TID3_neg+MTEC1_neg', 
        'TEC1_pos+TEC2_pos+TEC3_pos', 
        'TEC1_neg+TEC2_neg+TEC3_neg', 
        'TEC1_pos+TEC2_pos+MTEC3_pos', 
        'TEC1_neg+TEC2_neg+MTEC3_neg', 
        'TEC1_pos+TEC2_pos+TEC4_pos', 
        'TEC1_neg+TEC2_neg+TEC4_neg', 
        'TEC1_pos+TEC2_pos+MTEC4_pos', 
        'TEC1_neg+TEC2_neg+MTEC4_neg', 
        'TEC2_pos+TEC3_pos+TEC4_pos', 
        'TEC2_neg+TEC3_neg+TEC4_neg', 
        'TEC2_pos+TEC3_pos+MTEC4_pos', 
        'TEC2_neg+TEC3_neg+MTEC4_neg', 
        'TEC2_pos+TEC3_pos+TEC5_pos', 
        'TEC2_neg+TEC3_neg+TEC5_neg', 
        'TEC2_pos+TEC3_pos+TEC6_pos', 
        'TEC2_neg+TEC3_neg+TEC6_neg', 
        'TEC3_pos+TEC4_pos+TEC5_pos', 
        'TEC3_neg+TEC4_neg+TEC5_neg', 
        'TEC3_pos+TEC4_pos+MTEC5_pos', 
        'TEC3_neg+TEC4_neg+MTEC5_neg', 
        'TEC3_pos+TEC5_pos+TEC6_pos', 
        'TEC3_neg+TEC5_neg+TEC6_neg', 
        'TEC4_pos+TEC5_pos+TEC6_pos', 
        'TEC4_neg+TEC5_neg+TEC6_neg')
)


process.pixelLessStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardMultiHitGenerator'),
        GeneratorPSet = cms.PSet(
            ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
            ComponentName = cms.string('MultiHitGeneratorFromChi2'),
            TTRHBuilder = cms.string('WithTrackAngle'),
            chi2VsPtCut = cms.bool(True),
            chi2_cuts = cms.vdouble(3.0, 4.0, 5.0, 5.0),
            debug = cms.bool(False),
            detIdsToDebug = cms.vint32(0, 0, 0),
            extraHitRPhitolerance = cms.double(0.0),
            extraHitRZtolerance = cms.double(0.0),
            extraPhiKDBox = cms.double(0.005),
            extraRKDBox = cms.double(0.2),
            extraZKDBox = cms.double(0.2),
            fnSigmaRZ = cms.double(2.0),
            maxChi2 = cms.double(5.0),
            maxElement = cms.uint32(100000),
            phiPreFiltering = cms.double(0.3),
            pt_interv = cms.vdouble(0.4, 0.7, 1.0, 2.0),
            refitHits = cms.bool(True),
            useFixedPreFiltering = cms.bool(False)
        ),
        SeedingLayers = cms.InputTag("pixelLessStepSeedLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originHalfLength = cms.double(12.0),
            originRadius = cms.double(1.0),
            precise = cms.bool(True),
            ptMin = cms.double(0.4)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('CombinedSeedComparitor'),
        comparitors = cms.VPSet(cms.PSet(
            ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
            ClusterShapeHitFilterName = cms.string('pixelLessStepClusterShapeHitFilter'),
            ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
            FilterAtHelixStage = cms.bool(True),
            FilterPixelHits = cms.bool(False),
            FilterStripHits = cms.bool(True)
        ), 
            cms.PSet(
                ComponentName = cms.string('StripSubClusterShapeSeedFilter'),
                FilterAtHelixStage = cms.bool(False),
                label = cms.untracked.string('Seeds'),
                maxNSat = cms.uint32(3),
                maxTrimmedSizeDiffNeg = cms.double(1.0),
                maxTrimmedSizeDiffPos = cms.double(0.7),
                seedCutMIPs = cms.double(0.35),
                seedCutSN = cms.double(7.0),
                subclusterCutMIPs = cms.double(0.45),
                subclusterCutSN = cms.double(12.0),
                subclusterWindow = cms.double(0.7),
                trimMaxADC = cms.double(30.0),
                trimMaxFracNeigh = cms.double(0.25),
                trimMaxFracTotal = cms.double(0.15)
            )),
        mode = cms.string('and')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.pixelLessStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("pixelLessStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        GBRForestLabel = cms.string('MVASelectorIter5_13TeV'),
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(9999),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(1.2, 4.0),
        d0_par2 = cms.vdouble(1.2, 4.0),
        dz_par1 = cms.vdouble(1.2, 4.0),
        dz_par2 = cms.vdouble(1.2, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minMVA = cms.double(-0.4),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        mvaType = cms.string('Prompt'),
        nSigmaZ = cms.double(4.0),
        name = cms.string('pixelLessStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.001),
        useMVA = cms.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter5_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.3),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.9, 4.0),
            d0_par2 = cms.vdouble(0.9, 4.0),
            dz_par1 = cms.vdouble(0.9, 4.0),
            dz_par2 = cms.vdouble(0.9, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(4),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelLessStepTight'),
            preFilterName = cms.string('pixelLessStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.001),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter5_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.7, 4.0),
            d0_par2 = cms.vdouble(0.7, 4.0),
            dz_par1 = cms.vdouble(0.7, 4.0),
            dz_par2 = cms.vdouble(0.7, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.4),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelLessStep'),
            preFilterName = cms.string('pixelLessStepLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            useMVA = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter0_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(9999),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(1.0, 3.0),
            d0_par2 = cms.vdouble(1.1, 3.0),
            dz_par1 = cms.vdouble(1.0, 3.0),
            dz_par2 = cms.vdouble(1.1, 3.0),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.0),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelLessStepVtx'),
            preFilterName = cms.string(''),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.001),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.pixelLessStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('pixelLessStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('pixelLessStepTrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("pixelLessStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    src = cms.InputTag("pixelLessStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.pixelLessStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('pixelLessStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("pixelLessStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.pixelPairStepClusters = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(9.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag("lowPtTripletStepClusters"),
    overrideTrkQuals = cms.InputTag("lowPtTripletStepSelector","lowPtTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("lowPtTripletStepTracks")
)


process.pixelPairStepSeedLayers = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("pixelPairStepClusters")
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("pixelPairStepClusters")
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg')
)


process.pixelPairStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        MaxNumberOfPixelClusters = cms.uint32(40000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        doClusterCheck = cms.bool(True)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("pixelPairStepSeedLayers"),
        maxElement = cms.uint32(1000000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer'),
        RegionPSet = cms.PSet(
            VertexCollection = cms.InputTag("firstStepPrimaryVertices"),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            fixedError = cms.double(0.03),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.015),
            precise = cms.bool(True),
            ptMin = cms.double(0.6),
            sigmaZVertex = cms.double(3.0),
            useFakeVertices = cms.bool(False),
            useFixedError = cms.bool(True),
            useFoundVertices = cms.bool(True)
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ClusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        FilterAtHelixStage = cms.bool(True),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False)
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.pixelPairStepSelector = cms.EDProducer("MultiTrackSelector",
    beamspot = cms.InputTag("offlineBeamSpot"),
    src = cms.InputTag("pixelPairStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        GBRForestLabel = cms.string('MVASelectorIter2_13TeV'),
        applyAbsCutsIfNoPV = cms.bool(False),
        applyAdaptedPVCuts = cms.bool(True),
        chi2n_no1Dmod_par = cms.double(9999),
        chi2n_par = cms.double(1.6),
        copyExtras = cms.untracked.bool(True),
        copyTrajectories = cms.untracked.bool(False),
        d0_par1 = cms.vdouble(0.55, 4.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_d0 = cms.double(100.0),
        max_eta = cms.double(9999.0),
        max_lostHitFraction = cms.double(1.0),
        max_minMissHitOutOrIn = cms.int32(99),
        max_relpterr = cms.double(9999.0),
        max_z0 = cms.double(100.0),
        minHitsToBypassChecks = cms.uint32(20),
        minMVA = cms.double(-0.2),
        minNumber3DLayers = cms.uint32(0),
        minNumberLayers = cms.uint32(0),
        min_eta = cms.double(-9999.0),
        min_nhits = cms.uint32(0),
        mvaType = cms.string('Prompt'),
        nSigmaZ = cms.double(4.0),
        name = cms.string('pixelPairStepLoose'),
        preFilterName = cms.string(''),
        qualityBit = cms.string('loose'),
        res_par = cms.vdouble(0.003, 0.01),
        useMVA = cms.bool(True),
        useMVAonly = cms.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        vtxNumber = cms.int32(-1)
    ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter2_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(0.7),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.3, 4.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minNumber3DLayers = cms.uint32(3),
            minNumberLayers = cms.uint32(3),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelPairStepTight'),
            preFilterName = cms.string('pixelPairStepLoose'),
            qualityBit = cms.string('tight'),
            res_par = cms.vdouble(0.003, 0.01),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        ), 
        cms.PSet(
            GBRForestLabel = cms.string('MVASelectorIter2_13TeV'),
            applyAbsCutsIfNoPV = cms.bool(False),
            applyAdaptedPVCuts = cms.bool(True),
            chi2n_no1Dmod_par = cms.double(9999),
            chi2n_par = cms.double(1.6),
            copyExtras = cms.untracked.bool(True),
            copyTrajectories = cms.untracked.bool(False),
            d0_par1 = cms.vdouble(0.55, 4.0),
            d0_par2 = cms.vdouble(0.55, 4.0),
            dz_par1 = cms.vdouble(0.65, 4.0),
            dz_par2 = cms.vdouble(0.45, 4.0),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(999),
            max_d0 = cms.double(100.0),
            max_eta = cms.double(9999.0),
            max_lostHitFraction = cms.double(1.0),
            max_minMissHitOutOrIn = cms.int32(99),
            max_relpterr = cms.double(9999.0),
            max_z0 = cms.double(100.0),
            minHitsToBypassChecks = cms.uint32(20),
            minMVA = cms.double(0.3),
            minNumber3DLayers = cms.uint32(0),
            minNumberLayers = cms.uint32(0),
            min_eta = cms.double(-9999.0),
            min_nhits = cms.uint32(0),
            mvaType = cms.string('Prompt'),
            nSigmaZ = cms.double(4.0),
            name = cms.string('pixelPairStep'),
            preFilterName = cms.string('pixelPairStepLoose'),
            qualityBit = cms.string('highPurity'),
            res_par = cms.vdouble(0.003, 0.01),
            useMVA = cms.bool(True),
            useMVAonly = cms.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            vtxNumber = cms.int32(-1)
        )),
    useAnyMVA = cms.bool(True),
    useVertices = cms.bool(True),
    useVtxError = cms.bool(False),
    vertices = cms.InputTag("firstStepPrimaryVertices")
)


process.pixelPairStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('pixelPairStepTrajectoryBuilder')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    clustersToSkip = cms.InputTag("pixelPairStepClusters"),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    numHitsForSeedCleaner = cms.int32(50),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    src = cms.InputTag("pixelPairStepSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.pixelPairStepTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('pixelPairStep'),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("pixelPairStepTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.preDuplicateMergingDisplacedTracks = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(100.0),
    LostHitPenalty = cms.double(1.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag("muonSeededTracksInOut"), cms.InputTag("muonSeededTracksOutInDisplaced")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(1, 1),
    indivShareFrac = cms.vdouble(1.0, 0.19, 0.16, 0.19, 0.13, 
        0.11, 0.11, 0.09),
    makeReKeyedSeeds = cms.untracked.bool(False),
    mvaValueTags = cms.VInputTag(cms.InputTag("muonSeededTracksInOutSelector","MVAVals"), cms.InputTag("muonSeededTracksOutInDisplacedSelector","MVAVals")),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("muonSeededTracksInOutSelector","muonSeededTracksInOutHighPurity"), cms.InputTag("muonSeededTracksOutInDisplacedSelector","muonSeededTracksOutInDisplacedHighPurity")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(1, 2)
    )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.preshowerClusterShape = cms.EDProducer("PreshowerClusterShapeProducer",
    PreshowerClusterShapeCollectionX = cms.string('preshowerXClustersShape'),
    PreshowerClusterShapeCollectionY = cms.string('preshowerYClustersShape'),
    debugLevel = cms.string('INFO'),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapSuperClusters"),
    preshPi0Nstrip = cms.int32(5),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    preshStripEnergyCut = cms.double(0.0)
)


process.randomEngineStateProducer = cms.EDProducer("RandomEngineStateProducer")


process.rctDigis = cms.EDProducer("RctRawToDigi",
    inputLabel = cms.InputTag("rawDataCollector"),
    rctFedId = cms.untracked.int32(1350),
    verbose = cms.untracked.bool(False)
)


process.recalomuons = cms.EDProducer("CaloMuonProducer",
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    inputCollection = cms.InputTag("remuons"),
    inputMuons = cms.InputTag("remuons"),
    inputTracks = cms.InputTag("hiGeneralAndRegitMuTracks"),
    minCaloCompatibility = cms.double(0.6),
    minPt = cms.double(1.0)
)


process.refittedStandAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("ancientMuonSeed"),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    STATrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(True),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            ForceAllIterations = cms.bool(False),
            MaxFractionOfLostHits = cms.double(0.05),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        ),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.regionalCosmicCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    SimpleMagneticField = cms.string(''),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder'),
    TrajectoryBuilderPSet = cms.PSet(
        refToPSet_ = cms.string('GroupedCkfTrajectoryBuilderP5')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    TransientInitialStateEstimatorParameters = cms.PSet(
        numberMeasurementsForFit = cms.int32(4),
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    cleanTrajectoryAfterInOut = cms.bool(True),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    src = cms.InputTag("regionalCosmicTrackerSeeds"),
    useHitsSplitting = cms.bool(True)
)


process.regionalCosmicTrackerSeedingLayers = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        maxRing = cms.int32(7),
        minRing = cms.int32(6),
        useRingSlector = cms.bool(False)
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    ),
    layerList = cms.vstring('TOB6+TOB5', 
        'TOB6+TOB4', 
        'TOB6+TOB3', 
        'TOB5+TOB4', 
        'TOB5+TOB3', 
        'TOB4+TOB3', 
        'TEC1_neg+TOB6', 
        'TEC1_neg+TOB5', 
        'TEC1_neg+TOB4', 
        'TEC1_pos+TOB6', 
        'TEC1_pos+TOB5', 
        'TEC1_pos+TOB4')
)


process.regionalCosmicTrackerSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(10000),
        MaxNumberOfPixelClusters = cms.uint32(10000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(False)
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('GenericPairGenerator'),
        LayerSrc = cms.InputTag("regionalCosmicTrackerSeedingLayers")
    ),
    RegionFactoryPSet = cms.PSet(
        CollectionsPSet = cms.PSet(
            recoL2MuonsCollection = cms.InputTag(""),
            recoMuonsCollection = cms.InputTag(""),
            recoTrackMuonsCollection = cms.InputTag("cosmicMuons")
        ),
        ComponentName = cms.string('CosmicRegionalSeedGenerator'),
        RegionInJetsCheckPSet = cms.PSet(
            deltaRExclusionSize = cms.double(0.3),
            doJetsExclusionCheck = cms.bool(True),
            jetsPtMin = cms.double(5),
            recoCaloJetsCollection = cms.InputTag("ak4CaloJets")
        ),
        RegionPSet = cms.PSet(
            deltaEtaRegion = cms.double(0.1),
            deltaPhiRegion = cms.double(0.1),
            measurementTrackerName = cms.string(''),
            precise = cms.bool(True),
            ptMin = cms.double(1.0),
            rVertex = cms.double(5),
            zVertex = cms.double(5)
        ),
        ToolsPSet = cms.PSet(
            regionBase = cms.string('seedOnCosmicMuon'),
            thePropagatorName = cms.string('AnalyticalPropagator')
        )
    ),
    RegionInJetsCheckPSet = cms.PSet(
        doJetsExclusionCheck = cms.bool(False)
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('CosmicSeedCreator'),
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        TTRHBuilder = cms.string('WithTrackAngle'),
        forceKinematicWithRegionDirection = cms.bool(False),
        magneticField = cms.string('ParabolicMf'),
        maxseeds = cms.int32(10000),
        propagator = cms.string('PropagatorWithMaterialParabolicMf')
    )
)


process.regionalCosmicTracks = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('ctf'),
    Fitter = cms.string('FittingSmootherRKP5'),
    GeometricInnerState = cms.bool(True),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("regionalCosmicCkfTrackCandidates"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.reglbTrackQual = cms.EDProducer("GlobalTrackQualityProducer",
    BaseLabel = cms.string('GLB'),
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    ),
    InputCollection = cms.InputTag("reglobalMuons"),
    InputLinksCollection = cms.InputTag("reglobalMuons"),
    MaxChi2 = cms.double(100000.0),
    RefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutDT = cms.double(30.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(10, 10),
        DYTupdator = cms.bool(True),
        DYTuseAPE = cms.bool(False),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        HitThreshold = cms.int32(1),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        RefitDirection = cms.string('insideOut'),
        RefitFlag = cms.bool(True),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    nSigma = cms.double(3.0)
)


process.reglobalMuons = cms.EDProducer("GlobalMuonProducer",
    GLBTrajBuilderParameters = cms.PSet(
        GlbRefitterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            Chi2CutRPC = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            DYTselector = cms.int32(1),
            DYTthrs = cms.vint32(20, 30),
            DYTupdator = cms.bool(False),
            DYTuseAPE = cms.bool(False),
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('GlbMuKFFitter'),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            PropDirForCosmics = cms.bool(False),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            PtCut = cms.double(1.0),
            RefitDirection = cms.string('insideOut'),
            RefitFlag = cms.bool(True),
            RefitRPCHits = cms.bool(True),
            SkipStation = cms.int32(-1),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
            TrackerSkipSection = cms.int32(-1),
            TrackerSkipSystem = cms.int32(-1)
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Chi2Cut_1 = cms.double(50.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaDCut_2 = cms.double(10.0),
            DeltaDCut_3 = cms.double(15.0),
            DeltaRCut_1 = cms.double(0.1),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            Eta_threshold = cms.double(1.2),
            LocChi2Cut = cms.double(20.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Propagator = cms.string('SmartPropagatorRK'),
            Pt_threshold1 = cms.double(0.0),
            Pt_threshold2 = cms.double(999999999.0),
            Quality_1 = cms.double(20.0),
            Quality_2 = cms.double(15.0),
            Quality_3 = cms.double(7.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        MuonTrackingRegionBuilder = cms.PSet(
            DeltaEta = cms.double(0.2),
            DeltaPhi = cms.double(0.2),
            DeltaR = cms.double(0.2),
            DeltaZ = cms.double(15.9),
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            Eta_fixed = cms.bool(False),
            Eta_min = cms.double(0.1),
            MeasurementTrackerName = cms.InputTag(""),
            OnDemand = cms.int32(-1),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            Phi_fixed = cms.bool(False),
            Phi_min = cms.double(0.1),
            Pt_fixed = cms.bool(False),
            Pt_min = cms.double(1.5),
            Rescale_Dz = cms.double(3.0),
            Rescale_eta = cms.double(3.0),
            Rescale_phi = cms.double(3.0),
            UseVertex = cms.bool(False),
            Z_fixed = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            input = cms.InputTag(""),
            maxRegions = cms.int32(1),
            precise = cms.bool(True),
            vertexCollection = cms.InputTag("")
        ),
        PCut = cms.double(2.5),
        PtCut = cms.double(1.0),
        RefitRPCHits = cms.bool(True),
        ScaleTECxFactor = cms.double(-1.0),
        ScaleTECyFactor = cms.double(-1.0),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
        ),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    MuonCollectionLabel = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    TrackerCollectionLabel = cms.InputTag("hiGeneralAndRegitMuTracks")
)


process.remuIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    inputTags = cms.VInputTag(cms.InputTag("remuons","ecal"), cms.InputTag("remuons","hcal"), cms.InputTag("remuons","ho"))
)


process.remuIsoDepositJets = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("remuons","jets"))
)


process.remuIsoDepositTk = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("remuons","tracker"))
)


process.remuonEcalDetIds = cms.EDProducer("InterestingEcalDetIdProducer",
    inputCollection = cms.InputTag("remuons")
)


process.remuonShowerInformation = cms.EDProducer("MuonShowerInformationProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    ShowerInformationFillerParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    ),
    muonCollection = cms.InputTag("remuons"),
    trackCollection = cms.InputTag("generalTracks")
)


process.remuons = cms.EDProducer("MuonIdProducer",
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("iterativeConePu5CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    ),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("hiGeneralAndRegitMuTracks")
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    ),
    addExtraSoftMuons = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        ClusterDPhi = cms.double(0.6),
        ClusterDTheta = cms.double(0.02),
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        OverlapDTheta = cms.double(0.02)
    ),
    debugWithTruthMatching = cms.bool(False),
    ecalDepositName = cms.string('ecal'),
    fillCaloCompatibility = cms.bool(True),
    fillEnergy = cms.bool(True),
    fillGlobalTrackQuality = cms.bool(True),
    fillGlobalTrackRefits = cms.bool(True),
    fillIsolation = cms.bool(True),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    globalTrackQualityInputTag = cms.InputTag("reglbTrackQual"),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    inputCollectionLabels = cms.VInputTag("hiGeneralAndRegitMuTracks", "reglobalMuons", "standAloneMuons:UpdatedAtVtx", "retevMuons:firstHit", "retevMuons:picky", 
        "retevMuons:dyt"),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks', 
        'tev firstHit', 
        'tev picky', 
        'tev dyt'),
    jetDepositName = cms.string('jets'),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    maxAbsEta = cms.double(3.0),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minCaloCompatibility = cms.double(0.6),
    minNumberOfMatches = cms.int32(1),
    minP = cms.double(2.5),
    minPCaloMuon = cms.double(1.0),
    minPt = cms.double(0.8),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    runArbitrationCleaner = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    trackDepositName = cms.string('tracker'),
    writeIsoDeposits = cms.bool(True)
)


process.retevMuons = cms.EDProducer("TevMuonProducer",
    MuonCollectionLabel = cms.InputTag("reglobalMuons"),
    RefitIndex = cms.vint32(1, 2, 3, 4),
    Refits = cms.vstring('default', 
        'firstHit', 
        'picky', 
        'dyt'),
    RefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutDT = cms.double(30.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(10, 10),
        DYTupdator = cms.bool(True),
        DYTuseAPE = cms.bool(False),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        HitThreshold = cms.int32(1),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        RefitDirection = cms.string('insideOut'),
        RefitFlag = cms.bool(True),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.rpcRecHits = cms.EDProducer("RPCRecHitProducer",
    deadSource = cms.string('File'),
    deadvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCDeadVec.dat'),
    maskSource = cms.string('File'),
    maskvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCMaskVec.dat'),
    recAlgo = cms.string('RPCRecHitStandardAlgo'),
    recAlgoConfig = cms.PSet(

    ),
    rpcDigiLabel = cms.InputTag("muonRPCDigis")
)


process.rpcTriggerDigis = cms.EDProducer("RPCTrigger",
    RPCTriggerDebug = cms.untracked.int32(0),
    label = cms.string('muonRPCDigis')
)


process.scalerBeamSpot = cms.EDProducer("BeamSpotOnlineProducer",
    changeToCMSCoordinates = cms.bool(False),
    gtEvmLabel = cms.InputTag("gtEvmDigis"),
    maxRadius = cms.double(2),
    maxZ = cms.double(40),
    setSigmaZ = cms.double(-1),
    src = cms.InputTag("scalersRawToDigi")
)


process.scalersRawToDigi = cms.EDProducer("ScalersRawToDigi",
    scalersInputTag = cms.InputTag("rawDataRepacker")
)


process.seedingLayersEDProducer = cms.EDProducer("SeedingLayersEDProducer",
    BPix = cms.PSet(

    ),
    FPix = cms.PSet(

    ),
    MTEC = cms.PSet(

    ),
    MTIB = cms.PSet(

    ),
    MTID = cms.PSet(

    ),
    MTOB = cms.PSet(

    ),
    TEC = cms.PSet(

    ),
    TIB = cms.PSet(

    ),
    TID = cms.PSet(

    ),
    TOB = cms.PSet(

    ),
    layerList = cms.vstring()
)


process.siPixelClusterShapeCache = cms.EDProducer("SiPixelClusterShapeCacheProducer",
    onDemand = cms.bool(False),
    src = cms.InputTag("siPixelClusters")
)


process.siPixelClusterShapeCachePreSplitting = cms.EDProducer("SiPixelClusterShapeCacheProducer",
    onDemand = cms.bool(False),
    src = cms.InputTag("siPixelClustersPreSplitting")
)


process.siPixelClusters = cms.EDProducer("JetCoreClusterSplitter",
    centralMIPCharge = cms.double(26000),
    chargeFractionMin = cms.double(2.0),
    chargePerUnit = cms.double(2000),
    cores = cms.InputTag("hiJetsForCoreTrackingPreSplitting"),
    deltaRmax = cms.double(0.1),
    forceXError = cms.double(100),
    forceYError = cms.double(150),
    fractionalWidth = cms.double(0.4),
    pixelCPE = cms.string('PixelCPEGeneric'),
    pixelClusters = cms.InputTag("siPixelClustersPreSplitting"),
    ptMin = cms.double(100),
    verbose = cms.bool(False),
    vertices = cms.InputTag("hiSelectedVertexPreSplitting")
)


process.siPixelClustersBottom = cms.EDProducer("PixelClusterSelectorTopBottom",
    label = cms.InputTag("siPixelClusters"),
    y = cms.double(-1)
)


process.siPixelClustersPreSplitting = cms.EDProducer("SiPixelClusterProducer",
    ChannelThreshold = cms.int32(1000),
    ClusterThreshold = cms.double(4000.0),
    MissCalibrate = cms.untracked.bool(True),
    SeedThreshold = cms.int32(1000),
    SplitClusters = cms.bool(False),
    VCaltoElectronGain = cms.int32(65),
    VCaltoElectronOffset = cms.int32(-414),
    maxNumberOfClusters = cms.int32(-1),
    payloadType = cms.string('Offline'),
    src = cms.InputTag("siPixelDigis")
)


process.siPixelClustersTop = cms.EDProducer("PixelClusterSelectorTopBottom",
    label = cms.InputTag("siPixelClusters"),
    y = cms.double(1)
)


process.siPixelDigis = cms.EDProducer("SiPixelRawToDigi",
    ErrorList = cms.vint32(29),
    IncludeErrors = cms.bool(True),
    InputLabel = cms.InputTag("rawDataRepacker"),
    Regions = cms.PSet(

    ),
    Timing = cms.untracked.bool(False),
    UsePhase1 = cms.bool(False),
    UsePilotBlade = cms.bool(False),
    UseQualityInfo = cms.bool(False),
    UserErrorList = cms.vint32(40)
)


process.siPixelRecHits = cms.EDProducer("SiPixelRecHitConverter",
    CPE = cms.string('PixelCPEGeneric'),
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClusters")
)


process.siPixelRecHitsBottom = cms.EDProducer("SiPixelRecHitConverter",
    CPE = cms.string('PixelCPEGeneric'),
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClustersBottom")
)


process.siPixelRecHitsPreSplitting = cms.EDProducer("SiPixelRecHitConverter",
    CPE = cms.string('PixelCPEGeneric'),
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClustersPreSplitting")
)


process.siPixelRecHitsTop = cms.EDProducer("SiPixelRecHitConverter",
    CPE = cms.string('PixelCPEGeneric'),
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClustersTop")
)


process.siStripClusters = cms.EDProducer("SiStripClusterizer",
    Clusterizer = cms.PSet(
        Algorithm = cms.string('ThreeThresholdAlgorithm'),
        ChannelThreshold = cms.double(2.0),
        ClusterThreshold = cms.double(5.0),
        MaxAdjacentBad = cms.uint32(0),
        MaxSequentialBad = cms.uint32(1),
        MaxSequentialHoles = cms.uint32(0),
        QualityLabel = cms.string(''),
        RemoveApvShots = cms.bool(True),
        SeedThreshold = cms.double(3.0),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    ),
    DigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode"))
)


process.siStripClustersBottom = cms.EDProducer("StripClusterSelectorTopBottom",
    label = cms.InputTag("siStripClusters"),
    y = cms.double(-1)
)


process.siStripClustersTop = cms.EDProducer("StripClusterSelectorTopBottom",
    label = cms.InputTag("siStripClusters"),
    y = cms.double(1)
)


process.siStripDigis = cms.EDProducer("SiStripRawToDigiModule",
    AppendedBytes = cms.int32(0),
    DoAPVEmulatorCheck = cms.bool(False),
    DoAllCorruptBufferChecks = cms.bool(False),
    ErrorThreshold = cms.uint32(7174),
    LegacyUnpacker = cms.bool(False),
    MarkModulesOnMissingFeds = cms.bool(True),
    ProductLabel = cms.InputTag("rawDataRepacker"),
    TriggerFedId = cms.int32(0),
    UnpackBadChannels = cms.bool(False),
    UnpackCommonModeValues = cms.bool(False),
    UseDaqRegister = cms.bool(False),
    UseFedKey = cms.bool(False)
)


process.siStripMatchedRecHits = cms.EDProducer("SiStripRecHitConverter",
    ClusterProducer = cms.InputTag("siStripClusters"),
    MaskBadAPVFibers = cms.bool(False),
    Matcher = cms.ESInputTag("SiStripRecHitMatcherESProducer","StandardMatcher"),
    StripCPE = cms.ESInputTag("StripCPEfromTrackAngleESProducer","StripCPEfromTrackAngle"),
    VerbosityLevel = cms.untracked.int32(1),
    matchedRecHits = cms.string('matchedRecHit'),
    rphiRecHits = cms.string('rphiRecHit'),
    siStripQualityLabel = cms.ESInputTag(""),
    stereoRecHits = cms.string('stereoRecHit'),
    useSiStripQuality = cms.bool(False)
)


process.siStripMatchedRecHitsBottom = cms.EDProducer("SiStripRecHitConverter",
    ClusterProducer = cms.InputTag("siStripClustersBottom"),
    MaskBadAPVFibers = cms.bool(False),
    Matcher = cms.ESInputTag("SiStripRecHitMatcherESProducer","StandardMatcher"),
    StripCPE = cms.ESInputTag("StripCPEfromTrackAngleESProducer","StripCPEfromTrackAngle"),
    VerbosityLevel = cms.untracked.int32(1),
    matchedRecHits = cms.string('matchedRecHit'),
    rphiRecHits = cms.string('rphiRecHit'),
    siStripQualityLabel = cms.ESInputTag(""),
    stereoRecHits = cms.string('stereoRecHit'),
    useSiStripQuality = cms.bool(False)
)


process.siStripMatchedRecHitsTop = cms.EDProducer("SiStripRecHitConverter",
    ClusterProducer = cms.InputTag("siStripClustersTop"),
    MaskBadAPVFibers = cms.bool(False),
    Matcher = cms.ESInputTag("SiStripRecHitMatcherESProducer","StandardMatcher"),
    StripCPE = cms.ESInputTag("StripCPEfromTrackAngleESProducer","StripCPEfromTrackAngle"),
    VerbosityLevel = cms.untracked.int32(1),
    matchedRecHits = cms.string('matchedRecHit'),
    rphiRecHits = cms.string('rphiRecHit'),
    siStripQualityLabel = cms.ESInputTag(""),
    stereoRecHits = cms.string('stereoRecHit'),
    useSiStripQuality = cms.bool(False)
)


process.siStripZeroSuppression = cms.EDProducer("SiStripZeroSuppression",
    Algorithms = cms.PSet(
        APVInspectMode = cms.string('BaselineFollower'),
        APVRestoreMode = cms.string('BaselineFollower'),
        ApplyBaselineCleaner = cms.bool(True),
        ApplyBaselineRejection = cms.bool(True),
        CleaningSequence = cms.uint32(1),
        CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
        CutToAvoidSignal = cms.double(2.0),
        DeltaCMThreshold = cms.uint32(20),
        Deviation = cms.uint32(25),
        ForceNoRestore = cms.bool(False),
        Fraction = cms.double(0.2),
        Iterations = cms.int32(3),
        MeanCM = cms.int32(0),
        PedestalSubtractionFedMode = cms.bool(False),
        SelfSelectRestoreAlgo = cms.bool(False),
        SiStripFedZeroSuppressionMode = cms.uint32(4),
        TruncateInSuppressor = cms.bool(True),
        consecThreshold = cms.uint32(5),
        distortionThreshold = cms.uint32(20),
        doAPVRestore = cms.bool(True),
        filteredBaselineDerivativeSumSquare = cms.double(30),
        filteredBaselineMax = cms.double(6),
        hitStripThreshold = cms.uint32(40),
        minStripsToFit = cms.uint32(4),
        nSaturatedStrip = cms.uint32(2),
        nSigmaNoiseDerTh = cms.uint32(4),
        nSmooth = cms.uint32(9),
        restoreThreshold = cms.double(0.5),
        slopeX = cms.int32(3),
        slopeY = cms.int32(4),
        useCMMeanMap = cms.bool(False),
        useRealMeanCM = cms.bool(False)
    ),
    DigisToMergeVR = cms.InputTag("siStripVRDigis","VirginRaw"),
    DigisToMergeZS = cms.InputTag("siStripDigis","ZeroSuppressed"),
    RawDigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","VirginRaw"), cms.InputTag("siStripDigis","ProcessedRaw"), cms.InputTag("siStripDigis","ScopeMode")),
    fixCM = cms.bool(False),
    mergeCollections = cms.bool(False),
    produceBaselinePoints = cms.bool(False),
    produceCalculatedBaseline = cms.bool(False),
    produceRawDigis = cms.bool(True),
    storeCM = cms.bool(True),
    storeInZScollBadAPV = cms.bool(True)
)


process.simCaloStage1Digis = cms.EDProducer("L1TStage1Layer2Producer",
    CaloEmCands = cms.InputTag("simRctUpgradeFormatDigis"),
    CaloRegions = cms.InputTag("simRctUpgradeFormatDigis"),
    conditionsLabel = cms.string('')
)


process.simCaloStage1LegacyFormatDigis = cms.EDProducer("L1TCaloUpgradeToGCTConverter",
    InputCollection = cms.InputTag("simCaloStage1FinalDigis"),
    InputHFCountsCollection = cms.InputTag("simCaloStage1Digis","HFBitCounts"),
    InputHFSumsCollection = cms.InputTag("simCaloStage1Digis","HFRingSums"),
    InputIsoTauCollection = cms.InputTag("simCaloStage1Digis","isoTaus"),
    InputRlxTauCollection = cms.InputTag("simCaloStage1Digis","rlxTaus")
)


process.simEcalTriggerPrimitiveDigis = cms.EDProducer("EcalTrigPrimProducer",
    BarrelOnly = cms.bool(False),
    Debug = cms.bool(False),
    Famos = cms.bool(False),
    InstanceEB = cms.string(''),
    InstanceEE = cms.string(''),
    Label = cms.string('simEcalUnsuppressedDigis'),
    TcpOutput = cms.bool(False),
    binOfMaximum = cms.int32(6)
)


process.simHcalTriggerPrimitiveDigis = cms.EDProducer("HcalTrigPrimDigiProducer",
    FG_threshold1 = cms.uint32(12),
    FG_threshold2 = cms.uint32(17),
    FrontEndFormatError = cms.bool(False),
    InputTagFEDRaw = cms.InputTag("rawDataCollector"),
    MinSignalThreshold = cms.uint32(0),
    PMTNoiseThreshold = cms.uint32(0),
    PeakFinderAlgorithm = cms.int32(2),
    RunZS = cms.bool(False),
    ZS_threshold = cms.uint32(1),
    inputLabel = cms.VInputTag(cms.InputTag("simHcalUnsuppressedDigis"), cms.InputTag("simHcalUnsuppressedDigis")),
    latency = cms.int32(1),
    numberOfPresamples = cms.int32(2),
    numberOfPresamplesHF = cms.int32(2),
    numberOfSamples = cms.int32(4),
    numberOfSamplesHF = cms.int32(4),
    peakFilter = cms.bool(True),
    weights = cms.vdouble(1.0, 1.0)
)


process.simRctUpgradeFormatDigis = cms.EDProducer("L1TCaloRCTToUpgradeConverter",
    emTag = cms.InputTag("gctDigis"),
    regionTag = cms.InputTag("gctDigis")
)


process.simpleCosmicBONSeedingLayers = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    layerList = cms.vstring('TOB4+TOB5+TOB6', 
        'TOB3+TOB5+TOB6', 
        'TOB3+TOB4+TOB5', 
        'TOB3+TOB4+TOB6', 
        'TOB2+TOB4+TOB5', 
        'TOB2+TOB3+TOB5', 
        'TEC7_pos+TEC8_pos+TEC9_pos', 
        'TEC6_pos+TEC7_pos+TEC8_pos', 
        'TEC5_pos+TEC6_pos+TEC7_pos', 
        'TEC4_pos+TEC5_pos+TEC6_pos', 
        'TEC3_pos+TEC4_pos+TEC5_pos', 
        'TEC2_pos+TEC3_pos+TEC4_pos', 
        'TEC1_pos+TEC2_pos+TEC3_pos', 
        'TEC7_neg+TEC8_neg+TEC9_neg', 
        'TEC6_neg+TEC7_neg+TEC8_neg', 
        'TEC5_neg+TEC6_neg+TEC7_neg', 
        'TEC4_neg+TEC5_neg+TEC6_neg', 
        'TEC3_neg+TEC4_neg+TEC5_neg', 
        'TEC2_neg+TEC3_neg+TEC4_neg', 
        'TEC1_neg+TEC2_neg+TEC3_neg', 
        'TEC6_pos+TEC8_pos+TEC9_pos', 
        'TEC5_pos+TEC7_pos+TEC8_pos', 
        'TEC4_pos+TEC6_pos+TEC7_pos', 
        'TEC3_pos+TEC5_pos+TEC6_pos', 
        'TEC2_pos+TEC4_pos+TEC5_pos', 
        'TEC1_pos+TEC3_pos+TEC4_pos', 
        'TEC6_pos+TEC7_pos+TEC9_pos', 
        'TEC5_pos+TEC6_pos+TEC8_pos', 
        'TEC4_pos+TEC5_pos+TEC7_pos', 
        'TEC3_pos+TEC4_pos+TEC6_pos', 
        'TEC2_pos+TEC3_pos+TEC5_pos', 
        'TEC1_pos+TEC2_pos+TEC4_pos', 
        'TEC6_neg+TEC8_neg+TEC9_neg', 
        'TEC5_neg+TEC7_neg+TEC8_neg', 
        'TEC4_neg+TEC6_neg+TEC7_neg', 
        'TEC3_neg+TEC5_neg+TEC6_neg', 
        'TEC2_neg+TEC4_neg+TEC5_neg', 
        'TEC1_neg+TEC3_neg+TEC4_neg', 
        'TEC6_neg+TEC7_neg+TEC9_neg', 
        'TEC5_neg+TEC6_neg+TEC8_neg', 
        'TEC4_neg+TEC5_neg+TEC7_neg', 
        'TEC3_neg+TEC4_neg+TEC6_neg', 
        'TEC2_neg+TEC3_neg+TEC5_neg', 
        'TEC1_neg+TEC2_neg+TEC4_neg', 
        'TOB6+TEC1_pos+TEC2_pos', 
        'TOB6+TEC1_neg+TEC2_neg', 
        'TOB6+TOB5+TEC1_pos', 
        'TOB6+TOB5+TEC1_neg')
)


process.simpleCosmicBONSeedingLayersBottom = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsBottom","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit")
    ),
    layerList = cms.vstring('TOB4+TOB5+TOB6', 
        'TOB3+TOB5+TOB6', 
        'TOB3+TOB4+TOB5', 
        'TOB3+TOB4+TOB6', 
        'TOB2+TOB4+TOB5', 
        'TOB2+TOB3+TOB5', 
        'TEC7_pos+TEC8_pos+TEC9_pos', 
        'TEC6_pos+TEC7_pos+TEC8_pos', 
        'TEC5_pos+TEC6_pos+TEC7_pos', 
        'TEC4_pos+TEC5_pos+TEC6_pos', 
        'TEC3_pos+TEC4_pos+TEC5_pos', 
        'TEC2_pos+TEC3_pos+TEC4_pos', 
        'TEC1_pos+TEC2_pos+TEC3_pos', 
        'TEC7_neg+TEC8_neg+TEC9_neg', 
        'TEC6_neg+TEC7_neg+TEC8_neg', 
        'TEC5_neg+TEC6_neg+TEC7_neg', 
        'TEC4_neg+TEC5_neg+TEC6_neg', 
        'TEC3_neg+TEC4_neg+TEC5_neg', 
        'TEC2_neg+TEC3_neg+TEC4_neg', 
        'TEC1_neg+TEC2_neg+TEC3_neg', 
        'TEC6_pos+TEC8_pos+TEC9_pos', 
        'TEC5_pos+TEC7_pos+TEC8_pos', 
        'TEC4_pos+TEC6_pos+TEC7_pos', 
        'TEC3_pos+TEC5_pos+TEC6_pos', 
        'TEC2_pos+TEC4_pos+TEC5_pos', 
        'TEC1_pos+TEC3_pos+TEC4_pos', 
        'TEC6_pos+TEC7_pos+TEC9_pos', 
        'TEC5_pos+TEC6_pos+TEC8_pos', 
        'TEC4_pos+TEC5_pos+TEC7_pos', 
        'TEC3_pos+TEC4_pos+TEC6_pos', 
        'TEC2_pos+TEC3_pos+TEC5_pos', 
        'TEC1_pos+TEC2_pos+TEC4_pos', 
        'TEC6_neg+TEC8_neg+TEC9_neg', 
        'TEC5_neg+TEC7_neg+TEC8_neg', 
        'TEC4_neg+TEC6_neg+TEC7_neg', 
        'TEC3_neg+TEC5_neg+TEC6_neg', 
        'TEC2_neg+TEC4_neg+TEC5_neg', 
        'TEC1_neg+TEC3_neg+TEC4_neg', 
        'TEC6_neg+TEC7_neg+TEC9_neg', 
        'TEC5_neg+TEC6_neg+TEC8_neg', 
        'TEC4_neg+TEC5_neg+TEC7_neg', 
        'TEC3_neg+TEC4_neg+TEC6_neg', 
        'TEC2_neg+TEC3_neg+TEC5_neg', 
        'TEC1_neg+TEC2_neg+TEC4_neg', 
        'TOB6+TEC1_pos+TEC2_pos', 
        'TOB6+TEC1_neg+TEC2_neg', 
        'TOB6+TOB5+TEC1_pos', 
        'TOB6+TOB5+TEC1_neg')
)


process.simpleCosmicBONSeedingLayersTop = cms.EDProducer("SeedingLayersEDProducer",
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit"),
        maxRing = cms.int32(7),
        minRing = cms.int32(5),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit"),
        useRingSlector = cms.bool(False),
        useSimpleRphiHitsCleaner = cms.bool(False)
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TOB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        matchedRecHits = cms.InputTag("siStripMatchedRecHitsTop","matchedRecHit")
    ),
    TOB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB5 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    TOB6 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        rphiRecHits = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit")
    ),
    layerList = cms.vstring('TOB4+TOB5+TOB6', 
        'TOB3+TOB5+TOB6', 
        'TOB3+TOB4+TOB5', 
        'TOB3+TOB4+TOB6', 
        'TOB2+TOB4+TOB5', 
        'TOB2+TOB3+TOB5', 
        'TEC7_pos+TEC8_pos+TEC9_pos', 
        'TEC6_pos+TEC7_pos+TEC8_pos', 
        'TEC5_pos+TEC6_pos+TEC7_pos', 
        'TEC4_pos+TEC5_pos+TEC6_pos', 
        'TEC3_pos+TEC4_pos+TEC5_pos', 
        'TEC2_pos+TEC3_pos+TEC4_pos', 
        'TEC1_pos+TEC2_pos+TEC3_pos', 
        'TEC7_neg+TEC8_neg+TEC9_neg', 
        'TEC6_neg+TEC7_neg+TEC8_neg', 
        'TEC5_neg+TEC6_neg+TEC7_neg', 
        'TEC4_neg+TEC5_neg+TEC6_neg', 
        'TEC3_neg+TEC4_neg+TEC5_neg', 
        'TEC2_neg+TEC3_neg+TEC4_neg', 
        'TEC1_neg+TEC2_neg+TEC3_neg', 
        'TEC6_pos+TEC8_pos+TEC9_pos', 
        'TEC5_pos+TEC7_pos+TEC8_pos', 
        'TEC4_pos+TEC6_pos+TEC7_pos', 
        'TEC3_pos+TEC5_pos+TEC6_pos', 
        'TEC2_pos+TEC4_pos+TEC5_pos', 
        'TEC1_pos+TEC3_pos+TEC4_pos', 
        'TEC6_pos+TEC7_pos+TEC9_pos', 
        'TEC5_pos+TEC6_pos+TEC8_pos', 
        'TEC4_pos+TEC5_pos+TEC7_pos', 
        'TEC3_pos+TEC4_pos+TEC6_pos', 
        'TEC2_pos+TEC3_pos+TEC5_pos', 
        'TEC1_pos+TEC2_pos+TEC4_pos', 
        'TEC6_neg+TEC8_neg+TEC9_neg', 
        'TEC5_neg+TEC7_neg+TEC8_neg', 
        'TEC4_neg+TEC6_neg+TEC7_neg', 
        'TEC3_neg+TEC5_neg+TEC6_neg', 
        'TEC2_neg+TEC4_neg+TEC5_neg', 
        'TEC1_neg+TEC3_neg+TEC4_neg', 
        'TEC6_neg+TEC7_neg+TEC9_neg', 
        'TEC5_neg+TEC6_neg+TEC8_neg', 
        'TEC4_neg+TEC5_neg+TEC7_neg', 
        'TEC3_neg+TEC4_neg+TEC6_neg', 
        'TEC2_neg+TEC3_neg+TEC5_neg', 
        'TEC1_neg+TEC2_neg+TEC4_neg', 
        'TOB6+TEC1_pos+TEC2_pos', 
        'TOB6+TEC1_neg+TEC2_neg', 
        'TOB6+TOB5+TEC1_pos', 
        'TOB6+TOB5+TEC1_neg')
)


process.simpleCosmicBONSeeds = cms.EDProducer("SimpleCosmicBONSeeder",
    ClusterChargeCheck = cms.PSet(
        Thresholds = cms.PSet(
            TEC = cms.int32(0),
            TIB = cms.int32(0),
            TID = cms.int32(0),
            TOB = cms.int32(0)
        ),
        checkCharge = cms.bool(False),
        matchedRecHitsUseAnd = cms.bool(True)
    ),
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        DontCountDetsAboveNClusters = cms.uint32(20),
        MaxNumberOfCosmicClusters = cms.uint32(300),
        MaxNumberOfPixelClusters = cms.uint32(300),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    HitsPerModuleCheck = cms.PSet(
        Thresholds = cms.PSet(
            TEC = cms.int32(20),
            TIB = cms.int32(20),
            TID = cms.int32(20),
            TOB = cms.int32(20)
        ),
        checkHitsPerModule = cms.bool(True)
    ),
    NegativeYOnly = cms.bool(False),
    PositiveYOnly = cms.bool(False),
    RegionPSet = cms.PSet(
        originHalfLength = cms.double(90.0),
        originRadius = cms.double(150.0),
        originZPosition = cms.double(0.0),
        pMin = cms.double(1.0),
        ptMin = cms.double(0.5)
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TripletsDebugLevel = cms.untracked.uint32(0),
    TripletsSrc = cms.InputTag("simpleCosmicBONSeedingLayers"),
    helixDebugLevel = cms.untracked.uint32(0),
    maxSeeds = cms.int32(20000),
    maxTriplets = cms.int32(50000),
    minimumGoodHitsInSeed = cms.int32(3),
    rescaleError = cms.double(1.0),
    seedDebugLevel = cms.untracked.uint32(0),
    seedOnMiddle = cms.bool(False),
    writeTriplets = cms.bool(False)
)


process.simpleCosmicBONSeedsBottom = cms.EDProducer("SimpleCosmicBONSeeder",
    ClusterChargeCheck = cms.PSet(
        Thresholds = cms.PSet(
            TEC = cms.int32(0),
            TIB = cms.int32(0),
            TID = cms.int32(0),
            TOB = cms.int32(0)
        ),
        checkCharge = cms.bool(False),
        matchedRecHitsUseAnd = cms.bool(True)
    ),
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClustersBottom"),
        DontCountDetsAboveNClusters = cms.uint32(20),
        MaxNumberOfCosmicClusters = cms.uint32(150),
        MaxNumberOfPixelClusters = cms.uint32(300),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    HitsPerModuleCheck = cms.PSet(
        Thresholds = cms.PSet(
            TEC = cms.int32(20),
            TIB = cms.int32(20),
            TID = cms.int32(20),
            TOB = cms.int32(20)
        ),
        checkHitsPerModule = cms.bool(True)
    ),
    NegativeYOnly = cms.bool(True),
    PositiveYOnly = cms.bool(False),
    RegionPSet = cms.PSet(
        originHalfLength = cms.double(90.0),
        originRadius = cms.double(150.0),
        originZPosition = cms.double(0.0),
        pMin = cms.double(1.0),
        ptMin = cms.double(0.5)
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TripletsDebugLevel = cms.untracked.uint32(0),
    TripletsSrc = cms.InputTag("simpleCosmicBONSeedingLayersBottom"),
    helixDebugLevel = cms.untracked.uint32(0),
    maxSeeds = cms.int32(20000),
    maxTriplets = cms.int32(50000),
    minimumGoodHitsInSeed = cms.int32(3),
    rescaleError = cms.double(1.0),
    seedDebugLevel = cms.untracked.uint32(0),
    seedOnMiddle = cms.bool(False),
    writeTriplets = cms.bool(False)
)


process.simpleCosmicBONSeedsTop = cms.EDProducer("SimpleCosmicBONSeeder",
    ClusterChargeCheck = cms.PSet(
        Thresholds = cms.PSet(
            TEC = cms.int32(0),
            TIB = cms.int32(0),
            TID = cms.int32(0),
            TOB = cms.int32(0)
        ),
        checkCharge = cms.bool(False),
        matchedRecHitsUseAnd = cms.bool(True)
    ),
    ClusterCheckPSet = cms.PSet(
        ClusterCollectionLabel = cms.InputTag("siStripClustersTop"),
        DontCountDetsAboveNClusters = cms.uint32(20),
        MaxNumberOfCosmicClusters = cms.uint32(150),
        MaxNumberOfPixelClusters = cms.uint32(300),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        doClusterCheck = cms.bool(True)
    ),
    HitsPerModuleCheck = cms.PSet(
        Thresholds = cms.PSet(
            TEC = cms.int32(20),
            TIB = cms.int32(20),
            TID = cms.int32(20),
            TOB = cms.int32(20)
        ),
        checkHitsPerModule = cms.bool(True)
    ),
    NegativeYOnly = cms.bool(False),
    PositiveYOnly = cms.bool(True),
    RegionPSet = cms.PSet(
        originHalfLength = cms.double(90.0),
        originRadius = cms.double(150.0),
        originZPosition = cms.double(0.0),
        pMin = cms.double(1.0),
        ptMin = cms.double(0.5)
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TripletsDebugLevel = cms.untracked.uint32(0),
    TripletsSrc = cms.InputTag("simpleCosmicBONSeedingLayersTop"),
    helixDebugLevel = cms.untracked.uint32(0),
    maxSeeds = cms.int32(20000),
    maxTriplets = cms.int32(50000),
    minimumGoodHitsInSeed = cms.int32(3),
    rescaleError = cms.double(1.0),
    seedDebugLevel = cms.untracked.uint32(0),
    seedOnMiddle = cms.bool(False),
    writeTriplets = cms.bool(False)
)


process.splittedTracksP5 = cms.EDProducer("TrackProducer",
    AlgorithmName = cms.string('cosmic'),
    Fitter = cms.string('RKFittingSmoother'),
    GeometricInnerState = cms.bool(False),
    MeasurementTracker = cms.string(''),
    MeasurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    SimpleMagneticField = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TrajectoryInEvent = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    clusterRemovalInfo = cms.InputTag(""),
    src = cms.InputTag("cosmicTrackSplitter"),
    useHitsSplitting = cms.bool(False),
    useSimpleMF = cms.bool(False)
)


process.standAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("ancientMuonSeed"),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    STATrajBuilderParameters = cms.PSet(
        BWFilterParameters = cms.PSet(
            BWSeedType = cms.string('fromGenerator'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('outsideIn'),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        DoBackwardFilter = cms.bool(True),
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            EnableCSCMeasurement = cms.bool(True),
            EnableDTMeasurement = cms.bool(True),
            EnableRPCMeasurement = cms.bool(True),
            FitDirection = cms.string('insideOut'),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                ExcludeRPCFromFit = cms.bool(False),
                Granularity = cms.int32(0),
                MaxChi2 = cms.double(25.0),
                RescaleError = cms.bool(False),
                RescaleErrorFactor = cms.double(100.0),
                UseInvalidHits = cms.bool(True)
            ),
            NumberOfSigma = cms.double(3.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
        ),
        NavigationType = cms.string('Standard'),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            ForceAllIterations = cms.bool(False),
            MaxFractionOfLostHits = cms.double(0.05),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        ),
        SeedPosition = cms.string('in'),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(100.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.standAloneSETMuons = cms.EDProducer("StandAloneMuonProducer",
    InputObjects = cms.InputTag("SETMuonSeed"),
    MuonTrajectoryBuilder = cms.string('DirectMuonTrajectoryBuilder'),
    STATrajBuilderParameters = cms.PSet(
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            NMinRecHits = cms.uint32(2),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            RescaleError = cms.double(1.0),
            UseSubRecHits = cms.bool(False)
        )
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.tauRegionalPixelSeedGenerator = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.InputTag("PixelLayerPairs")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('TauRegionalPixelSeedGenerator'),
        RegionPSet = cms.PSet(
            JetSrc = cms.InputTag("iterativeConePu5CaloJets"),
            deltaEtaRegion = cms.double(0.1),
            deltaPhiRegion = cms.double(0.1),
            originHalfLength = cms.double(0.2),
            originRadius = cms.double(0.2),
            originZPos = cms.double(0.0),
            precise = cms.bool(True),
            ptMin = cms.double(5.0),
            vertexSrc = cms.InputTag("hiSelectedVertex")
        )
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    TTRHBuilder = cms.string('WithTrackAngle')
)


process.tcdsDigis = cms.EDProducer("TcdsRawToDigi",
    InputLabel = cms.InputTag("rawDataRepacker")
)


process.tcdsRawToDigi = cms.EDProducer("TcdsRawToDigi",
    InputLabel = cms.InputTag("rawDataCollector")
)


process.tevMuons = cms.EDProducer("TevMuonProducer",
    MuonCollectionLabel = cms.InputTag("globalMuons"),
    RefitIndex = cms.vint32(1, 2, 3, 4),
    Refits = cms.vstring('default', 
        'firstHit', 
        'picky', 
        'dyt'),
    RefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutDT = cms.double(30.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(10, 10),
        DYTupdator = cms.bool(True),
        DYTuseAPE = cms.bool(False),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        HitThreshold = cms.int32(1),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        RefitDirection = cms.string('insideOut'),
        RefitFlag = cms.bool(True),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)


process.topBottomClusterInfoProducer = cms.EDProducer("TopBottomClusterInfoProducer",
    pixelClustersNew = cms.InputTag("siPixelClustersTop"),
    pixelClustersOld = cms.InputTag("siPixelClusters"),
    pixelHitsNew = cms.InputTag("siPixelRecHitsTop"),
    pixelHitsOld = cms.InputTag("siPixelRecHits"),
    stripClustersNew = cms.InputTag("siStripClustersTop"),
    stripClustersOld = cms.InputTag("siStripClusters"),
    stripMonoHitsNew = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit"),
    stripMonoHitsOld = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    stripStereoHitsNew = cms.InputTag("siStripMatchedRecHitsTop","stereoRecHit"),
    stripStereoHitsOld = cms.InputTag("siStripMatchedRecHits","stereoRecHit")
)


process.topBottomClusterInfoProducerBottom = cms.EDProducer("TopBottomClusterInfoProducer",
    pixelClustersNew = cms.InputTag("siPixelClustersBottom"),
    pixelClustersOld = cms.InputTag("siPixelClusters"),
    pixelHitsNew = cms.InputTag("siPixelRecHitsBottom"),
    pixelHitsOld = cms.InputTag("siPixelRecHits"),
    stripClustersNew = cms.InputTag("siStripClustersBottom"),
    stripClustersOld = cms.InputTag("siStripClusters"),
    stripMonoHitsNew = cms.InputTag("siStripMatchedRecHitsBottom","rphiRecHit"),
    stripMonoHitsOld = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    stripStereoHitsNew = cms.InputTag("siStripMatchedRecHitsBottom","stereoRecHit"),
    stripStereoHitsOld = cms.InputTag("siStripMatchedRecHits","stereoRecHit")
)


process.topBottomClusterInfoProducerTop = cms.EDProducer("TopBottomClusterInfoProducer",
    pixelClustersNew = cms.InputTag("siPixelClustersTop"),
    pixelClustersOld = cms.InputTag("siPixelClusters"),
    pixelHitsNew = cms.InputTag("siPixelRecHitsTop"),
    pixelHitsOld = cms.InputTag("siPixelRecHits"),
    stripClustersNew = cms.InputTag("siStripClustersTop"),
    stripClustersOld = cms.InputTag("siStripClusters"),
    stripMonoHitsNew = cms.InputTag("siStripMatchedRecHitsTop","rphiRecHit"),
    stripMonoHitsOld = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    stripStereoHitsNew = cms.InputTag("siStripMatchedRecHitsTop","stereoRecHit"),
    stripStereoHitsOld = cms.InputTag("siStripMatchedRecHits","stereoRecHit")
)


process.towerMaker = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.8),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.8),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.towerMakerWithHO = cms.EDProducer("CaloTowersCreator",
    AllowMissingInputs = cms.bool(False),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBSumThreshold = cms.double(0.2),
    EBThreshold = cms.double(0.07),
    EBWeight = cms.double(1.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EESumThreshold = cms.double(0.45),
    EEThreshold = cms.double(0.3),
    EEWeight = cms.double(1.0),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    EcutTower = cms.double(-1000.0),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HBThreshold = cms.double(0.7),
    HBWeight = cms.double(1.0),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDThreshold = cms.double(0.8),
    HEDWeight = cms.double(1.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HESThreshold = cms.double(0.8),
    HESWeight = cms.double(1.0),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Threshold = cms.double(0.5),
    HF1Weight = cms.double(1.0),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF2Threshold = cms.double(0.85),
    HF2Weight = cms.double(1.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HOThreshold0 = cms.double(1.1),
    HOThresholdMinus1 = cms.double(3.5),
    HOThresholdMinus2 = cms.double(3.5),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HOWeight = cms.double(1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevel = cms.uint32(9),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HcalThreshold = cms.double(-1000.0),
    MomConstrMethod = cms.int32(1),
    MomEBDepth = cms.double(0.3),
    MomEEDepth = cms.double(0.0),
    MomHBDepth = cms.double(0.2),
    MomHEDepth = cms.double(0.4),
    UseEcalRecoveredHits = cms.bool(False),
    UseEtEBTreshold = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    UseHO = cms.bool(True),
    UseHcalRecoveredHits = cms.bool(True),
    UseRejectedHitsOnly = cms.bool(False),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    UseSymEBTreshold = cms.bool(True),
    UseSymEETreshold = cms.bool(True),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    hbheInput = cms.InputTag("hbhereco"),
    hfInput = cms.InputTag("hfreco"),
    hoInput = cms.InputTag("horeco")
)


process.trackClusterRemover = cms.EDProducer("TrackClusterRemover",
    TrackQuality = cms.string('highPurity'),
    maxChi2 = cms.double(30.0),
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    oldClusterRemovalInfo = cms.InputTag(""),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    trajectories = cms.InputTag("tracks")
)


process.trackListMerger = cms.EDProducer("TrackListMerger",
    Epsilon = cms.double(-0.001),
    FoundHitBonus = cms.double(5.0),
    LostHitPenalty = cms.double(5.0),
    MaxNormalizedChisq = cms.double(1000.0),
    MinFound = cms.int32(3),
    MinPT = cms.double(0.05),
    ShareFrac = cms.double(0.19),
    TrackProducers = cms.VInputTag(cms.InputTag(""), cms.InputTag("")),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    copyMVA = cms.bool(True),
    hasSelector = cms.vint32(0, 0),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    newQuality = cms.string('confirmed'),
    selectedTrackQuals = cms.VInputTag(cms.InputTag(""), cms.InputTag("")),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1)
    ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(2, 3)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(4, 5)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(2, 3, 4, 5)
        ), 
        cms.PSet(
            pQual = cms.bool(True),
            tLists = cms.vint32(0, 1, 2, 3, 4, 
                5)
        )),
    writeOnlyTrkQuals = cms.bool(False)
)


process.trackRefsForJets = cms.EDProducer("ChargedRefCandidateProducer",
    particleType = cms.string('pi+'),
    src = cms.InputTag("trackWithVertexRefSelector")
)


process.trackerDrivenElectronSeeds = cms.EDProducer("GoodSeedProducer",
    ApplyIsolation = cms.bool(False),
    ClusterThreshold = cms.double(0.5),
    EOverPLead_minValue = cms.double(0.95),
    EcalStripSumE_deltaEta = cms.double(0.03),
    EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
    EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
    EcalStripSumE_minClusEnergy = cms.double(0.1),
    EtaMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_eta.dat'),
    Fitter = cms.string('GsfTrajectoryFitter_forPreId'),
    HOverPLead_maxValue = cms.double(0.05),
    HcalWindow = cms.double(0.184),
    MaxEOverP = cms.double(3.0),
    MaxEta = cms.double(2.4),
    MaxPt = cms.double(50.0),
    MinEOverP = cms.double(0.3),
    MinPt = cms.double(2.0),
    Min_dr = cms.double(0.2),
    NHitsInSeed = cms.int32(3),
    PFEcalClusterLabel = cms.InputTag("particleFlowClusterECAL"),
    PFHcalClusterLabel = cms.InputTag("particleFlowClusterHCAL"),
    PFPSClusterLabel = cms.InputTag("particleFlowClusterPS"),
    PSThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/PSThreshold.dat'),
    PhiMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_phi.dat'),
    PreCkfLabel = cms.string('SeedsForCkf'),
    PreGsfLabel = cms.string('SeedsForGsf'),
    PreIdLabel = cms.string('preid'),
    ProducePreId = cms.untracked.bool(True),
    PtThresholdSavePreId = cms.untracked.double(1.0),
    Smoother = cms.string('GsfTrajectorySmoother_forPreId'),
    TMVAMethod = cms.string('BDT'),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    ThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/Threshold.dat'),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    TrackQuality = cms.string('highPurity'),
    UsePreShower = cms.bool(False),
    UseQuality = cms.bool(True),
    UseTMVA = cms.untracked.bool(True),
    Weights1 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat1.xml'),
    Weights2 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat2.xml'),
    Weights3 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat3.xml'),
    Weights4 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat4.xml'),
    Weights5 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat5.xml'),
    Weights6 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat6.xml'),
    Weights7 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat7.xml'),
    Weights8 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat8.xml'),
    Weights9 = cms.string('RecoParticleFlow/PFTracking/data/MVA_BDTTrackDrivenSeed_cat9.xml')
)


process.uncleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    HybridBarrelSeedThr = cms.double(1.0),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    RecHitSeverityToBeExcluded = cms.vstring(),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    dynamicEThresh = cms.bool(False),
    dynamicPhiRoad = cms.bool(False),
    eThreshA = cms.double(0.003),
    eThreshB = cms.double(0.1),
    eseed = cms.double(0.35),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    excludeFlagged = cms.bool(False),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(7.4),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    recHitsCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    step = cms.int32(17),
    superclusterCollection = cms.string(''),
    useEtForXi = cms.bool(True),
    xi = cms.double(0.0)
)


process.uncleanedOnlyCorrectedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(True),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    hyb_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(8.0),
        brLinearLowThr = cms.double(1.1),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419),
        fEtEtaVec = cms.vdouble(0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181)
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid')
)


process.uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower = cms.EDProducer("EgammaSCCorrectionMaker",
    VerbosityLevel = cms.string('ERROR'),
    applyCrackCorrection = cms.bool(True),
    applyEnergyCorrection = cms.bool(True),
    applyLocalContCorrection = cms.bool(False),
    corectedSuperClusterCollection = cms.string(''),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    etThresh = cms.double(0.0),
    fix_fCorrPset = cms.PSet(
        brLinearHighThr = cms.double(6.0),
        brLinearLowThr = cms.double(0.9),
        fBremVec = cms.vdouble(-0.05228, 0.08738, 0.9508, 0.002677, 1.221),
        fEtEtaVec = cms.vdouble(1, -0.4386, -32.38, 0.6372, 15.67, 
            -0.0928, -2.462, 1.138, 20.93)
    ),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    modeEB = cms.int32(0),
    modeEE = cms.int32(0),
    rawSuperClusterProducer = cms.InputTag("uncleanedOnlyMulti5x5SuperClustersWithPreshower"),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Multi5x5')
)


process.uncleanedOnlyMulti5x5SuperClustersWithPreshower = cms.EDProducer("PreshowerPhiClusterProducer",
    assocSClusterCollection = cms.string(''),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapSuperClusters"),
    esPhiClusterDeltaEta = cms.double(0.15),
    esPhiClusterDeltaPhi = cms.double(0.12),
    esStripEnergyCut = cms.double(0.0),
    etThresh = cms.double(0.0),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES")
)


process.valCaloStage1LegacyFormatDigis = cms.EDProducer("L1TCaloUpgradeToGCTConverter",
    InputCollection = cms.InputTag("simCaloStage1Digis"),
    InputHFCountsCollection = cms.InputTag("simCaloStage1Digis","HFBitCounts"),
    InputHFSumsCollection = cms.InputTag("simCaloStage1Digis","HFRingSums"),
    InputIsoTauCollection = cms.InputTag("simCaloStage1Digis","isoTaus"),
    InputRlxTauCollection = cms.InputTag("simCaloStage1Digis","rlxTaus")
)


process.valCscTriggerPrimitiveDigis = cms.EDProducer("CSCTriggerPrimitivesProducer",
    CSCComparatorDigiProducer = cms.InputTag("muonCSCDigis","MuonCSCComparatorDigi"),
    CSCWireDigiProducer = cms.InputTag("muonCSCDigis","MuonCSCWireDigi"),
    GEMPadDigiProducer = cms.InputTag(""),
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3),
    RPCDigiProducer = cms.InputTag(""),
    alctParam07 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(4),
        alctGhostCancellationSideQuality = cms.bool(False),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(False),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(4),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(False),
        verbosity = cms.int32(0)
    ),
    alctParamMTCC = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(3),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctL1aWindowWidth = cms.uint32(3),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(2),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.int32(0)
    ),
    alctParamOldMC = cms.PSet(
        alctAccelMode = cms.uint32(1),
        alctDriftDelay = cms.uint32(3),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctL1aWindowWidth = cms.uint32(5),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(2),
        alctTrigMode = cms.uint32(3),
        verbosity = cms.int32(0)
    ),
    alctSLHC = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctDriftDelay = cms.uint32(2),
        alctEarlyTbins = cms.int32(4),
        alctFifoPretrig = cms.uint32(10),
        alctFifoTbins = cms.uint32(16),
        alctGhostCancellationBxDepth = cms.int32(1),
        alctGhostCancellationSideQuality = cms.bool(True),
        alctHitPersist = cms.uint32(6),
        alctL1aWindowWidth = cms.uint32(7),
        alctNarrowMaskForR1 = cms.bool(True),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitPretrig = cms.uint32(3),
        alctPretrigDeadtime = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        alctUseCorrectedBx = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    checkBadChambers = cms.bool(True),
    clctParam07 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(2),
        clctStartBxShift = cms.int32(0),
        verbosity = cms.int32(0)
    ),
    clctParamMTCC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(6),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(1),
        clctNplanesHitPretrig = cms.uint32(4),
        clctPidThreshPretrig = cms.uint32(2),
        verbosity = cms.int32(0)
    ),
    clctParamOldMC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(6),
        clctMinSeparation = cms.uint32(10),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(2),
        clctPidThreshPretrig = cms.uint32(2),
        verbosity = cms.int32(0)
    ),
    clctSLHC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctFifoPretrig = cms.uint32(7),
        clctFifoTbins = cms.uint32(12),
        clctHitPersist = cms.uint32(4),
        clctMinSeparation = cms.uint32(5),
        clctNplanesHitPattern = cms.uint32(4),
        clctNplanesHitPretrig = cms.uint32(3),
        clctPidThreshPretrig = cms.uint32(4),
        clctPretriggerTriggerZone = cms.uint32(5),
        clctStartBxShift = cms.int32(0),
        clctStateMachineZone = cms.uint32(8),
        clctUseCorrectedBx = cms.bool(True),
        useDeadTimeZoning = cms.bool(True),
        useDynamicStateMachineZone = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    commonParam = cms.PSet(
        disableME1a = cms.bool(False),
        disableME42 = cms.bool(False),
        gangedME1a = cms.bool(False),
        isMTCC = cms.bool(False),
        isSLHC = cms.bool(False),
        isTMB07 = cms.bool(True),
        runME11ILT = cms.bool(False),
        runME21ILT = cms.bool(False),
        runME3141ILT = cms.bool(False),
        smartME1aME1b = cms.bool(False)
    ),
    debugParameters = cms.bool(False),
    gangedME1a = cms.untracked.bool(False),
    mpcSLHC = cms.PSet(
        mpcMaxStubs = cms.uint32(3)
    ),
    tmbParam = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctTrigEnable = cms.uint32(0),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(7),
        mpcBlockMe1a = cms.uint32(0),
        tmbDropUsedAlcts = cms.bool(True),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(True),
        verbosity = cms.int32(0)
    ),
    tmbSLHC = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        clctToAlct = cms.bool(False),
        clctTrigEnable = cms.uint32(0),
        matchEarliestAlctME11Only = cms.bool(False),
        matchEarliestClctME11Only = cms.bool(False),
        matchTrigEnable = cms.uint32(1),
        matchTrigWindowSize = cms.uint32(3),
        maxME11LCTs = cms.uint32(2),
        mpcBlockMe1a = cms.uint32(0),
        tmbCrossBxAlgorithm = cms.uint32(1),
        tmbDropUsedAlcts = cms.bool(False),
        tmbDropUsedClcts = cms.bool(False),
        tmbEarlyTbins = cms.int32(4),
        tmbL1aWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.bool(False),
        verbosity = cms.int32(0)
    )
)


process.valCsctfDigis = cms.EDProducer("CSCTFCandidateProducer",
    CSCTrackProducer = cms.untracked.InputTag("valCsctfTrackDigis"),
    MuonSorter = cms.PSet(
        MaxBX = cms.int32(9),
        MinBX = cms.int32(3)
    )
)


process.valCsctfTrackDigis = cms.EDProducer("CSCTFTrackProducer",
    DTproducer = cms.untracked.InputTag("dttfDigis"),
    DtDirectProd = cms.untracked.InputTag("csctfunpacker","DT"),
    SectorProcessor = cms.PSet(
        AllowALCTonly = cms.bool(False),
        AllowCLCTonly = cms.bool(False),
        BXAdepth = cms.uint32(2),
        CoreLatency = cms.uint32(7),
        EtaMax = cms.vuint32(127, 127, 127, 127, 127, 
            24, 24, 127),
        EtaMin = cms.vuint32(0, 0, 0, 0, 0, 
            0, 0, 0),
        EtaWindows = cms.vuint32(4, 4, 6, 6, 6, 
            6, 6),
        MaxBX = cms.int32(9),
        MinBX = cms.int32(3),
        PTLUT = cms.PSet(
            LowQualityFlag = cms.untracked.uint32(4),
            PtMethod = cms.untracked.uint32(32),
            ReadPtLUT = cms.bool(False)
        ),
        PreTrigger = cms.uint32(2),
        QualityEnableME1a = cms.uint32(65535),
        QualityEnableME1b = cms.uint32(65535),
        QualityEnableME1c = cms.uint32(65535),
        QualityEnableME1d = cms.uint32(65535),
        QualityEnableME1e = cms.uint32(65535),
        QualityEnableME1f = cms.uint32(65535),
        QualityEnableME2a = cms.uint32(65535),
        QualityEnableME2b = cms.uint32(65535),
        QualityEnableME2c = cms.uint32(65535),
        QualityEnableME3a = cms.uint32(65535),
        QualityEnableME3b = cms.uint32(65535),
        QualityEnableME3c = cms.uint32(65535),
        QualityEnableME4a = cms.uint32(65535),
        QualityEnableME4b = cms.uint32(65535),
        QualityEnableME4c = cms.uint32(65535),
        SRLUT = cms.PSet(
            Binary = cms.untracked.bool(False),
            LUTPath = cms.untracked.string('./'),
            ReadLUTs = cms.untracked.bool(False),
            UseMiniLUTs = cms.untracked.bool(True)
        ),
        curvedp = cms.uint32(15),
        firmwareDD = cms.uint32(20091026),
        firmwareFA = cms.uint32(20091026),
        firmwareSP = cms.uint32(20120319),
        firmwareVM = cms.uint32(20091026),
        gangedME1a = cms.untracked.bool(False),
        initializeFromPSet = cms.bool(False),
        isCoreVerbose = cms.bool(False),
        kill_fiber = cms.uint32(0),
        maxdeta112_accp = cms.uint32(29),
        maxdeta113_accp = cms.uint32(38),
        maxdeta12_accp = cms.uint32(17),
        maxdeta13_accp = cms.uint32(27),
        maxdphi112_accp = cms.uint32(64),
        maxdphi113_accp = cms.uint32(64),
        maxdphi12_accp = cms.uint32(64),
        maxdphi13_accp = cms.uint32(64),
        mbaPhiOff = cms.uint32(0),
        mbbPhiOff = cms.uint32(1982),
        mindeta112_accp = cms.uint32(14),
        mindeta113_accp = cms.uint32(21),
        mindeta12_accp = cms.uint32(12),
        mindeta13_accp = cms.uint32(13),
        mindetap = cms.uint32(7),
        mindetap_halo = cms.uint32(8),
        mindphip = cms.uint32(180),
        mindphip_halo = cms.uint32(128),
        rescaleSinglesPhi = cms.bool(True),
        run_core = cms.bool(True),
        singlesTrackOutput = cms.uint32(1),
        straightp = cms.uint32(19),
        trigger_on_MB1a = cms.bool(False),
        trigger_on_MB1d = cms.bool(False),
        trigger_on_ME1a = cms.bool(False),
        trigger_on_ME1b = cms.bool(False),
        trigger_on_ME2 = cms.bool(False),
        trigger_on_ME3 = cms.bool(False),
        trigger_on_ME4 = cms.bool(False),
        widePhi = cms.uint32(0)
    ),
    SectorReceiverInput = cms.untracked.InputTag("csctfDigis"),
    gangedME1a = cms.untracked.bool(False),
    isTMB07 = cms.bool(True),
    readDtDirect = cms.bool(False),
    useDT = cms.bool(True)
)


process.valDtTriggerPrimitiveDigis = cms.EDProducer("DTTrigProd",
    DTTFSectorNumbering = cms.bool(True),
    debug = cms.untracked.bool(False),
    digiTag = cms.InputTag("muonDTDigis"),
    lutBtic = cms.untracked.int32(31),
    lutDumpFlag = cms.untracked.bool(False)
)


process.valDttfDigis = cms.EDProducer("DTTrackFinder",
    BX_max = cms.untracked.int32(7),
    BX_min = cms.untracked.int32(-9),
    CSCStub_Source = cms.InputTag("valCsctfTrackDigis"),
    CSC_Eta_Cancellation = cms.untracked.bool(False),
    DTDigi_Source = cms.InputTag("dttfDigis"),
    Debug = cms.untracked.int32(0),
    EtaTrackFinder = cms.untracked.bool(True),
    Extrapolation_21 = cms.untracked.bool(False),
    Extrapolation_Filter = cms.untracked.int32(1),
    Extrapolation_nbits_Phi = cms.untracked.int32(8),
    Extrapolation_nbits_PhiB = cms.untracked.int32(8),
    Open_LUTs = cms.untracked.bool(False),
    OutOfTime_Filter = cms.untracked.bool(False),
    OutOfTime_Filter_Window = cms.untracked.int32(1),
    Overlap = cms.untracked.bool(True),
    PHI_Assignment_nbits_Phi = cms.untracked.int32(10),
    PHI_Assignment_nbits_PhiB = cms.untracked.int32(10),
    PT_Assignment_nbits_Phi = cms.untracked.int32(12),
    PT_Assignment_nbits_PhiB = cms.untracked.int32(10)
)


process.valEcalTriggerPrimitiveDigis = cms.EDProducer("EcalTrigPrimProducer",
    BarrelOnly = cms.bool(False),
    Debug = cms.bool(False),
    Famos = cms.bool(False),
    InstanceEB = cms.string('ebDigis'),
    InstanceEE = cms.string('eeDigis'),
    Label = cms.string('ecalDigis'),
    TcpOutput = cms.bool(False),
    binOfMaximum = cms.int32(6)
)


process.valGctDigis = cms.EDProducer("L1GctEmulator",
    conditionsLabel = cms.string(''),
    hardwareTest = cms.bool(False),
    ignoreRCTTauVetoBitsForIsolation = cms.bool(False),
    inputLabel = cms.InputTag("gctDigis"),
    jetFinderType = cms.string('hardwareJetFinder'),
    postSamples = cms.uint32(0),
    preSamples = cms.uint32(0),
    useImprovedTauAlgorithm = cms.bool(True),
    writeInternalData = cms.bool(False)
)


process.valGmtDigis = cms.EDProducer("L1MuGlobalMuonTrigger",
    BX_max = cms.int32(4),
    BX_max_readout = cms.int32(2),
    BX_min = cms.int32(-4),
    BX_min_readout = cms.int32(-2),
    CSCCandidates = cms.InputTag("gtDigis","CSC"),
    DTCandidates = cms.InputTag("gtDigis","DT"),
    Debug = cms.untracked.int32(0),
    MipIsoData = cms.InputTag("gctDigis"),
    RPCbCandidates = cms.InputTag("gtDigis","RPCb"),
    RPCfCandidates = cms.InputTag("gtDigis","RPCf"),
    SendMipIso = cms.untracked.bool(False),
    WriteLUTsAndRegs = cms.untracked.bool(False)
)


process.valGtDigis = cms.EDProducer("L1GlobalTrigger",
    AlgorithmTriggersUnmasked = cms.bool(False),
    AlgorithmTriggersUnprescaled = cms.bool(True),
    AlternativeNrBxBoardDaq = cms.uint32(257),
    AlternativeNrBxBoardEvm = cms.uint32(2),
    BstLengthBytes = cms.int32(-1),
    CastorInputTag = cms.InputTag("castorL1Digis"),
    EmulateBxInEvent = cms.int32(3),
    GctInputTag = cms.InputTag("gctDigis"),
    GmtInputTag = cms.InputTag("gtDigis"),
    ProduceL1GtDaqRecord = cms.bool(True),
    ProduceL1GtEvmRecord = cms.bool(True),
    ProduceL1GtObjectMapRecord = cms.bool(True),
    ReadTechnicalTriggerRecords = cms.bool(True),
    RecordLength = cms.vint32(3, 5),
    TechnicalTriggersInputTags = cms.VInputTag(cms.InputTag("valRpcTechTrigDigis"), cms.InputTag("valHcalTechTrigDigis")),
    TechnicalTriggersUnmasked = cms.bool(False),
    TechnicalTriggersUnprescaled = cms.bool(True),
    TechnicalTriggersVetoUnmasked = cms.bool(True),
    WritePsbL1GtDaqRecord = cms.bool(True)
)


process.valHcalTTPDigis = cms.EDProducer("HcalTTPDigiProducer",
    HFDigiCollection = cms.InputTag("hcalDigis"),
    HFSoI = cms.int32(4),
    defTT10 = cms.string('hits>=3:hfp>=1:hfm>=1'),
    defTT8 = cms.string('hits>=2'),
    defTT9 = cms.string('hits>=2:hfp>=1:hfm>=1'),
    defTTLocal = cms.string('hits>=4'),
    fwAlgorithm = cms.int32(1),
    iEtaMax = cms.int32(41),
    iEtaMin = cms.int32(33),
    id = cms.untracked.int32(101),
    maskedChannels = cms.vuint32(),
    presamples = cms.int32(2),
    samples = cms.int32(5),
    threshold = cms.uint32(2)
)


process.valHcalTechTrigDigis = cms.EDProducer("HcalTTPTriggerRecord",
    ttpBitNames = cms.vstring('L1Tech_HCAL_HF_MM_or_PP_or_PM.v0', 
        'L1Tech_HCAL_HF_coincidence_PM.v1', 
        'L1Tech_HCAL_HF_MMP_or_MPP.v0'),
    ttpBits = cms.vuint32(8, 9, 10),
    ttpDigiCollection = cms.InputTag("simHcalTTPDigis")
)


process.valHcalTriggerPrimitiveDigis = cms.EDProducer("HcalTrigPrimDigiProducer",
    FG_threshold1 = cms.uint32(12),
    FG_threshold2 = cms.uint32(17),
    FrontEndFormatError = cms.bool(True),
    InputTagFEDRaw = cms.InputTag("rawDataRepacker"),
    MinSignalThreshold = cms.uint32(0),
    PMTNoiseThreshold = cms.uint32(0),
    PeakFinderAlgorithm = cms.int32(2),
    RunZS = cms.bool(False),
    ZS_threshold = cms.uint32(1),
    inputLabel = cms.VInputTag(cms.InputTag("hcalDigis"), cms.InputTag("hcalDigis")),
    latency = cms.int32(1),
    numberOfPresamples = cms.int32(2),
    numberOfPresamplesHF = cms.int32(2),
    numberOfSamples = cms.int32(4),
    numberOfSamplesHF = cms.int32(4),
    peakFilter = cms.bool(True),
    weights = cms.vdouble(1.0, 1.0)
)


process.valRctDigis = cms.EDProducer("L1RCTProducer",
    BunchCrossings = cms.vint32(0),
    conditionsLabel = cms.string(''),
    ecalDigis = cms.VInputTag(cms.InputTag("ecalDigis","EcalTriggerPrimitives")),
    getFedsFromOmds = cms.bool(False),
    hcalDigis = cms.VInputTag(cms.InputTag("hcalDigis")),
    queryDelayInLS = cms.uint32(10),
    queryIntervalInLS = cms.uint32(100),
    useEcal = cms.bool(True),
    useHcal = cms.bool(True)
)


process.valRpcTechTrigDigis = cms.EDProducer("RPCTechnicalTrigger",
    BitNames = cms.vstring('L1Tech_RPC_TTU_barrel_Cosmics/v0', 
        'L1Tech_RPC_TTU_pointing_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBplus2_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBplus1_Cosmics/v0', 
        'L1Tech_RPC_TTU_RB0_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBminus1_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBminus2_Cosmics/v0'),
    BitNumbers = cms.vuint32(24, 25, 26, 27, 28, 
        29, 30),
    ConfigFile = cms.string('hardware-pseudoconfig.txt'),
    RPCDigiLabel = cms.InputTag("muonRPCDigis"),
    RPCSimLinkInstance = cms.InputTag("RPCDigiSimLink"),
    UseEventSetup = cms.untracked.int32(0),
    UseRPCSimLink = cms.untracked.int32(0),
    Verbosity = cms.untracked.int32(0)
)


process.valRpcTriggerDigis = cms.EDProducer("RPCTrigger",
    RPCTriggerDebug = cms.untracked.int32(0),
    label = cms.string('muonRPCDigis')
)


process.valStage1GtDigis = cms.EDProducer("L1GlobalTrigger",
    AlgorithmTriggersUnmasked = cms.bool(False),
    AlgorithmTriggersUnprescaled = cms.bool(True),
    AlternativeNrBxBoardDaq = cms.uint32(257),
    AlternativeNrBxBoardEvm = cms.uint32(2),
    BstLengthBytes = cms.int32(-1),
    CastorInputTag = cms.InputTag("castorL1Digis"),
    EmulateBxInEvent = cms.int32(3),
    GctInputTag = cms.InputTag("caloStage1LegacyFormatDigis"),
    GmtInputTag = cms.InputTag("gtDigis"),
    ProduceL1GtDaqRecord = cms.bool(True),
    ProduceL1GtEvmRecord = cms.bool(True),
    ProduceL1GtObjectMapRecord = cms.bool(True),
    ReadTechnicalTriggerRecords = cms.bool(True),
    RecordLength = cms.vint32(3, 5),
    TechnicalTriggersInputTags = cms.VInputTag(cms.InputTag("valRpcTechTrigDigis"), cms.InputTag("valHcalTechTrigDigis")),
    TechnicalTriggersUnmasked = cms.bool(False),
    TechnicalTriggersUnprescaled = cms.bool(True),
    TechnicalTriggersVetoUnmasked = cms.bool(True),
    WritePsbL1GtDaqRecord = cms.bool(True)
)


process.voronoiBackgroundCalo = cms.EDProducer("VoronoiBackgroundProducer",
    doEqualize = cms.bool(False),
    equalizeR = cms.double(0.4),
    equalizeThreshold0 = cms.double(5.0),
    equalizeThreshold1 = cms.double(35.0),
    etaBins = cms.int32(15),
    fourierOrder = cms.int32(5),
    isCalo = cms.bool(True),
    jetCorrectorFormat = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    tableLabel = cms.string('UETable_Calo'),
    useTextTable = cms.bool(False)
)


process.voronoiBackgroundPF = cms.EDProducer("VoronoiBackgroundProducer",
    doEqualize = cms.bool(False),
    equalizeR = cms.double(0.3),
    equalizeThreshold0 = cms.double(5.0),
    equalizeThreshold1 = cms.double(35.0),
    etaBins = cms.int32(15),
    fourierOrder = cms.int32(5),
    isCalo = cms.bool(False),
    jetCorrectorFormat = cms.bool(True),
    src = cms.InputTag("particleFlowTmp"),
    tableLabel = cms.string('UETable_PF'),
    useTextTable = cms.bool(False)
)


process.zdcreco = cms.EDProducer("ZdcHitReconstructor",
    AuxTSvec = cms.vint32(4, 5, 6, 7),
    Subdetector = cms.string('ZDC'),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    correctTiming = cms.bool(True),
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("hcalDigis"),
    dropZSmarkedPassed = cms.bool(True),
    lowGainFrac = cms.double(8.15),
    lowGainOffset = cms.int32(1),
    recoMethod = cms.int32(2),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    setHSCPFlags = cms.bool(True),
    setNoiseFlags = cms.bool(True),
    setSaturationFlags = cms.bool(True),
    setTimingTrustFlags = cms.bool(False)
)


process.ALCARECOCalMinBiasFilterForSiStripGains = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring('pathALCARECOSiStripCalMinBias'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","RECO"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string(''),
    throw = cms.bool(True)
)


process.ALCARECOCalibrationTracks = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(10.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(2.6),
    etaMin = cms.double(-2.6),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(6),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(0.8),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("ALCARECOSiStripCalMinBias"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECODtCalibCosmicsHLTFilter = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlcaDtCalibCosmics'),
    throw = cms.bool(False)
)


process.ALCARECODtCalibHIHLTFilter = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlcaDtCalibHI'),
    throw = cms.bool(False)
)


process.ALCARECODtCalibHLTFilter = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlcaDtCalibMu'),
    throw = cms.bool(False)
)


process.ALCARECOHcalCalHOCosmicHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('HcalCalHOCosmics'),
    throw = cms.bool(False)
)


process.ALCARECOHcalCalHOHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('HcalCalHO'),
    throw = cms.bool(False)
)


process.ALCARECOHltFilterForBS = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('PromptCalibProdForBS'),
    throw = cms.bool(False)
)


process.ALCARECOMuAlBeamHalo = cms.EDFilter("AlignmentCSCBeamHaloSelectorModule",
    filter = cms.bool(True),
    minHitsPerStation = cms.uint32(4),
    minStations = cms.uint32(0),
    src = cms.InputTag("cosmicMuons")
)


process.ALCARECOMuAlBeamHaloDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(False),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('CSCp', 
        'CSCm')
)


process.ALCARECOMuAlBeamHaloHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlBeamHalo'),
    throw = cms.bool(False)
)


process.ALCARECOMuAlBeamHaloOverlaps = cms.EDFilter("AlignmentCSCOverlapSelectorModule",
    filter = cms.bool(True),
    minHitsPerChamber = cms.uint32(4),
    src = cms.InputTag("ALCARECOMuAlBeamHaloOverlapsEnergyCut"),
    station = cms.int32(0)
)


process.ALCARECOMuAlBeamHaloOverlapsDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(False),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('CSCp', 
        'CSCm')
)


process.ALCARECOMuAlBeamHaloOverlapsEnergyCut = cms.EDFilter("AlignmentCSCBeamHaloSelectorModule",
    filter = cms.bool(True),
    minHitsPerStation = cms.uint32(4),
    minStations = cms.uint32(0),
    src = cms.InputTag("cosmicMuons")
)


process.ALCARECOMuAlBeamHaloOverlapsHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlBeamHaloOverlaps'),
    throw = cms.bool(False)
)


process.ALCARECOMuAlCalIsolatedMu = cms.EDFilter("AlignmentMuonSelectorModule",
    applyBasicCuts = cms.bool(True),
    applyMassPairFilter = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMaxGB = cms.double(9999999.0),
    chi2nMaxSA = cms.double(9999999.0),
    chi2nMaxTO = cms.double(9999999.0),
    etaMax = cms.double(2.4),
    etaMin = cms.double(-2.4),
    filter = cms.bool(True),
    maxMassPair = cms.double(90.0),
    minMassPair = cms.double(89.0),
    minMultiplicity = cms.int32(1),
    nHighestPt = cms.int32(2),
    nHitMaxGB = cms.double(9999999.0),
    nHitMaxSA = cms.double(9999999.0),
    nHitMaxTO = cms.double(9999999.0),
    nHitMinGB = cms.double(0.0),
    nHitMinSA = cms.double(0.0),
    nHitMinTO = cms.double(0.0),
    pMax = cms.double(999999.0),
    pMin = cms.double(10.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999999.0),
    ptMin = cms.double(0.0),
    src = cms.InputTag("muons")
)


process.ALCARECOMuAlCalIsolatedMuHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlCalIsolatedMu'),
    throw = cms.bool(False)
)


process.ALCARECOMuAlGlobalCosmics = cms.EDFilter("AlignmentMuonSelectorModule",
    applyBasicCuts = cms.bool(True),
    applyMassPairFilter = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMaxGB = cms.double(9999999.0),
    chi2nMaxSA = cms.double(9999999.0),
    chi2nMaxTO = cms.double(9999999.0),
    etaMax = cms.double(100.0),
    etaMin = cms.double(-100.0),
    filter = cms.bool(True),
    maxMassPair = cms.double(90.0),
    minMassPair = cms.double(89.0),
    minMultiplicity = cms.int32(1),
    nHighestPt = cms.int32(2),
    nHitMaxGB = cms.double(9999999.0),
    nHitMaxSA = cms.double(9999999.0),
    nHitMaxTO = cms.double(9999999.0),
    nHitMinGB = cms.double(1),
    nHitMinSA = cms.double(0.0),
    nHitMinTO = cms.double(0.0),
    pMax = cms.double(999999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999999.0),
    ptMin = cms.double(10.0),
    src = cms.InputTag("muons")
)


process.ALCARECOMuAlGlobalCosmicsDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(False),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('DT0', 
        'DTp', 
        'DTm')
)


process.ALCARECOMuAlGlobalCosmicsHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlGlobalCosmics'),
    throw = cms.bool(False)
)


process.ALCARECOMuAlGlobalCosmicsInCollisions = cms.EDFilter("AlignmentMuonSelectorModule",
    applyBasicCuts = cms.bool(True),
    applyMassPairFilter = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMaxGB = cms.double(9999999.0),
    chi2nMaxSA = cms.double(9999999.0),
    chi2nMaxTO = cms.double(9999999.0),
    etaMax = cms.double(100.0),
    etaMin = cms.double(-100.0),
    filter = cms.bool(True),
    maxMassPair = cms.double(90.0),
    minMassPair = cms.double(89.0),
    minMultiplicity = cms.int32(1),
    nHighestPt = cms.int32(2),
    nHitMaxGB = cms.double(9999999.0),
    nHitMaxSA = cms.double(9999999.0),
    nHitMaxTO = cms.double(9999999.0),
    nHitMinGB = cms.double(1),
    nHitMinSA = cms.double(0.0),
    nHitMinTO = cms.double(0.0),
    pMax = cms.double(999999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999999.0),
    ptMin = cms.double(10.0),
    src = cms.InputTag("muonsFromCosmics")
)


process.ALCARECOMuAlGlobalCosmicsInCollisionsDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(False),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('DT0', 
        'DTp', 
        'DTm')
)


process.ALCARECOMuAlGlobalCosmicsInCollisionsHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlGlobalCosmics'),
    throw = cms.bool(False)
)


process.ALCARECOMuAlOverlaps = cms.EDFilter("AlignmentCSCOverlapSelectorModule",
    filter = cms.bool(True),
    minHitsPerChamber = cms.uint32(4),
    src = cms.InputTag("ALCARECOMuAlOverlapsMuonSelector","StandAlone"),
    station = cms.int32(0)
)


process.ALCARECOMuAlOverlapsDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(False),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('CSCp', 
        'CSCm')
)


process.ALCARECOMuAlOverlapsHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlOverlaps'),
    throw = cms.bool(False)
)


process.ALCARECOMuAlOverlapsMuonSelector = cms.EDFilter("AlignmentMuonSelectorModule",
    applyBasicCuts = cms.bool(True),
    applyMassPairFilter = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMaxGB = cms.double(9999999.0),
    chi2nMaxSA = cms.double(9999999.0),
    chi2nMaxTO = cms.double(9999999.0),
    etaMax = cms.double(2.4),
    etaMin = cms.double(-2.4),
    filter = cms.bool(True),
    maxMassPair = cms.double(90.0),
    minMassPair = cms.double(89.0),
    minMultiplicity = cms.int32(1),
    nHighestPt = cms.int32(2),
    nHitMaxGB = cms.double(9999999.0),
    nHitMaxSA = cms.double(9999999.0),
    nHitMaxTO = cms.double(9999999.0),
    nHitMinGB = cms.double(0.0),
    nHitMinSA = cms.double(0.0),
    nHitMinTO = cms.double(0.0),
    pMax = cms.double(999999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999999.0),
    ptMin = cms.double(3.0),
    src = cms.InputTag("muons")
)


process.ALCARECOMuAlZMuMu = cms.EDFilter("AlignmentMuonSelectorModule",
    applyBasicCuts = cms.bool(True),
    applyMassPairFilter = cms.bool(True),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMaxGB = cms.double(9999999.0),
    chi2nMaxSA = cms.double(9999999.0),
    chi2nMaxTO = cms.double(9999999.0),
    etaMax = cms.double(2.4),
    etaMin = cms.double(-2.4),
    filter = cms.bool(True),
    maxMassPair = cms.double(101.0),
    minMassPair = cms.double(81.0),
    minMultiplicity = cms.int32(1),
    nHighestPt = cms.int32(2),
    nHitMaxGB = cms.double(9999999.0),
    nHitMaxSA = cms.double(9999999.0),
    nHitMaxTO = cms.double(9999999.0),
    nHitMinGB = cms.double(0.0),
    nHitMinSA = cms.double(0.0),
    nHitMinTO = cms.double(0.0),
    pMax = cms.double(999999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999999.0),
    ptMin = cms.double(10.0),
    src = cms.InputTag("muons")
)


process.ALCARECOMuAlZMuMuDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'DT0', 
        'DTp', 
        'DTm', 
        'CSCp', 
        'CSCm')
)


process.ALCARECOMuAlZMuMuHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('MuAlZMuMu'),
    throw = cms.bool(False)
)


process.ALCARECORpcCalHLTFilter = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('RpcCalHLT'),
    throw = cms.bool(False)
)


process.ALCARECOSiPixelLorentzAngleHLTFilter = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring('HLT_IsoMu11', 
        'HLT_DoubleMu3', 
        'HLT_DoubleMu3_JPsi', 
        'HLT_DoubleMu3_Upsilon', 
        'HLT_DoubleMu7_Z', 
        'HLT_DoubleMu3_SameSign'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string(''),
    throw = cms.bool(False)
)


process.ALCARECOSiStripCalMinBias = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(10.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(2.6),
    etaMin = cms.double(-2.6),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(6),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(0.8),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("hiGeneralTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOSiStripCalMinBiasHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('SiStripCalMinBiasHI'),
    throw = cms.bool(False)
)


process.ALCARECOSiStripCalZeroBiasHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('SiStripCalZeroBiasHI'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlBeamHalo = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(9999),
    etaMin = cms.double(-9999),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(3),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("beamhaloTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlBeamHaloDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX')
)


process.ALCARECOTkAlCosmics0TDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX')
)


process.ALCARECOTkAlCosmics0THLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlCosmics0T'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlCosmicsCTF = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(True),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(99.0),
    etaMin = cms.double(-99.0),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(1),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(2),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(99999.0),
    pMin = cms.double(4.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(99999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("ctfWithMaterialTracksP5"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlCosmicsCTF0T = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(99.0),
    etaMin = cms.double(-99.0),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(1),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(2),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(99999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("ctfWithMaterialTracksP5"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlCosmicsCosmicTF = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(True),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(99.0),
    etaMin = cms.double(-99.0),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(1),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(2),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(99999.0),
    pMin = cms.double(4.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(99999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("cosmictrackfinderP5"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlCosmicsCosmicTF0T = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(99.0),
    etaMin = cms.double(-99.0),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(1),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(2),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(99999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("cosmictrackfinderP5"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlCosmicsDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX')
)


process.ALCARECOTkAlCosmicsHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlCosmics'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlCosmicsInCollisions = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(True),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(99.0),
    etaMin = cms.double(-99.0),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(1),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(2),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(99999.0),
    pMin = cms.double(4.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(99999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("regionalCosmicTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlCosmicsInCollisionsDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX')
)


process.ALCARECOTkAlCosmicsInCollisionsHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlCosmics'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlCosmicsRegional = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(True),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(99.0),
    etaMin = cms.double(-99.0),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(1),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(2),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(99999.0),
    pMin = cms.double(4.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(99999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("regionalCosmicTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlCosmicsRegional0T = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(99.0),
    etaMin = cms.double(-99.0),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(1),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(2),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(99999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("regionalCosmicTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlJpsiMuMu = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(True),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("ALCARECOTkAlJpsiMuMuGoodMuons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(True),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(3.4),
        minXMass = cms.double(2.7),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(3.5),
    etaMin = cms.double(-3.5),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(0.0),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(0.8),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("generalTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlJpsiMuMuDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX', 
        'DT0', 
        'DTp', 
        'DTm', 
        'CSCp', 
        'CSCm')
)


process.ALCARECOTkAlJpsiMuMuGoodMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('isGlobalMuon &isTrackerMuon &numberOfMatches > 1 &globalTrack.hitPattern.numberOfValidMuonHits > 0 &abs(eta) < 2.5 &globalTrack.normalizedChi2 < 20.'),
    filter = cms.bool(True),
    src = cms.InputTag("muons")
)


process.ALCARECOTkAlJpsiMuMuHI = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(True),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("ALCARECOTkAlJpsiMuMuHIGoodMuons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(True),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(3.4),
        minXMass = cms.double(2.7),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(3.5),
    etaMin = cms.double(-3.5),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(0.0),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(0.8),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("hiGeneralTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlJpsiMuMuHIDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX', 
        'DT0', 
        'DTp', 
        'DTm', 
        'CSCp', 
        'CSCm')
)


process.ALCARECOTkAlJpsiMuMuHIGoodMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('isGlobalMuon &isTrackerMuon &numberOfMatches > 1 &globalTrack.hitPattern.numberOfValidMuonHits > 0 &abs(eta) < 2.5 &globalTrack.normalizedChi2 < 20.'),
    filter = cms.bool(True),
    src = cms.InputTag("muons")
)


process.ALCARECOTkAlJpsiMuMuHIHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlJpsiMuMuHI'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlJpsiMuMuHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlJpsiMuMu'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlLASEventFilter = cms.EDFilter("LaserAlignmentEventFilter",
    CHANNEL_COUNT_THRESH = cms.uint32(8),
    DET_IDs = cms.vint32( (470307208, 470307272, 470307464, 470307528, 470307720, 
        470307784, 470307976, 470308040, 470308232, 470308296, 
        470308488, 470308552, 470308744, 470308808, 470309000, 
        470309064, 470323592, 470323656, 470323848, 470323912, 
        470324104, 470324168, 470324360, 470324424, 470324616, 
        470324680, 470324872, 470324936, 470325128, 470325192, 
        470325384, 470325448, 470339976, 470340040, 470340232, 
        470340296, 470340488, 470340552, 470340744, 470340808, 
        470341000, 470341064, 470341256, 470341320, 470341512, 
        470341576, 470341768, 470341832, 470356360, 470356424, 
        470356616, 470356680, 470356872, 470356936, 470357128, 
        470357192, 470357384, 470357448, 470357640, 470357704, 
        470357896, 470357960, 470358152, 470358216, 470372744, 
        470372808, 470373000, 470373064, 470373256, 470373320, 
        470373512, 470373576, 470373768, 470373832, 470374024, 
        470374088, 470374280, 470374344, 470374536, 470374600, 
        470389128, 470389192, 470389384, 470389448, 470389640, 
        470389704, 470389896, 470389960, 470390152, 470390216, 
        470390408, 470390472, 470390664, 470390728, 470390920, 
        470390984, 470405512, 470405576, 470405768, 470405832, 
        470406024, 470406088, 470406280, 470406344, 470406536, 
        470406600, 470406792, 470406856, 470407048, 470407112, 
        470407304, 470407368, 470421896, 470421960, 470422152, 
        470422216, 470422408, 470422472, 470422664, 470422728, 
        470422920, 470422984, 470423176, 470423240, 470423432, 
        470423496, 470423688, 470423752, 470438280, 470438344, 
        470438536, 470438600, 470438792, 470438856, 470439048, 
        470439112, 470439304, 470439368, 470439560, 470439624, 
        470439816, 470439880, 470440072, 470440136, 470045064, 
        470061448, 470077832, 470094216, 470110600, 470126984, 
        470143368, 470159752, 470176136, 470045320, 470061704, 
        470078088, 470094472, 470110856, 470127240, 470143624, 
        470160008, 470176392, 470045576, 470061960, 470078344, 
        470094728, 470111112, 470127496, 470143880, 470160264, 
        470176648, 470045832, 470062216, 470078600, 470094984, 
        470111368, 470127752, 470144136, 470160520, 470176904, 
        470046088, 470062472, 470078856, 470095240, 470111624, 
        470128008, 470144392, 470160776, 470177160, 470046344, 
        470062728, 470079112, 470095496, 470111880, 470128264, 
        470144648, 470161032, 470177416, 470046600, 470062984, 
        470079368, 470095752, 470112136, 470128520, 470144904, 
        470161288, 470177672, 470046856, 470063240, 470079624, 
        470096008, 470112392, 470128776, 470145160, 470161544, 
        470177928, 470045128, 470061512, 470077896, 470094280, 
        470110664, 470127048, 470143432, 470159816, 470176200, 
        470045384, 470061768, 470078152, 470094536, 470110920, 
        470127304, 470143688, 470160072, 470176456, 470045640, 
        470062024, 470078408, 470094792, 470111176, 470127560, 
        470143944, 470160328, 470176712, 470045896, 470062280, 
        470078664, 470095048, 470111432, 470127816, 470144200, 
        470160584, 470176968, 470046152, 470062536, 470078920, 
        470095304, 470111688, 470128072, 470144456, 470160840, 
        470177224, 470046408, 470062792, 470079176, 470095560, 
        470111944, 470128328, 470144712, 470161096, 470177480, 
        470046664, 470063048, 470079432, 470095816, 470112200, 
        470128584, 470144968, 470161352, 470177736, 470046920, 
        470063304, 470079688, 470096072, 470112456, 470128840, 
        470145224, 470161608, 470177992, 436232314, 436232306, 
        436232298, 436228198, 436228206, 436228214, 436232506, 
        436232498, 436232490, 436228390, 436228398, 436228406, 
        436232634, 436232626, 436232618, 436228518, 436228526, 
        436228534, 436232826, 436232818, 436232810, 436228710, 
        436228718, 436228726, 436233018, 436233010, 436233002, 
        436228902, 436228910, 436228918, 436233146, 436233138, 
        436233130, 436229030, 436229038, 436229046, 436233338, 
        436233330, 436233322, 436229222, 436229230, 436229238, 
        436233466, 436233458, 436233450, 436229350, 436229358, 
        436229366, 369174604, 369174600, 369174596, 369170500, 
        369170504, 369170508, 369174732, 369174728, 369174724, 
        369170628, 369170632, 369170636, 369174812, 369174808, 
        369174804, 369170708, 369170712, 369170716, 369174940, 
        369174936, 369174932, 369170836, 369170840, 369170844, 
        369175068, 369175064, 369175060, 369170964, 369170968, 
        369170972, 369175164, 369175160, 369175156, 369171060, 
        369171064, 369171068, 369175292, 369175288, 369175284, 
        369171188, 369171192, 369171196, 369175372, 369175368, 
        369175364, 369171268, 369171272, 369171276, 470307468, 
        470323852, 470340236, 470356620, 470373004, 470307716, 
        470324100, 470340484, 470356868, 470373252, 470308236, 
        470324620, 470341004, 470357388, 470373772, 470308748, 
        470325132, 470341516, 470357900, 470374284, 470308996, 
        470325380, 470341764, 470358148, 470374532, 470045316, 
        470061700, 470078084, 470094468, 470110852, 470045580, 
        470061964, 470078348, 470094732, 470111116, 470046084, 
        470062468, 470078852, 470095236, 470111620, 470046596, 
        470062980, 470079364, 470095748, 470112132, 470046860, 
        470063244, 470079628, 470096012, 470112396 ) ),
    FED_IDs = cms.vint32(260, 261, 262, 263, 264, 
        265, 266, 267, 269, 270, 
        273, 274, 277, 278, 281, 
        282, 284, 285, 288, 289, 
        292, 293, 294, 295, 300, 
        301, 304, 305, 308, 309, 
        310, 311, 316, 317, 324, 
        325, 329, 330, 331, 332, 
        339, 340, 341, 342, 349, 
        350, 351, 352, 164, 165, 
        172, 173, 177, 178, 179, 
        180, 187, 188, 189, 190, 
        197, 198, 199, 200, 204, 
        205, 208, 209, 212, 213, 
        214, 215, 220, 221, 224, 
        225, 228, 229, 230, 231, 
        236, 237, 238, 239, 240, 
        241, 242, 243, 245, 246, 
        249, 250, 253, 254, 257, 
        258, 478, 476, 477, 482, 
        484, 480, 481, 474, 459, 
        460, 461, 463, 485, 487, 
        488, 489, 118, 119, 120, 
        121, 122, 123, 124, 125, 
        126, 127, 128, 129, 130, 
        131, 132, 133, 288, 289, 
        292, 293, 300, 301, 304, 
        305, 310, 311, 316, 317, 
        329, 330, 339, 340, 341, 
        342, 349, 350, 164, 165, 
        177, 178, 179, 180, 189, 
        190, 197, 198, 204, 205, 
        212, 213, 220, 221, 224, 
        225, 230, 231),
    FedInputTag = cms.InputTag("hltTrackerCalibrationRaw"),
    SIGNAL_IDs = cms.vint32(470389128, 470389384, 470389640, 470389896, 470390152, 
        470390408, 470390664, 470390920, 470389192, 470389448, 
        470389704, 470389960, 470390216, 470390472, 470390728, 
        470390984, 470126984, 470127240, 470127496, 470127752, 
        470128008, 470128264, 470128520, 470128776, 470127048, 
        470127304, 470127560, 470127816, 470128072, 470128328, 
        470128584, 470128840, 436232506, 436232826, 436233146, 
        436233466, 369174604, 369174812, 369175068, 369175292, 
        470307468, 470307716, 470308236, 470308748, 470308996, 
        470045316, 470045580, 470046084, 470046596, 470046860),
    SINGLE_CHANNEL_THRESH = cms.uint32(11)
)


process.ALCARECOTkAlMinBias = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(3.5),
    etaMin = cms.double(-3.5),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(1.5),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(0.65),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("generalTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlMinBiasDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX')
)


process.ALCARECOTkAlMinBiasFilterForBS = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring('pathALCARECOTkAlMinBiasHI'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","RECO"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string(''),
    throw = cms.bool(True)
)


process.ALCARECOTkAlMinBiasFilterForSiPixelAli = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring('pathALCARECOTkAlMinBias'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","RECO"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string(''),
    throw = cms.bool(True)
)


process.ALCARECOTkAlMinBiasHI = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(3.5),
    etaMin = cms.double(-3.5),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(7),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(1.5),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(0.65),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("hiGeneralTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring('highPurity')
)


process.ALCARECOTkAlMinBiasHIDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX')
)


process.ALCARECOTkAlMinBiasHIHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlMinBiasHI'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlMinBiasHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlMinBias'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlMinBiasNOTHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlMinBiasNOT'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlMuonIsolated = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(True),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.1),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("ALCARECOTkAlMuonIsolatedRelCombIsoMuons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(3.5),
    etaMin = cms.double(-3.5),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(0.0),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(2.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("generalTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlMuonIsolatedDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX', 
        'DT0', 
        'DTp', 
        'DTm', 
        'CSCp', 
        'CSCm')
)


process.ALCARECOTkAlMuonIsolatedGoodMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('isGlobalMuon &isTrackerMuon &numberOfMatches > 1 &globalTrack.hitPattern.numberOfValidMuonHits > 0 &abs(eta) < 2.5 &globalTrack.normalizedChi2 < 20.'),
    filter = cms.bool(True),
    src = cms.InputTag("muons")
)


process.ALCARECOTkAlMuonIsolatedHI = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(True),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("iterativeConePu5CaloJets"),
        jetIsoSource = cms.InputTag("iterativeConePu5CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.1),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("ALCARECOTkAlMuonIsolatedHIRelCombIsoMuons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(3.5),
    etaMin = cms.double(-3.5),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(0.0),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(2.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("hiGeneralTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlMuonIsolatedHIDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX', 
        'DT0', 
        'DTp', 
        'DTm', 
        'CSCp', 
        'CSCm')
)


process.ALCARECOTkAlMuonIsolatedHIGoodMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('isGlobalMuon &isTrackerMuon &numberOfMatches > 1 &globalTrack.hitPattern.numberOfValidMuonHits > 0 &abs(eta) < 2.5 &globalTrack.normalizedChi2 < 20.'),
    filter = cms.bool(True),
    src = cms.InputTag("muons")
)


process.ALCARECOTkAlMuonIsolatedHIHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlMuonIsolated'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlMuonIsolatedHIRelCombIsoMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('(isolationR03().sumPt + isolationR03().emEt + isolationR03().hadEt)/pt  < 0.15'),
    filter = cms.bool(True),
    src = cms.InputTag("ALCARECOTkAlMuonIsolatedHIGoodMuons")
)


process.ALCARECOTkAlMuonIsolatedHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlMuonIsolated'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlMuonIsolatedRelCombIsoMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('(isolationR03().sumPt + isolationR03().emEt + isolationR03().hadEt)/pt  < 0.15'),
    filter = cms.bool(True),
    src = cms.InputTag("ALCARECOTkAlMuonIsolatedGoodMuons")
)


process.ALCARECOTkAlUpsilonMuMu = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(True),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("ALCARECOTkAlUpsilonMuMuRelCombIsoMuons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(True),
        applyMassrangeFilter = cms.bool(True),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(9.9),
        minXMass = cms.double(8.9),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(3.5),
    etaMin = cms.double(-3.5),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(0.0),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(3.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("generalTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlUpsilonMuMuDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX', 
        'DT0', 
        'DTp', 
        'DTm', 
        'CSCp', 
        'CSCm')
)


process.ALCARECOTkAlUpsilonMuMuGoodMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('isGlobalMuon &isTrackerMuon &numberOfMatches > 1 &globalTrack.hitPattern.numberOfValidMuonHits > 0 &abs(eta) < 2.5 &globalTrack.normalizedChi2 < 20.'),
    filter = cms.bool(True),
    src = cms.InputTag("muons")
)


process.ALCARECOTkAlUpsilonMuMuHI = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(True),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("ALCARECOTkAlUpsilonMuMuHIRelCombIsoMuons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(True),
        applyMassrangeFilter = cms.bool(True),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(9.9),
        minXMass = cms.double(8.9),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(3.5),
    etaMin = cms.double(-3.5),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(0.0),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(3.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("hiGeneralTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlUpsilonMuMuHIDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX', 
        'DT0', 
        'DTp', 
        'DTm', 
        'CSCp', 
        'CSCm')
)


process.ALCARECOTkAlUpsilonMuMuHIGoodMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('isGlobalMuon &isTrackerMuon &numberOfMatches > 1 &globalTrack.hitPattern.numberOfValidMuonHits > 0 &abs(eta) < 2.5 &globalTrack.normalizedChi2 < 20.'),
    filter = cms.bool(True),
    src = cms.InputTag("muons")
)


process.ALCARECOTkAlUpsilonMuMuHIHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlUpsilonMuMuHI'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlUpsilonMuMuHIRelCombIsoMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('(isolationR03().sumPt + isolationR03().emEt + isolationR03().hadEt)/pt  < 0.3'),
    filter = cms.bool(True),
    src = cms.InputTag("ALCARECOTkAlUpsilonMuMuHIGoodMuons")
)


process.ALCARECOTkAlUpsilonMuMuHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlUpsilonMuMu'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlUpsilonMuMuRelCombIsoMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('(isolationR03().sumPt + isolationR03().emEt + isolationR03().hadEt)/pt  < 0.3'),
    filter = cms.bool(True),
    src = cms.InputTag("ALCARECOTkAlUpsilonMuMuGoodMuons")
)


process.ALCARECOTkAlZMuMu = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(True),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("ALCARECOTkAlZMuMuRelCombIsoMuons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(True),
        applyMassrangeFilter = cms.bool(True),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(115.0),
        minXMass = cms.double(65.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(3.5),
    etaMin = cms.double(-3.5),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(0.0),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(15.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("generalTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlZMuMuDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX', 
        'DT0', 
        'DTp', 
        'DTm', 
        'CSCp', 
        'CSCm')
)


process.ALCARECOTkAlZMuMuGoodMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('isGlobalMuon &isTrackerMuon &numberOfMatches > 1 &globalTrack.hitPattern.numberOfValidMuonHits > 0 &abs(eta) < 2.5 &globalTrack.normalizedChi2 < 20.'),
    filter = cms.bool(True),
    src = cms.InputTag("muons")
)


process.ALCARECOTkAlZMuMuHI = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(True),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("ALCARECOTkAlZMuMuHIRelCombIsoMuons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(True),
        applyMassrangeFilter = cms.bool(True),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(115.0),
        minXMass = cms.double(65.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(3.5),
    etaMin = cms.double(-3.5),
    filter = cms.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(0.0),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(15.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("hiGeneralTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.ALCARECOTkAlZMuMuHIDCSFilter = cms.EDFilter("DetStatus",
    AndOr = cms.bool(True),
    ApplyFilter = cms.bool(True),
    DebugOn = cms.untracked.bool(False),
    DetectorType = cms.vstring('TIBTID', 
        'TOB', 
        'TECp', 
        'TECm', 
        'BPIX', 
        'FPIX', 
        'DT0', 
        'DTp', 
        'DTm', 
        'CSCp', 
        'CSCm')
)


process.ALCARECOTkAlZMuMuHIGoodMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('isGlobalMuon &isTrackerMuon &numberOfMatches > 1 &globalTrack.hitPattern.numberOfValidMuonHits > 0 &abs(eta) < 2.5 &globalTrack.normalizedChi2 < 20.'),
    filter = cms.bool(True),
    src = cms.InputTag("muons")
)


process.ALCARECOTkAlZMuMuHIHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlZMuMuHI'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlZMuMuHIRelCombIsoMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('(isolationR03().sumPt + isolationR03().emEt + isolationR03().hadEt)/pt  < 0.15'),
    filter = cms.bool(True),
    src = cms.InputTag("ALCARECOTkAlZMuMuHIGoodMuons")
)


process.ALCARECOTkAlZMuMuHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('TkAlZMuMu'),
    throw = cms.bool(False)
)


process.ALCARECOTkAlZMuMuRelCombIsoMuons = cms.EDFilter("MuonSelector",
    cut = cms.string('(isolationR03().sumPt + isolationR03().emEt + isolationR03().hadEt)/pt  < 0.15'),
    filter = cms.bool(True),
    src = cms.InputTag("ALCARECOTkAlZMuMuGoodMuons")
)


process.AlignmentTrackSelector = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(2.6),
    etaMin = cms.double(-2.6),
    filter = cms.bool(False),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(0.0),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("generalTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.DCSStatusForSiStripCalMinBias = cms.EDFilter("SiStripDCSFilter")


process.DCSStatusForSiStripCalZeroBias = cms.EDFilter("SiStripDCSFilter")


process.DTCalibMuonSelection = cms.EDFilter("DTCalibMuonSelection",
    etaMax = cms.double(1.25),
    etaMin = cms.double(-1.25),
    filter = cms.bool(True),
    ptMin = cms.double(3.0),
    src = cms.InputTag("muons")
)


process.HLTPixelActivityFilterForSiStripCalMinBias = cms.EDFilter("HLTPixelActivityFilter",
    inputTag = cms.InputTag("siPixelClusters"),
    maxClusters = cms.uint32(500),
    minClusters = cms.uint32(3),
    saveTags = cms.bool(False)
)


process.HLTPixelActivityFilterForSiStripCalZeroBias = cms.EDFilter("HLTPixelActivityFilter",
    inputTag = cms.InputTag("siPixelClusters"),
    maxClusters = cms.uint32(500),
    minClusters = cms.uint32(3),
    saveTags = cms.bool(False)
)


process.LargeSiStripClusterEvents = cms.EDFilter("BySiStripClusterMultiplicityEventFilter",
    cut = cms.string('mult > 150000'),
    multiplicityConfig = cms.PSet(
        collectionName = cms.InputTag("calZeroBiasClusters"),
        moduleThreshold = cms.untracked.int32(20),
        qualityLabel = cms.untracked.string(''),
        useQuality = cms.untracked.bool(False)
    )
)


process.PotentialTIBTECFrameHeaderEventsAdditionalPeak = cms.EDFilter("EventWithHistoryEDFilter",
    commonConfiguration = cms.untracked.PSet(
        APVPhaseLabel = cms.untracked.string('APVPhases'),
        historyProduct = cms.untracked.InputTag("consecutiveHEs")
    ),
    filterConfigurations = cms.untracked.VPSet(cms.PSet(
        absBXInCycleRangeLtcyAware = cms.untracked.vint32(24, 25),
        apvModes = cms.untracked.vint32(47),
        partitionName = cms.untracked.string('Any')
    ), 
        cms.PSet(
            absBXInCycleRangeLtcyAware = cms.untracked.vint32(22, 23),
            apvModes = cms.untracked.vint32(37),
            partitionName = cms.untracked.string('Any')
        ))
)


process.PotentialTIBTECFrameHeaderEventsFPeak = cms.EDFilter("EventWithHistoryEDFilter",
    commonConfiguration = cms.untracked.PSet(
        APVPhaseLabel = cms.untracked.string('APVPhases'),
        historyProduct = cms.untracked.InputTag("consecutiveHEs")
    ),
    filterConfigurations = cms.untracked.VPSet(cms.PSet(
        absBXInCycleRangeLtcyAware = cms.untracked.vint32(19, 21),
        apvModes = cms.untracked.vint32(47),
        partitionName = cms.untracked.string('Any')
    ), 
        cms.PSet(
            absBXInCycleRangeLtcyAware = cms.untracked.vint32(17, 19),
            apvModes = cms.untracked.vint32(37),
            partitionName = cms.untracked.string('Any')
        ))
)


process.PotentialTIBTECHugeEvents = cms.EDFilter("EventWithHistoryEDFilter",
    commonConfiguration = cms.untracked.PSet(
        APVPhaseLabel = cms.untracked.string('APVPhases'),
        historyProduct = cms.untracked.InputTag("consecutiveHEs")
    ),
    filterConfigurations = cms.untracked.VPSet(cms.PSet(
        absBXInCycleRangeLtcyAware = cms.untracked.vint32(8, 8),
        apvModes = cms.untracked.vint32(47),
        partitionName = cms.untracked.string('Any')
    ), 
        cms.PSet(
            absBXInCycleRangeLtcyAware = cms.untracked.vint32(6, 8),
            apvModes = cms.untracked.vint32(37),
            partitionName = cms.untracked.string('Any')
        ))
)


process.SiPixelAliHighPuritySelector = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(2.6),
    etaMin = cms.double(-2.6),
    filter = cms.bool(False),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(0.0),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(4.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("ALCARECOTkAlMinBias"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring('highPurity')
)


process.SiPixelAliTrackSelector = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(True),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(9999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(999.0),
    etaMin = cms.double(-999.0),
    filter = cms.bool(False),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(1),
    minHitChargeStrip = cms.double(30.0),
    minHitIsolation = cms.double(0.8),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(2),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(1),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(8),
    nHitMin2D = cms.uint32(2),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(8.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(1.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("SiPixelAliTrackFitter"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.TkAlIsoProd = cms.EDFilter("AlignmentTrackSelectorModule",
    GlobalSelector = cms.PSet(
        applyGlobalMuonFilter = cms.bool(False),
        applyIsolationtest = cms.bool(False),
        applyJetCountFilter = cms.bool(False),
        jetCountSource = cms.InputTag("kt6CaloJets"),
        jetIsoSource = cms.InputTag("kt6CaloJets"),
        maxJetCount = cms.int32(3),
        maxJetPt = cms.double(40.0),
        maxTrackDeltaR = cms.double(0.001),
        minGlobalMuonCount = cms.int32(1),
        minIsolatedCount = cms.int32(0),
        minJetDeltaR = cms.double(0.2),
        minJetPt = cms.double(40.0),
        muonSource = cms.InputTag("muons")
    ),
    RorZofFirstHitMax = cms.vdouble(999.0, 999.0),
    RorZofFirstHitMin = cms.vdouble(0.0, 0.0),
    RorZofLastHitMax = cms.vdouble(999.0, 999.0),
    RorZofLastHitMin = cms.vdouble(0.0, 0.0),
    TwoBodyDecaySelector = cms.PSet(
        acoplanarDistance = cms.double(1.0),
        applyAcoplanarityFilter = cms.bool(False),
        applyChargeFilter = cms.bool(False),
        applyMassrangeFilter = cms.bool(False),
        applyMissingETFilter = cms.bool(False),
        applySecThreshold = cms.bool(False),
        charge = cms.int32(0),
        daughterMass = cms.double(0.105),
        maxXMass = cms.double(15000.0),
        minXMass = cms.double(0.0),
        missingETSource = cms.InputTag("met"),
        numberOfCandidates = cms.uint32(1),
        secondThreshold = cms.double(6.0),
        useUnsignedCharge = cms.bool(True)
    ),
    applyBasicCuts = cms.bool(False),
    applyChargeCheck = cms.bool(False),
    applyIsolationCut = cms.bool(False),
    applyMultiplicityFilter = cms.bool(False),
    applyNHighestPt = cms.bool(False),
    chi2nMax = cms.double(999999.0),
    countStereoHitAs2D = cms.bool(True),
    d0Max = cms.double(999999.0),
    d0Min = cms.double(-999999.0),
    dzMax = cms.double(999999.0),
    dzMin = cms.double(-999999.0),
    etaMax = cms.double(2.6),
    etaMin = cms.double(-2.6),
    filter = cms.bool(False),
    hitPrescaleMapTag = cms.InputTag(""),
    iterativeTrackingSteps = cms.vstring(),
    matchedrecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    maxHitDiffEndcaps = cms.double(999.0),
    maxMultiplicity = cms.int32(999999),
    minHitChargeStrip = cms.double(20.0),
    minHitIsolation = cms.double(0.01),
    minHitsPerSubDet = cms.PSet(
        inBPIX = cms.int32(0),
        inENDCAP = cms.int32(0),
        inENDCAPminus = cms.int32(0),
        inENDCAPplus = cms.int32(0),
        inFPIX = cms.int32(0),
        inFPIXminus = cms.int32(0),
        inFPIXplus = cms.int32(0),
        inPIXEL = cms.int32(0),
        inTEC = cms.int32(0),
        inTECminus = cms.int32(0),
        inTECplus = cms.int32(0),
        inTIB = cms.int32(0),
        inTID = cms.int32(0),
        inTIDminus = cms.int32(0),
        inTIDplus = cms.int32(0),
        inTOB = cms.int32(0)
    ),
    minMultiplicity = cms.int32(1),
    minPrescaledHits = cms.int32(-1),
    multiplicityOnInput = cms.bool(False),
    nHighestPt = cms.int32(2),
    nHitMax = cms.double(999.0),
    nHitMin = cms.double(0.0),
    nHitMin2D = cms.uint32(0),
    nLostHitMax = cms.double(999.0),
    pMax = cms.double(9999.0),
    pMin = cms.double(0.0),
    phiMax = cms.double(3.1416),
    phiMin = cms.double(-3.1416),
    ptMax = cms.double(999.0),
    ptMin = cms.double(0.0),
    rphirecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    seedOnlyFrom = cms.int32(0),
    src = cms.InputTag("generalTracks"),
    theCharge = cms.int32(0),
    trackQualities = cms.vstring()
)


process.akPu4CaloJetsSelected = cms.EDFilter("LargestEtCaloJetSelector",
    filter = cms.bool(False),
    maxNumber = cms.uint32(4),
    src = cms.InputTag("akPu4CaloJetsCorrected")
)


process.dijetsHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('HcalCalDijets'),
    throw = cms.bool(False)
)


process.ecaletaCalibHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('EcalCalEtaCalib'),
    throw = cms.bool(False)
)


process.ecalpi0CalibHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('EcalCalPi0Calib'),
    throw = cms.bool(False)
)


process.electronsWithPresel = cms.EDFilter("GsfElectronSelector",
    cut = cms.string('pt > 5 && ecalDrivenSeed && passingCutBasedPreselection'),
    src = cms.InputTag("ecalDrivenGsfElectrons")
)


process.gammajetHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring('HLT_L1SingleEG*', 
        'HLT_Photon*'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string(''),
    throw = cms.bool(False)
)


process.goodOfflinePrimaryVertices = cms.EDFilter("VertexSelector",
    cut = cms.string('!isFake && ndof >= 4.0 && abs(z) <= 24.0 && abs(position.Rho) <= 2.0'),
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices")
)


process.hcalminbiasHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('HcalCalMinBiasHI'),
    throw = cms.bool(False)
)


process.hiAkPu4CaloJetsSelectedPreSplitting = cms.EDFilter("LargestEtCaloJetSelector",
    filter = cms.bool(False),
    maxNumber = cms.uint32(4),
    src = cms.InputTag("hiAkPu4CaloJetsCorrectedPreSplitting")
)


process.hiBestAdaptiveVertex = cms.EDFilter("HIBestVertexSelection",
    maxNumber = cms.uint32(1),
    src = cms.InputTag("hiPixelAdaptiveVertex")
)


process.hiBestAdaptiveVertexPreSplitting = cms.EDFilter("HIBestVertexSelection",
    maxNumber = cms.uint32(1),
    src = cms.InputTag("hiPixelAdaptiveVertexPreSplitting")
)


process.hiFirstStepGoodPrimaryVertices = cms.EDFilter("PrimaryVertexObjectFilter",
    filterParams = cms.PSet(
        maxRho = cms.double(2.0),
        maxZ = cms.double(15.0),
        minNdof = cms.double(25.0)
    ),
    src = cms.InputTag("hiSelectedVertex")
)


process.hiJetsForCoreTracking = cms.EDFilter("CandPtrSelector",
    cut = cms.string('pt > 100 && abs(eta) < 2.4'),
    src = cms.InputTag("akPu4CaloJetsSelected")
)


process.hiJetsForCoreTrackingPreSplitting = cms.EDFilter("CandPtrSelector",
    cut = cms.string('pt > 30 && abs(eta) < 2.5'),
    src = cms.InputTag("hiAkPu4CaloJetsSelectedPreSplitting")
)


process.hiSelectedProtoTracks = cms.EDFilter("HIProtoTrackSelection",
    VertexCollection = cms.InputTag("hiPixelMedianVertex"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    maxD0Significance = cms.double(5.0),
    minZCut = cms.double(0.2),
    nSigmaZ = cms.double(5.0),
    ptMin = cms.double(0.0),
    src = cms.InputTag("hiPixel3ProtoTracks")
)


process.hiSelectedProtoTracksPreSplitting = cms.EDFilter("HIProtoTrackSelection",
    VertexCollection = cms.InputTag("hiPixelMedianVertexPreSplitting"),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    maxD0Significance = cms.double(5.0),
    minZCut = cms.double(0.2),
    nSigmaZ = cms.double(5.0),
    ptMin = cms.double(0.0),
    src = cms.InputTag("hiPixel3ProtoTracksPreSplitting")
)


process.hltHighLevel = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string(''),
    throw = cms.bool(True)
)


process.isoHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring(),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string('HcalCalIsoTrk'),
    throw = cms.bool(False)
)


process.lsNumberFilter = cms.EDFilter("LSNumberFilter",
    minLS = cms.untracked.uint32(21)
)


process.mvaElectrons = cms.EDFilter("ElectronIdMVABased",
    HZZmvaWeightFile = cms.vstring('RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_10_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_12_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_20_17Feb2011.weights.xml', 
        'RecoEgamma/ElectronIdentification/data/TMVA_Category_BDTSimpleCat_22_17Feb2011.weights.xml'),
    electronTag = cms.InputTag("electronsWithPresel"),
    thresholdBarrel = cms.double(-0.1875),
    thresholdEndcap = cms.double(-0.1075),
    thresholdIsoDR03Barrel = cms.double(10.0),
    thresholdIsoDR03Endcap = cms.double(10.0),
    vertexTag = cms.InputTag("hiSelectedVertex")
)


process.noiseHLT = cms.EDFilter("HLTHighLevel",
    HLTPaths = cms.vstring('HLT_MET25'),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT"),
    andOr = cms.bool(True),
    eventSetupPathsKey = cms.string(''),
    throw = cms.bool(False)
)


process.pfAllChargedHadrons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllChargedParticles = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllElectrons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(11, -11),
    src = cms.InputTag("pfNoMuon")
)


process.pfAllMuons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(-13, 13),
    src = cms.InputTag("pfNoPileUp")
)


process.pfAllNeutralHadrons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllNeutralHadronsAndPhotons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(22, 111, 130, 310, 2112),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllPhotons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(22),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfPileUpAllChargedParticles = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    makeClones = cms.bool(True),
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    src = cms.InputTag("pfPileUpIso")
)


process.pfSelectedElectrons = cms.EDFilter("GenericPFCandidateSelector",
    cut = cms.string('abs(pdgId())==11'),
    src = cms.InputTag("particleFlowTmp")
)


process.pfSelectedPhotons = cms.EDFilter("GenericPFCandidateSelector",
    cut = cms.string('pdgId()==22 && mva_nothing_gamma>0'),
    src = cms.InputTag("particleFlowTmp")
)


process.prescaler = cms.EDFilter("PrescalerFHN",
    Prescales = cms.VPSet(cms.PSet(
        HLTName = cms.string('HLT_MET25'),
        PrescaleFactor = cms.uint32(1)
    )),
    TriggerResultsTag = cms.InputTag("TriggerResults","","HLT")
)


process.ALCARECODTCalibrationDQM = cms.EDAnalyzer("DTPreCalibrationTask",
    SaveFile = cms.untracked.bool(False),
    digiLabel = cms.untracked.string('muonDTDigis'),
    folderName = cms.untracked.string('AlCaReco/DTCalibration'),
    maxTriggerWidth = cms.untracked.int32(1600),
    minTriggerWidth = cms.untracked.int32(0),
    outputFileName = cms.untracked.string('DigiHistos.root')
)


process.ALCARECOEcalCalElectronCalibDQM = cms.EDAnalyzer("DQMSourceEleCalib",
    AlCaStreamEBTag = cms.InputTag("alCaIsolatedElectrons","alcaBarrelHits"),
    AlCaStreamEETag = cms.InputTag("alCaIsolatedElectrons","alcaEndcapHits"),
    FolderName = cms.untracked.string('AlCaReco/EcalSingleEle'),
    electronCollection = cms.InputTag("electronFilter")
)


process.ALCARECOEcalCalEtaCalibDQM = cms.EDAnalyzer("DQMSourcePi0",
    AlCaStreamEBetaTag = cms.untracked.InputTag("hltAlCaEtaRegRecHits","etaEcalRecHitsEB"),
    AlCaStreamEBpi0Tag = cms.untracked.InputTag("hltAlCaPi0RegRecHits","pi0EcalRecHitsEB"),
    AlCaStreamEEetaTag = cms.untracked.InputTag("hltAlCaEtaRegRecHits","etaEcalRecHitsEE"),
    AlCaStreamEEpi0Tag = cms.untracked.InputTag("hltAlCaPi0RegRecHits","pi0EcalRecHitsEE"),
    FileName = cms.untracked.string('MonitorAlCaEcalPi0.root'),
    FolderName = cms.untracked.string('AlCaReco/EcalPi0'),
    SaveToFile = cms.untracked.bool(False),
    clusEtaSize = cms.int32(3),
    clusPhiSize = cms.int32(3),
    clusSeedThr = cms.double(0.5),
    clusSeedThrEndCap = cms.double(1.0),
    isMonEBeta = cms.untracked.bool(True),
    isMonEBpi0 = cms.untracked.bool(True),
    isMonEEeta = cms.untracked.bool(True),
    isMonEEpi0 = cms.untracked.bool(True),
    massHighPi0Cand = cms.double(0.163),
    massLowPi0Cand = cms.double(0.104),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(5.7),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    prescaleFactor = cms.untracked.int32(1),
    ptMinForIsolation = cms.double(1),
    ptMinForIsolationEndCap = cms.double(0.5),
    ptMinForIsolationEta = cms.double(1.0),
    ptMinForIsolationEtaEndCap = cms.double(0.5),
    seleEtaBeltDR = cms.double(0.3),
    seleEtaBeltDREndCap = cms.double(0.3),
    seleEtaBeltDeta = cms.double(0.1),
    seleEtaBeltDetaEndCap = cms.double(0.1),
    seleEtaIso = cms.double(0.5),
    seleEtaIsoEndCap = cms.double(0.5),
    seleMinvMaxEta = cms.double(0.8),
    seleMinvMaxEtaEndCap = cms.double(0.8),
    seleMinvMaxPi0 = cms.double(0.22),
    seleMinvMaxPi0EndCap = cms.double(0.3),
    seleMinvMinEta = cms.double(0.3),
    seleMinvMinEtaEndCap = cms.double(0.3),
    seleMinvMinPi0 = cms.double(0.06),
    seleMinvMinPi0EndCap = cms.double(0.05),
    selePi0BeltDR = cms.double(0.2),
    selePi0BeltDREndCap = cms.double(0.2),
    selePi0BeltDeta = cms.double(0.05),
    selePi0BeltDetaEndCap = cms.double(0.05),
    selePi0Iso = cms.double(0.5),
    selePi0IsoEndCap = cms.double(0.5),
    selePtEta = cms.double(4.0),
    selePtEtaEndCap = cms.double(5),
    selePtGamma = cms.double(1),
    selePtGammaEndCap = cms.double(0.8),
    selePtGammaEta = cms.double(1.2),
    selePtGammaEtaEndCap = cms.double(1.5),
    selePtPi0 = cms.double(2.0),
    selePtPi0EndCap = cms.double(3.0),
    seleS4S9Gamma = cms.double(0.83),
    seleS4S9GammaEndCap = cms.double(0.9),
    seleS4S9GammaEta = cms.double(0.9),
    seleS4S9GammaEtaEndCap = cms.double(0.9),
    seleS9S25GammaEta = cms.double(0.8),
    seleS9S25GammaEtaEndCap = cms.double(0.85),
    seleXtalMinEnergy = cms.double(-0.15),
    seleXtalMinEnergyEndCap = cms.double(-0.75)
)


process.ALCARECOEcalCalPi0CalibDQM = cms.EDAnalyzer("DQMSourcePi0",
    AlCaStreamEBetaTag = cms.untracked.InputTag("hltAlCaEtaRegRecHits","etaEcalRecHitsEB"),
    AlCaStreamEBpi0Tag = cms.untracked.InputTag("hltAlCaPi0RegRecHits","pi0EcalRecHitsEB"),
    AlCaStreamEEetaTag = cms.untracked.InputTag("hltAlCaEtaRegRecHits","etaEcalRecHitsEE"),
    AlCaStreamEEpi0Tag = cms.untracked.InputTag("hltAlCaPi0RegRecHits","pi0EcalRecHitsEE"),
    FileName = cms.untracked.string('MonitorAlCaEcalPi0.root'),
    FolderName = cms.untracked.string('AlCaReco/EcalPi0'),
    SaveToFile = cms.untracked.bool(False),
    clusEtaSize = cms.int32(3),
    clusPhiSize = cms.int32(3),
    clusSeedThr = cms.double(0.5),
    clusSeedThrEndCap = cms.double(1.0),
    isMonEBeta = cms.untracked.bool(True),
    isMonEBpi0 = cms.untracked.bool(True),
    isMonEEeta = cms.untracked.bool(True),
    isMonEEpi0 = cms.untracked.bool(True),
    massHighPi0Cand = cms.double(0.163),
    massLowPi0Cand = cms.double(0.104),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(5.7),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    prescaleFactor = cms.untracked.int32(1),
    ptMinForIsolation = cms.double(1),
    ptMinForIsolationEndCap = cms.double(0.5),
    ptMinForIsolationEta = cms.double(1.0),
    ptMinForIsolationEtaEndCap = cms.double(0.5),
    seleEtaBeltDR = cms.double(0.3),
    seleEtaBeltDREndCap = cms.double(0.3),
    seleEtaBeltDeta = cms.double(0.1),
    seleEtaBeltDetaEndCap = cms.double(0.1),
    seleEtaIso = cms.double(0.5),
    seleEtaIsoEndCap = cms.double(0.5),
    seleMinvMaxEta = cms.double(0.8),
    seleMinvMaxEtaEndCap = cms.double(0.8),
    seleMinvMaxPi0 = cms.double(0.22),
    seleMinvMaxPi0EndCap = cms.double(0.3),
    seleMinvMinEta = cms.double(0.3),
    seleMinvMinEtaEndCap = cms.double(0.3),
    seleMinvMinPi0 = cms.double(0.06),
    seleMinvMinPi0EndCap = cms.double(0.05),
    selePi0BeltDR = cms.double(0.2),
    selePi0BeltDREndCap = cms.double(0.2),
    selePi0BeltDeta = cms.double(0.05),
    selePi0BeltDetaEndCap = cms.double(0.05),
    selePi0Iso = cms.double(0.5),
    selePi0IsoEndCap = cms.double(0.5),
    selePtEta = cms.double(4.0),
    selePtEtaEndCap = cms.double(5),
    selePtGamma = cms.double(1),
    selePtGammaEndCap = cms.double(0.8),
    selePtGammaEta = cms.double(1.2),
    selePtGammaEtaEndCap = cms.double(1.5),
    selePtPi0 = cms.double(2.0),
    selePtPi0EndCap = cms.double(3.0),
    seleS4S9Gamma = cms.double(0.83),
    seleS4S9GammaEndCap = cms.double(0.9),
    seleS4S9GammaEta = cms.double(0.9),
    seleS4S9GammaEtaEndCap = cms.double(0.9),
    seleS9S25GammaEta = cms.double(0.8),
    seleS9S25GammaEtaEndCap = cms.double(0.85),
    seleXtalMinEnergy = cms.double(-0.15),
    seleXtalMinEnergyEndCap = cms.double(-0.75)
)


process.ALCARECOHcalCalDiJetsDQM = cms.EDAnalyzer("DQMHcalDiJetsAlCaReco",
    FileName = cms.untracked.string('HcalDiJetsAlCaRecoMon.root'),
    FolderName = cms.untracked.string('AlCaReco/HcalDiJets'),
    SaveToFile = cms.untracked.bool(False),
    ecInput = cms.InputTag("DiJProd","DiJetsEcalRecHitCollection"),
    hbheInput = cms.InputTag("DiJProd","DiJetsHBHERecHitCollection"),
    hfInput = cms.InputTag("DiJProd","DiJetsHFRecHitCollection"),
    hoInput = cms.InputTag("DiJProd","DiJetsHORecHitCollection"),
    jetsInput = cms.InputTag("DiJProd","DiJetsBackToBackCollection")
)


process.ALCARECOHcalCalHODQM = cms.EDAnalyzer("DQMHOAlCaRecoStream",
    RootFileName = cms.untracked.string('test.root'),
    folderName = cms.untracked.string('AlCaReco/HcalHO'),
    highedge = cms.untracked.double(10.0),
    highradposinmuch = cms.untracked.double(480),
    hoCalibVariableCollectionTag = cms.InputTag("hoCalibProducer","HOCalibVariableCollection"),
    lowedge = cms.untracked.double(-2.0),
    lowradposinmuch = cms.untracked.double(400.0),
    nbins = cms.untracked.int32(100),
    saveToFile = cms.untracked.bool(False),
    sigmaval = cms.untracked.double(0.2)
)


process.ALCARECOHcalCalIsoTrackDQM = cms.EDAnalyzer("DQMHcalIsoTrackAlCaReco",
    FolderName = cms.string('AlCaReco/HcalIsoTrack'),
    HltFilterLabels = cms.vstring('hltIsolPixelTrackL3FilterHB', 
        'hltIsolPixelTrackL3FilterHE', 
        'hltIsolPixelTrackL2FilterHB', 
        'hltIsolPixelTrackL2FilterHE', 
        'hltEcalIsolPixelTrackL2FilterHB', 
        'hltEcalIsolPixelTrackL2FilterHE'),
    L1FilterLabel = cms.vstring('L1SingleJet68'),
    TracksLabel = cms.InputTag("IsoProd","HcalIsolatedTrackCollection"),
    TriggerLabel = cms.InputTag("hltTriggerSummaryAOD"),
    TypeFilter = cms.vint32(2, 2, 0, 0, 1, 
        1),
    pThrL3 = cms.untracked.double(0)
)


process.ALCARECOHcalCalPhisymDQM = cms.EDAnalyzer("DQMHcalPhiSymAlCaReco",
    FileName = cms.untracked.string('MonitorAlCaHcalPhiSym.root'),
    FolderName = cms.untracked.string('AlCaReco/HcalPhiSym'),
    SaveToFile = cms.untracked.bool(False),
    hbheInputMB = cms.InputTag("horeco"),
    hbheInputNoise = cms.InputTag("hbherecoNoise"),
    hfInputMB = cms.InputTag("hfrecoMBspecial"),
    hfInputNoise = cms.InputTag("hfrecoNoise"),
    hoInputMB = cms.InputTag("horecoMB"),
    hoInputNoise = cms.InputTag("horecoNoise"),
    period = cms.uint32(4096),
    rawInputLabel = cms.InputTag("rawDataRepacker")
)


process.ALCARECOMuAlBeamHaloOverlapsTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOMuAlBeamHaloOverlaps') ),
        ("BSFolderName" , cms.string('AlCaReco/MuAlBeamHaloOverlaps/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/MuAlBeamHaloOverlaps') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(70) ),
        ("TkSizeMax" , cms.double(70) ),
        ("TkSizeMin" , cms.double(0) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOMuAlBeamHaloOverlaps") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(30) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOMuAlBeamHaloTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOMuAlBeamHalo') ),
        ("BSFolderName" , cms.string('AlCaReco/MuAlBeamHalo/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/MuAlBeamHalo') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(5) ),
        ("TkSizeMax" , cms.double(5) ),
        ("TkSizeMin" , cms.double(0) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOMuAlBeamHalo") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(30) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOMuAlCalIsolatedMuMuAlDQM = cms.EDAnalyzer("MuonAlignment",
    FolderName = cms.string('AlCaReco/MuAlCalIsolatedMu'),
    MuonCollection = cms.InputTag("ALCARECOMuAlCalIsolatedMu","GlobalMuon"),
    OutputFileName = cms.string('MuonAlignmentMonitor.root'),
    OutputMEsInRootFile = cms.bool(False),
    RecHits4DCSCCollectionTag = cms.InputTag("cscSegments"),
    RecHits4DDTCollectionTag = cms.InputTag("dt4DSegments"),
    doCSC = cms.untracked.bool(True),
    doDT = cms.untracked.bool(True),
    doSummary = cms.untracked.bool(True),
    meanAngleRange = cms.untracked.double(0.05),
    meanPositionRange = cms.untracked.double(0.5),
    min1DTrackRecHitSize = cms.untracked.uint32(1),
    min4DTrackSegmentSize = cms.untracked.uint32(1),
    nbins = cms.untracked.uint32(500),
    resLocalXRangeStation1 = cms.untracked.double(0.1),
    resLocalXRangeStation2 = cms.untracked.double(0.3),
    resLocalXRangeStation3 = cms.untracked.double(1.0),
    resLocalXRangeStation4 = cms.untracked.double(3.0),
    resLocalYRangeStation1 = cms.untracked.double(0.7),
    resLocalYRangeStation2 = cms.untracked.double(1.0),
    resLocalYRangeStation3 = cms.untracked.double(3.0),
    resLocalYRangeStation4 = cms.untracked.double(5.0),
    resPhiRange = cms.untracked.double(0.1),
    resThetaRange = cms.untracked.double(0.1),
    rmsAngleRange = cms.untracked.double(0.005),
    rmsPositionRange = cms.untracked.double(0.01)
)


process.ALCARECOMuAlCalIsolatedMuTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOMuAlCalIsolatedMu') ),
        ("BSFolderName" , cms.string('AlCaReco/MuAlCalIsolatedMu/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/MuAlCalIsolatedMu') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(5) ),
        ("TkSizeMax" , cms.double(5) ),
        ("TkSizeMin" , cms.double(0) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOMuAlCalIsolatedMu","GlobalMuon") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOMuAlGlobalCosmicsInCollisionsTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOMuAlGlobalCosmicsInCollisions') ),
        ("BSFolderName" , cms.string('AlCaReco/MuAlGlobalCosmicsInCollisions/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/MuAlGlobalCosmicsInCollisions') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(5) ),
        ("TkSizeMax" , cms.double(5) ),
        ("TkSizeMin" , cms.double(0) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOMuAlGlobalCosmicsInCollisions","GlobalMuon") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(30) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOMuAlGlobalCosmicsTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOMuAlGlobalCosmics') ),
        ("BSFolderName" , cms.string('AlCaReco/MuAlGlobalCosmics/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/MuAlGlobalCosmics') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(5) ),
        ("TkSizeMax" , cms.double(5) ),
        ("TkSizeMin" , cms.double(0) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOMuAlGlobalCosmics","GlobalMuon") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(30) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOMuAlOverlapsTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOMuAlOverlaps') ),
        ("BSFolderName" , cms.string('AlCaReco/MuAlOverlaps/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/MuAlOverlaps') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(70) ),
        ("TkSizeMax" , cms.double(70) ),
        ("TkSizeMin" , cms.double(0) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOMuAlOverlaps") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(30) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOMuAlZMuMuMuAlDQM = cms.EDAnalyzer("MuonAlignment",
    FolderName = cms.string('AlCaReco/MuAlCaZMuMu'),
    MuonCollection = cms.InputTag("ALCARECOMuAlZMuMu","StandAlone"),
    OutputFileName = cms.string('MuonAlignmentMonitor.root'),
    OutputMEsInRootFile = cms.bool(False),
    RecHits4DCSCCollectionTag = cms.InputTag("cscSegments"),
    RecHits4DDTCollectionTag = cms.InputTag("dt4DSegments"),
    doCSC = cms.untracked.bool(True),
    doDT = cms.untracked.bool(True),
    doSummary = cms.untracked.bool(True),
    meanAngleRange = cms.untracked.double(0.05),
    meanPositionRange = cms.untracked.double(0.5),
    min1DTrackRecHitSize = cms.untracked.uint32(1),
    min4DTrackSegmentSize = cms.untracked.uint32(1),
    nbins = cms.untracked.uint32(500),
    resLocalXRangeStation1 = cms.untracked.double(0.1),
    resLocalXRangeStation2 = cms.untracked.double(0.3),
    resLocalXRangeStation3 = cms.untracked.double(1.0),
    resLocalXRangeStation4 = cms.untracked.double(3.0),
    resLocalYRangeStation1 = cms.untracked.double(0.7),
    resLocalYRangeStation2 = cms.untracked.double(1.0),
    resLocalYRangeStation3 = cms.untracked.double(3.0),
    resLocalYRangeStation4 = cms.untracked.double(5.0),
    resPhiRange = cms.untracked.double(0.1),
    resThetaRange = cms.untracked.double(0.1),
    rmsAngleRange = cms.untracked.double(0.005),
    rmsPositionRange = cms.untracked.double(0.01)
)


process.ALCARECOMuAlZMuMuTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOMuAlZMuMu') ),
        ("BSFolderName" , cms.string('AlCaReco/MuAlZMuMu/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/MuAlZMuMu') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(5) ),
        ("TkSizeMax" , cms.double(5) ),
        ("TkSizeMin" , cms.double(0) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOMuAlZMuMu","StandAlone") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOSiStripCalMinBiasTrackerDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOSiStripCalMinBias'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/SiStripCalMinBias'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(100),
    MassMax = cms.double(100.0),
    MassMin = cms.double(0.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("hiGeneralTracks"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOSiStripCalMinBias"),
    TrackPtBin = cms.uint32(110),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(False),
    useSignedR = cms.bool(False)
)


process.ALCARECOSiStripCalMinBiasTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOSiStripCalMinBias') ),
        ("BSFolderName" , cms.string('AlCaReco/SiStripCalMinBias/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/SiStripCalMinBias') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("hiPixelTrackSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("hiPrimTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(300) ),
        ("TkSizeMax" , cms.double(299.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOSiStripCalMinBias") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(30) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hiGeneralTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("hiSelectedVertex") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOSiStripCalib = cms.EDAnalyzer("SiStripGainFromCalibTree",
    AlgoMode = cms.untracked.string('PCL'),
    CalibrationLevel = cms.untracked.int32(0),
    FirstSetOfConstants = cms.untracked.bool(False),
    GoodFracForTagProd = cms.untracked.double(0.95),
    IOVMode = cms.string('Job'),
    InputFiles = cms.vstring('rfio:/castor/cern.ch/cms/store/group/tracker/strip/calibration/calibrationtree/calibTree_20_134721_1.root', 
        'rfio:/castor/cern.ch/cms/store/group/tracker/strip/calibration/calibrationtree/calibTree_21_134721_1.root', 
        'rfio:/castor/cern.ch/cms/store/group/tracker/strip/calibration/calibrationtree/calibTree_22_134721_1.root', 
        'rfio:/castor/cern.ch/cms/store/group/tracker/strip/calibration/calibrationtree/calibTree_23_134721_1.root', 
        'rfio:/castor/cern.ch/cms/store/group/tracker/strip/calibration/calibrationtree/calibTree_24_134721_1.root', 
        'rfio:/castor/cern.ch/cms/store/group/tracker/strip/calibration/calibrationtree/calibTree_25_134721_1.root', 
        'rfio:/castor/cern.ch/cms/store/group/tracker/strip/calibration/calibrationtree/calibTree_26_134721_1.root', 
        'rfio:/castor/cern.ch/cms/store/group/tracker/strip/calibration/calibrationtree/calibTree_27_134721_1.root', 
        'rfio:/castor/cern.ch/cms/store/group/tracker/strip/calibration/calibrationtree/calibTree_28_134721_1.root', 
        'rfio:/castor/cern.ch/cms/store/group/tracker/strip/calibration/calibrationtree/calibTree_29_134721_1.root'),
    NClustersForTagProd = cms.untracked.double(200000000.0),
    OldGainRemoving = cms.untracked.bool(False),
    OutputGains = cms.string('Gains_ASCII.txt'),
    Record = cms.string('SiStripApvGainRcd'),
    SinceAppendMode = cms.bool(True),
    Tracks = cms.untracked.InputTag("ALCARECOCalibrationTracksRefit"),
    UseCalibration = cms.untracked.bool(False),
    Validation = cms.untracked.bool(False),
    calibrationPath = cms.untracked.string(''),
    doStoreOnDB = cms.bool(False),
    harvestingMode = cms.untracked.bool(False),
    maxChi2OverNDF = cms.untracked.double(9999999.0),
    maxMPVError = cms.untracked.double(25.0),
    maxNrStrips = cms.untracked.uint32(8),
    minNrEntries = cms.untracked.double(25),
    minTrackMomentum = cms.untracked.double(2)
)


process.ALCARECOTkAlBeamHaloTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlBeamHalo') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlBeamHalo/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlBeamHalo') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlBeamHalo") ),
        ("TrackPtBin" , cms.int32(150) ),
        ("TrackPtMax" , cms.double(150) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlCosmicsCTF0TTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlCosmicsCTF0T'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("ctfWithMaterialTracksP5"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCTF0T"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(True)
)


process.ALCARECOTkAlCosmicsCTF0TTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlCosmicsCTF0T') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlCosmicsCTF0T/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlCosmics0T') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlCosmicsCTF0T") ),
        ("TrackPtBin" , cms.int32(500) ),
        ("TrackPtMax" , cms.double(500) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlCosmicsCTFTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlCosmicsCTF'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlCosmics'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("ctfWithMaterialTracksP5"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCTF"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(True)
)


process.ALCARECOTkAlCosmicsCTFTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlCosmicsCTF') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlCosmicsCTF/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlCosmics') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlCosmicsCTF") ),
        ("TrackPtBin" , cms.int32(500) ),
        ("TrackPtMax" , cms.double(500) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlCosmicsCosmicTF0TTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlCosmicsCosmicTF0T'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("cosmictrackfinderP5"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCosmicTF0T"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(True)
)


process.ALCARECOTkAlCosmicsCosmicTF0TTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlCosmicsCosmicTF0T') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlCosmicsCosmicTF0T/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlCosmics0T') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlCosmicsCosmicTF0T") ),
        ("TrackPtBin" , cms.int32(500) ),
        ("TrackPtMax" , cms.double(500) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlCosmicsCosmicTFTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlCosmicsCosmicTF'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("cosmictrackfinderP5"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsCosmicTF"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(True)
)


process.ALCARECOTkAlCosmicsCosmicTFTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlCosmicsCosmicTF') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlCosmicsCosmicTF/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlCosmics') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlCosmicsCosmicTF") ),
        ("TrackPtBin" , cms.int32(500) ),
        ("TrackPtMax" , cms.double(500) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlCosmicsInCollisionsTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlCosmicsInCollisions'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlCosmicsInCollisions'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("regionalCosmicTracks"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsInCollisions"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(False)
)


process.ALCARECOTkAlCosmicsInCollisionsTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlCosmicsInCollisions') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlCosmicsInCollisions/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlCosmicsInCollisions') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlCosmicsInCollisions") ),
        ("TrackPtBin" , cms.int32(500) ),
        ("TrackPtMax" , cms.double(500) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlCosmicsRegional0TTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlCosmicsRegional0T'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("cosmictrackfinderP5"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsRegional0T"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(True)
)


process.ALCARECOTkAlCosmicsRegional0TTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlCosmicsRegional0T') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlCosmicsRegional0T/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlCosmics0T') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlCosmicsRegional0T") ),
        ("TrackPtBin" , cms.int32(500) ),
        ("TrackPtMax" , cms.double(500) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlCosmicsRegionalTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlCosmicsRegional'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlCosmics0T'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("cosmictrackfinderP5"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlCosmicsRegional"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(True)
)


process.ALCARECOTkAlCosmicsRegionalTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlCosmicsRegional') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlCosmicsRegional/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlCosmics') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlCosmicsRegional") ),
        ("TrackPtBin" , cms.int32(500) ),
        ("TrackPtMax" , cms.double(500) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlJpsiMuMuHITkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlJpsiMuMuHI'),
    CaloJetCollection = cms.InputTag("iterativeConePu5CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlJpsiMuMuHI'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(4.0),
    MassMin = cms.double(2.5),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("hiGeneralTracks"),
    SumChargeBin = cms.uint32(11),
    SumChargeMax = cms.double(5.5),
    SumChargeMin = cms.double(-5.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlJpsiMuMuHI"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(50),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(True),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(False)
)


process.ALCARECOTkAlJpsiMuMuHITrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlJpsiMuMuHI') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlJpsiMuMuHI/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlJpsiMuMuHI') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlJpsiMuMuHI") ),
        ("TrackPtBin" , cms.int32(150) ),
        ("TrackPtMax" , cms.double(50) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hiGeneralTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("hiSelectedVertex") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlJpsiMuMuTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlJpsiMuMu'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlJpsiMuMu'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(4.0),
    MassMin = cms.double(2.5),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("generalTracks"),
    SumChargeBin = cms.uint32(11),
    SumChargeMax = cms.double(5.5),
    SumChargeMin = cms.double(-5.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlJpsiMuMu"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(50),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(True),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(False)
)


process.ALCARECOTkAlJpsiMuMuTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlJpsiMuMu') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlJpsiMuMu/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlJpsiMuMu') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlJpsiMuMu") ),
        ("TrackPtBin" , cms.int32(150) ),
        ("TrackPtMax" , cms.double(50) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlLASDigiDQM = cms.EDAnalyzer("LaserAlignmentT0ProducerDQM",
    DigiProducerList = cms.VPSet(cms.PSet(
        DigiLabel = cms.string('ZeroSuppressed'),
        DigiProducer = cms.string('ALCARECOTkAlLAST0Producer'),
        DigiType = cms.string('Processed')
    )),
    FolderName = cms.string('AlCaReco/TkAlLAS'),
    LowerAdcThreshold = cms.uint32(15),
    OutputInPlainROOT = cms.bool(False),
    PlainOutputFileName = cms.string('TkAlLAS.dqm.root'),
    UpperAdcThreshold = cms.uint32(220)
)


process.ALCARECOTkAlMinBiasHITkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlMinBiasHI'),
    CaloJetCollection = cms.InputTag("iterativeConePu5CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlMinBiasHI'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("hiGeneralTracks"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlMinBiasHI"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(False)
)


process.ALCARECOTkAlMinBiasHITrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlMinBiasHI') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlMinBiasHI/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlMinBiasHI') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(71) ),
        ("TkSizeMax" , cms.double(70.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlMinBiasHI") ),
        ("TrackPtBin" , cms.int32(150) ),
        ("TrackPtMax" , cms.double(30) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hiGeneralTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("hiSelectedVertex") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlMinBiasTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlMinBias'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlMinBias'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("generalTracks"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlMinBias"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(False)
)


process.ALCARECOTkAlMinBiasTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlMinBias') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlMinBias/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlMinBias') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(71) ),
        ("TkSizeMax" , cms.double(70.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlMinBias") ),
        ("TrackPtBin" , cms.int32(150) ),
        ("TrackPtMax" , cms.double(30) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlMuonIsolatedHITkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlMuonIsolatedHI'),
    CaloJetCollection = cms.InputTag("iterativeConePu5CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlMuonIsolatedHI'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("hiGeneralTracks"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlMuonIsolatedHI"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(False)
)


process.ALCARECOTkAlMuonIsolatedHITrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlMuonIsolatedHI') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlMuonIsolatedHI/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlMuonIsolatedHI') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(16) ),
        ("TkSizeMax" , cms.double(15.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlMuonIsolatedHI") ),
        ("TrackPtBin" , cms.int32(150) ),
        ("TrackPtMax" , cms.double(150) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hiGeneralTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("hiSelectedVertex") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlMuonIsolatedTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlMuonIsolated'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlMuonIsolated'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("generalTracks"),
    SumChargeBin = cms.uint32(101),
    SumChargeMax = cms.double(50.5),
    SumChargeMin = cms.double(-50.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlMuonIsolated"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(30),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(False),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(False)
)


process.ALCARECOTkAlMuonIsolatedTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlMuonIsolated') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlMuonIsolated/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlMuonIsolated') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(16) ),
        ("TkSizeMax" , cms.double(15.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlMuonIsolated") ),
        ("TrackPtBin" , cms.int32(150) ),
        ("TrackPtMax" , cms.double(150) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlUpsilonMuMuHITkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlUpsilonMuMuHI'),
    CaloJetCollection = cms.InputTag("iterativeConePu5CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlUpsilonMuMuHI'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(10),
    MassMin = cms.double(8.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("hiGeneralTracks"),
    SumChargeBin = cms.uint32(11),
    SumChargeMax = cms.double(5.5),
    SumChargeMin = cms.double(-5.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlUpsilonMuMuHI"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(50),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(True),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(False)
)


process.ALCARECOTkAlUpsilonMuMuHITrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlUpsilonMuMuHI') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlUpsilonMuMuHI/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlUpsilonMuMuHI') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlUpsilonMuMuHI") ),
        ("TrackPtBin" , cms.int32(150) ),
        ("TrackPtMax" , cms.double(50) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hiGeneralTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("hiSelectedVertex") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlUpsilonMuMuTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlUpsilonMuMu'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlUpsilonMuMu'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(10),
    MassMin = cms.double(8.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("generalTracks"),
    SumChargeBin = cms.uint32(11),
    SumChargeMax = cms.double(5.5),
    SumChargeMin = cms.double(-5.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlUpsilonMuMu"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(50),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(True),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(False)
)


process.ALCARECOTkAlUpsilonMuMuTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlUpsilonMuMu') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlUpsilonMuMu/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlUpsilonMuMu') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlUpsilonMuMu") ),
        ("TrackPtBin" , cms.int32(150) ),
        ("TrackPtMax" , cms.double(50) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlZMuMuHITkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlZMuMuHI'),
    CaloJetCollection = cms.InputTag("iterativeConePu5CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlZMuMuHI'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("hiGeneralTracks"),
    SumChargeBin = cms.uint32(11),
    SumChargeMax = cms.double(5.5),
    SumChargeMin = cms.double(-5.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlZMuMuHI"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(150.0),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(True),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(False)
)


process.ALCARECOTkAlZMuMuHITrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlZMuMuHI') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlZMuMuHI/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlZMuMuHI') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlZMuMuHI") ),
        ("TrackPtBin" , cms.int32(150) ),
        ("TrackPtMax" , cms.double(150) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hiGeneralTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("hiSelectedVertex") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.ALCARECOTkAlZMuMuTkAlDQM = cms.EDAnalyzer("TkAlCaRecoMonitor",
    AlgoName = cms.string('ALCARECOTkAlZMuMu'),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    FolderName = cms.string('AlCaReco/TkAlZMuMu'),
    HitMapRMax = cms.double(120.0),
    HitMapZMax = cms.double(300.0),
    HitMapsRBin = cms.uint32(120),
    HitMapsZBin = cms.uint32(300),
    JetPtBin = cms.uint32(100),
    JetPtMax = cms.double(50.0),
    JetPtMin = cms.double(0.0),
    MassBin = cms.uint32(300),
    MassMax = cms.double(150.0),
    MassMin = cms.double(50.0),
    MeasurementState = cms.string('default'),
    MinJetDeltaRBin = cms.uint32(100),
    MinJetDeltaRMax = cms.double(10),
    MinJetDeltaRMin = cms.double(0),
    MinTrackDeltaRBin = cms.uint32(100),
    MinTrackDeltaRMax = cms.double(3.2),
    MinTrackDeltaRMin = cms.double(0),
    OutputFileName = cms.string('TkAlCaRecoDQM.root'),
    OutputMEsInRootFile = cms.bool(False),
    ReferenceTrackProducer = cms.InputTag("generalTracks"),
    SumChargeBin = cms.uint32(11),
    SumChargeMax = cms.double(5.5),
    SumChargeMin = cms.double(-5.5),
    TrackCurvatureBin = cms.uint32(2000),
    TrackCurvatureMax = cms.double(0.01),
    TrackCurvatureMin = cms.double(-0.01),
    TrackEfficiencyBin = cms.uint32(102),
    TrackEfficiencyMax = cms.double(1.01),
    TrackEfficiencyMin = cms.double(-0.01),
    TrackProducer = cms.InputTag("ALCARECOTkAlZMuMu"),
    TrackPtBin = cms.uint32(150),
    TrackPtMax = cms.double(150.0),
    TrackPtMin = cms.double(0.0),
    daughterMass = cms.double(0.10565836),
    fillInvariantMass = cms.bool(True),
    fillRawIdMap = cms.bool(True),
    maxJetPt = cms.double(10),
    runsOnReco = cms.bool(True),
    useSignedR = cms.bool(False)
)


process.ALCARECOTkAlZMuMuTrackingDQM = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('ALCARECOTkAlZMuMu') ),
        ("BSFolderName" , cms.string('AlCaReco/TkAlZMuMu/BeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('AlCaReco/TkAlZMuMu') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(6) ),
        ("TkSizeMax" , cms.double(5.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("ALCARECOTkAlZMuMu") ),
        ("TrackPtBin" , cms.int32(150) ),
        ("TrackPtMax" , cms.double(150) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.AlcaBeamMonitor = cms.EDAnalyzer("AlcaBeamMonitor",
    BeamFitter = cms.PSet(
        AppendRunToFileName = cms.untracked.bool(True),
        AsciiFileName = cms.untracked.string('BeamFit.txt'),
        DIPFileName = cms.untracked.string('BeamFitDIP.txt'),
        Debug = cms.untracked.bool(False),
        FractionOfFittedTrks = cms.untracked.double(0.9),
        InputBeamWidth = cms.untracked.double(0.006),
        IsMuonCollection = cms.untracked.bool(False),
        MaximumEta = cms.untracked.double(2.4),
        MaximumImpactParameter = cms.untracked.double(1.0),
        MaximumNormChi2 = cms.untracked.double(10.0),
        MaximumZ = cms.untracked.double(60),
        MinimumInputTracks = cms.untracked.int32(150),
        MinimumPixelLayers = cms.untracked.int32(0),
        MinimumPt = cms.untracked.double(1.0),
        MinimumTotalLayers = cms.untracked.int32(6),
        OutputFileName = cms.untracked.string('BeamFit.root'),
        SaveFitResults = cms.untracked.bool(False),
        SaveNtuple = cms.untracked.bool(False),
        SavePVVertices = cms.untracked.bool(False),
        TrackAlgorithm = cms.untracked.vstring(),
        TrackCollection = cms.untracked.InputTag("hiGeneralTracks"),
        TrackQuality = cms.untracked.vstring('highPurity'),
        WriteAscii = cms.untracked.bool(False),
        WriteDIPAscii = cms.untracked.bool(False),
        deltaSignificanceCut = cms.untracked.double(10)
    ),
    BeamSpotLabel = cms.untracked.InputTag("offlineBeamSpot"),
    MonitorName = cms.untracked.string('AlcaBeamMonitor'),
    PVFitter = cms.PSet(
        Apply3DFit = cms.untracked.bool(True),
        Debug = cms.untracked.bool(False),
        FitPerBunchCrossing = cms.untracked.bool(False),
        VertexCollection = cms.untracked.InputTag("hiSelectedVertex"),
        errorScale = cms.untracked.double(0.9),
        maxNrStoredVertices = cms.untracked.uint32(10000),
        maxVertexNormChi2 = cms.untracked.double(10.0),
        maxVertexR = cms.untracked.double(2),
        maxVertexZ = cms.untracked.double(10),
        minNrVerticesForFit = cms.untracked.uint32(50),
        minVertexMeanWeight = cms.untracked.double(0.5),
        minVertexNTracks = cms.untracked.uint32(0),
        minVertexNdf = cms.untracked.double(10.0),
        nSigmaCut = cms.untracked.double(5.0)
    ),
    PrimaryVertexLabel = cms.untracked.InputTag("hiSelectedVertex"),
    ScalerLabel = cms.untracked.InputTag("scalerBeamSpot"),
    TrackLabel = cms.untracked.InputTag("hiGeneralTracks")
)


process.AlignmentProducer = cms.EDAnalyzer("PCLTrackerAlProducer",
    MisalignmentScenario = cms.PSet(
        distribution = cms.string('gaussian'),
        seed = cms.int32(1234567),
        setError = cms.bool(True),
        setRotations = cms.bool(True),
        setTranslations = cms.bool(True)
    ),
    ParameterBuilder = cms.PSet(
        Selector = cms.PSet(
            alignParams = cms.vstring('PixelHalfBarrelLayers,111000')
        ),
        parameterTypes = cms.vstring('Selector,RigidBody')
    ),
    ParameterStore = cms.PSet(
        ExtendedCorrelationsConfig = cms.PSet(
            CutValue = cms.double(0.95),
            MaxUpdates = cms.int32(5000),
            Weight = cms.double(0.5)
        ),
        TypeOfConstraints = cms.string('approximate_averaging'),
        UseExtendedCorrelations = cms.untracked.bool(False)
    ),
    RunRangeSelection = cms.VPSet(),
    algoConfig = cms.PSet(
        algoName = cms.string('HIPAlignmentAlgorithm'),
        alignedFile = cms.string('IOAlignedPositions.root'),
        apeParam = cms.VPSet(cms.PSet(
            Selector = cms.PSet(
                alignParams = cms.vstring('AllAlignables,000000')
            ),
            apeRPar = cms.vdouble(0.0, 0.0, 3.0),
            apeSPar = cms.vdouble(0.2, 0.0, 3.0),
            function = cms.string('linear')
        )),
        applyAPE = cms.bool(False),
        collectorActive = cms.bool(False),
        collectorNJobs = cms.int32(0),
        collectorPath = cms.string(''),
        debug = cms.bool(False),
        eventPrescale = cms.int32(20),
        fillTrackMonitoring = cms.untracked.bool(False),
        iterationFile = cms.string('IOIteration.root'),
        maxAllowedHitPull = cms.double(-1.0),
        maxRelParameterError = cms.double(1.0),
        minimumNumberOfHits = cms.int32(50),
        misalignedFile = cms.string('IOMisalignedPositions.root'),
        outfile = cms.string('HIPAlignmentEvents.root'),
        outfile2 = cms.string('HIPAlignmentAlignables.root'),
        outpath = cms.string('./'),
        parameterFile = cms.string('IOAlignmentParameters.root'),
        surveyFile = cms.string('HIPSurveyResiduals.root'),
        surveyResiduals = cms.untracked.vstring(),
        trueFile = cms.string('IOTruePositions.root'),
        uvarFile = cms.string('IOUserVariables.root'),
        verbosity = cms.bool(False)
    ),
    applyDbAlignment = cms.untracked.bool(False),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    calibrations = cms.VPSet(),
    checkDbAlignmentValidity = cms.untracked.bool(True),
    doMisalignmentScenario = cms.bool(False),
    doMuon = cms.untracked.bool(False),
    doTracker = cms.untracked.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    monitorConfig = cms.PSet(
        monitors = cms.untracked.vstring()
    ),
    nFixAlignables = cms.int32(0),
    parameterSelectorSimple = cms.string('-1'),
    randomRotation = cms.double(0.0),
    randomShift = cms.double(0.0),
    saveApeToDB = cms.bool(False),
    saveDeformationsToDB = cms.bool(False),
    saveToDB = cms.bool(False),
    tjTkAssociationMapTag = cms.InputTag("TrackRefitter"),
    tkLasBeamTag = cms.InputTag(""),
    useExtras = cms.untracked.bool(False),
    useSurvey = cms.bool(False)
)


process.B2GDQM = cms.EDAnalyzer("B2GDQM",
    PFJetCorService = cms.string('ak4PFL1FastL2L3'),
    allHadDeltaPhiCut = cms.double(1.57079632679),
    allHadPtCut = cms.double(400.0),
    allHadRapidityCut = cms.double(1.0),
    cmsTagLabel = cms.InputTag("cmsTopTagPFJetsCHS"),
    elecSelect = cms.string('pt > 45.0 & abs(eta)<2.5 & abs(gsfTrack.d0)<1 & abs(gsfTrack.dz)<20'),
    electronSrc = cms.InputTag("gedGsfElectrons"),
    jetLabels = cms.VInputTag("ak4PFJets", "ak4PFJetsCHS", "ak8PFJetsCHS", "ak8PFJetsCHSSoftDrop", "cmsTopTagPFJetsCHS"),
    jetPtMins = cms.vdouble(50.0, 50.0, 50.0, 50.0, 100.0),
    muonSelect = cms.string('pt > 45.0 & abs(eta)<2.1 & isGlobalMuon & abs(globalTrack.d0)<1 & abs(globalTrack.dz)<20'),
    muonSrc = cms.InputTag("muons"),
    pfMETCollection = cms.InputTag("pfMet"),
    semiE_HadJetPtCut = cms.double(400.0),
    semiE_LepJetPtCut = cms.double(30.0),
    semiE_dRMin = cms.double(0.5),
    semiE_dphiHadCut = cms.double(1.57079632679),
    semiE_ptRel = cms.double(25.0),
    semiMu_HadJetPtCut = cms.double(400.0),
    semiMu_LepJetPtCut = cms.double(30.0),
    semiMu_dRMin = cms.double(0.5),
    semiMu_dphiHadCut = cms.double(1.57079632679),
    semiMu_ptRel = cms.double(25.0),
    triggerResultsCollection = cms.InputTag("TriggerResults","","HLT")
)


process.BTVHLTOfflineSource = cms.EDAnalyzer("BTVHLTOfflineSource",
    dirname = cms.untracked.string('HLT/BTV'),
    hltCaloPVLabel = cms.InputTag("hltVerticesL3"),
    hltFastPVLabel = cms.InputTag("hltFastPrimaryVertex"),
    hltPFPVLabel = cms.InputTag("hltVerticesPFSelector"),
    offlineCSVLabelCalo = cms.InputTag("pfCombinedInclusiveSecondaryVertexV2BJetTags"),
    offlineCSVLabelPF = cms.InputTag("pfCombinedInclusiveSecondaryVertexV2BJetTags"),
    offlinePVLabel = cms.InputTag("offlinePrimaryVertices"),
    pathPairs = cms.VPSet(cms.PSet(
        pathname = cms.string('HLT_QuadPFJet_SingleBTagCSV_VBF'),
        pathtype = cms.string('PF')
    ), 
        cms.PSet(
            pathname = cms.string('HLT_PFMET120_'),
            pathtype = cms.string('Calo')
        )),
    processname = cms.string('HLT'),
    triggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    triggerSummaryLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    verbose = cms.untracked.bool(False)
)


process.CentralityDQM = cms.EDAnalyzer("CentralityDQM",
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    eventplanecollection = cms.InputTag("hiEvtPlane"),
    vertexcollection = cms.InputTag("hiSelectedVertex")
)


process.ClientTrackEfficiencySTACosmicMuons = cms.EDAnalyzer("TrackEfficiencyClient",
    AlgoName = cms.string('STA'),
    FolderName = cms.string('Muons/cosmicMuons'),
    effCompatibleLayersBin = cms.int32(10),
    effCompatibleLayersMax = cms.double(30),
    effCompatibleLayersMin = cms.double(0),
    effD0Bin = cms.int32(50),
    effD0Max = cms.double(100),
    effD0Min = cms.double(-100),
    effEtaBin = cms.int32(50),
    effEtaMax = cms.double(3.2),
    effEtaMin = cms.double(-3.2),
    effPhiBin = cms.int32(50),
    effPhiMax = cms.double(0.0),
    effPhiMin = cms.double(-3.2),
    effXBin = cms.int32(50),
    effXMax = cms.double(100),
    effXMin = cms.double(-100),
    effYBin = cms.int32(50),
    effYMax = cms.double(100),
    effYMin = cms.double(-100),
    effZBin = cms.int32(50),
    effZMax = cms.double(500),
    effZMin = cms.double(-500),
    trackEfficiency = cms.bool(True)
)


process.ClientTrackEfficiencyTkTracks = cms.EDAnalyzer("TrackEfficiencyClient",
    AlgoName = cms.string('CTF'),
    FolderName = cms.string('Muons/TKTrack'),
    effCompatibleLayersBin = cms.int32(10),
    effCompatibleLayersMax = cms.double(30),
    effCompatibleLayersMin = cms.double(0),
    effD0Bin = cms.int32(50),
    effD0Max = cms.double(100),
    effD0Min = cms.double(-100),
    effEtaBin = cms.int32(50),
    effEtaMax = cms.double(3.2),
    effEtaMin = cms.double(-3.2),
    effPhiBin = cms.int32(50),
    effPhiMax = cms.double(0.0),
    effPhiMin = cms.double(-3.2),
    effXBin = cms.int32(50),
    effXMax = cms.double(100),
    effXMin = cms.double(-100),
    effYBin = cms.int32(50),
    effYMax = cms.double(100),
    effYMin = cms.double(-100),
    effZBin = cms.int32(50),
    effZMax = cms.double(500),
    effZMin = cms.double(-500),
    trackEfficiency = cms.bool(False)
)


process.DQMMessageLogger = cms.EDAnalyzer("DQMMessageLogger",
    Categories = cms.vstring(),
    Directory = cms.string('MessageLogger')
)


process.DTDataIntegrityTask = cms.EDAnalyzer("DTDataIntegrityTask",
    dtDDULabel = cms.InputTag("dtDataIntegrityUnpacker"),
    dtROS25Label = cms.InputTag("dtDataIntegrityUnpacker"),
    fedIntegrityFolder = cms.untracked.string('DT/FEDIntegrity'),
    getSCInfo = cms.untracked.bool(True),
    processingMode = cms.untracked.string('Offline')
)


process.DiElectronDQM = cms.EDAnalyzer("TopDiLeptonOfflineDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. && abs(y)<1. && abs(z)<20. && tracksSize>3 && !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('elecs:step0'),
        max = cms.int32(2),
        min = cms.int32(2),
        select = cms.string("pt>20 & abs(eta)<2.5 && gsfElectronRef.gsfTrack.hitPattern().numberOfHits(\'MISSING_INNER_HITS\') <= 0 && (gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15"),
        src = cms.InputTag("pfIsolatedElectronsEI")
    ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            min = cms.int32(2),
            select = cms.string('pt>30. & abs(eta)<2.4'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopDiElectronDQM/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            select = cms.string('pt>20. && abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30. & abs(eta)<2.4 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(76.0),
            upperEdge = cms.double(106.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2'),
            select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && muonRef.pt > 20. && abs(muonRef.eta)<2.4')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI")
        )
    )
)


process.DiElectronHLTOfflineDQM = cms.EDAnalyzer("TopDiLeptonHLTOfflineDQM",
    preselection = cms.PSet(
        trigger = cms.PSet(
            select = cms.vstring('HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v', 
                'HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        ),
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. && abs(y)<1. && abs(z)<20. && tracksSize>3 && !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('Hlt:step0'),
        max = cms.int32(0),
        min = cms.int32(0),
        select = cms.string(''),
        src = cms.InputTag("")
    ), 
        cms.PSet(
            label = cms.string('elecs:step1'),
            max = cms.int32(2),
            min = cms.int32(2),
            select = cms.string('pt>20 & abs(eta)<2.5 & (dr03TkSumPt+dr03EcalRecHitSumEt+dr03HcalTowerSumEt)/pt<0.15'),
            src = cms.InputTag("gedGsfElectrons")
        ), 
        cms.PSet(
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>30. & abs(eta)<2.5'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('HLT/TopHLTOffline/Top/DiElectron/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(dr03TkSumPt+dr03EcalRecHitSumEt+dr03HcalTowerSumEt)/pt<0.15'),
            select = cms.string('pt>20 & abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            select = cms.string('pt>30. & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(pfIsolationR04.sumChargedHadronPt+pfIsolationR04.sumPhotonEt+pfIsolationR04.sumNeutralHadronEt)/pt<0.2'),
            select = cms.string('pt>20 & abs(eta)<2.4 & isPFMuon & (isGlobalMuon || isTrackerMuon)')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons")
        ),
        triggerExtras = cms.PSet(
            pathsDIELEC = cms.vstring('HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v', 
                'HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v'),
            pathsDIMUON = cms.vstring('HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
                'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v'),
            pathsELECMU = cms.vstring('HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v', 
                'HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        )
    )
)


process.DiMuonDQM = cms.EDAnalyzer("TopDiLeptonOfflineDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. && abs(y)<1. && abs(z)<20. && tracksSize>3 && !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('muons:step0'),
        max = cms.int32(2),
        min = cms.int32(2),
        select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && muonRef.pt > 20. && abs(muonRef.eta)<2.4'),
        src = cms.InputTag("pfIsolatedMuonsEI")
    ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            min = cms.int32(2),
            select = cms.string('pt>30. & abs(eta)<2.4 '),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopDiMuonDQM/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            select = cms.string('pt>20. && abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30. & abs(eta)<2.4 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(76.0),
            upperEdge = cms.double(106.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2'),
            select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && muonRef.pt > 20. && abs(muonRef.eta)<2.4')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI")
        )
    )
)


process.DiMuonHLTOfflineDQM = cms.EDAnalyzer("TopDiLeptonHLTOfflineDQM",
    preselection = cms.PSet(
        trigger = cms.PSet(
            select = cms.vstring('HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
                'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        ),
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. && abs(y)<1. && abs(z)<20. && tracksSize>3 && !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('Hlt:step0'),
        max = cms.int32(0),
        min = cms.int32(0),
        select = cms.string(''),
        src = cms.InputTag("")
    ), 
        cms.PSet(
            label = cms.string('muons:step1'),
            max = cms.int32(2),
            min = cms.int32(2),
            select = cms.string('pt>20 & abs(eta)<2.4 & isPFMuon & (isGlobalMuon || isTrackerMuon) & (isolationR03.sumPt+isolationR03.emEt+isolationR03.hadEt)/pt<0.2'),
            src = cms.InputTag("muons")
        ), 
        cms.PSet(
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>30. & abs(eta)<2.5'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('HLT/TopHLTOffline/Top/DiMuon/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(dr03TkSumPt+dr03EcalRecHitSumEt+dr03HcalTowerSumEt)/pt<0.15'),
            select = cms.string('pt>20 & abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            select = cms.string('pt>30. & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(pfIsolationR04.sumChargedHadronPt+pfIsolationR04.sumPhotonEt+pfIsolationR04.sumNeutralHadronEt)/pt<0.2'),
            select = cms.string('pt>20 & abs(eta)<2.4 & isPFMuon & (isGlobalMuon || isTrackerMuon)')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons")
        ),
        triggerExtras = cms.PSet(
            pathsDIELEC = cms.vstring('HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v', 
                'HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v'),
            pathsDIMUON = cms.vstring('HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
                'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v'),
            pathsELECMU = cms.vstring('HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v', 
                'HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        )
    )
)


process.ElecMuonDQM = cms.EDAnalyzer("TopDiLeptonOfflineDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. && abs(y)<1. && abs(z)<20. && tracksSize>3 && !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('muons:step0'),
        max = cms.int32(1),
        min = cms.int32(1),
        select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && (muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2 && muonRef.pt > 20. && abs(muonRef.eta)<2.4'),
        src = cms.InputTag("pfIsolatedMuonsEI")
    ), 
        cms.PSet(
            label = cms.string('elecs:step1'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('pt>20 & abs(eta)<2.5 && (gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            src = cms.InputTag("pfIsolatedElectronsEI")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>30. & abs(eta)<2.4 '),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopElecMuonDQM/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            select = cms.string('pt>10. && abs(eta)<2.4 && abs(gsfElectronRef.gsfTrack.d0)<1. && abs(gsfElectronRef.gsfTrack.dz)<20.')
        ),
        jetExtras = cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30. & abs(eta)<2.4 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(76.0),
            upperEdge = cms.double(106.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2'),
            select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && muonRef.pt > 10. && abs(muonRef.eta)<2.4')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI")
        )
    )
)


process.ElecMuonHLTOfflineDQM = cms.EDAnalyzer("TopDiLeptonHLTOfflineDQM",
    preselection = cms.PSet(
        trigger = cms.PSet(
            select = cms.vstring('HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v', 
                'HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        ),
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. && abs(y)<1. && abs(z)<20. && tracksSize>3 && !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('Hlt:step0'),
        max = cms.int32(0),
        min = cms.int32(0),
        select = cms.string(''),
        src = cms.InputTag("")
    ), 
        cms.PSet(
            label = cms.string('muons:step1'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('pt>20 & abs(eta)<2.4 & isPFMuon & (isGlobalMuon || isTrackerMuon) & (pfIsolationR04.sumChargedHadronPt+pfIsolationR04.sumPhotonEt+pfIsolationR04.sumNeutralHadronEt)/pt<0.2'),
            src = cms.InputTag("muons")
        ), 
        cms.PSet(
            label = cms.string('elecs:step2'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('pt>20 & abs(eta)<2.5 & (dr03TkSumPt+dr03EcalRecHitSumEt+dr03HcalTowerSumEt)/pt<0.15'),
            src = cms.InputTag("gedGsfElectrons")
        ), 
        cms.PSet(
            label = cms.string('jets/pf:step3'),
            min = cms.int32(2),
            select = cms.string('pt>30. & abs(eta)<2.5'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('HLT/TopHLTOffline/Top/ElecMuon/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(dr03TkSumPt+dr03EcalRecHitSumEt+dr03HcalTowerSumEt)/pt<0.15'),
            select = cms.string('pt>20 & abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            select = cms.string('pt>30. & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(pfIsolationR04.sumChargedHadronPt+pfIsolationR04.sumPhotonEt+pfIsolationR04.sumNeutralHadronEt)/pt<0.2'),
            select = cms.string('pt>20 & abs(eta)<2.4 & isPFMuon & (isGlobalMuon || isTrackerMuon)')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons")
        ),
        triggerExtras = cms.PSet(
            pathsDIELEC = cms.vstring('HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v', 
                'HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v'),
            pathsDIMUON = cms.vstring('HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
                'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v'),
            pathsELECMU = cms.vstring('HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v', 
                'HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        )
    )
)


process.ExoticaDQM = cms.EDAnalyzer("ExoticaDQM",
    DiJetPFJetCollection = cms.VInputTag("ak4PFJetsCHS", "ak8PFJetsCHS"),
    HltPaths = cms.vstring('HLT_Mu', 
        'HLT_Ele', 
        'HLT_Photon', 
        'HLT_PFHT', 
        'HLT_HT', 
        'HLT_PFMET', 
        'HLT_MET', 
        'HLT_'),
    JetIDParams = cms.PSet(
        ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        hbheRecHitsColl = cms.InputTag("hbhereco"),
        hfRecHitsColl = cms.InputTag("hfreco"),
        hoRecHitsColl = cms.InputTag("horeco"),
        useRecHits = cms.bool(True)
    ),
    TriggerResults = cms.InputTag("TriggerResults","","HLT"),
    caloMETCollection = cms.InputTag("caloMetM","","RECO"),
    corrector = cms.InputTag("ak4PFL1FastL2L3Corrector"),
    dielectron_Electron1_pt_cut = cms.double(50.0),
    dielectron_Electron2_pt_cut = cms.double(50.0),
    dijet_PFJet1_pt_cut = cms.double(30.0),
    dijet_PFJet2_pt_cut = cms.double(30.0),
    dimuon_Muon1_pt_cut = cms.double(50.0),
    dimuon_Muon2_pt_cut = cms.double(50.0),
    diphoton_Photon1_pt_cut = cms.double(20.0),
    diphoton_Photon2_pt_cut = cms.double(20.0),
    electronCollection = cms.InputTag("gedGsfElectrons"),
    monoelectron_Electron_met_cut = cms.double(100.0),
    monoelectron_Electron_pt_cut = cms.double(80.0),
    monojet_PFJet_met_cut = cms.double(100.0),
    monojet_PFJet_pt_cut = cms.double(80.0),
    monomuon_Muon_met_cut = cms.double(100.0),
    monomuon_Muon_pt_cut = cms.double(80.0),
    monophoton_Photon_met_cut = cms.double(100.0),
    monophoton_Photon_pt_cut = cms.double(80.0),
    muonCollection = cms.InputTag("muons"),
    pfJetCollection = cms.InputTag("ak4PFJetsCHS"),
    pfMETCollection = cms.InputTag("pfMet","","RECO"),
    photonCollection = cms.InputTag("gedPhotons"),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.HILowLumiHLTOfflineSource = cms.EDAnalyzer("FSQDiJetAve",
    todo = cms.VPSet(cms.PSet(
        combinedObjectDimension = cms.int32(1),
        combinedObjectDrawables = cms.VPSet(),
        combinedObjectSelection = cms.string('1==1'),
        combinedObjectSortCriteria = cms.string('at(0).pt'),
        dqmhistolabel = cms.string('hltHICaloJet30'),
        handlerType = cms.string('FromHLT'),
        mainDQMDirname = cms.untracked.string('HLT/HI/'),
        partialFilterName = cms.string('hltSingleAK4CaloJet'),
        partialPathName = cms.string('HLT_AK4CaloJet30_v'),
        singleObjectDrawables = cms.VPSet(cms.PSet(
            bins = cms.int32(58),
            expression = cms.string('pt'),
            max = cms.double(300),
            min = cms.double(10),
            name = cms.string('pt')
        ), 
            cms.PSet(
                bins = cms.int32(100),
                expression = cms.string('eta'),
                max = cms.double(5),
                min = cms.double(-5),
                name = cms.string('eta')
            ), 
            cms.PSet(
                bins = cms.int32(100),
                expression = cms.string('phi'),
                max = cms.double(3.15),
                min = cms.double(-3.15),
                name = cms.string('phi')
            )),
        singleObjectsPreselection = cms.string('1==1'),
        triggerSelection = cms.string('HLT_AK4CaloJet30_v*')
    ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHICaloJet40'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4CaloJet'),
            partialPathName = cms.string('HLT_AK4CaloJet40_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4CaloJet40_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHICaloJet50'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4CaloJet'),
            partialPathName = cms.string('HLT_AK4CaloJet50_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4CaloJet50_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHICaloJet80'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4CaloJet'),
            partialPathName = cms.string('HLT_AK4CaloJet80_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4CaloJet80_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHICaloJet100'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4CaloJet'),
            partialPathName = cms.string('HLT_AK4CaloJet100_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4CaloJet100_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHICaloJet30ForEndOfFill'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4CaloJet'),
            partialPathName = cms.string('HLT_AK4CaloJet30ForEndOfFill_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4CaloJet30ForEndOfFill_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHICaloJet40ForEndOfFill'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4CaloJet'),
            partialPathName = cms.string('HLT_AK4CaloJet40ForEndOfFill_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4CaloJet40ForEndOfFill_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHICaloJet50ForEndOfFill'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4CaloJet'),
            partialPathName = cms.string('HLT_AK4CaloJet50ForEndOfFill_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4CaloJet50ForEndOfFill_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHIPFJet30'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4PFJet'),
            partialPathName = cms.string('HLT_AK4PFJet30_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4PFJet30_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHIPFJet50'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4PFJet'),
            partialPathName = cms.string('HLT_AK4PFJet50_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4PFJet50_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHIPFJet80'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4PFJet'),
            partialPathName = cms.string('HLT_AK4PFJet80_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4PFJet80_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHIPFJet100'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4PFJet'),
            partialPathName = cms.string('HLT_AK4PFJet100_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4PFJet100_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHIPFJet30ForEndOfFill'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4PFJet'),
            partialPathName = cms.string('HLT_AK4PFJet30ForEndOfFill_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4PFJet30ForEndOfFill_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHIPFJet50ForEndOfFill'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltSingleAK4PFJet'),
            partialPathName = cms.string('HLT_AK4PFJet50ForEndOfFill_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_AK4PFJet50ForEndOfFill_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHISinglePhoton10'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHIPhoton'),
            partialPathName = cms.string('HLT_HISinglePhoton10_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_HISinglePhoton10_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHISinglePhoton15'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHIPhoton'),
            partialPathName = cms.string('HLT_HISinglePhoton15_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_HISinglePhoton15_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHISinglePhoton20'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHIPhoton'),
            partialPathName = cms.string('HLT_HISinglePhoton20_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_HISinglePhoton20_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHISinglePhoton40'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHIPhoton'),
            partialPathName = cms.string('HLT_HISinglePhoton40_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_HISinglePhoton40_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHISinglePhoton60'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHIPhoton'),
            partialPathName = cms.string('HLT_HISinglePhoton60_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_HISinglePhoton60_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHISinglePhoton10ForEndOfFill'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHIPhoton'),
            partialPathName = cms.string('HLT_HISinglePhoton10ForEndOfFill_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_HISinglePhoton10ForEndOfFill_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHISinglePhoton15ForEndOfFill'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHIPhoton'),
            partialPathName = cms.string('HLT_HISinglePhoton15ForEndOfFill_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_HISinglePhoton15ForEndOfFill_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHISinglePhoton20ForEndOfFill'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHIPhoton'),
            partialPathName = cms.string('HLT_HISinglePhoton20ForEndOfFill_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(58),
                expression = cms.string('pt'),
                max = cms.double(300),
                min = cms.double(10),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(5),
                    min = cms.double(-5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_HISinglePhoton20ForEndOfFill_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHighPtFullTrack'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHighPtFullTrack'),
            partialPathName = cms.string('HLT_FullTrack12_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(100),
                expression = cms.string('pt'),
                max = cms.double(100),
                min = cms.double(0),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(2.5),
                    min = cms.double(-2.5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_FullTrack12_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHighPtFullTrack'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHighPtFullTrack'),
            partialPathName = cms.string('HLT_FullTrack20_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(100),
                expression = cms.string('pt'),
                max = cms.double(100),
                min = cms.double(0),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(2.5),
                    min = cms.double(-2.5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_FullTrack20_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHighPtFullTrack'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHighPtFullTrack'),
            partialPathName = cms.string('HLT_FullTrack30_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(100),
                expression = cms.string('pt'),
                max = cms.double(100),
                min = cms.double(0),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(2.5),
                    min = cms.double(-2.5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_FullTrack30_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHighPtFullTrack'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHighPtFullTrack'),
            partialPathName = cms.string('HLT_FullTrack50_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(100),
                expression = cms.string('pt'),
                max = cms.double(100),
                min = cms.double(0),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(2.5),
                    min = cms.double(-2.5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_FullTrack50_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt'),
            dqmhistolabel = cms.string('hltHighPtFullTrack'),
            handlerType = cms.string('FromHLT'),
            mainDQMDirname = cms.untracked.string('HLT/HI/'),
            partialFilterName = cms.string('hltHighPtFullTrack'),
            partialPathName = cms.string('HLT_FullTrack12ForEndOfFill_v'),
            singleObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(100),
                expression = cms.string('pt'),
                max = cms.double(100),
                min = cms.double(0),
                name = cms.string('pt')
            ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('eta'),
                    max = cms.double(2.5),
                    min = cms.double(-2.5),
                    name = cms.string('eta')
                ), 
                cms.PSet(
                    bins = cms.int32(100),
                    expression = cms.string('phi'),
                    max = cms.double(3.15),
                    min = cms.double(-3.15),
                    name = cms.string('phi')
                )),
            singleObjectsPreselection = cms.string('1==1'),
            triggerSelection = cms.string('HLT_FullTrack12ForEndOfFill_v*')
        )),
    triggerConfiguration = cms.PSet(
        daqPartitions = cms.uint32(1),
        hltResults = cms.InputTag("TriggerResults","","HLT"),
        l1tIgnoreMask = cms.bool(False),
        l1tResults = cms.InputTag(""),
        l1techIgnorePrescales = cms.bool(False),
        throw = cms.bool(False)
    ),
    triggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    triggerSummaryLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    useGenWeight = cms.bool(False)
)


process.HLTSiStripMonitorCluster = cms.EDAnalyzer("SiStripMonitorCluster",
    ApvPhaseProducer = cms.InputTag("APVPhases"),
    BPTXfilter = cms.PSet(
        andOr = cms.bool(False),
        andOrL1 = cms.bool(True),
        dbLabel = cms.string('SiStripDQMTrigger'),
        errorReplyL1 = cms.bool(True),
        l1Algorithms = cms.vstring('L1Tech_BPTX_plus_AND_minus.v0', 
            'L1_ZeroBias'),
        l1BeforeMask = cms.bool(True)
    ),
    ClusterChTkHistoMap_On = cms.bool(True),
    ClusterConditions = cms.PSet(
        On = cms.bool(True),
        maxStoN = cms.double(10000.0),
        maxWidth = cms.double(10000.0),
        minStoN = cms.double(0.0),
        minWidth = cms.double(0.0)
    ),
    ClusterHisto = cms.bool(True),
    ClusterLabel = cms.string(''),
    ClusterProducerPix = cms.InputTag("hltSiPixelClusters"),
    ClusterProducerStrip = cms.InputTag("hltSiStripRawToClustersFacility"),
    CreateTrendMEs = cms.bool(False),
    HistoryProducer = cms.InputTag("consecutiveHEs"),
    Mod_On = cms.bool(False),
    MultiplicityRegions = cms.PSet(
        MaxClus = cms.double(26000),
        MinPix = cms.double(50),
        dk0 = cms.double(40),
        k0 = cms.double(0.097),
        q0 = cms.double(300)
    ),
    NclusVsCycleTimeProf2D = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(90),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(23592960),
        ymin = cms.double(0.0)
    ),
    PixelDCSfilter = cms.PSet(
        andOr = cms.bool(False),
        andOrDcs = cms.bool(False),
        dcsInputTag = cms.InputTag("scalersRawToDigi"),
        dcsPartitions = cms.vint32(28, 29),
        errorReplyDcs = cms.bool(True)
    ),
    ResetMEsEachRun = cms.bool(False),
    SelectAllDetectors = cms.bool(False),
    ShowControlView = cms.bool(False),
    ShowMechanicalStructureView = cms.bool(True),
    ShowReadoutView = cms.bool(False),
    StripDCSfilter = cms.PSet(
        andOr = cms.bool(False),
        andOrDcs = cms.bool(False),
        dcsInputTag = cms.InputTag("scalersRawToDigi"),
        dcsPartitions = cms.vint32(24, 25, 26, 27),
        errorReplyDcs = cms.bool(True)
    ),
    StripQualityLabel = cms.string(''),
    TH1ClusterCharge = cms.PSet(
        Nbinx = cms.int32(200),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(799.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterDigiPos = cms.PSet(
        Nbinx = cms.int32(768),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterNoise = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterPos = cms.PSet(
        Nbinx = cms.int32(768),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoN = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNVsPos = cms.PSet(
        Nbinx = cms.int32(768),
        Nbiny = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(299.5),
        ymin = cms.double(-0.5)
    ),
    TH1ClusterWidth = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(19.5),
        xmin = cms.double(-0.5)
    ),
    TH1MainDiagonalPosition = cms.PSet(
        Nbinsx = cms.int32(100),
        globalswitchon = cms.bool(True),
        xmax = cms.double(2.0),
        xmin = cms.double(0.0)
    ),
    TH1ModuleLocalOccupancy = cms.PSet(
        Nbinx = cms.int32(51),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(1.01),
        xmin = cms.double(-0.01)
    ),
    TH1MultiplicityRegions = cms.PSet(
        Nbinx = cms.int32(5),
        globalswitchon = cms.bool(True),
        xmax = cms.double(5.5),
        xmin = cms.double(0.5)
    ),
    TH1NClusPx = cms.PSet(
        Nbinsx = cms.int32(200),
        xmax = cms.double(19999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NClusStrip = cms.PSet(
        Nbinsx = cms.int32(500),
        xmax = cms.double(99999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NrOfClusterizedStrips = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(99.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripNoise2ApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        globalswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripNoise3ApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        globalswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5)
    ),
    TH1TotalNumberOfClusters = cms.PSet(
        Nbinx = cms.int32(100),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(14999.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClusters = cms.PSet(
        Nbinx = cms.int32(11),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(10.5),
        xmin = cms.double(-0.5)
    ),
    TH2ApvCycleVsDBxGlobal = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(800.5),
        ymin = cms.double(0.5)
    ),
    TH2CStripVsCpixel = cms.PSet(
        Nbinsx = cms.int32(150),
        Nbinsy = cms.int32(50),
        globalswitchon = cms.bool(True),
        xmax = cms.double(74999.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(14999.5),
        ymin = cms.double(-0.5)
    ),
    TH2ClustersApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        yfactor = cms.double(0.2),
        ymin = cms.double(0.0)
    ),
    TProf2ApvCycleVsDBx = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(800.5),
        ymin = cms.double(0.5),
        zmax = cms.double(0.0),
        zmin = cms.double(0.0)
    ),
    TProfClusterWidth = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfClustersApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfClustersVsDBxCycle = cms.PSet(
        Nbins = cms.int32(800),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(800.5),
        xmin = cms.double(0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfNumberOfCluster = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfTotalNumberOfClusters = cms.PSet(
        subdetswitchon = cms.bool(True)
    ),
    TkHistoMap_On = cms.bool(True),
    TopFolderName = cms.string('HLT/SiStrip'),
    TrendVsLS = cms.bool(False),
    Trending = cms.PSet(
        Nbins = cms.int32(600),
        xaxis = cms.string('Event Time in Seconds'),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0)
    ),
    TrendingLS = cms.PSet(
        Nbins = cms.int32(2400),
        xaxis = cms.string('Lumisection'),
        xmax = cms.double(150),
        xmin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True)
)


process.HLTSiStripMonitorTrack = cms.EDAnalyzer("SiStripMonitorTrack",
    AlgoName = cms.string('HLT'),
    ClusterConditions = cms.PSet(
        On = cms.bool(False),
        maxStoN = cms.double(2000.0),
        maxWidth = cms.double(200.0),
        minStoN = cms.double(0.0),
        minWidth = cms.double(0.0)
    ),
    Cluster_src = cms.InputTag("hltSiStripRawToClustersFacility"),
    HistoFlag_On = cms.bool(False),
    Mod_On = cms.bool(False),
    ModulesToBeExcluded = cms.vuint32(),
    OffHisto_On = cms.bool(True),
    RawDigiLabel = cms.string('VirginRaw'),
    RawDigiProducer = cms.string('simSiStripDigis'),
    RawDigis_On = cms.bool(False),
    TH1ClusterCharge = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(999.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterChargeCorr = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(399.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterChargePerCM = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(False),
        ringView = cms.bool(True),
        xmax = cms.double(9999.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterEstimatorCC = cms.PSet(
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1),
        xmin = cms.double(-0.1)
    ),
    TH1ClusterNoise = cms.PSet(
        Nbinx = cms.int32(20),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoN = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNCorr = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(99.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNCorrMod = cms.PSet(
        Nbinx = cms.int32(50),
        xmax = cms.double(199.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterSymmEtaCC = cms.PSet(
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1),
        xmin = cms.double(-0.1)
    ),
    TH1ClusterWidth = cms.PSet(
        Nbinx = cms.int32(20),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(19.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterWidthCC = cms.PSet(
        Nbinx = cms.int32(10),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClustersOff = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(14999.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClustersOn = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(1999.5),
        xmin = cms.double(-0.5)
    ),
    TProfileClusterPGV = cms.PSet(
        Nbinx = cms.int32(20),
        Nbiny = cms.int32(20),
        xmax = cms.double(10.0),
        xmin = cms.double(-10.0),
        ymax = cms.double(1.2),
        ymin = cms.double(-0.1)
    ),
    TkHistoMap_On = cms.bool(True),
    TopFolderName = cms.string('HLT/SiStrip'),
    TrackLabel = cms.string(''),
    TrackProducer = cms.string('hltTrackRefitterForSiStripMonitorTrack'),
    TrajectoryInEvent = cms.bool(True),
    Trend_On = cms.bool(True),
    Trending = cms.PSet(
        Nbins = cms.int32(2400),
        xmax = cms.double(150),
        xmin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True),
    clchCMoriginTkHmap_On = cms.bool(False)
)


process.HLTTauPostAnalysis_Inclusive = cms.EDAnalyzer("DQMGenericClient",
    efficiency = cms.vstring(),
    efficiencyProfile = cms.untracked.vstring("PathEfficiency \'Accepted Events per Path;;\' helpers/PathTriggerBits helpers/RefEvents"),
    outputFileName = cms.untracked.string(''),
    resolution = cms.vstring(),
    subDirs = cms.untracked.vstring('HLT/TauOffline/Inclusive/Summary'),
    verbose = cms.untracked.uint32(0)
)


process.HLTTauPostAnalysis_Inclusive2 = cms.EDAnalyzer("HLTTauPostProcessor",
    DQMBaseFolder = cms.untracked.string('HLT/TauOffline/Inclusive')
)


process.HLTTauPostAnalysis_PFTaus = cms.EDAnalyzer("DQMGenericClient",
    efficiency = cms.vstring(),
    efficiencyProfile = cms.untracked.vstring("PathEfficiency \'Accepted Events per Path;;\' helpers/PathTriggerBits helpers/RefEvents", 
        "L1TauEtEff \'L1 #tau E_{T} efficiency\' helpers/L1TauEtEffNum helpers/L1TauEtEffDenom", 
        "L1TauEtaEff \'L1 #tau #eta efficiency\' helpers/L1TauEtaEffNum helpers/L1TauEtaEffDenom", 
        "L1TauPhiEff \'L1 #tau #phi efficiency\' helpers/L1TauPhiEffNum helpers/L1TauPhiEffDenom", 
        "L1TauHighEtEff \'L1 #tau E_{T} efficiency (high E_{T})\' helpers/L1TauHighEtEffNum helpers/L1TauHighEtEffDenom", 
        "L1IsoTauEtEff \'L1 #tau E_{T} efficiency\' helpers/L1IsoTauEtEffNum helpers/L1IsoTauEtEffDenom", 
        "L1IsoTauEtaEff \'L1 #tau #eta efficiency\' helpers/L1IsoTauEtaEffNum helpers/L1IsoTauEtaEffDenom", 
        "L1IsoTauPhiEff \'L1 #tau #phi efficiency\' helpers/L1IsoTauPhiEffNum helpers/L1IsoTauPhiEffDenom", 
        "L1IsoTauHighEtEff \'L1 #tau E_{T} efficiency (high E_{T})\' helpers/L1IsoTauHighEtEffNum helpers/L1IsoTauHighEtEffDenom", 
        "L1JetEtEff \'L1 #tau E_{T} efficiency\' helpers/L1JetEtEffNum helpers/L1JetEtEffDenom", 
        "L1JetHighEtEff \'L1 central jet E_{T} efficiency (high E_{T})\' helpers/L1JetHighEtEffNum helpers/L1JetHighEtEffDenom", 
        "L1JetEtaEff \'L1 central jet #eta efficiency (E_{T} > 40.0)\' helpers/L1JetEtaEffNum helpers/L1JetEtaEffDenom", 
        "L1JetPhiEff \'L1 central jet #phi efficiency (E_{T} > 40.0)\' helpers/L1JetPhiEffNum helpers/L1JetPhiEffDenom", 
        "L1ETMEtEff \'L1 ETM E_{T} efficiency\' helpers/L1ETMEtEffNum helpers/L1ETMEtEffDenom", 
        "L2TrigMETEtEff \'L2 MET E_{T} efficiency\' helpers/L2TrigMETEtEffNum helpers/L2TrigMETEtEffDenom", 
        "L2TrigMETPhiEff \'L2 MET #phi efficiency\' helpers/L2TrigMETPhiEffNum helpers/L2TrigMETPhiEffDenom", 
        "L2TrigTauEtEff \'L2 #tau p_{T} efficiency\' helpers/L2TrigTauEtEffNum helpers/L2TrigTauEtEffDenom", 
        "L2TrigTauEtaEff \'L2 #tau #eta efficiency\' helpers/L2TrigTauEtaEffNum helpers/L2TrigTauEtaEffDenom", 
        "L2TrigTauPhiEff \'L2 #tau #phi efficiency\' helpers/L2TrigTauPhiEffNum helpers/L2TrigTauPhiEffDenom", 
        "L2TrigTauHighEtEff \'L2 #tau p_{T} efficiency (high p_{T})\' helpers/L2TrigTauHighEtEffNum helpers/L2TrigTauHighEtEffDenom", 
        "L2TrigElectronEtEff \'L2 electron p_{T} efficiency\' helpers/L2TrigElectronEtEffNum helpers/L2TrigElectronEtEffDenom", 
        "L2TrigElectronEtaEff \'L2 electron #eta efficiency\' helpers/L2TrigElectronEtaEffNum helpers/L2TrigElectronEtaEffDenom", 
        "L2TrigElectronPhiEff \'L2 electron #phi efficiency\' helpers/L2TrigElectronPhiEffNum helpers/L2TrigElectronPhiEffDenom", 
        "L2TrigMuonEtEff \'L2 muon p_{T} efficiency\' helpers/L2TrigMuonEtEffNum helpers/L2TrigMuonEtEffDenom", 
        "L2TrigMuonEtaEff \'L2 muon #eta efficiency\' helpers/L2TrigMuonEtaEffNum helpers/L2TrigMuonEtaEffDenom", 
        "L2TrigMuonPhiEff \'L2 muon #phi efficiency\' helpers/L2TrigMuonPhiEffNum helpers/L2TrigMuonPhiEffDenom", 
        "L3TrigTauEtEff \'L3 #tau p_{T} efficiency\' helpers/L3TrigTauEtEffNum helpers/L3TrigTauEtEffDenom", 
        "L3TrigTauEtaEff \'L3 #tau #eta efficiency\' helpers/L3TrigTauEtaEffNum helpers/L3TrigTauEtaEffDenom", 
        "L3TrigTauPhiEff \'L3 #tau #phi efficiency\' helpers/L3TrigTauPhiEffNum helpers/L3TrigTauPhiEffDenom", 
        "L3TrigTauHighEtEff \'L3 #tau p_{T} efficiency (high p_{T})\' helpers/L3TrigTauHighEtEffNum helpers/L3TrigTauHighEtEffDenom", 
        "L3TrigElectronEtEff \'L3 electron p_{T} efficiency\' helpers/L3TrigElectronEtEffNum helpers/L3TrigElectronEtEffDenom", 
        "L3TrigElectronEtaEff \'L3 electron #eta efficiency\' helpers/L3TrigElectronEtaEffNum helpers/L3TrigElectronEtaEffDenom", 
        "L3TrigElectronPhiEff \'L3 electron #phi efficiency\' helpers/L3TrigElectronPhiEffNum helpers/L3TrigElectronPhiEffDenom", 
        "L3TrigMuonEtEff \'L3 muon p_{T} efficiency\' helpers/L3TrigMuonEtEffNum helpers/L3TrigMuonEtEffDenom", 
        "L3TrigMuonEtaEff \'L3 muon #eta efficiency\' helpers/L3TrigMuonEtaEffNum helpers/L3TrigMuonEtaEffDenom", 
        "L3TrigMuonPhiEff \'L3 muon #phi efficiency\' helpers/L3TrigMuonPhiEffNum helpers/L3TrigMuonPhiEffDenom"),
    outputFileName = cms.untracked.string(''),
    resolution = cms.vstring(),
    subDirs = cms.untracked.vstring('HLT/TauOffline/PFTaus/Summary', 
        'HLT/TauOffline/PFTaus/HLT_.*', 
        'HLT/TauOffline/PFTaus/L1'),
    verbose = cms.untracked.uint32(0)
)


process.HLTTauPostAnalysis_PFTaus2 = cms.EDAnalyzer("HLTTauPostProcessor",
    DQMBaseFolder = cms.untracked.string('HLT/TauOffline/PFTaus')
)


process.HiggsDQM = cms.EDAnalyzer("HiggsDQM",
    PtThrMu1 = cms.untracked.double(3.0),
    PtThrMu2 = cms.untracked.double(3.0),
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMETCollection = cms.InputTag("caloMetM"),
    elecTriggerPathToPass = cms.string('HLT_Ele10_LW_L1R'),
    electronCollection = cms.InputTag("gedGsfElectrons"),
    genParticleCollection = cms.InputTag("genParticles"),
    muonCollection = cms.InputTag("muons"),
    muonTriggerPathToPass = cms.string('HLT_Mu9'),
    pfMETCollection = cms.InputTag("pfMet"),
    triggerResultsCollection = cms.InputTag("TriggerResults","","HLT")
)


process.LooseMuonEfficiencyAnalyzer = cms.EDAnalyzer("EfficiencyAnalyzer",
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ID = cms.string('Loose'),
    MuonCollection = cms.InputTag("muons"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackCollection = cms.InputTag("generalTracks"),
    VertexLabel = cms.InputTag("offlinePrimaryVertices"),
    doPrimaryVertexCheck = cms.bool(True),
    etaBin = cms.int32(8),
    etaMax = cms.double(2.5),
    etaMin = cms.double(-2.5),
    phiBin = cms.int32(8),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(10),
    ptMax = cms.double(100),
    ptMin = cms.double(10),
    vtxBin = cms.int32(10),
    vtxMax = cms.double(40.5),
    vtxMin = cms.double(0.5)
)


process.MEtoMEComparitor = cms.EDAnalyzer("MEtoMEComparitor",
    Diffgoodness = cms.double(0.1),
    KSgoodness = cms.double(0.9),
    MEtoEDMLabel = cms.string('MEtoEDMConverter'),
    OverAllgoodness = cms.double(0.9),
    autoProcess = cms.bool(True),
    dirDepth = cms.uint32(1),
    lumiInstance = cms.string('MEtoEDMConverterLumi'),
    processNew = cms.string('RERECO'),
    processRef = cms.string('HLT'),
    runInstance = cms.string('MEtoEDMConverterRun')
)


process.MediumMuonEfficiencyAnalyzer = cms.EDAnalyzer("EfficiencyAnalyzer",
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ID = cms.string('Medium'),
    MuonCollection = cms.InputTag("muons"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackCollection = cms.InputTag("generalTracks"),
    VertexLabel = cms.InputTag("offlinePrimaryVertices"),
    doPrimaryVertexCheck = cms.bool(True),
    etaBin = cms.int32(8),
    etaMax = cms.double(2.5),
    etaMin = cms.double(-2.5),
    phiBin = cms.int32(8),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(10),
    ptMax = cms.double(100),
    ptMin = cms.double(10),
    vtxBin = cms.int32(10),
    vtxMax = cms.double(40.5),
    vtxMin = cms.double(0.5)
)


process.MonitorTrackGLBMuons = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('glb') ),
        ("BSFolderName" , cms.string('Muons/globalCosmicMuons/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('Muons/globalMuons') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(100) ),
        ("TkSizeMax" , cms.double(99.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("globalMuons") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.MonitorTrackResiduals = cms.EDAnalyzer("MonitorTrackResiduals",
    Mod_On = cms.bool(False),
    OutputFileName = cms.string('test_monitortracks.root'),
    OutputMEsInRootFile = cms.bool(False),
    ResetAfterRun = cms.bool(True),
    TH1NormResModules = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(5.0),
        xmin = cms.double(-5.0)
    ),
    TH1ResModules = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(0.05),
        xmin = cms.double(-0.05)
    ),
    Tracks = cms.InputTag("TrackRefitter"),
    andOr = cms.bool(False),
    andOrHlt = cms.bool(True),
    dbLabel = cms.string('SiStripDQMTrigger'),
    errorReplyHlt = cms.bool(False),
    hltDBKey = cms.string('Tracker_MB'),
    hltInputTag = cms.InputTag("TriggerResults","","HLT"),
    hltPaths = cms.vstring('HLT_ZeroBias_*'),
    trajectoryInput = cms.string('generalTracks')
)


process.MonitorTrackResiduals_hi = cms.EDAnalyzer("MonitorTrackResiduals",
    Mod_On = cms.bool(False),
    OutputFileName = cms.string('test_monitortracks.root'),
    OutputMEsInRootFile = cms.bool(False),
    ResetAfterRun = cms.bool(True),
    TH1NormResModules = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(5.0),
        xmin = cms.double(-5.0)
    ),
    TH1ResModules = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(0.05),
        xmin = cms.double(-0.05)
    ),
    Tracks = cms.InputTag("hiGeneralTracks"),
    andOr = cms.bool(False),
    andOrHlt = cms.bool(True),
    dbLabel = cms.string('SiStripDQMTrigger'),
    errorReplyHlt = cms.bool(False),
    hltDBKey = cms.string('Tracker_MB'),
    hltInputTag = cms.InputTag("TriggerResults","","HLT"),
    hltPaths = cms.vstring('HLT_ZeroBias_*'),
    trajectoryInput = cms.string('hiGeneralTracks')
)


process.MonitorTrackSTAMuons = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('sta') ),
        ("BSFolderName" , cms.string('Muons/standAloneMuonsUpdatedAtVtx/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(250) ),
        ("Chi2Max" , cms.double(500.0) ),
        ("Chi2Min" , cms.double(0.0) ),
        ("Chi2NDFBin" , cms.int32(200) ),
        ("Chi2NDFMax" , cms.double(19.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(100) ),
        ("EtaMax" , cms.double(3.0) ),
        ("EtaMin" , cms.double(-3.0) ),
        ("FolderName" , cms.string('Muons/standAloneMuonsUpdatedAtVtx') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(20) ),
        ("MeanLayMax" , cms.double(19.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('default') ),
        ("NClus2DPxBin" , cms.int32(20) ),
        ("NClus2DPxMax" , cms.double(1999.5) ),
        ("NClus2DPxMin" , cms.double(-0.5) ),
        ("NClus2DStrBin" , cms.int32(50) ),
        ("NClus2DStrMax" , cms.double(14999.5) ),
        ("NClus2DStrMin" , cms.double(-0.5) ),
        ("NClus2DTotBin" , cms.int32(50) ),
        ("NClus2DTotMax" , cms.double(14999.5) ),
        ("NClus2DTotMin" , cms.double(-0.5) ),
        ("NClusPxBin" , cms.int32(50) ),
        ("NClusPxMax" , cms.double(1999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(150) ),
        ("NClusStrMax" , cms.double(14999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(20) ),
        ("NTrk2DMax" , cms.double(199.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('monitortrackparameters_stamuons.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBHitBin" , cms.int32(10) ),
        ("PXBHitMax" , cms.double(9.5) ),
        ("PXBHitMin" , cms.double(-0.5) ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFHitBin" , cms.int32(10) ),
        ("PXFHitMax" , cms.double(9.5) ),
        ("PXFHitMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(36) ),
        ("PhiMax" , cms.double(3.2) ),
        ("PhiMin" , cms.double(-3.2) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(120) ),
        ("RecHitMax" , cms.double(120.0) ),
        ("RecHitMin" , cms.double(0.0) ),
        ("RecLayBin" , cms.int32(120) ),
        ("RecLayMax" , cms.double(120.0) ),
        ("RecLayMin" , cms.double(0.0) ),
        ("RecLostBin" , cms.int32(120) ),
        ("RecLostMax" , cms.double(20) ),
        ("RecLostMin" , cms.double(0.0) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(200) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("combinedP5SeedsForCTF") ),
        ("TCDxyBin" , cms.int32(200) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(200) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("ckfTrackCandidatesP5") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECHitBin" , cms.int32(25) ),
        ("TECHitMax" , cms.double(24.5) ),
        ("TECHitMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBHitBin" , cms.int32(15) ),
        ("TIBHitMax" , cms.double(14.5) ),
        ("TIBHitMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDHitBin" , cms.int32(15) ),
        ("TIDHitMax" , cms.double(14.5) ),
        ("TIDHitMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBHitBin" , cms.int32(15) ),
        ("TOBHitMax" , cms.double(14.5) ),
        ("TOBHitMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(100) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(20) ),
        ("TkSeedSizeMax" , cms.double(19.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(11) ),
        ("TkSizeMax" , cms.double(10.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(1000) ),
        ("TrackPMax" , cms.double(1000) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("standAloneMuons","UpdatedAtVtx") ),
        ("TrackPtBin" , cms.int32(1000) ),
        ("TrackPtMax" , cms.double(1000) ),
        ("TrackPtMin" , cms.double(0) ),
        ("TrackPxBin" , cms.int32(1000) ),
        ("TrackPxMax" , cms.double(500.0) ),
        ("TrackPxMin" , cms.double(-500.0) ),
        ("TrackPyBin" , cms.int32(1000) ),
        ("TrackPyMax" , cms.double(500.0) ),
        ("TrackPyMin" , cms.double(-500.0) ),
        ("TrackPzBin" , cms.int32(1000) ),
        ("TrackPzMax" , cms.double(500.0) ),
        ("TrackPzMin" , cms.double(-500.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(20) ),
        ("VXMax" , cms.double(20.0) ),
        ("VXMin" , cms.double(-20.0) ),
        ("VYBin" , cms.int32(20) ),
        ("VYMax" , cms.double(20.0) ),
        ("VYMin" , cms.double(-20.0) ),
        ("VZBin" , cms.int32(50) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(100.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-100.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(3.0) ),
        ("X0Min" , cms.double(-3.0) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(3.0) ),
        ("Y0Min" , cms.double(-3.0) ),
        ("Z0Bin" , cms.int32(60) ),
        ("Z0Max" , cms.double(30.0) ),
        ("Z0Min" , cms.double(-30.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(False) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
    ] +
    [
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(False) ),
        ("etaErrBin" , cms.int32(100) ),
        ("etaErrMax" , cms.double(0.5) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(100) ),
        ("pErrMax" , cms.double(10.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(100) ),
        ("phiErrMax" , cms.double(1.0) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(100) ),
        ("ptErrMax" , cms.double(10.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(100) ),
        ("pxErrMax" , cms.double(10.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(100) ),
        ("pyErrMax" , cms.double(10.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(100) ),
        ("pzErrMax" , cms.double(10.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.MuIsoDQM_glb = cms.EDAnalyzer("MuonIsolationDQM",
    Global_Muon_Label = cms.untracked.InputTag("muons"),
    directory = cms.string('Muons/Isolation/global'),
    ecalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ecal"),
    hcalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","hcal"),
    hoIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ho"),
    requireGLBMuon = cms.untracked.bool(True),
    requireSTAMuon = cms.untracked.bool(False),
    requireTRKMuon = cms.untracked.bool(False),
    tkIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositTk"),
    vertexLabel = cms.untracked.InputTag("offlinePrimaryVertices")
)


process.MuIsoDQM_sta = cms.EDAnalyzer("MuonIsolationDQM",
    Global_Muon_Label = cms.untracked.InputTag("muons"),
    directory = cms.string('Muons/Isolation/standalone'),
    ecalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ecal"),
    hcalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","hcal"),
    hoIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ho"),
    requireGLBMuon = cms.untracked.bool(False),
    requireSTAMuon = cms.untracked.bool(True),
    requireTRKMuon = cms.untracked.bool(False),
    tkIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositTk"),
    vertexLabel = cms.untracked.InputTag("offlinePrimaryVertices")
)


process.MuIsoDQM_trk = cms.EDAnalyzer("MuonIsolationDQM",
    Global_Muon_Label = cms.untracked.InputTag("muons"),
    directory = cms.string('Muons/Isolation/tracker'),
    ecalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ecal"),
    hcalIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","hcal"),
    hoIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositCalByAssociatorTowers","ho"),
    requireGLBMuon = cms.untracked.bool(False),
    requireSTAMuon = cms.untracked.bool(False),
    requireTRKMuon = cms.untracked.bool(True),
    tkIsoDeposit_Label = cms.untracked.InputTag("muIsoDepositTk"),
    vertexLabel = cms.untracked.InputTag("offlinePrimaryVertices")
)


process.SiPixelAliMilleAlignmentProducer = cms.EDAnalyzer("PCLTrackerAlProducer",
    MisalignmentScenario = cms.PSet(
        distribution = cms.string('gaussian'),
        seed = cms.int32(1234567),
        setError = cms.bool(True),
        setRotations = cms.bool(True),
        setTranslations = cms.bool(True)
    ),
    ParameterBuilder = cms.PSet(
        Selector = cms.PSet(
            alignParams = cms.vstring('TrackerTPBHalfBarrel,111111', 
                'TrackerTPEHalfCylinder,111111', 
                'TrackerTIBHalfBarrel,ffffff', 
                'TrackerTOBHalfBarrel,ffffff', 
                'TrackerTIDEndcap,ffffff', 
                'TrackerTECEndcap,ffffff')
        ),
        parameterTypes = cms.vstring('Selector,RigidBody')
    ),
    ParameterStore = cms.PSet(
        ExtendedCorrelationsConfig = cms.PSet(
            CutValue = cms.double(0.95),
            MaxUpdates = cms.int32(5000),
            Weight = cms.double(0.5)
        ),
        TypeOfConstraints = cms.string('approximate_averaging'),
        UseExtendedCorrelations = cms.untracked.bool(False)
    ),
    RunRangeSelection = cms.VPSet(),
    algoConfig = cms.PSet(
        TrajectoryFactory = cms.PSet(
            MaterialEffects = cms.string('BrokenLinesCoarse'),
            MomentumEstimateFieldOff = cms.double(10.0),
            ParticleMass = cms.double(0.10565836),
            PropagationDirection = cms.string('alongMomentum'),
            TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
            UseBeamSpot = cms.bool(False),
            UseBzeroIfFieldOff = cms.bool(True),
            UseHitWithoutDet = cms.bool(True),
            UseInvalidHits = cms.bool(True),
            UseProjectedHits = cms.bool(True)
        ),
        algoName = cms.string('MillePedeAlignmentAlgorithm'),
        binaryFile = cms.string('milleBinary_0.dat'),
        doubleBinary = cms.bool(False),
        fileDir = cms.untracked.string(''),
        max2Dcorrelation = cms.double(0.05),
        mergeBinaryFiles = cms.vstring(),
        mergeTreeFiles = cms.vstring(),
        minNumHits = cms.uint32(7),
        mode = cms.untracked.string('mille'),
        monitorFile = cms.untracked.string('millePedeMonitor.root'),
        pedeLabeler = cms.PSet(

        ),
        pedeReader = cms.PSet(
            fileDir = cms.untracked.string(''),
            readFile = cms.string('millepede.res')
        ),
        pedeReaderInputs = cms.VPSet(),
        pedeSteerer = cms.PSet(
            Presigmas = cms.VPSet(),
            additionalSteerFiles = cms.vstring(),
            constrPrecision = cms.uint32(0),
            constraints = cms.VPSet(),
            fileDir = cms.untracked.string(''),
            method = cms.string('sparseMINRES 6  0.8'),
            minHieraConstrCoeff = cms.double(1e-07),
            minHieraParPerConstr = cms.uint32(2),
            options = cms.vstring('entries 50', 
                'outlierdownweighting 5', 
                'dwfractioncut 0.2'),
            parameterSign = cms.untracked.int32(1),
            pedeCommand = cms.untracked.string('pede_1GB'),
            pedeDump = cms.untracked.string('pede.dump'),
            steerFile = cms.string('pedeSteer'),
            steerFileDebug = cms.untracked.bool(False)
        ),
        surveyPixelBarrel = cms.PSet(
            doOutputOnStdout = cms.bool(False),
            doSurvey = cms.bool(False),
            doToySurvey = cms.bool(False),
            infile = cms.FileInPath('Alignment/SurveyAnalysis/data/BPix_Survey_info_raw.txt'),
            toySurveyFile = cms.untracked.string('toySurveyInfo.txt'),
            toySurveyParameters = cms.VPSet(cms.PSet(
                mean = cms.double(1800.0),
                name = cms.string('a0'),
                sigma = cms.double(150.0)
            ), 
                cms.PSet(
                    mean = cms.double(2600.0),
                    name = cms.string('a1'),
                    sigma = cms.double(200.0)
                ), 
                cms.PSet(
                    mean = cms.double(1150.0),
                    name = cms.string('scale'),
                    sigma = cms.double(50.0)
                ), 
                cms.PSet(
                    mean = cms.double(0.0),
                    name = cms.string('phi'),
                    sigma = cms.double(0.0025)
                ), 
                cms.PSet(
                    mean = cms.double(0.0),
                    name = cms.string('u'),
                    sigma = cms.double(0.175)
                ), 
                cms.PSet(
                    mean = cms.double(0.0),
                    name = cms.string('v'),
                    sigma = cms.double(0.175)
                )),
            toySurveySeed = cms.uint32(12)
        ),
        treeFile = cms.string('treeFile.root')
    ),
    applyDbAlignment = cms.untracked.bool(True),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    calibrations = cms.VPSet(),
    checkDbAlignmentValidity = cms.untracked.bool(False),
    doMisalignmentScenario = cms.bool(False),
    doMuon = cms.untracked.bool(False),
    doTracker = cms.untracked.bool(True),
    hitPrescaleMapTag = cms.InputTag(""),
    monitorConfig = cms.PSet(
        monitors = cms.untracked.vstring()
    ),
    nFixAlignables = cms.int32(0),
    parameterSelectorSimple = cms.string('-1'),
    randomRotation = cms.double(0.0),
    randomShift = cms.double(0.0),
    saveApeToDB = cms.bool(False),
    saveDeformationsToDB = cms.bool(False),
    saveToDB = cms.bool(False),
    tjTkAssociationMapTag = cms.InputTag("SiPixelAliTrackRefitter1"),
    tkLasBeamTag = cms.InputTag(""),
    useExtras = cms.untracked.bool(False),
    useSurvey = cms.bool(False)
)


process.SiPixelClusterSource = cms.EDAnalyzer("SiPixelClusterSource",
    TopFolderName = cms.string('Pixel'),
    bigEventSize = cms.untracked.int32(180),
    bladeOn = cms.untracked.bool(True),
    diskOn = cms.untracked.bool(True),
    isPIB = cms.untracked.bool(False),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_Cluster.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    smileyOn = cms.untracked.bool(True),
    src = cms.InputTag("siPixelClusters"),
    twoDimOn = cms.untracked.bool(False)
)


process.SiPixelClusterSource_phase1 = cms.EDAnalyzer("SiPixelClusterSource",
    TopFolderName = cms.string('Pixel'),
    bigEventSize = cms.untracked.int32(180),
    bladeOn = cms.untracked.bool(True),
    diskOn = cms.untracked.bool(True),
    isPIB = cms.untracked.bool(False),
    isUpgrade = cms.untracked.bool(True),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_Cluster.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    smileyOn = cms.untracked.bool(True),
    src = cms.InputTag("siPixelClusters"),
    twoDimOn = cms.untracked.bool(False)
)


process.SiPixelDigiSource = cms.EDAnalyzer("SiPixelDigiSource",
    TopFolderName = cms.string('Pixel'),
    bigEventSize = cms.untracked.int32(2600),
    bladeOn = cms.untracked.bool(True),
    diskOn = cms.untracked.bool(True),
    hiRes = cms.untracked.bool(False),
    isPIB = cms.untracked.bool(False),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_Digi.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    src = cms.InputTag("siPixelDigis"),
    twoDimModOn = cms.untracked.bool(False),
    twoDimOn = cms.untracked.bool(False),
    twoDimOnlyLayDisk = cms.untracked.bool(False)
)


process.SiPixelDigiSource_phase1 = cms.EDAnalyzer("SiPixelDigiSource",
    TopFolderName = cms.string('Pixel'),
    bigEventSize = cms.untracked.int32(2600),
    bladeOn = cms.untracked.bool(True),
    diskOn = cms.untracked.bool(True),
    hiRes = cms.untracked.bool(False),
    isPIB = cms.untracked.bool(False),
    isUpgrade = cms.untracked.bool(True),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_Digi.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    src = cms.InputTag("siPixelDigis"),
    twoDimModOn = cms.untracked.bool(False),
    twoDimOn = cms.untracked.bool(False),
    twoDimOnlyLayDisk = cms.untracked.bool(False)
)


process.SiPixelHLTSource = cms.EDAnalyzer("SiPixelHLTSource",
    DirName = cms.untracked.string('Pixel/FEDIntegrity/'),
    ErrorInput = cms.InputTag("siPixelDigis"),
    RawInput = cms.InputTag("rawDataRepacker"),
    outputFile = cms.string('Pixel_DQM_HLT.root'),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False)
)


process.SiPixelHitEfficiencySource = cms.EDAnalyzer("SiPixelHitEfficiencySource",
    applyEdgeCut = cms.untracked.bool(False),
    bladeOn = cms.untracked.bool(True),
    debug = cms.untracked.bool(False),
    diskOn = cms.untracked.bool(False),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(False),
    modOn = cms.untracked.bool(False),
    nSigma_EdgeCut = cms.untracked.double(2.0),
    outputFile = cms.string('Pixel_DQM_HitEfficiency.root'),
    phiOn = cms.untracked.bool(False),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    src = cms.InputTag("siPixelHitEfficiency"),
    trajectoryInput = cms.InputTag("generalTracks"),
    updateEfficiencies = cms.untracked.bool(False)
)


process.SiPixelHitEfficiencySource_HeavyIons = cms.EDAnalyzer("SiPixelHitEfficiencySource",
    applyEdgeCut = cms.untracked.bool(False),
    bladeOn = cms.untracked.bool(True),
    debug = cms.untracked.bool(False),
    diskOn = cms.untracked.bool(False),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(False),
    modOn = cms.untracked.bool(False),
    nSigma_EdgeCut = cms.untracked.double(2.0),
    outputFile = cms.string('Pixel_DQM_HitEfficiency.root'),
    phiOn = cms.untracked.bool(False),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    src = cms.InputTag("siPixelHitEfficiency"),
    trajectoryInput = cms.InputTag("hiGlobalPrimTracks"),
    updateEfficiencies = cms.untracked.bool(False)
)


process.SiPixelHitEfficiencySource_phase1 = cms.EDAnalyzer("SiPixelHitEfficiencySource",
    applyEdgeCut = cms.untracked.bool(False),
    bladeOn = cms.untracked.bool(True),
    debug = cms.untracked.bool(False),
    diskOn = cms.untracked.bool(False),
    isUpgrade = cms.untracked.bool(True),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(False),
    modOn = cms.untracked.bool(False),
    nSigma_EdgeCut = cms.untracked.double(2.0),
    outputFile = cms.string('Pixel_DQM_HitEfficiency.root'),
    phiOn = cms.untracked.bool(False),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    src = cms.InputTag("siPixelHitEfficiency"),
    trajectoryInput = cms.InputTag("generalTracks"),
    updateEfficiencies = cms.untracked.bool(False)
)


process.SiPixelRawDataErrorSource = cms.EDAnalyzer("SiPixelRawDataErrorSource",
    TopFolderName = cms.string('Pixel'),
    bladeOn = cms.untracked.bool(True),
    isPIB = cms.untracked.bool(False),
    ladOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_Error.root'),
    reducedSet = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    src = cms.InputTag("siPixelDigis")
)


process.SiPixelRawDataErrorSource_phase1 = cms.EDAnalyzer("SiPixelRawDataErrorSource",
    TopFolderName = cms.string('Pixel'),
    bladeOn = cms.untracked.bool(True),
    isPIB = cms.untracked.bool(False),
    isUpgrade = cms.untracked.bool(True),
    ladOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_Error.root'),
    reducedSet = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    src = cms.InputTag("siPixelDigis")
)


process.SiPixelRecHitSource = cms.EDAnalyzer("SiPixelRecHitSource",
    TopFolderName = cms.string('Pixel'),
    bladeOn = cms.untracked.bool(True),
    diskOn = cms.untracked.bool(True),
    isPIB = cms.untracked.bool(False),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_RecHits.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    src = cms.InputTag("siPixelRecHits"),
    twoDimOn = cms.untracked.bool(False)
)


process.SiPixelRecHitSource_phase1 = cms.EDAnalyzer("SiPixelRecHitSource",
    TopFolderName = cms.string('Pixel'),
    bladeOn = cms.untracked.bool(True),
    diskOn = cms.untracked.bool(True),
    isPIB = cms.untracked.bool(False),
    isUpgrade = cms.untracked.bool(True),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_RecHits.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    slowDown = cms.untracked.bool(False),
    src = cms.InputTag("siPixelRecHits"),
    twoDimOn = cms.untracked.bool(False)
)


process.SiPixelTrackResidualSource = cms.EDAnalyzer("SiPixelTrackResidualSource",
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    PtMinRes = cms.untracked.double(4.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TopFolderName = cms.string('Pixel'),
    TrackCandidateLabel = cms.string(''),
    TrackCandidateProducer = cms.string('initialStepTrackCandidates'),
    bladeOn = cms.untracked.bool(True),
    clustersrc = cms.InputTag("siPixelClusters"),
    debug = cms.untracked.bool(False),
    diskOn = cms.untracked.bool(True),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_TrackResidual.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    src = cms.InputTag("siPixelTrackResiduals"),
    tracksrc = cms.InputTag("generalTracks"),
    trajectoryInput = cms.InputTag("generalTracks")
)


process.SiPixelTrackResidualSource_Cosmics = cms.EDAnalyzer("SiPixelTrackResidualSource",
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    PtMinRes = cms.untracked.double(4.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TopFolderName = cms.string('Pixel'),
    TrackCandidateLabel = cms.string(''),
    TrackCandidateProducer = cms.string('ckfTrackCandidatesP5'),
    bladeOn = cms.untracked.bool(True),
    clustersrc = cms.InputTag("siPixelClusters"),
    debug = cms.untracked.bool(False),
    diskOn = cms.untracked.bool(True),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_TrackResidual.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    src = cms.InputTag("siPixelTrackResiduals"),
    tracksrc = cms.InputTag("ctfWithMaterialTracksP5"),
    trajectoryInput = cms.InputTag("ctfWithMaterialTracksP5")
)


process.SiPixelTrackResidualSource_HeavyIons = cms.EDAnalyzer("SiPixelTrackResidualSource",
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    PtMinRes = cms.untracked.double(4.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TopFolderName = cms.string('Pixel'),
    TrackCandidateLabel = cms.string(''),
    TrackCandidateProducer = cms.string('hiPrimTrackCandidates'),
    bladeOn = cms.untracked.bool(True),
    clustersrc = cms.InputTag("siPixelClusters"),
    debug = cms.untracked.bool(False),
    diskOn = cms.untracked.bool(True),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_TrackResidual.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    src = cms.InputTag("siPixelTrackResiduals"),
    tracksrc = cms.InputTag("generalTracks"),
    trajectoryInput = cms.InputTag("hiGlobalPrimTracks")
)


process.SiPixelTrackResidualSource_phase1 = cms.EDAnalyzer("SiPixelTrackResidualSource",
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    PtMinRes = cms.untracked.double(4.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    TopFolderName = cms.string('Pixel'),
    TrackCandidateLabel = cms.string(''),
    TrackCandidateProducer = cms.string('initialStepTrackCandidates'),
    bladeOn = cms.untracked.bool(True),
    clustersrc = cms.InputTag("siPixelClusters"),
    debug = cms.untracked.bool(False),
    diskOn = cms.untracked.bool(True),
    isUpgrade = cms.untracked.bool(True),
    ladOn = cms.untracked.bool(True),
    layOn = cms.untracked.bool(True),
    modOn = cms.untracked.bool(False),
    outputFile = cms.string('Pixel_DQM_TrackResidual.root'),
    phiOn = cms.untracked.bool(False),
    reducedSet = cms.untracked.bool(True),
    ringOn = cms.untracked.bool(False),
    saveFile = cms.untracked.bool(False),
    src = cms.InputTag("siPixelTrackResiduals"),
    tracksrc = cms.InputTag("generalTracks"),
    trajectoryInput = cms.InputTag("generalTracks")
)


process.SiStripCalZeroBiasMonitorCluster = cms.EDAnalyzer("SiStripMonitorCluster",
    ApvPhaseProducer = cms.InputTag("APVPhases"),
    BPTXfilter = cms.PSet(

    ),
    ClusterChTkHistoMap_On = cms.bool(False),
    ClusterConditions = cms.PSet(
        On = cms.bool(True),
        maxStoN = cms.double(10000.0),
        maxWidth = cms.double(10000.0),
        minStoN = cms.double(0.0),
        minWidth = cms.double(0.0)
    ),
    ClusterHisto = cms.bool(False),
    ClusterLabel = cms.string(''),
    ClusterProducerPix = cms.InputTag("siPixelClusters"),
    ClusterProducerStrip = cms.InputTag("calZeroBiasClusters"),
    CreateTrendMEs = cms.bool(False),
    HistoryProducer = cms.InputTag("consecutiveHEs"),
    Mod_On = cms.bool(True),
    MultiplicityRegions = cms.PSet(
        MaxClus = cms.double(20000),
        MinPix = cms.double(50),
        dk0 = cms.double(40),
        k0 = cms.double(0.13),
        q0 = cms.double(300)
    ),
    NclusVsCycleTimeProf2D = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(90),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(23592960),
        ymin = cms.double(0.0)
    ),
    PixelDCSfilter = cms.PSet(

    ),
    ResetMEsEachRun = cms.bool(False),
    SelectAllDetectors = cms.bool(True),
    ShowControlView = cms.bool(False),
    ShowMechanicalStructureView = cms.bool(True),
    ShowReadoutView = cms.bool(False),
    StripDCSfilter = cms.PSet(

    ),
    StripQualityLabel = cms.string('unbiased'),
    TH1ClusterCharge = cms.PSet(
        Nbinx = cms.int32(200),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(799.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterDigiPos = cms.PSet(
        Nbinx = cms.int32(768),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterNoise = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterPos = cms.PSet(
        Nbinx = cms.int32(768),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoN = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNVsPos = cms.PSet(
        Nbinx = cms.int32(768),
        Nbiny = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(299.5),
        ymin = cms.double(-0.5)
    ),
    TH1ClusterWidth = cms.PSet(
        Nbinx = cms.int32(30),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(29.5),
        xmin = cms.double(-0.5)
    ),
    TH1MainDiagonalPosition = cms.PSet(
        Nbinsx = cms.int32(100),
        globalswitchon = cms.bool(False),
        xmax = cms.double(2.0),
        xmin = cms.double(0.0)
    ),
    TH1ModuleLocalOccupancy = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(0.95),
        xmin = cms.double(-0.5)
    ),
    TH1MultiplicityRegions = cms.PSet(
        Nbinx = cms.int32(5),
        globalswitchon = cms.bool(False),
        xmax = cms.double(5.5),
        xmin = cms.double(0.5)
    ),
    TH1NClusPx = cms.PSet(
        Nbinsx = cms.int32(200),
        xmax = cms.double(19999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NClusStrip = cms.PSet(
        Nbinsx = cms.int32(500),
        xmax = cms.double(99999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NrOfClusterizedStrips = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(99.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripNoise2ApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        globalswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripNoise3ApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        globalswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5)
    ),
    TH1TotalNumberOfClusters = cms.PSet(
        Nbinx = cms.int32(500),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(19999.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClusters = cms.PSet(
        Nbinx = cms.int32(11),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(10.5),
        xmin = cms.double(-0.5)
    ),
    TH2ApvCycleVsDBxGlobal = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        globalswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(800.5),
        ymin = cms.double(0.5)
    ),
    TH2CStripVsCpixel = cms.PSet(
        Nbinsx = cms.int32(150),
        Nbinsy = cms.int32(50),
        globalswitchon = cms.bool(False),
        xmax = cms.double(74999.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(14999.5),
        ymin = cms.double(-0.5)
    ),
    TH2ClustersApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(400),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        yfactor = cms.double(0.01),
        ymin = cms.double(0.0)
    ),
    TProf2ApvCycleVsDBx = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(800.5),
        ymin = cms.double(0.5),
        zmax = cms.double(0.0),
        zmin = cms.double(0.0)
    ),
    TProfClusterWidth = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfClustersApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfClustersVsDBxCycle = cms.PSet(
        Nbins = cms.int32(800),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(800.5),
        xmin = cms.double(0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfNumberOfCluster = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfTotalNumberOfClusters = cms.PSet(
        subdetswitchon = cms.bool(True)
    ),
    TkHistoMap_On = cms.bool(False),
    TopFolderName = cms.string('AlCaReco/SiStrip'),
    TrendVsLS = cms.bool(True),
    Trending = cms.PSet(
        Nbins = cms.int32(600),
        xaxis = cms.string('Event Time in Seconds'),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0)
    ),
    TrendingLS = cms.PSet(
        Nbins = cms.int32(2400),
        xaxis = cms.string('Lumisection'),
        xmax = cms.double(150),
        xmin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True)
)


process.SiStripMonitorCluster = cms.EDAnalyzer("SiStripMonitorCluster",
    ApvPhaseProducer = cms.InputTag("APVPhases"),
    BPTXfilter = cms.PSet(

    ),
    ClusterChTkHistoMap_On = cms.bool(True),
    ClusterConditions = cms.PSet(
        On = cms.bool(True),
        maxStoN = cms.double(10000.0),
        maxWidth = cms.double(10000.0),
        minStoN = cms.double(0.0),
        minWidth = cms.double(0.0)
    ),
    ClusterHisto = cms.bool(False),
    ClusterLabel = cms.string(''),
    ClusterProducerPix = cms.InputTag("siPixelClusters"),
    ClusterProducerStrip = cms.InputTag("siStripClusters"),
    CreateTrendMEs = cms.bool(False),
    HistoryProducer = cms.InputTag("consecutiveHEs"),
    Mod_On = cms.bool(True),
    MultiplicityRegions = cms.PSet(
        MaxClus = cms.double(26000),
        MinPix = cms.double(50),
        dk0 = cms.double(40),
        k0 = cms.double(0.097),
        q0 = cms.double(300)
    ),
    NclusVsCycleTimeProf2D = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(90),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(23592960),
        ymin = cms.double(0.0)
    ),
    PixelDCSfilter = cms.PSet(

    ),
    ResetMEsEachRun = cms.bool(False),
    SelectAllDetectors = cms.bool(False),
    ShowControlView = cms.bool(False),
    ShowMechanicalStructureView = cms.bool(True),
    ShowReadoutView = cms.bool(False),
    StripDCSfilter = cms.PSet(

    ),
    StripQualityLabel = cms.string(''),
    TH1ClusterCharge = cms.PSet(
        Nbinx = cms.int32(200),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(799.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterDigiPos = cms.PSet(
        Nbinx = cms.int32(768),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterNoise = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterPos = cms.PSet(
        Nbinx = cms.int32(768),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoN = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNVsPos = cms.PSet(
        Nbinx = cms.int32(768),
        Nbiny = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(299.5),
        ymin = cms.double(-0.5)
    ),
    TH1ClusterWidth = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(19.5),
        xmin = cms.double(-0.5)
    ),
    TH1MainDiagonalPosition = cms.PSet(
        Nbinsx = cms.int32(100),
        globalswitchon = cms.bool(False),
        xmax = cms.double(2.0),
        xmin = cms.double(0.0)
    ),
    TH1ModuleLocalOccupancy = cms.PSet(
        Nbinx = cms.int32(51),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(1.01),
        xmin = cms.double(-0.01)
    ),
    TH1MultiplicityRegions = cms.PSet(
        Nbinx = cms.int32(5),
        globalswitchon = cms.bool(False),
        xmax = cms.double(5.5),
        xmin = cms.double(0.5)
    ),
    TH1NClusPx = cms.PSet(
        Nbinsx = cms.int32(200),
        xmax = cms.double(19999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NClusStrip = cms.PSet(
        Nbinsx = cms.int32(500),
        xmax = cms.double(99999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NrOfClusterizedStrips = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(99.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripNoise2ApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        globalswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripNoise3ApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        globalswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5)
    ),
    TH1TotalNumberOfClusters = cms.PSet(
        Nbinx = cms.int32(100),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(14999.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClusters = cms.PSet(
        Nbinx = cms.int32(11),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(10.5),
        xmin = cms.double(-0.5)
    ),
    TH2ApvCycleVsDBxGlobal = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(800.5),
        ymin = cms.double(0.5)
    ),
    TH2CStripVsCpixel = cms.PSet(
        Nbinsx = cms.int32(150),
        Nbinsy = cms.int32(50),
        globalswitchon = cms.bool(True),
        xmax = cms.double(74999.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(14999.5),
        ymin = cms.double(-0.5)
    ),
    TH2ClustersApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        yfactor = cms.double(0.2),
        ymin = cms.double(0.0)
    ),
    TProf2ApvCycleVsDBx = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(800.5),
        ymin = cms.double(0.5),
        zmax = cms.double(0.0),
        zmin = cms.double(0.0)
    ),
    TProfClusterWidth = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfClustersApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfClustersVsDBxCycle = cms.PSet(
        Nbins = cms.int32(800),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(800.5),
        xmin = cms.double(0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfNumberOfCluster = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfTotalNumberOfClusters = cms.PSet(
        subdetswitchon = cms.bool(False)
    ),
    TkHistoMap_On = cms.bool(True),
    TopFolderName = cms.string('SiStrip'),
    TrendVsLS = cms.bool(False),
    Trending = cms.PSet(
        Nbins = cms.int32(600),
        xaxis = cms.string('Event Time in Seconds'),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0)
    ),
    TrendingLS = cms.PSet(
        Nbins = cms.int32(2400),
        xaxis = cms.string('Lumisection'),
        xmax = cms.double(150),
        xmin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True)
)


process.SiStripMonitorClusterBPTX = cms.EDAnalyzer("SiStripMonitorCluster",
    ApvPhaseProducer = cms.InputTag("APVPhases"),
    BPTXfilter = cms.PSet(
        andOr = cms.bool(False),
        andOrL1 = cms.bool(True),
        dbLabel = cms.string('SiStripDQMTrigger'),
        errorReplyL1 = cms.bool(True),
        l1Algorithms = cms.vstring('L1Tech_BPTX_plus_AND_minus.v0', 
            'L1_ZeroBias'),
        l1BeforeMask = cms.bool(True)
    ),
    ClusterChTkHistoMap_On = cms.bool(True),
    ClusterConditions = cms.PSet(
        On = cms.bool(True),
        maxStoN = cms.double(10000.0),
        maxWidth = cms.double(10000.0),
        minStoN = cms.double(0.0),
        minWidth = cms.double(0.0)
    ),
    ClusterHisto = cms.bool(True),
    ClusterLabel = cms.string(''),
    ClusterProducerPix = cms.InputTag("siPixelClusters"),
    ClusterProducerStrip = cms.InputTag("siStripClusters"),
    CreateTrendMEs = cms.bool(False),
    HistoryProducer = cms.InputTag("consecutiveHEs"),
    Mod_On = cms.bool(False),
    MultiplicityRegions = cms.PSet(
        MaxClus = cms.double(26000),
        MinPix = cms.double(50),
        dk0 = cms.double(40),
        k0 = cms.double(0.097),
        q0 = cms.double(300)
    ),
    NclusVsCycleTimeProf2D = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(90),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(23592960),
        ymin = cms.double(0.0)
    ),
    PixelDCSfilter = cms.PSet(
        andOr = cms.bool(False),
        andOrDcs = cms.bool(False),
        dcsInputTag = cms.InputTag("scalersRawToDigi"),
        dcsPartitions = cms.vint32(28, 29),
        errorReplyDcs = cms.bool(True)
    ),
    ResetMEsEachRun = cms.bool(False),
    SelectAllDetectors = cms.bool(False),
    ShowControlView = cms.bool(False),
    ShowMechanicalStructureView = cms.bool(True),
    ShowReadoutView = cms.bool(False),
    StripDCSfilter = cms.PSet(
        andOr = cms.bool(False),
        andOrDcs = cms.bool(False),
        dcsInputTag = cms.InputTag("scalersRawToDigi"),
        dcsPartitions = cms.vint32(24, 25, 26, 27),
        errorReplyDcs = cms.bool(True)
    ),
    StripQualityLabel = cms.string(''),
    TH1ClusterCharge = cms.PSet(
        Nbinx = cms.int32(200),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(799.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterDigiPos = cms.PSet(
        Nbinx = cms.int32(768),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterNoise = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterPos = cms.PSet(
        Nbinx = cms.int32(768),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoN = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNVsPos = cms.PSet(
        Nbinx = cms.int32(768),
        Nbiny = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(299.5),
        ymin = cms.double(-0.5)
    ),
    TH1ClusterWidth = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(19.5),
        xmin = cms.double(-0.5)
    ),
    TH1MainDiagonalPosition = cms.PSet(
        Nbinsx = cms.int32(100),
        globalswitchon = cms.bool(True),
        xmax = cms.double(2.0),
        xmin = cms.double(0.0)
    ),
    TH1ModuleLocalOccupancy = cms.PSet(
        Nbinx = cms.int32(51),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(1.01),
        xmin = cms.double(-0.01)
    ),
    TH1MultiplicityRegions = cms.PSet(
        Nbinx = cms.int32(5),
        globalswitchon = cms.bool(True),
        xmax = cms.double(5.5),
        xmin = cms.double(0.5)
    ),
    TH1NClusPx = cms.PSet(
        Nbinsx = cms.int32(200),
        xmax = cms.double(19999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NClusStrip = cms.PSet(
        Nbinsx = cms.int32(500),
        xmax = cms.double(99999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NrOfClusterizedStrips = cms.PSet(
        Nbinx = cms.int32(20),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(99.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripNoise2ApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripNoise3ApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5)
    ),
    TH1TotalNumberOfClusters = cms.PSet(
        Nbinx = cms.int32(100),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(14999.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClusters = cms.PSet(
        Nbinx = cms.int32(11),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(10.5),
        xmin = cms.double(-0.5)
    ),
    TH2ApvCycleVsDBxGlobal = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        globalswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(800.5),
        ymin = cms.double(0.5)
    ),
    TH2CStripVsCpixel = cms.PSet(
        Nbinsx = cms.int32(150),
        Nbinsy = cms.int32(50),
        globalswitchon = cms.bool(True),
        xmax = cms.double(74999.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(14999.5),
        ymin = cms.double(-0.5)
    ),
    TH2ClustersApvCycle = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        yfactor = cms.double(0.2),
        ymin = cms.double(0.0)
    ),
    TProf2ApvCycleVsDBx = cms.PSet(
        Nbinsx = cms.int32(70),
        Nbinsy = cms.int32(800),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(800.5),
        ymin = cms.double(0.5),
        zmax = cms.double(0.0),
        zmin = cms.double(0.0)
    ),
    TProfClusterWidth = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfClustersApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfClustersVsDBxCycle = cms.PSet(
        Nbins = cms.int32(800),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(800.5),
        xmin = cms.double(0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfNumberOfCluster = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfTotalNumberOfClusters = cms.PSet(
        subdetswitchon = cms.bool(True)
    ),
    TkHistoMap_On = cms.bool(True),
    TopFolderName = cms.string('SiStrip'),
    TrendVsLS = cms.bool(True),
    Trending = cms.PSet(
        Nbins = cms.int32(600),
        xaxis = cms.string('Event Time in Seconds'),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0)
    ),
    TrendingLS = cms.PSet(
        Nbins = cms.int32(2400),
        xaxis = cms.string('Lumisection'),
        xmax = cms.double(150),
        xmin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True)
)


process.SiStripMonitorDigi = cms.EDAnalyzer("SiStripMonitorDigi",
    ApvPhaseProducer = cms.InputTag("APVPhases"),
    CalculateStripOccupancy = cms.bool(False),
    CreateTrendMEs = cms.bool(False),
    DigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode")),
    HistoryProducer = cms.InputTag("consecutiveHEs"),
    Mod_On = cms.bool(False),
    ResetMEsEachRun = cms.bool(False),
    SelectAllDetectors = cms.bool(False),
    ShowControlView = cms.bool(False),
    ShowMechanicalStructureView = cms.bool(True),
    ShowReadoutView = cms.bool(False),
    TH1ADCsCoolestStrip = cms.PSet(
        Nbinx = cms.int32(60),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ADCsHottestStrip = cms.PSet(
        Nbinx = cms.int32(60),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ApvNumApvShots = cms.PSet(
        Nbins = cms.int32(6),
        globalswitchon = cms.bool(True),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(6.5),
        xmin = cms.double(0.5)
    ),
    TH1ChargeMedianApvShots = cms.PSet(
        Nbins = cms.int32(256),
        globalswitchon = cms.bool(True),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(256.5),
        xmin = cms.double(0.5)
    ),
    TH1DigiADCs = cms.PSet(
        Nbinx = cms.int32(64),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(255.5),
        xmin = cms.double(-0.5)
    ),
    TH1NApvShots = cms.PSet(
        Nbins = cms.int32(201),
        globalswitchon = cms.bool(True),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(200.5),
        xmin = cms.double(-0.5)
    ),
    TH1NStripsApvShots = cms.PSet(
        Nbins = cms.int32(64),
        globalswitchon = cms.bool(True),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(128.5),
        xmin = cms.double(64.5)
    ),
    TH1NumberOfDigis = cms.PSet(
        Nbinx = cms.int32(50),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(999.5),
        xmin = cms.double(-0.5)
    ),
    TH1NumberOfDigisPerStrip = cms.PSet(
        Nbinx = cms.int32(768),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(767.5),
        xmin = cms.double(-0.5)
    ),
    TH1StripOccupancy = cms.PSet(
        Nbinx = cms.int32(51),
        layerswitchon = cms.bool(True),
        moduleswitchon = cms.bool(True),
        xmax = cms.double(1.01),
        xmin = cms.double(-0.01)
    ),
    TH2DigiApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        yfactor = cms.double(0.2),
        ymin = cms.double(0.0)
    ),
    TProfDigiADC = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(0.0)
    ),
    TProfDigiApvCycle = cms.PSet(
        Nbins = cms.int32(70),
        Nbinsy = cms.int32(200),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(69.5),
        xmin = cms.double(-0.5),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfGlobalNShots = cms.PSet(
        globalswitchon = cms.bool(True)
    ),
    TProfNShotsVsTime = cms.PSet(
        Nbins = cms.int32(600),
        globalswitchon = cms.bool(True),
        subdetswitchon = cms.bool(True),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfNumberOfDigi = cms.PSet(
        Nbinx = cms.int32(100),
        layerswitchon = cms.bool(False),
        moduleswitchon = cms.bool(False),
        xmax = cms.double(499.5),
        xmin = cms.double(-0.5)
    ),
    TProfTotalNumberOfDigis = cms.PSet(
        Nbins = cms.int32(360),
        subdetswitchon = cms.bool(False),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0),
        ymax = cms.double(0.0),
        ymin = cms.double(0.0)
    ),
    TProfTotalNumberOfDigisVsLS = cms.PSet(
        subdetswitchon = cms.bool(False)
    ),
    TkHistoMapMedianChargeApvShots_On = cms.bool(False),
    TkHistoMapNApvShots_On = cms.bool(True),
    TkHistoMapNStripApvShots_On = cms.bool(True),
    TkHistoMap_On = cms.bool(True),
    TopFolderName = cms.string('SiStrip'),
    TotalNumberOfDigisFailure = cms.PSet(
        Nbins = cms.int32(2500),
        ignoreFirstNLumisections = cms.int32(20),
        integrateNLumisections = cms.int32(3),
        subdetswitchon = cms.bool(False)
    ),
    Trending = cms.PSet(
        Nbins = cms.int32(600),
        xmax = cms.double(3600.0),
        xmin = cms.double(0.0),
        ymax = cms.double(10000.0),
        ymin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True)
)


process.SiStripMonitorTrackCommon = cms.EDAnalyzer("SiStripMonitorTrack",
    AlgoName = cms.string('GenTk'),
    ClusterConditions = cms.PSet(
        On = cms.bool(False),
        maxStoN = cms.double(2000.0),
        maxWidth = cms.double(200.0),
        minStoN = cms.double(0.0),
        minWidth = cms.double(0.0)
    ),
    Cluster_src = cms.InputTag("siStripClusters"),
    HistoFlag_On = cms.bool(False),
    Mod_On = cms.bool(False),
    ModulesToBeExcluded = cms.vuint32(),
    OffHisto_On = cms.bool(True),
    RawDigiLabel = cms.string('VirginRaw'),
    RawDigiProducer = cms.string('simSiStripDigis'),
    RawDigis_On = cms.bool(False),
    TH1ClusterCharge = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(999.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterChargeCorr = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(399.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterChargePerCM = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(False),
        ringView = cms.bool(True),
        xmax = cms.double(9999.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterEstimatorCC = cms.PSet(
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1),
        xmin = cms.double(-0.1)
    ),
    TH1ClusterNoise = cms.PSet(
        Nbinx = cms.int32(20),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoN = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNCorr = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(99.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNCorrMod = cms.PSet(
        Nbinx = cms.int32(50),
        xmax = cms.double(199.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterSymmEtaCC = cms.PSet(
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1),
        xmin = cms.double(-0.1)
    ),
    TH1ClusterWidth = cms.PSet(
        Nbinx = cms.int32(20),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(19.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterWidthCC = cms.PSet(
        Nbinx = cms.int32(10),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClustersOff = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(14999.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClustersOn = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(1999.5),
        xmin = cms.double(-0.5)
    ),
    TProfileClusterPGV = cms.PSet(
        Nbinx = cms.int32(20),
        Nbiny = cms.int32(20),
        xmax = cms.double(10.0),
        xmin = cms.double(-10.0),
        ymax = cms.double(1.2),
        ymin = cms.double(-0.1)
    ),
    TkHistoMap_On = cms.bool(True),
    TopFolderName = cms.string('SiStrip'),
    TrackLabel = cms.string(''),
    TrackProducer = cms.string('generalTracks'),
    TrajectoryInEvent = cms.bool(True),
    Trend_On = cms.bool(False),
    Trending = cms.PSet(
        Nbins = cms.int32(2400),
        xmax = cms.double(150),
        xmin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True),
    clchCMoriginTkHmap_On = cms.bool(False)
)


process.SiStripMonitorTrackMB = cms.EDAnalyzer("SiStripMonitorTrack",
    AlgoName = cms.string('GenTk'),
    ClusterConditions = cms.PSet(
        On = cms.bool(False),
        maxStoN = cms.double(2000.0),
        maxWidth = cms.double(200.0),
        minStoN = cms.double(0.0),
        minWidth = cms.double(0.0)
    ),
    Cluster_src = cms.InputTag("siStripClusters"),
    HistoFlag_On = cms.bool(False),
    Mod_On = cms.bool(False),
    ModulesToBeExcluded = cms.vuint32(),
    OffHisto_On = cms.bool(True),
    RawDigiLabel = cms.string('VirginRaw'),
    RawDigiProducer = cms.string('simSiStripDigis'),
    RawDigis_On = cms.bool(False),
    TH1ClusterCharge = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(999.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterChargeCorr = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(399.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterChargePerCM = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(False),
        ringView = cms.bool(True),
        xmax = cms.double(9999.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterEstimatorCC = cms.PSet(
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1),
        xmin = cms.double(-0.1)
    ),
    TH1ClusterNoise = cms.PSet(
        Nbinx = cms.int32(20),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoN = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNCorr = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(99.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNCorrMod = cms.PSet(
        Nbinx = cms.int32(50),
        xmax = cms.double(199.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterSymmEtaCC = cms.PSet(
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1),
        xmin = cms.double(-0.1)
    ),
    TH1ClusterWidth = cms.PSet(
        Nbinx = cms.int32(20),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(19.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterWidthCC = cms.PSet(
        Nbinx = cms.int32(10),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClustersOff = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(14999.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClustersOn = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(1999.5),
        xmin = cms.double(-0.5)
    ),
    TProfileClusterPGV = cms.PSet(
        Nbinx = cms.int32(20),
        Nbiny = cms.int32(20),
        xmax = cms.double(10.0),
        xmin = cms.double(-10.0),
        ymax = cms.double(1.2),
        ymin = cms.double(-0.1)
    ),
    TkHistoMap_On = cms.bool(True),
    TopFolderName = cms.string('SiStrip'),
    TrackLabel = cms.string(''),
    TrackProducer = cms.string('generalTracks'),
    TrajectoryInEvent = cms.bool(True),
    Trend_On = cms.bool(False),
    Trending = cms.PSet(
        Nbins = cms.int32(2400),
        xmax = cms.double(150),
        xmin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True),
    andOr = cms.bool(False),
    andOrHlt = cms.bool(True),
    clchCMoriginTkHmap_On = cms.bool(False),
    dbLabel = cms.string('SiStripDQMTrigger'),
    errorReplyHlt = cms.bool(False),
    hltDBKey = cms.string('Tracker_MB'),
    hltInputTag = cms.InputTag("TriggerResults","","HLT"),
    hltPaths = cms.vstring('HLT_ZeroBias_*')
)


process.SiStripMonitorTrack_hi = cms.EDAnalyzer("SiStripMonitorTrack",
    AlgoName = cms.string('GenTk'),
    ClusterConditions = cms.PSet(
        On = cms.bool(False),
        maxStoN = cms.double(2000.0),
        maxWidth = cms.double(200.0),
        minStoN = cms.double(0.0),
        minWidth = cms.double(0.0)
    ),
    Cluster_src = cms.InputTag("siStripClusters"),
    HistoFlag_On = cms.bool(False),
    Mod_On = cms.bool(False),
    ModulesToBeExcluded = cms.vuint32(),
    OffHisto_On = cms.bool(True),
    RawDigiLabel = cms.string('VirginRaw'),
    RawDigiProducer = cms.string('simSiStripDigis'),
    RawDigis_On = cms.bool(False),
    TH1ClusterCharge = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(999.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterChargeCorr = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(399.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterChargePerCM = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(False),
        ringView = cms.bool(True),
        xmax = cms.double(9999.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterEstimatorCC = cms.PSet(
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1),
        xmin = cms.double(-0.1)
    ),
    TH1ClusterNoise = cms.PSet(
        Nbinx = cms.int32(20),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoN = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(299.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNCorr = cms.PSet(
        Nbinx = cms.int32(100),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(99.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterStoNCorrMod = cms.PSet(
        Nbinx = cms.int32(50),
        xmax = cms.double(199.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterSymmEtaCC = cms.PSet(
        Nbinx = cms.int32(120),
        xmax = cms.double(1.1),
        xmin = cms.double(-0.1)
    ),
    TH1ClusterWidth = cms.PSet(
        Nbinx = cms.int32(20),
        layerView = cms.bool(True),
        ringView = cms.bool(False),
        xmax = cms.double(19.5),
        xmin = cms.double(-0.5)
    ),
    TH1ClusterWidthCC = cms.PSet(
        Nbinx = cms.int32(10),
        xmax = cms.double(9.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClustersOff = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(14999.5),
        xmin = cms.double(-0.5)
    ),
    TH1nClustersOn = cms.PSet(
        Nbinx = cms.int32(100),
        xmax = cms.double(1999.5),
        xmin = cms.double(-0.5)
    ),
    TProfileClusterPGV = cms.PSet(
        Nbinx = cms.int32(20),
        Nbiny = cms.int32(20),
        xmax = cms.double(10.0),
        xmin = cms.double(-10.0),
        ymax = cms.double(1.2),
        ymin = cms.double(-0.1)
    ),
    TkHistoMap_On = cms.bool(True),
    TopFolderName = cms.string('SiStrip'),
    TrackLabel = cms.string(''),
    TrackProducer = cms.string('hiGeneralTracks'),
    TrajectoryInEvent = cms.bool(True),
    Trend_On = cms.bool(False),
    Trending = cms.PSet(
        Nbins = cms.int32(2400),
        xmax = cms.double(150),
        xmin = cms.double(0.0)
    ),
    UseDCSFiltering = cms.bool(True),
    clchCMoriginTkHmap_On = cms.bool(False)
)


process.SingleTopSingleElectronHLTOfflineDQM = cms.EDAnalyzer("TopSingleLeptonHLTOfflineDQM",
    preselection = cms.PSet(
        trigger = cms.PSet(
            select = cms.vstring('HLT_Ele23_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele23_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v', 
                'HLT_Ele27_WPLoose_Gsf_WHbbBoost_v', 
                'HLT_Ele27_WPLoose_Gsf_v', 
                'HLT_Ele27_WPLoose_Gsf_CentralPFJet30_BTagCSV07_vHLT_Ele27_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_TriCentralPFJet30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_TriCentralPFJet30_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        ),
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('Hlt:step0'),
        max = cms.int32(0),
        min = cms.int32(0),
        select = cms.string(''),
        src = cms.InputTag("")
    ), 
        cms.PSet(
            label = cms.string('elecs:step1'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('pt>30 & abs(eta)<2.5 & (dr03TkSumPt+dr04EcalRecHitSumEt+dr04HcalTowerSumEt)/pt<0.1'),
            src = cms.InputTag("gedGsfElectrons")
        ), 
        cms.PSet(
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>40 & abs(eta)<5.0'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('HLT/TopHLTOffline/SingleTop/SingleElectron/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(dr03TkSumPt+dr04EcalRecHitSumEt+dr04HcalTowerSumEt)/pt<0.1'),
            select = cms.string('pt>30 & abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.679)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("jetProbabilityBJetTags"),
                    workingPoint = cms.double(0.275)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.41)
                )
            ),
            select = cms.string('pt>40 & abs(eta)<5.0')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        ),
        triggerExtras = cms.PSet(
            paths = cms.vstring('HLT_Ele23_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele23_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v', 
                'HLT_Ele27_WPLoose_Gsf_WHbbBoost_v', 
                'HLT_Ele27_WPLoose_Gsf_v', 
                'HLT_Ele27_WPLoose_Gsf_CentralPFJet30_BTagCSV07_vHLT_Ele27_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_TriCentralPFJet30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_TriCentralPFJet30_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        )
    )
)


process.SingleTopSingleMuonHLTOfflineDQM = cms.EDAnalyzer("TopSingleLeptonHLTOfflineDQM",
    preselection = cms.PSet(
        trigger = cms.PSet(
            select = cms.vstring('HLT_IsoMu18_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu18_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu22_v', 
                'HLT_IsoMu18_v', 
                'HLT_IsoMu22_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu22_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu20_eta2p1_TriCentralPFJet30_v', 
                'HLT_IsoMu20_eta2p1_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu20_eta2p1_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu20_eta2p1_v', 
                'HLT_IsoMu24_eta2p1_TriCentralPFJet30_v', 
                'HLT_IsoMu24_eta2p1_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu24_eta2p1_CentralPFJet30_BTagCSV07_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        ),
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('Hlt:step0'),
        max = cms.int32(0),
        min = cms.int32(0),
        select = cms.string(''),
        src = cms.InputTag("")
    ), 
        cms.PSet(
            label = cms.string('muons:step1'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('pt>26 & abs(eta)<2.1 & isPFMuon & isGlobalMuon & globalTrack.normalizedChi2<10 & innerTrack.hitPattern.trackerLayersWithMeasurement>5 & innerTrack.hitPattern.numberOfValidPixelHits>0 & numberOfMatches>1 & (pfIsolationR04.sumChargedHadronPt+pfIsolationR04.sumPhotonEt+pfIsolationR04.sumNeutralHadronEt)/pt<0.12'),
            src = cms.InputTag("muons")
        ), 
        cms.PSet(
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>40 & abs(eta)<5.0'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('HLT/TopHLTOffline/SingleTop/SingleMuon/'),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.679)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("jetProbabilityBJetTags"),
                    workingPoint = cms.double(0.275)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.41)
                )
            ),
            select = cms.string('pt>40 & abs(eta)<5.0')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(pfIsolationR04.sumChargedHadronPt+pfIsolationR04.sumPhotonEt+pfIsolationR04.sumNeutralHadronEt)/pt<0.2'),
            select = cms.string('pt>26 & abs(eta)<2.1 & isPFMuon & isGlobalMuon & globalTrack.normalizedChi2<10 & innerTrack.hitPattern.trackerLayersWithMeasurement>5 & innerTrack.hitPattern.numberOfValidPixelHits>0 & numberOfMatches>1')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        ),
        triggerExtras = cms.PSet(
            paths = cms.vstring('HLT_IsoMu18_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu18_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu22_v', 
                'HLT_IsoMu18_v', 
                'HLT_IsoMu22_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu22_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu20_eta2p1_TriCentralPFJet30_v', 
                'HLT_IsoMu20_eta2p1_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu20_eta2p1_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu20_eta2p1_v', 
                'HLT_IsoMu24_eta2p1_TriCentralPFJet30_v', 
                'HLT_IsoMu24_eta2p1_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu24_eta2p1_CentralPFJet30_BTagCSV07_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        )
    )
)


process.TightMuonEfficiencyAnalyzer = cms.EDAnalyzer("EfficiencyAnalyzer",
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ID = cms.string('Tight'),
    MuonCollection = cms.InputTag("muons"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackCollection = cms.InputTag("generalTracks"),
    VertexLabel = cms.InputTag("offlinePrimaryVertices"),
    doPrimaryVertexCheck = cms.bool(True),
    etaBin = cms.int32(8),
    etaMax = cms.double(2.5),
    etaMin = cms.double(-2.5),
    phiBin = cms.int32(8),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(10),
    ptMax = cms.double(100),
    ptMin = cms.double(10),
    vtxBin = cms.int32(10),
    vtxMax = cms.double(40.5),
    vtxMin = cms.double(0.5)
)


process.TrackEffClient = cms.EDAnalyzer("TrackEfficiencyClient",
    AlgoName = cms.string('CTF'),
    FolderName = cms.string('Track/Efficiencies'),
    effCompatibleLayersBin = cms.int32(10),
    effCompatibleLayersMax = cms.double(30),
    effCompatibleLayersMin = cms.double(0),
    effD0Bin = cms.int32(50),
    effD0Max = cms.double(100),
    effD0Min = cms.double(-100),
    effEtaBin = cms.int32(50),
    effEtaMax = cms.double(3.2),
    effEtaMin = cms.double(-3.2),
    effPhiBin = cms.int32(50),
    effPhiMax = cms.double(0.0),
    effPhiMin = cms.double(-3.2),
    effXBin = cms.int32(50),
    effXMax = cms.double(100),
    effXMin = cms.double(-100),
    effYBin = cms.int32(50),
    effYMax = cms.double(100),
    effYMin = cms.double(-100),
    effZBin = cms.int32(50),
    effZMax = cms.double(500),
    effZMin = cms.double(-500),
    trackEfficiency = cms.bool(True)
)


process.TrackMon_hi = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('HeavyIonTk') ),
        ("BSFolderName" , cms.string('Tracking/TrackParameters/BeamSpotParameters') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(100) ),
        ("Chi2NDFMax" , cms.double(49.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('Tracking/TrackParameters') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("hiPixelTrackSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("hiPrimTrackCandidates") ),
        ("TCSizeBin" , cms.int32(150) ),
        ("TCSizeMax" , cms.double(149.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(150) ),
        ("TkSeedSizeMax" , cms.double(149.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(600) ),
        ("TkSizeMax" , cms.double(1799.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("hiGeneralTracks") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("generalTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(True) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(False) ),
        ("doHIPlots" , cms.bool(True) ),
        ("doHitPropertiesPlots" , cms.bool(False) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doLumiAnalysis" , cms.bool(True) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(False) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(True) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
    ] +
    [
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("hiSelectedVertex") ),
        ("primaryVertexInputTags" , cms.VInputTag() ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring() ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag() ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.bphysicsOniaDQM = cms.EDAnalyzer("BPhysicsOniaDQM",
    MuonCollection = cms.InputTag("muons"),
    lumiSummary = cms.InputTag("lumiProducer"),
    vertex = cms.InputTag("offlinePrimaryVertices")
)


process.bphysicsOniaDQMHI = cms.EDAnalyzer("BPhysicsOniaDQM",
    MuonCollection = cms.InputTag("muons"),
    lumiSummary = cms.InputTag("lumiProducer"),
    vertex = cms.InputTag("hiSelectedVertex")
)


process.bxTiming = cms.EDAnalyzer("BxTiming",
    DQMStore = cms.untracked.bool(True),
    FedSource = cms.untracked.InputTag("rawDataCollector"),
    GtBitList = cms.untracked.vint32(0, 1),
    GtSource = cms.untracked.InputTag("gtDigis"),
    HistFile = cms.untracked.string(''),
    HistFolder = cms.untracked.string('L1T/BXSynch'),
    ReferenceFedId = cms.untracked.int32(1024),
    RunInFilterFarm = cms.untracked.bool(False),
    VerboseFlag = cms.untracked.int32(0)
)


process.caloMetDQMAnalyzer = cms.EDAnalyzer("METAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(False),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
    ),
    DCSFilter = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf'),
        Filter = cms.untracked.bool(True)
    ),
    FolderName = cms.untracked.string('JetMET/MET/'),
    HBHENoiseFilterResultLabel = cms.InputTag("HBHENoiseFilterResultProducer","HBHENoiseFilterResult"),
    HcalNoiseRBXCollection = cms.InputTag("hcalnoise"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    JetCollectionLabel = cms.InputTag("ak4CaloJets"),
    JetCorrections = cms.InputTag("dqmAk4PFL1FastL2L3ResidualCorrector"),
    LSBegin = cms.int32(0),
    LSEnd = cms.int32(-1),
    METCollectionLabel = cms.InputTag("caloMet"),
    METDiagonisticsParameters = cms.VPSet(cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(-2.7),
        etaNBins = cms.int32(108),
        nMax = cms.int32(7500),
        nMin = cms.int32(0),
        name = cms.string('h'),
        nbins = cms.double(250),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(160),
        type = cms.int32(1)
    ), 
        cms.PSet(
            etaMax = cms.double(1.392),
            etaMin = cms.double(-1.392),
            etaNBins = cms.int32(32),
            nMax = cms.int32(250),
            nMin = cms.int32(0),
            name = cms.string('h0Barrel'),
            nbins = cms.double(250),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(72),
            type = cms.int32(5)
        ), 
        cms.PSet(
            etaMax = cms.double(-1.392),
            etaMin = cms.double(-3.0),
            etaNBins = cms.int32(12),
            nMax = cms.int32(250),
            nMin = cms.int32(0),
            name = cms.string('h0Endcap'),
            nbins = cms.double(250),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(5)
        ), 
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(-1.479),
            etaNBins = cms.int32(170),
            nMax = cms.int32(2500),
            nMin = cms.int32(0),
            name = cms.string('gammaBarrel'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(360),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(-1.479),
            etaMin = cms.double(-3.0),
            etaNBins = cms.int32(20),
            nMax = cms.int32(750),
            nMin = cms.int32(0),
            name = cms.string('gammaEndcap'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(30),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(-3.0),
            etaMin = cms.double(-5.0),
            etaNBins = cms.int32(20),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('gammaForward'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(30),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(-2.7),
            etaNBins = cms.int32(27),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('e'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(40),
            type = cms.int32(2)
        ), 
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(-2.7),
            etaNBins = cms.int32(27),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('mu'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(40),
            type = cms.int32(3)
        ), 
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            etaNBins = cms.int32(11),
            nMax = cms.int32(1250),
            nMin = cms.int32(0),
            name = cms.string('hHF'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(6)
        ), 
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            etaNBins = cms.int32(11),
            nMax = cms.int32(1250),
            nMin = cms.int32(0),
            name = cms.string('egammaHF'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(7)
        )),
    METType = cms.untracked.string('calo'),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCandidateMaps = cms.bool(False),
    fillMetHighLevel = cms.bool(True),
    hcalMin = cms.double(1.0),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    muonsrc = cms.InputTag("muons"),
    onlyCleaned = cms.untracked.bool(True),
    pVBin = cms.int32(100),
    pVMax = cms.double(100.0),
    pVMin = cms.double(0.0),
    ptMinCand = cms.double(1.0),
    ptThreshold = cms.double(30),
    runcosmics = cms.untracked.bool(False),
    srcPFlow = cms.InputTag("particleFlow"),
    triggerSelectedSubFolders = cms.VPSet(cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_PFJet400_v*'),
        label = cms.string('highPtJet')
    ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(True),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_PFJet80_v*'),
            label = cms.string('lowPtJet')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_ZeroBias_v*'),
            label = cms.string('zeroBias')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_MET400_v*'),
            label = cms.string('highMET')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_IsoMu24_eta2p1_v*', 
                'HLT_IsoMu24_v*'),
            label = cms.string('singleMu')
        )),
    verbose = cms.int32(0)
)


process.cscMonitor = cms.EDAnalyzer("CSCOfflineMonitor",
    FEDRawDataCollectionTag = cms.InputTag("rawDataRepacker"),
    alctDigiTag = cms.InputTag("muonCSCDigis","MuonCSCALCTDigi"),
    clctDigiTag = cms.InputTag("muonCSCDigis","MuonCSCCLCTDigi"),
    cscRecHitTag = cms.InputTag("csc2DRecHits"),
    cscSegTag = cms.InputTag("cscSegments"),
    outputFileName = cms.string('test.root'),
    saveHistos = cms.bool(False),
    stripDigiTag = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
    wireDigiTag = cms.InputTag("muonCSCDigis","MuonCSCWireDigi")
)


process.diMuonHistos = cms.EDAnalyzer("DiMuonHistograms",
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    HighMassMax = cms.double(125.0),
    HighMassMin = cms.double(55.0),
    LowMassMax = cms.double(14.0),
    LowMassMin = cms.double(2.0),
    MuonCollection = cms.InputTag("muons"),
    VertexLabel = cms.InputTag("offlinePrimaryVertices"),
    etaBBin = cms.int32(70),
    etaBBinLM = cms.int32(12),
    etaBMax = cms.double(1.1),
    etaBMin = cms.double(0.0),
    etaBin = cms.int32(70),
    etaBinLM = cms.int32(12),
    etaEBin = cms.int32(70),
    etaEBinLM = cms.int32(12),
    etaECMax = cms.double(2.4),
    etaECMin = cms.double(0.9)
)


process.dqmCSCClient = cms.EDAnalyzer("CSCMonitorModule",
    BOOKING_XML_FILE = cms.FileInPath('DQM/CSCMonitorModule/data/emuDQMBooking.xml'),
    EventProcessor = cms.untracked.PSet(
        BINCHECKER_CRC_ALCT = cms.untracked.bool(True),
        BINCHECKER_CRC_CFEB = cms.untracked.bool(True),
        BINCHECKER_CRC_CLCT = cms.untracked.bool(True),
        BINCHECKER_MODE_DDU = cms.untracked.bool(False),
        BINCHECKER_OUTPUT = cms.untracked.bool(False),
        BINCHECK_MASK = cms.untracked.uint32(384563190),
        DDU_BINCHECK_MASK = cms.untracked.uint32(384563190),
        DDU_CHECK_MASK = cms.untracked.uint32(4294959103),
        EFF_COLD_SIGFAIL = cms.untracked.double(2.0),
        EFF_COLD_THRESHOLD = cms.untracked.double(0.1),
        EFF_ERR_SIGFAIL = cms.untracked.double(5.0),
        EFF_ERR_THRESHOLD = cms.untracked.double(0.1),
        EFF_HOT_SIGFAIL = cms.untracked.double(5.0),
        EFF_HOT_THRESHOLD = cms.untracked.double(2.0),
        EFF_NODATA_SIGFAIL = cms.untracked.double(5.0),
        EFF_NODATA_THRESHOLD = cms.untracked.double(0.99),
        EVENTS_ECHO = cms.untracked.uint32(1000),
        FOLDER_CSC = cms.untracked.string('CSC/CSC/'),
        FOLDER_DDU = cms.untracked.string('CSC/DDU/'),
        FOLDER_EMU = cms.untracked.string('CSC/Summary/'),
        FOLDER_FED = cms.untracked.string('CSC/FED/'),
        FOLDER_PAR = cms.untracked.string('CSC/EventInfo/reportSummaryContents/'),
        FRAEFF_AUTO_UPDATE = cms.untracked.bool(False),
        FRAEFF_AUTO_UPDATE_FREQ = cms.untracked.uint32(200),
        FRAEFF_AUTO_UPDATE_START = cms.untracked.uint32(5),
        FRAEFF_SEPARATE_THREAD = cms.untracked.bool(False),
        MO_FILTER = cms.untracked.vstring('+/^.*$/', 
            '-/All_Readout_Errors/', 
            '-/^DMB_.*$/', 
            '-/DDU_[0-9]+/', 
            '-/CSC_[0-9]+_[0-9]+/'),
        PROCESS_CSC = cms.untracked.bool(True),
        PROCESS_DDU = cms.untracked.bool(True),
        PROCESS_EFF_HISTOS = cms.untracked.bool(False),
        PROCESS_EFF_PARAMETERS = cms.untracked.bool(False)
    ),
    InputObjects = cms.untracked.InputTag("rawDataRepacker"),
    PREBOOK_EFF_PARAMS = cms.untracked.bool(False)
)


process.dqmDcsInfo = cms.EDAnalyzer("DQMDcsInfo",
    dcsInfoFolder = cms.untracked.string('DcsInfo'),
    subSystemFolder = cms.untracked.string('Info')
)


process.dqmElectronAnalysis = cms.EDAnalyzer("ElectronAnalyzer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    DeltaR = cms.double(0.3),
    DetaMatchMax = cms.double(0.05),
    DetaMatchMin = cms.double(-0.05),
    DetaMax = cms.double(0.005),
    DetaMin = cms.double(-0.005),
    DphiMatchMax = cms.double(0.2),
    DphiMatchMin = cms.double(-0.2),
    DphiMax = cms.double(0.01),
    DphiMin = cms.double(-0.01),
    ElectronCollection = cms.InputTag("gedGsfElectrons"),
    EopMax = cms.double(5.0),
    EopMaxSht = cms.double(3.0),
    EtaMax = cms.double(2.5),
    EtaMin = cms.double(-2.5),
    FhitsMax = cms.double(30.0),
    FinalStep = cms.string('AtJobEnd'),
    GsfTrackCollection = cms.InputTag("electronGsfTracks"),
    HoeMax = cms.double(0.5),
    HoeMin = cms.double(0.0),
    InputFile = cms.string(''),
    InputFolderName = cms.string('Egamma/Electrons'),
    LhitsMax = cms.double(10.0),
    MatchingCondition = cms.string('Cone'),
    MatchingObjectCollection = cms.InputTag("mergedSuperClusters"),
    MaxAbsEta = cms.double(2.5),
    MaxAbsEtaMatchingObject = cms.double(2.5),
    MaxDetaBarrel = cms.double(10000.0),
    MaxDetaEndcaps = cms.double(10000.0),
    MaxDphiBarrel = cms.double(10000.0),
    MaxDphiEndcaps = cms.double(10000.0),
    MaxEcalIso03Barrel = cms.double(10000.0),
    MaxEcalIso03Endcaps = cms.double(10000.0),
    MaxEopBarrel = cms.double(10000.0),
    MaxEopEndcaps = cms.double(10000.0),
    MaxHcalIso03Depth1Barrel = cms.double(10000.0),
    MaxHcalIso03Depth1Endcaps = cms.double(10000.0),
    MaxHcalIso03Depth2Endcaps = cms.double(10000.0),
    MaxHoeBarrel = cms.double(10000.0),
    MaxHoeEndcaps = cms.double(10000.0),
    MaxPtMatchingObject = cms.double(100.0),
    MaxSigIetaIetaBarrel = cms.double(10000.0),
    MaxSigIetaIetaEndcaps = cms.double(10000.0),
    MaxTipBarrel = cms.double(10000.0),
    MaxTipEndcaps = cms.double(10000.0),
    MaxTkIso03 = cms.double(1.0),
    MeeMax = cms.double(150.0),
    MeeMin = cms.double(0.0),
    MinDetaBarrel = cms.double(0.0),
    MinDetaEndcaps = cms.double(0.0),
    MinDphiBarrel = cms.double(0.0),
    MinDphiEndcaps = cms.double(0.0),
    MinEopBarrel = cms.double(0.0),
    MinEopEndcaps = cms.double(0.0),
    MinEt = cms.double(10.0),
    MinMva = cms.double(-10000.0),
    MinPt = cms.double(0.0),
    MinSigIetaIetaBarrel = cms.double(0.0),
    MinSigIetaIetaEndcaps = cms.double(0.0),
    NbinDeta = cms.int32(100),
    NbinDetaMatch = cms.int32(100),
    NbinDetaMatch2D = cms.int32(50),
    NbinDphi = cms.int32(100),
    NbinDphiMatch = cms.int32(100),
    NbinDphiMatch2D = cms.int32(50),
    NbinEop = cms.int32(50),
    NbinEop2D = cms.int32(30),
    NbinEta = cms.int32(50),
    NbinEta2D = cms.int32(50),
    NbinFhits = cms.int32(30),
    NbinHoe = cms.int32(100),
    NbinLhits = cms.int32(5),
    NbinMee = cms.int32(100),
    NbinP = cms.int32(50),
    NbinP2D = cms.int32(50),
    NbinPhi = cms.int32(64),
    NbinPhi2D = cms.int32(32),
    NbinPopTrue = cms.int32(75),
    NbinPt = cms.int32(50),
    NbinPt2D = cms.int32(50),
    NbinPtEff = cms.int32(19),
    NbinXyz = cms.int32(50),
    NbinXyz2D = cms.int32(25),
    OutputFile = cms.string(''),
    OutputFolderName = cms.string('Egamma/Electrons'),
    PMax = cms.double(300.0),
    PhiMax = cms.double(3.2),
    PhiMin = cms.double(-3.2),
    PopTrueMax = cms.double(1.5),
    PopTrueMin = cms.double(0.0),
    PtMax = cms.double(100.0),
    ReadAOD = cms.bool(False),
    SelectEb = cms.bool(False),
    SelectEcalDriven = cms.bool(False),
    SelectEe = cms.bool(False),
    SelectNotEbEeGap = cms.bool(False),
    SelectTrackerDriven = cms.bool(False),
    Selection = cms.int32(1),
    TrackCollection = cms.InputTag("generalTracks"),
    TriggerResults = cms.InputTag("TriggerResults","","HLT"),
    Verbosity = cms.untracked.int32(0),
    VertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.dqmElectronAnalysisAllElectrons = cms.EDAnalyzer("ElectronAnalyzer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    DeltaR = cms.double(0.3),
    DetaMatchMax = cms.double(0.05),
    DetaMatchMin = cms.double(-0.05),
    DetaMax = cms.double(0.005),
    DetaMin = cms.double(-0.005),
    DphiMatchMax = cms.double(0.2),
    DphiMatchMin = cms.double(-0.2),
    DphiMax = cms.double(0.01),
    DphiMin = cms.double(-0.01),
    ElectronCollection = cms.InputTag("gedGsfElectronsTmp"),
    EopMax = cms.double(5.0),
    EopMaxSht = cms.double(3.0),
    EtaMax = cms.double(2.5),
    EtaMin = cms.double(-2.5),
    FhitsMax = cms.double(30.0),
    FinalStep = cms.string('AtJobEnd'),
    GsfTrackCollection = cms.InputTag("electronGsfTracks"),
    HoeMax = cms.double(0.5),
    HoeMin = cms.double(0.0),
    InputFile = cms.string(''),
    InputFolderName = cms.string('Egamma/Electrons'),
    LhitsMax = cms.double(10.0),
    MatchingCondition = cms.string('Cone'),
    MatchingObjectCollection = cms.InputTag("mergedSuperClusters"),
    MaxAbsEta = cms.double(2.5),
    MaxAbsEtaMatchingObject = cms.double(2.5),
    MaxDetaBarrel = cms.double(10000.0),
    MaxDetaEndcaps = cms.double(10000.0),
    MaxDphiBarrel = cms.double(10000.0),
    MaxDphiEndcaps = cms.double(10000.0),
    MaxEcalIso03Barrel = cms.double(10000.0),
    MaxEcalIso03Endcaps = cms.double(10000.0),
    MaxEopBarrel = cms.double(10000.0),
    MaxEopEndcaps = cms.double(10000.0),
    MaxHcalIso03Depth1Barrel = cms.double(10000.0),
    MaxHcalIso03Depth1Endcaps = cms.double(10000.0),
    MaxHcalIso03Depth2Endcaps = cms.double(10000.0),
    MaxHoeBarrel = cms.double(10000.0),
    MaxHoeEndcaps = cms.double(10000.0),
    MaxPtMatchingObject = cms.double(100.0),
    MaxSigIetaIetaBarrel = cms.double(10000.0),
    MaxSigIetaIetaEndcaps = cms.double(10000.0),
    MaxTipBarrel = cms.double(10000.0),
    MaxTipEndcaps = cms.double(10000.0),
    MaxTkIso03 = cms.double(1.0),
    MeeMax = cms.double(150.0),
    MeeMin = cms.double(0.0),
    MinDetaBarrel = cms.double(0.0),
    MinDetaEndcaps = cms.double(0.0),
    MinDphiBarrel = cms.double(0.0),
    MinDphiEndcaps = cms.double(0.0),
    MinEopBarrel = cms.double(0.0),
    MinEopEndcaps = cms.double(0.0),
    MinEt = cms.double(10.0),
    MinMva = cms.double(-10000.0),
    MinPt = cms.double(0.0),
    MinSigIetaIetaBarrel = cms.double(0.0),
    MinSigIetaIetaEndcaps = cms.double(0.0),
    NbinDeta = cms.int32(100),
    NbinDetaMatch = cms.int32(100),
    NbinDetaMatch2D = cms.int32(50),
    NbinDphi = cms.int32(100),
    NbinDphiMatch = cms.int32(100),
    NbinDphiMatch2D = cms.int32(50),
    NbinEop = cms.int32(50),
    NbinEop2D = cms.int32(30),
    NbinEta = cms.int32(50),
    NbinEta2D = cms.int32(50),
    NbinFhits = cms.int32(30),
    NbinHoe = cms.int32(100),
    NbinLhits = cms.int32(5),
    NbinMee = cms.int32(100),
    NbinP = cms.int32(50),
    NbinP2D = cms.int32(50),
    NbinPhi = cms.int32(64),
    NbinPhi2D = cms.int32(32),
    NbinPopTrue = cms.int32(75),
    NbinPt = cms.int32(50),
    NbinPt2D = cms.int32(50),
    NbinPtEff = cms.int32(19),
    NbinXyz = cms.int32(50),
    NbinXyz2D = cms.int32(25),
    OutputFile = cms.string(''),
    OutputFolderName = cms.string('Egamma/Electrons/Ele2_All'),
    PMax = cms.double(300.0),
    PhiMax = cms.double(3.2),
    PhiMin = cms.double(-3.2),
    PopTrueMax = cms.double(1.5),
    PopTrueMin = cms.double(0.0),
    PtMax = cms.double(100.0),
    ReadAOD = cms.bool(False),
    SelectEb = cms.bool(False),
    SelectEcalDriven = cms.bool(False),
    SelectEe = cms.bool(False),
    SelectNotEbEeGap = cms.bool(False),
    SelectTrackerDriven = cms.bool(False),
    Selection = cms.int32(0),
    TrackCollection = cms.InputTag("generalTracks"),
    TriggerResults = cms.InputTag("TriggerResults","","HLT"),
    Verbosity = cms.untracked.int32(0),
    VertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.dqmElectronAnalysisSelectionEt = cms.EDAnalyzer("ElectronAnalyzer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    DeltaR = cms.double(0.3),
    DetaMatchMax = cms.double(0.05),
    DetaMatchMin = cms.double(-0.05),
    DetaMax = cms.double(0.005),
    DetaMin = cms.double(-0.005),
    DphiMatchMax = cms.double(0.2),
    DphiMatchMin = cms.double(-0.2),
    DphiMax = cms.double(0.01),
    DphiMin = cms.double(-0.01),
    ElectronCollection = cms.InputTag("gedGsfElectronsTmp"),
    EopMax = cms.double(5.0),
    EopMaxSht = cms.double(3.0),
    EtaMax = cms.double(2.5),
    EtaMin = cms.double(-2.5),
    FhitsMax = cms.double(30.0),
    FinalStep = cms.string('AtJobEnd'),
    GsfTrackCollection = cms.InputTag("electronGsfTracks"),
    HoeMax = cms.double(0.5),
    HoeMin = cms.double(0.0),
    InputFile = cms.string(''),
    InputFolderName = cms.string('Egamma/Electrons'),
    LhitsMax = cms.double(10.0),
    MatchingCondition = cms.string('Cone'),
    MatchingObjectCollection = cms.InputTag("mergedSuperClusters"),
    MaxAbsEta = cms.double(2.5),
    MaxAbsEtaMatchingObject = cms.double(2.5),
    MaxDetaBarrel = cms.double(10000.0),
    MaxDetaEndcaps = cms.double(10000.0),
    MaxDphiBarrel = cms.double(10000.0),
    MaxDphiEndcaps = cms.double(10000.0),
    MaxEcalIso03Barrel = cms.double(10000.0),
    MaxEcalIso03Endcaps = cms.double(10000.0),
    MaxEopBarrel = cms.double(10000.0),
    MaxEopEndcaps = cms.double(10000.0),
    MaxHcalIso03Depth1Barrel = cms.double(10000.0),
    MaxHcalIso03Depth1Endcaps = cms.double(10000.0),
    MaxHcalIso03Depth2Endcaps = cms.double(10000.0),
    MaxHoeBarrel = cms.double(10000.0),
    MaxHoeEndcaps = cms.double(10000.0),
    MaxPtMatchingObject = cms.double(100.0),
    MaxSigIetaIetaBarrel = cms.double(10000.0),
    MaxSigIetaIetaEndcaps = cms.double(10000.0),
    MaxTipBarrel = cms.double(10000.0),
    MaxTipEndcaps = cms.double(10000.0),
    MaxTkIso03 = cms.double(1.0),
    MeeMax = cms.double(150.0),
    MeeMin = cms.double(0.0),
    MinDetaBarrel = cms.double(0.0),
    MinDetaEndcaps = cms.double(0.0),
    MinDphiBarrel = cms.double(0.0),
    MinDphiEndcaps = cms.double(0.0),
    MinEopBarrel = cms.double(0.0),
    MinEopEndcaps = cms.double(0.0),
    MinEt = cms.double(10.0),
    MinMva = cms.double(-10000.0),
    MinPt = cms.double(0.0),
    MinSigIetaIetaBarrel = cms.double(0.0),
    MinSigIetaIetaEndcaps = cms.double(0.0),
    NbinDeta = cms.int32(100),
    NbinDetaMatch = cms.int32(100),
    NbinDetaMatch2D = cms.int32(50),
    NbinDphi = cms.int32(100),
    NbinDphiMatch = cms.int32(100),
    NbinDphiMatch2D = cms.int32(50),
    NbinEop = cms.int32(50),
    NbinEop2D = cms.int32(30),
    NbinEta = cms.int32(50),
    NbinEta2D = cms.int32(50),
    NbinFhits = cms.int32(30),
    NbinHoe = cms.int32(100),
    NbinLhits = cms.int32(5),
    NbinMee = cms.int32(100),
    NbinP = cms.int32(50),
    NbinP2D = cms.int32(50),
    NbinPhi = cms.int32(64),
    NbinPhi2D = cms.int32(32),
    NbinPopTrue = cms.int32(75),
    NbinPt = cms.int32(50),
    NbinPt2D = cms.int32(50),
    NbinPtEff = cms.int32(19),
    NbinXyz = cms.int32(50),
    NbinXyz2D = cms.int32(25),
    OutputFile = cms.string(''),
    OutputFolderName = cms.string('Egamma/Electrons/Ele3_Et10'),
    PMax = cms.double(300.0),
    PhiMax = cms.double(3.2),
    PhiMin = cms.double(-3.2),
    PopTrueMax = cms.double(1.5),
    PopTrueMin = cms.double(0.0),
    PtMax = cms.double(100.0),
    ReadAOD = cms.bool(False),
    SelectEb = cms.bool(False),
    SelectEcalDriven = cms.bool(False),
    SelectEe = cms.bool(False),
    SelectNotEbEeGap = cms.bool(False),
    SelectTrackerDriven = cms.bool(False),
    Selection = cms.int32(1),
    TrackCollection = cms.InputTag("generalTracks"),
    TriggerResults = cms.InputTag("TriggerResults","","HLT"),
    Verbosity = cms.untracked.int32(0),
    VertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.dqmElectronAnalysisSelectionEtIso = cms.EDAnalyzer("ElectronAnalyzer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    DeltaR = cms.double(0.3),
    DetaMatchMax = cms.double(0.05),
    DetaMatchMin = cms.double(-0.05),
    DetaMax = cms.double(0.005),
    DetaMin = cms.double(-0.005),
    DphiMatchMax = cms.double(0.2),
    DphiMatchMin = cms.double(-0.2),
    DphiMax = cms.double(0.01),
    DphiMin = cms.double(-0.01),
    ElectronCollection = cms.InputTag("gedGsfElectronsTmp"),
    EopMax = cms.double(5.0),
    EopMaxSht = cms.double(3.0),
    EtaMax = cms.double(2.5),
    EtaMin = cms.double(-2.5),
    FhitsMax = cms.double(30.0),
    FinalStep = cms.string('AtJobEnd'),
    GsfTrackCollection = cms.InputTag("electronGsfTracks"),
    HoeMax = cms.double(0.5),
    HoeMin = cms.double(0.0),
    InputFile = cms.string(''),
    InputFolderName = cms.string('Egamma/Electrons'),
    LhitsMax = cms.double(10.0),
    MatchingCondition = cms.string('Cone'),
    MatchingObjectCollection = cms.InputTag("mergedSuperClusters"),
    MaxAbsEta = cms.double(2.5),
    MaxAbsEtaMatchingObject = cms.double(2.5),
    MaxDetaBarrel = cms.double(10000.0),
    MaxDetaEndcaps = cms.double(10000.0),
    MaxDphiBarrel = cms.double(10000.0),
    MaxDphiEndcaps = cms.double(10000.0),
    MaxEcalIso03Barrel = cms.double(10000.0),
    MaxEcalIso03Endcaps = cms.double(10000.0),
    MaxEopBarrel = cms.double(10000.0),
    MaxEopEndcaps = cms.double(10000.0),
    MaxHcalIso03Depth1Barrel = cms.double(10000.0),
    MaxHcalIso03Depth1Endcaps = cms.double(10000.0),
    MaxHcalIso03Depth2Endcaps = cms.double(10000.0),
    MaxHoeBarrel = cms.double(10000.0),
    MaxHoeEndcaps = cms.double(10000.0),
    MaxPtMatchingObject = cms.double(100.0),
    MaxSigIetaIetaBarrel = cms.double(10000.0),
    MaxSigIetaIetaEndcaps = cms.double(10000.0),
    MaxTipBarrel = cms.double(10000.0),
    MaxTipEndcaps = cms.double(10000.0),
    MaxTkIso03 = cms.double(1.0),
    MeeMax = cms.double(150.0),
    MeeMin = cms.double(0.0),
    MinDetaBarrel = cms.double(0.0),
    MinDetaEndcaps = cms.double(0.0),
    MinDphiBarrel = cms.double(0.0),
    MinDphiEndcaps = cms.double(0.0),
    MinEopBarrel = cms.double(0.0),
    MinEopEndcaps = cms.double(0.0),
    MinEt = cms.double(10.0),
    MinMva = cms.double(-10000.0),
    MinPt = cms.double(0.0),
    MinSigIetaIetaBarrel = cms.double(0.0),
    MinSigIetaIetaEndcaps = cms.double(0.0),
    NbinDeta = cms.int32(100),
    NbinDetaMatch = cms.int32(100),
    NbinDetaMatch2D = cms.int32(50),
    NbinDphi = cms.int32(100),
    NbinDphiMatch = cms.int32(100),
    NbinDphiMatch2D = cms.int32(50),
    NbinEop = cms.int32(50),
    NbinEop2D = cms.int32(30),
    NbinEta = cms.int32(50),
    NbinEta2D = cms.int32(50),
    NbinFhits = cms.int32(30),
    NbinHoe = cms.int32(100),
    NbinLhits = cms.int32(5),
    NbinMee = cms.int32(100),
    NbinP = cms.int32(50),
    NbinP2D = cms.int32(50),
    NbinPhi = cms.int32(64),
    NbinPhi2D = cms.int32(32),
    NbinPopTrue = cms.int32(75),
    NbinPt = cms.int32(50),
    NbinPt2D = cms.int32(50),
    NbinPtEff = cms.int32(19),
    NbinXyz = cms.int32(50),
    NbinXyz2D = cms.int32(25),
    OutputFile = cms.string(''),
    OutputFolderName = cms.string('Egamma/Electrons/Ele4_Et10TkIso1'),
    PMax = cms.double(300.0),
    PhiMax = cms.double(3.2),
    PhiMin = cms.double(-3.2),
    PopTrueMax = cms.double(1.5),
    PopTrueMin = cms.double(0.0),
    PtMax = cms.double(100.0),
    ReadAOD = cms.bool(False),
    SelectEb = cms.bool(False),
    SelectEcalDriven = cms.bool(False),
    SelectEe = cms.bool(False),
    SelectNotEbEeGap = cms.bool(False),
    SelectTrackerDriven = cms.bool(False),
    Selection = cms.int32(2),
    TrackCollection = cms.InputTag("generalTracks"),
    TriggerResults = cms.InputTag("TriggerResults","","HLT"),
    Verbosity = cms.untracked.int32(0),
    VertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.dqmElectronGeneralAnalysis = cms.EDAnalyzer("ElectronGeneralAnalyzer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    ElectronCollection = cms.InputTag("gedGsfElectronsTmp"),
    FinalStep = cms.string('AtJobEnd'),
    GsfTrackCollection = cms.InputTag("electronGsfTracks"),
    InputFile = cms.string(''),
    InputFolderName = cms.string('Egamma/Electrons/General'),
    MatchingObjectCollection = cms.InputTag("mergedSuperClusters"),
    OutputFile = cms.string(''),
    OutputFolderName = cms.string('Egamma/Electrons/Ele1_General'),
    TrackCollection = cms.InputTag("hiGeneralTracks"),
    TriggerResults = cms.InputTag("TriggerResults","","HLT"),
    Verbosity = cms.untracked.int32(0),
    VertexCollection = cms.InputTag("hiSelectedVertex")
)


process.dqmElectronTagProbeAnalysis = cms.EDAnalyzer("ElectronTagProbeAnalyzer",
    BeamSpot = cms.InputTag("offlineBeamSpot"),
    DetaMatchMax = cms.double(0.05),
    DetaMatchMin = cms.double(-0.05),
    DetaMax = cms.double(0.005),
    DetaMin = cms.double(-0.005),
    DphiMatchMax = cms.double(0.2),
    DphiMatchMin = cms.double(-0.2),
    DphiMax = cms.double(0.01),
    DphiMin = cms.double(-0.01),
    ElectronCollection = cms.InputTag("gedGsfElectronsTmp"),
    EopMax = cms.double(5.0),
    EopMaxSht = cms.double(3.0),
    EtaMax = cms.double(2.5),
    EtaMin = cms.double(-2.5),
    FhitsMax = cms.double(30.0),
    FinalStep = cms.string('AtJobEnd'),
    GsfTrackCollection = cms.InputTag("electronGsfTracks"),
    HoeMax = cms.double(0.5),
    HoeMin = cms.double(0.0),
    InputFile = cms.string(''),
    InputFolderName = cms.string('Egamma/Electrons/TagAndProbe'),
    LhitsMax = cms.double(10.0),
    MassHigh = cms.double(120),
    MassLow = cms.double(60),
    MatchingObjectCollection = cms.InputTag("mergedSuperClusters"),
    MaxAbsEta = cms.double(2.5),
    MaxDetaBarrel = cms.double(10000.0),
    MaxDetaEndcaps = cms.double(10000.0),
    MaxDphiBarrel = cms.double(10000.0),
    MaxDphiEndcaps = cms.double(10000.0),
    MaxEcalIso03Barrel = cms.double(10000.0),
    MaxEcalIso03Endcaps = cms.double(10000.0),
    MaxEopBarrel = cms.double(10000.0),
    MaxEopEndcaps = cms.double(10000.0),
    MaxHcalIso03Depth1Barrel = cms.double(10000.0),
    MaxHcalIso03Depth1Endcaps = cms.double(10000.0),
    MaxHcalIso03Depth2Endcaps = cms.double(10000.0),
    MaxHoeBarrel = cms.double(10000.0),
    MaxHoeEndcaps = cms.double(10000.0),
    MaxSigIetaIetaBarrel = cms.double(10000.0),
    MaxSigIetaIetaEndcaps = cms.double(10000.0),
    MaxTipBarrel = cms.double(10000.0),
    MaxTipEndcaps = cms.double(10000.0),
    MaxTkIso03 = cms.double(1.0),
    MeeMax = cms.double(150.0),
    MeeMin = cms.double(0.0),
    MinDetaBarrel = cms.double(0.0),
    MinDetaEndcaps = cms.double(0.0),
    MinDphiBarrel = cms.double(0.0),
    MinDphiEndcaps = cms.double(0.0),
    MinEopBarrel = cms.double(0.0),
    MinEopEndcaps = cms.double(0.0),
    MinEt = cms.double(10.0),
    MinMva = cms.double(-10000.0),
    MinPt = cms.double(0.0),
    MinSigIetaIetaBarrel = cms.double(0.0),
    MinSigIetaIetaEndcaps = cms.double(0.0),
    NbinDeta = cms.int32(100),
    NbinDetaMatch = cms.int32(100),
    NbinDetaMatch2D = cms.int32(50),
    NbinDphi = cms.int32(100),
    NbinDphiMatch = cms.int32(100),
    NbinDphiMatch2D = cms.int32(50),
    NbinEop = cms.int32(50),
    NbinEop2D = cms.int32(30),
    NbinEta = cms.int32(50),
    NbinEta2D = cms.int32(50),
    NbinFhits = cms.int32(30),
    NbinHoe = cms.int32(100),
    NbinLhits = cms.int32(5),
    NbinMee = cms.int32(100),
    NbinP = cms.int32(50),
    NbinP2D = cms.int32(50),
    NbinPhi = cms.int32(64),
    NbinPhi2D = cms.int32(32),
    NbinPopTrue = cms.int32(75),
    NbinPt = cms.int32(50),
    NbinPt2D = cms.int32(50),
    NbinPtEff = cms.int32(19),
    NbinXyz = cms.int32(50),
    NbinXyz2D = cms.int32(25),
    OutputFile = cms.string(''),
    OutputFolderName = cms.string('Egamma/Electrons/Ele5_TagAndProbe'),
    PMax = cms.double(300.0),
    PhiMax = cms.double(3.2),
    PhiMin = cms.double(-3.2),
    PopTrueMax = cms.double(1.5),
    PopTrueMin = cms.double(0.0),
    ProbeCheckClass = cms.bool(False),
    ProbeEtCut = cms.bool(False),
    PtMax = cms.double(100.0),
    ReadAOD = cms.bool(False),
    SelectEb = cms.bool(False),
    SelectEcalDriven = cms.bool(False),
    SelectEe = cms.bool(False),
    SelectNotEbEeGap = cms.bool(False),
    SelectTrackerDriven = cms.bool(False),
    Selection = cms.int32(3),
    TagCheckClass = cms.bool(False),
    TpCheckSign = cms.bool(True),
    TrackCollection = cms.InputTag("generalTracks"),
    TriggerResults = cms.InputTag("TriggerResults","","HLT"),
    Verbosity = cms.untracked.int32(0),
    VertexCollection = cms.InputTag("")
)


process.dqmEnvHLT = cms.EDAnalyzer("DQMEventInfo",
    eventInfoFolder = cms.untracked.string('EventInfo'),
    eventRateWindow = cms.untracked.double(0.5),
    subSystemFolder = cms.untracked.string('HLT')
)


process.dqmEnvL1T = cms.EDAnalyzer("DQMEventInfo",
    eventInfoFolder = cms.untracked.string('EventInfo'),
    eventRateWindow = cms.untracked.double(0.5),
    subSystemFolder = cms.untracked.string('L1T')
)


process.dqmEnvL1TEMU = cms.EDAnalyzer("DQMEventInfo",
    eventInfoFolder = cms.untracked.string('EventInfo'),
    eventRateWindow = cms.untracked.double(0.5),
    subSystemFolder = cms.untracked.string('L1TEMU')
)


process.dqmEnvL1TriggerReco = cms.EDAnalyzer("DQMEventInfo",
    eventInfoFolder = cms.untracked.string('EventInfo'),
    eventRateWindow = cms.untracked.double(0.5),
    subSystemFolder = cms.untracked.string('L1T/L1TriggerVsReco')
)


process.dqmInfo = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('Pixel')
)


process.dqmInfoDT = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('DT')
)


process.dqmInfoES = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('EcalPreshower')
)


process.dqmInfoEcal = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('Ecal')
)


process.dqmInfoHLTMon = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('HLT')
)


process.dqmInfoHcal = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('Hcal')
)


process.dqmInfoMuons = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('Muons')
)


process.dqmInfoSiStrip = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('SiStrip')
)


process.dtAlcaResolutionMonitor = cms.EDAnalyzer("DTResolutionAnalysisTask",
    ResetCycle = cms.untracked.int32(10000),
    phiHitsCut = cms.untracked.uint32(6),
    recHits4DLabel = cms.string('dt4DSegments'),
    topHistoFolder = cms.untracked.string('AlCaReco/DtCalibSynch/01-Calibration'),
    zHitsCut = cms.untracked.uint32(3)
)


process.dtAlcaResolutionMonitorCosmics = cms.EDAnalyzer("DTResolutionAnalysisTask",
    ResetCycle = cms.untracked.int32(10000),
    phiHitsCut = cms.untracked.uint32(6),
    recHits4DLabel = cms.string('dt4DSegments'),
    topHistoFolder = cms.untracked.string('AlCaReco/DtCalibSynchCosmics/01-Calibration'),
    zHitsCut = cms.untracked.uint32(3)
)


process.dtDCSByLumiMonitor = cms.EDAnalyzer("DTDCSByLumiTask")


process.dtEfficiencyMonitor = cms.EDAnalyzer("DTChamberEfficiency",
    NavigationType = cms.string('Standard'),
    RPCLayers = cms.bool(False),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackCollection = cms.InputTag("standAloneSETMuons"),
    cscSegments = cms.InputTag("dummy"),
    debug = cms.untracked.bool(True),
    dt4DSegments = cms.InputTag("dt4DSegments"),
    theMaxChi2 = cms.double(1000.0),
    theMinNrec = cms.double(20.0),
    theNSigma = cms.double(3.0),
    theRPCRecHits = cms.InputTag("dummy")
)


process.dtPreCalibTask = cms.EDAnalyzer("DTPreCalibrationTask",
    SaveFile = cms.untracked.bool(True),
    digiLabel = cms.untracked.string('muonDTDigis'),
    folderName = cms.untracked.string(''),
    maxTriggerWidth = cms.untracked.int32(1600),
    minTriggerWidth = cms.untracked.int32(0),
    outputFileName = cms.untracked.string('DigiHistos.root')
)


process.dtPreCalibrationTaskAlca = cms.EDAnalyzer("DTPreCalibrationTask",
    SaveFile = cms.untracked.bool(False),
    digiLabel = cms.untracked.string('muonDTDigis'),
    folderName = cms.untracked.string('AlCaReco/DtCalibSynch/01-Calibration'),
    maxTriggerWidth = cms.untracked.int32(1600),
    minTriggerWidth = cms.untracked.int32(0),
    outputFileName = cms.untracked.string('DigiHistos.root')
)


process.dtPreCalibrationTaskAlcaCosmics = cms.EDAnalyzer("DTPreCalibrationTask",
    SaveFile = cms.untracked.bool(False),
    digiLabel = cms.untracked.string('muonDTDigis'),
    folderName = cms.untracked.string('AlCaReco/DtCalibSynchCosmics/01-Calibration'),
    maxTriggerWidth = cms.untracked.int32(1600),
    minTriggerWidth = cms.untracked.int32(0),
    outputFileName = cms.untracked.string('DigiHistos.root')
)


process.dtResolutionAnalysisMonitor = cms.EDAnalyzer("DTResolutionAnalysisTask",
    ResetCycle = cms.untracked.int32(10000),
    phiHitsCut = cms.untracked.uint32(6),
    recHits4DLabel = cms.string('dt4DSegments'),
    topHistoFolder = cms.untracked.string('DT/02-Segments'),
    zHitsCut = cms.untracked.uint32(3)
)


process.dtRunConditionVar = cms.EDAnalyzer("DTRunConditionVar",
    debug = cms.untracked.bool(False),
    maxAnglePhiSegm = cms.untracked.double(30.0),
    nMinHitsPhi = cms.untracked.int32(5),
    recoSegments = cms.InputTag("dt4DSegments")
)


process.dtSegmentAnalysisMonitor = cms.EDAnalyzer("DTSegmentAnalysisTask",
    checkNoisyChannels = cms.untracked.bool(True),
    debug = cms.untracked.bool(False),
    detailedAnalysis = cms.untracked.bool(True),
    hltDQMMode = cms.untracked.bool(False),
    nLSTimeBin = cms.untracked.int32(5),
    nTimeBins = cms.untracked.int32(100),
    nhitsCut = cms.untracked.int32(11),
    phiSegmCut = cms.untracked.double(30.0),
    recHits4DLabel = cms.string('dt4DSegments'),
    slideTimeBins = cms.untracked.bool(False),
    topHistoFolder = cms.untracked.string('DT/02-Segments')
)


process.dtSegmentsMonitor = cms.EDAnalyzer("DTSegmentsTask",
    checkNoisyChannels = cms.untracked.bool(False),
    debug = cms.untracked.bool(False),
    recHits4DLabel = cms.string('dt4DSegments')
)


process.dtTriggerEfficiencyMonitor = cms.EDAnalyzer("DTTriggerEfficiencyTask",
    SegmArbitration = cms.untracked.string('SegmentAndTrackArbitration'),
    detailedAnalysis = cms.untracked.bool(False),
    inputTagDCC = cms.untracked.InputTag("dttfDigis"),
    inputTagDDU = cms.untracked.InputTag("muonDTDigis"),
    inputTagGMT = cms.untracked.InputTag("gtDigis"),
    inputTagMuons = cms.untracked.InputTag("muons"),
    inputTagSEG = cms.untracked.InputTag("dt4DSegments"),
    maxBXDDU = cms.untracked.int32(15),
    minBXDDU = cms.untracked.int32(7),
    nMinHitsPhi = cms.untracked.int32(5),
    phiAccRange = cms.untracked.double(30.0),
    processDCC = cms.untracked.bool(True),
    processDDU = cms.untracked.bool(True)
)


process.dtTriggerSynchMonitor = cms.EDAnalyzer("DTLocalTriggerSynchTask",
    DCCInputTag = cms.InputTag("dttfDigis"),
    DDUInputTag = cms.InputTag("muonDTDigis"),
    SEGInputTag = cms.InputTag("dt4DSegmentsNoWire"),
    angleRange = cms.double(30.0),
    baseDir = cms.string('AlCaReco/DtCalibSynch/02-Synchronization'),
    bxTimeInterval = cms.double(25),
    minHitsPhi = cms.int32(7),
    nBXHigh = cms.int32(3),
    nBXLow = cms.int32(-2),
    rangeWithinBX = cms.bool(False),
    staticBooking = cms.untracked.bool(True),
    tTrigMode = cms.string('DTTTrigSyncFromDB'),
    tTrigModeConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doT0Correction = cms.bool(False),
        doTOFCorrection = cms.bool(False),
        doWirePropCorrection = cms.bool(False),
        tTrigLabel = cms.string(''),
        tofCorrType = cms.int32(0),
        vPropWire = cms.double(24.4),
        wirePropCorrType = cms.int32(0)
    )
)


process.ecalFEDMonitor = cms.EDAnalyzer("EcalFEDMonitor",
    EBDetIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EBDetIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EBDetIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EEDetIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EEDetIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EEDetIdCollection3 = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EcalElectronicsIdCollection1 = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    EcalElectronicsIdCollection2 = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    FEDRawDataCollection = cms.InputTag("rawDataRepacker"),
    folderName = cms.untracked.string('FEDIntegrity')
)


process.ecalMonitorTask = cms.EDAnalyzer("EcalDQMonitorTask",
    allowMissingCollections = cms.untracked.bool(True),
    collectionTags = cms.untracked.PSet(
        BlockSizeErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
        EBBasicCluster = cms.untracked.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
        EBChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
        EBDigi = cms.untracked.InputTag("ecalDigis","ebDigis"),
        EBGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainErrors"),
        EBGainSwitchErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
        EBLaserLedUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
        EBRecHit = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEB"),
        EBReducedRecHit = cms.untracked.InputTag("reducedEcalRecHitsEB"),
        EBSrFlag = cms.untracked.InputTag("ecalDigis"),
        EBSuperCluster = cms.untracked.InputTag("correctedIslandBarrelSuperClusters"),
        EBTestPulseUncalibRecHit = cms.untracked.InputTag("ecalTestPulseUncalibRecHit","EcalUncalibRecHitsEB"),
        EBUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
        EEBasicCluster = cms.untracked.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
        EEChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
        EEDigi = cms.untracked.InputTag("ecalDigis","eeDigis"),
        EEGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainErrors"),
        EEGainSwitchErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
        EELaserLedUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
        EERecHit = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEE"),
        EEReducedRecHit = cms.untracked.InputTag("reducedEcalRecHitsEE"),
        EESrFlag = cms.untracked.InputTag("ecalDigis"),
        EESuperCluster = cms.untracked.InputTag("correctedIslandEndcapSuperClusters"),
        EETestPulseUncalibRecHit = cms.untracked.InputTag("ecalTestPulseUncalibRecHit","EcalUncalibRecHitsEE"),
        EEUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
        EcalRawData = cms.untracked.InputTag("ecalDigis"),
        MEMBlockSizeErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemBlockSizeErrors"),
        MEMChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemChIdErrors"),
        MEMGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemGainErrors"),
        MEMTowerIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemTtIdErrors"),
        PnDiodeDigi = cms.untracked.InputTag("ecalDigis"),
        Source = cms.untracked.InputTag("rawDataCollector"),
        TowerIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
        TrigPrimDigi = cms.untracked.InputTag("ecalDigis","EcalTriggerPrimitives"),
        TrigPrimEmulDigi = cms.untracked.InputTag("valEcalTriggerPrimitiveDigis")
    ),
    commonParameters = cms.untracked.PSet(
        onlineMode = cms.untracked.bool(False),
        willConvertToEDM = cms.untracked.bool(True)
    ),
    moduleName = cms.untracked.string('Ecal Monitor Source'),
    resetInterval = cms.untracked.double(2.0),
    verbosity = cms.untracked.int32(0),
    workerParameters = cms.untracked.PSet(
        ClusterTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                BCE = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Basic cluster energy distribution.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                BCEMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('2D distribution of the mean energy of the basic clusters.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy map%(suffix)s'),
                    zaxis = cms.untracked.PSet(
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                BCEMapProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the mean energy of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy projection eta%(suffix)s'),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                BCEMapProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the mean energy of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy projection phi%(suffix)s'),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                BCEtMapProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the mean Et of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC ET projection eta%(suffix)s'),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('transverse energy (GeV)')
                    )
                ),
                BCEtMapProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the mean Et of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC ET projection phi%(suffix)s'),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('transverse energy (GeV)')
                    )
                ),
                BCNum = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the number of basic clusters per event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(20)
                    )
                ),
                BCOccupancy = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Basic cluster occupancy.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number map%(suffix)s')
                ),
                BCOccupancyProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the basic cluster occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number projection eta%(suffix)s')
                ),
                BCOccupancyProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the basic cluster occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number projection phi%(suffix)s')
                ),
                BCSize = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the basic cluster size (number of crystals).'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50)
                    )
                ),
                BCSizeMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('2D distribution of the mean size (number of crystals) of the basic clusters.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size map%(suffix)s')
                ),
                BCSizeMapProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the mean size (number of crystals) of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size projection eta%(suffix)s')
                ),
                BCSizeMapProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the mean size (number of crystals) of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size projection phi%(suffix)s')
                ),
                ExclusiveTriggers = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Counter for the trigger categories'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('None'),
                    path = cms.untracked.string('EcalBarrel/EBClusterTaskExtras/EBCLTE exclusive triggers'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(5.0),
                        labels = cms.untracked.vstring('ECAL', 
                            'HCAL', 
                            'CSC', 
                            'DT', 
                            'RPC'),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(5),
                        title = cms.untracked.string('triggers')
                    )
                ),
                SCClusterVsSeed = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Relation between super cluster energy and its seed crystal energy.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy vs seed crystal energy'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    ),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                SCE = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Super cluster energy distribution.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                SCELow = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Energy distribution of the super clusters (low scale).'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy (low scale)'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(10.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                SCNBCs = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the super cluster size (number of basic clusters)'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC size'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(15.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(15)
                    )
                ),
                SCNcrystals = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the super cluster size (number of crystals).'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC size (crystal)'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50)
                    )
                ),
                SCNum = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the number of super clusters per event in EB/EE.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC number'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(20.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(20)
                    )
                ),
                SCOccupancyProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Supercluster eta.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/superClusters_%(subdetshortsig)s_eta')
                ),
                SCOccupancyProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Supercluster phi.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/superClusters_%(subdetshortsig)s_phi')
                ),
                SCR9 = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of E_seed / E_3x3 of the super clusters.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC R9'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(1.2),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50)
                    )
                ),
                SCSeedEnergy = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Energy distribution of the crystals that seeded super clusters.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC seed crystal energy'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(150.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(50),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                SCSeedOccupancy = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC seed occupancy map%(suffix)s')
                ),
                SCSeedOccupancyHighE = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters with energy > 2.0 GeV.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed occupancy map%(suffix)s (high energy clusters) %(supercrystal)s binned')
                ),
                SCSeedOccupancyTrig = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters.'),
                    kind = cms.untracked.string('TH2F'),
                    multi = cms.untracked.PSet(
                        trig = cms.untracked.vstring('ECAL', 
                            'HCAL', 
                            'CSC', 
                            'DT', 
                            'RPC')
                    ),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed occupancy map%(suffix)s (%(trig)s triggered) %(supercrystal)s binned')
                ),
                SCSeedTimeMapTrigEx = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Mean timing of the crystals that seeded super clusters.'),
                    kind = cms.untracked.string('TProfile2D'),
                    multi = cms.untracked.PSet(
                        trig = cms.untracked.vstring('ECAL', 
                            'HCAL', 
                            'CSC', 
                            'DT', 
                            'RPC')
                    ),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed crystal timing map%(suffix)s (%(trig)s exclusive triggered) %(supercrystal)s binned'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(25.0),
                        low = cms.untracked.double(-25.0),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                SCSeedTimeTrigEx = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Timing distribution of the crystals that seeded super clusters.'),
                    kind = cms.untracked.string('TH1F'),
                    multi = cms.untracked.PSet(
                        trig = cms.untracked.vstring('ECAL', 
                            'HCAL', 
                            'CSC', 
                            'DT', 
                            'RPC')
                    ),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed crystal timing (%(trig)s exclusive triggered)'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(25.0),
                        low = cms.untracked.double(-25.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                SCSizeVsEnergy = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Mean SC size in crystals as a function of the SC energy.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC size (crystal) vs energy (GeV)'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(10.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                SCSwissCross = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Swiss cross for SC maximum-energy crystal.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('EB'),
                    path = cms.untracked.string('EcalBarrel/EBRecoSummary/superClusters_EB_E1oE4'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(1.5),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100)
                    )
                ),
                SingleCrystalCluster = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Occupancy map of the occurrence of super clusters with only one constituent'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC single crystal cluster seed occupancy map%(suffix)s')
                ),
                TrendBCSize = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the mean size of the basic clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s size of basic clusters')
                ),
                TrendNBC = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the number of basic clusters per event in EB/EE.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s number of basic clusters')
                ),
                TrendNSC = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the number of super clusters per event in EB/EE.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s number of super clusters')
                ),
                TrendSCSize = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the mean size (number of crystals) of the super clusters.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s size of super clusters')
                ),
                Triggers = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Counter for the trigger categories'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('None'),
                    path = cms.untracked.string('EcalBarrel/EBClusterTaskExtras/EBCLTE triggers'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(5.0),
                        labels = cms.untracked.vstring('ECAL', 
                            'HCAL', 
                            'CSC', 
                            'DT', 
                            'RPC'),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(5),
                        title = cms.untracked.string('triggers')
                    )
                )
            ),
            params = cms.untracked.PSet(
                L1GlobalTriggerReadoutRecordTag = cms.untracked.InputTag("gtDigis"),
                L1MuGMTReadoutCollectionTag = cms.untracked.InputTag("gtDigis"),
                doExtra = cms.untracked.bool(True),
                egTriggerAlgos = cms.untracked.vstring('L1_SingleEG2', 
                    'L1_SingleEG5', 
                    'L1_SingleEG8', 
                    'L1_SingleEG10', 
                    'L1_SingleEG12', 
                    'L1_SingleEG15', 
                    'L1_SingleEG20', 
                    'L1_SingleEG25', 
                    'L1_DoubleNoIsoEG_BTB_tight', 
                    'L1_DoubleNoIsoEG_BTB_loose', 
                    'L1_DoubleNoIsoEGTopBottom', 
                    'L1_DoubleNoIsoEGTopBottomCen', 
                    'L1_DoubleNoIsoEGTopBottomCen2', 
                    'L1_DoubleNoIsoEGTopBottomCenVert'),
                energyThreshold = cms.untracked.double(2.0),
                swissCrossMaxThreshold = cms.untracked.double(3.0)
            )
        ),
        EnergyTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                Hit = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Rec hit energy distribution.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT energy spectrum %(sm)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(20.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                HitAll = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Rec hit energy distribution.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit spectrum%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(20.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                HitMap = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('2D distribution of the mean rec hit energy.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit energy %(sm)s'),
                    zaxis = cms.untracked.PSet(
                        title = cms.untracked.string('energy (GeV)')
                    )
                ),
                HitMapAll = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('2D distribution of the mean rec hit energy.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT%(suffix)s energy summary'),
                    zaxis = cms.untracked.PSet(
                        title = cms.untracked.string('energy (GeV)')
                    )
                )
            ),
            params = cms.untracked.PSet(
                isPhysicsRun = cms.untracked.bool(True)
            )
        ),
        IntegrityTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                BlockSize = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/TTBlockSize/%(prefix)sIT TTBlockSize %(sm)s')
                ),
                ByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Total number of integrity errors for each FED in this lumi section.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/%(prefix)sIT weighted integrity errors by lumi'),
                    perLumi = cms.untracked.bool(True)
                ),
                ChId = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/ChId/%(prefix)sIT ChId %(sm)s')
                ),
                Gain = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/Gain/%(prefix)sIT gain %(sm)s')
                ),
                GainSwitch = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/GainSwitch/%(prefix)sIT gain switch %(sm)s')
                ),
                Total = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Total number of integrity errors for each FED.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sIT integrity quality errors summary')
                ),
                TowerId = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/TTId/%(prefix)sIT TTId %(sm)s')
                ),
                TrendNErrors = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the number of integrity errors.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal'),
                    path = cms.untracked.string('Ecal/Trends/IntegrityTask number of integrity errors')
                )
            )
        ),
        OccupancyTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                DCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of entries recoreded by each FED'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT DCC entries')
                ),
                Digi = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('Digi occupancy.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy %(sm)s')
                ),
                Digi1D = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the number of digis per event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT number of digis in event'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(3000.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100)
                    )
                ),
                DigiAll = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Digi occupancy.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s')
                ),
                DigiDCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('DCC digi occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT digi occupancy summary 1D')
                ),
                DigiProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of digi occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s projection eta')
                ),
                DigiProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of digi occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s projection phi')
                ),
                RecHitAll = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('Rec hit occupancy.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s')
                ),
                RecHitProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the occupancy of all rec hits.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s projection eta')
                ),
                RecHitProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the rec hit occupancy.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s projection phi')
                ),
                RecHitThr1D = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT number of filtered rec hits in event'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(500.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100)
                    )
                ),
                RecHitThrAll = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Occupancy for rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s')
                ),
                RecHitThrProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s projection eta')
                ),
                RecHitThrProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s projection phi')
                ),
                TPDigiRCT = cms.untracked.PSet(
                    btype = cms.untracked.string('RCT'),
                    description = cms.untracked.string('Occupancy for TP digis with Et > 4.0 GeV in RCT coordinates'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal'),
                    path = cms.untracked.string('EcalBarrel/EBOccupancyTask/TP digi thr occupancy in RCT coordinates')
                ),
                TPDigiThrAll = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Occupancy for TP digis with Et > 4.0 GeV.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s')
                ),
                TPDigiThrProjEta = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjEta'),
                    description = cms.untracked.string('Projection of the occupancy of TP digis with Et > 4.0 GeV.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s projection eta')
                ),
                TPDigiThrProjPhi = cms.untracked.PSet(
                    btype = cms.untracked.string('ProjPhi'),
                    description = cms.untracked.string('Projection of the occupancy of TP digis with Et > 4.0 GeV.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s projection phi')
                ),
                TrendNDigi = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the per-event number of digis.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of digis')
                ),
                TrendNRecHitThr = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the per-event number of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of filtered recHits')
                ),
                TrendNTPDigi = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    description = cms.untracked.string('Trend of the per-event number of TP digis with Et > 4.0 GeV.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of filtered TP digis')
                )
            ),
            params = cms.untracked.PSet(
                recHitThreshold = cms.untracked.double(0.5),
                tpThreshold = cms.untracked.double(4.0)
            )
        ),
        PresampleTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                Pedestal = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('2D distribution of mean presample value.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sPedestalOnlineTask/Gain12/%(prefix)sPOT pedestal %(sm)s G12')
                )
            ),
            params = cms.untracked.PSet(
                nSamples = cms.untracked.int32(3),
                pulseMaxPosition = cms.untracked.int32(5)
            )
        ),
        RawDataTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                BXDCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between bunch crossing numbers recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing DCC errors')
                ),
                BXDCCDiff = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between bunch crossing numbers recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing DCC-GT'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(-100.0),
                        nbins = cms.untracked.int32(200)
                    )
                ),
                BXFE = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing FE errors'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(68.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(68),
                        title = cms.untracked.string('iFE')
                    )
                ),
                BXFEDiff = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing FE-DCC'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(-100.0),
                        nbins = cms.untracked.int32(200)
                    )
                ),
                BXFEInvalid = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing invalid value'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(69.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(69),
                        title = cms.untracked.string('iFE')
                    )
                ),
                BXSRP = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and SRP.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing SRP errors')
                ),
                BXTCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of bunch corssing value mismatches between DCC and TCC.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing TCC errors')
                ),
                CRC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of CRC errors.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT CRC errors')
                ),
                DesyncByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Total number of synchronization errors (L1A & BX mismatches) between DCC and FE in this lumi section.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT FE synchronization errors by lumi'),
                    perLumi = cms.untracked.bool(True)
                ),
                DesyncTotal = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Total number of synchronization errors (L1A & BX mismatches) between DCC and FE.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT total FE synchronization errors')
                ),
                EventTypeCalib = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing == 3490. This plot is filled using data from the physics data stream during physics runs. It is normal to have very few entries in these cases.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type calibration BX'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(24.5),
                        labels = cms.untracked.vstring('UNKNOWN', 
                            'COSMIC', 
                            'BEAMH4', 
                            'BEAMH2', 
                            'MTCC', 
                            'LASER_STD', 
                            'LASER_POWER_SCAN', 
                            'LASER_DELAY_SCAN', 
                            'TESTPULSE_SCAN_MEM', 
                            'TESTPULSE_MGPA', 
                            'PEDESTAL_STD', 
                            'PEDESTAL_OFFSET_SCAN', 
                            'PEDESTAL_25NS_SCAN', 
                            'LED_STD', 
                            'PHYSICS_GLOBAL', 
                            'COSMICS_GLOBAL', 
                            'HALO_GLOBAL', 
                            'LASER_GAP', 
                            'TESTPULSE_GAP', 
                            'PEDESTAL_GAP', 
                            'LED_GAP', 
                            'PHYSICS_LOCAL', 
                            'COSMICS_LOCAL', 
                            'HALO_LOCAL', 
                            'CALIB_LOCAL'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(25)
                    )
                ),
                EventTypePostCalib = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing > 3490.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type post calibration BX'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(24.5),
                        labels = cms.untracked.vstring('UNKNOWN', 
                            'COSMIC', 
                            'BEAMH4', 
                            'BEAMH2', 
                            'MTCC', 
                            'LASER_STD', 
                            'LASER_POWER_SCAN', 
                            'LASER_DELAY_SCAN', 
                            'TESTPULSE_SCAN_MEM', 
                            'TESTPULSE_MGPA', 
                            'PEDESTAL_STD', 
                            'PEDESTAL_OFFSET_SCAN', 
                            'PEDESTAL_25NS_SCAN', 
                            'LED_STD', 
                            'PHYSICS_GLOBAL', 
                            'COSMICS_GLOBAL', 
                            'HALO_GLOBAL', 
                            'LASER_GAP', 
                            'TESTPULSE_GAP', 
                            'PEDESTAL_GAP', 
                            'LED_GAP', 
                            'PHYSICS_LOCAL', 
                            'COSMICS_LOCAL', 
                            'HALO_LOCAL', 
                            'CALIB_LOCAL'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(25)
                    )
                ),
                EventTypePreCalib = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing < 3490'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type pre calibration BX'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(24.5),
                        labels = cms.untracked.vstring('UNKNOWN', 
                            'COSMIC', 
                            'BEAMH4', 
                            'BEAMH2', 
                            'MTCC', 
                            'LASER_STD', 
                            'LASER_POWER_SCAN', 
                            'LASER_DELAY_SCAN', 
                            'TESTPULSE_SCAN_MEM', 
                            'TESTPULSE_MGPA', 
                            'PEDESTAL_STD', 
                            'PEDESTAL_OFFSET_SCAN', 
                            'PEDESTAL_25NS_SCAN', 
                            'LED_STD', 
                            'PHYSICS_GLOBAL', 
                            'COSMICS_GLOBAL', 
                            'HALO_GLOBAL', 
                            'LASER_GAP', 
                            'TESTPULSE_GAP', 
                            'PEDESTAL_GAP', 
                            'LED_GAP', 
                            'PHYSICS_LOCAL', 
                            'COSMICS_LOCAL', 
                            'HALO_LOCAL', 
                            'CALIB_LOCAL'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(25)
                    )
                ),
                FEByLumi = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Total number of front-ends in error status in this lumi section.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT weighted frontend errors by lumi'),
                    perLumi = cms.untracked.bool(True)
                ),
                FEStatus = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('FE status counter.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT front-end status bits %(sm)s'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(15.5),
                        labels = cms.untracked.vstring('ENABLED', 
                            'DISABLED', 
                            'TIMEOUT', 
                            'HEADERERROR', 
                            'CHANNELID', 
                            'LINKERROR', 
                            'BLOCKSIZE', 
                            'SUPPRESSED', 
                            'FIFOFULL', 
                            'L1ADESYNC', 
                            'BXDESYNC', 
                            'L1ABXDESYNC', 
                            'FIFOFULLL1ADESYNC', 
                            'HPARITY', 
                            'VPARITY', 
                            'FORCEDZS'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(16)
                    )
                ),
                L1ADCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between L1A recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A DCC errors')
                ),
                L1AFE = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of L1A value mismatches between DCC and FE.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A FE errors'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(68.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(68),
                        title = cms.untracked.string('iFE')
                    )
                ),
                L1ASRP = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of L1A value mismatches between DCC and SRP.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A SRP errors')
                ),
                L1ATCC = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of L1A value mismatches between DCC and TCC.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A TCC errors')
                ),
                Orbit = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between LHC orbit numbers recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT orbit number errors')
                ),
                OrbitDiff = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between LHC orbit numbers recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT orbit number DCC-GT'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(-100.0),
                        nbins = cms.untracked.int32(200)
                    )
                ),
                RunNumber = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between run numbers recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT run number errors')
                ),
                TrendNSyncErrors = cms.untracked.PSet(
                    btype = cms.untracked.string('Trend'),
                    cumulative = cms.untracked.bool(True),
                    description = cms.untracked.string('Accumulated trend of the number of synchronization errors (L1A & BX mismatches) between DCC and FE in this run.'),
                    kind = cms.untracked.string('TH1F'),
                    online = cms.untracked.bool(True),
                    otype = cms.untracked.string('Ecal'),
                    path = cms.untracked.string('Ecal/Trends/RawDataTask accumulated number of sync errors')
                ),
                TriggerType = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Number of discrepancies between trigger type recorded in the DCC and that in CMS Event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT trigger type errors')
                )
            )
        ),
        RecoSummaryTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                Chi2 = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Chi2 of the pulse reconstruction.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_Chi2'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100)
                    )
                ),
                EnergyMax = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Maximum energy of the rechit.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_energyMax'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(100.0),
                        low = cms.untracked.double(-10.0),
                        nbins = cms.untracked.int32(110)
                    )
                ),
                RecoFlagAll = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Reconstruction flags from all rechits.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshort)s_recoFlag'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(15.5),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(16)
                    )
                ),
                RecoFlagBasicCluster = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Reconstruction flags from rechits in basic clusters.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/basicClusters_recHits_%(subdetshort)s_recoFlag'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(15.5),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(16)
                    )
                ),
                RecoFlagReduced = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Reconstruction flags from reduced rechits.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/redRecHits_%(subdetshort)s_recoFlag'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(15.5),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(16)
                    )
                ),
                SwissCross = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Swiss cross.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('EB'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshort)s_E1oE4'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(1.5),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100)
                    )
                ),
                Time = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Rechit time.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_time'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(50.0),
                        low = cms.untracked.double(-50.0),
                        nbins = cms.untracked.int32(100)
                    )
                )
            ),
            params = cms.untracked.PSet(
                rechitThresholdEB = cms.untracked.double(0.8),
                rechitThresholdEE = cms.untracked.double(1.2)
            )
        ),
        SelectiveReadoutTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                DCCSize = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Distribution of the per-DCC data size.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT event size vs DCC'),
                    yaxis = cms.untracked.PSet(
                        edges = cms.untracked.vdouble(0.0, 0.0608, 0.1216, 0.1824, 0.2432, 
                            0.304, 0.3648, 0.4256, 0.4864, 0.5472, 
                            0.608, 0.608, 1.216, 1.824, 2.432, 
                            3.04, 3.648, 4.256, 4.864, 5.472, 
                            6.08, 6.688, 7.296, 7.904, 8.512, 
                            9.12, 9.728, 10.336, 10.944, 11.552, 
                            12.16, 12.768, 13.376, 13.984, 14.592, 
                            15.2, 15.808, 16.416, 17.024, 17.632, 
                            18.24, 18.848, 19.456, 20.064, 20.672, 
                            21.28, 21.888, 22.496, 23.104, 23.712, 
                            24.32, 24.928, 25.536, 26.144, 26.752, 
                            27.36, 27.968, 28.576, 29.184, 29.792, 
                            30.4, 31.008, 31.616, 32.224, 32.832, 
                            33.44, 34.048, 34.656, 35.264, 35.872, 
                            36.48, 37.088, 37.696, 38.304, 38.912, 
                            39.52, 40.128, 40.736, 41.344),
                        title = cms.untracked.string('event size (kB)')
                    )
                ),
                DCCSizeProf = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Mean and spread of the per-DCC data size.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal2P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT DCC event size'),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('event size (kB)')
                    )
                ),
                EventSize = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of per-DCC data size.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT event size%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(3.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('event size (kB)')
                    )
                ),
                FRDropped = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Number of FR flagged but dropped towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT FR Flagged Dropped Readout Number%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(20.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(20),
                        title = cms.untracked.string('number of towers')
                    )
                ),
                FRDroppedMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Number of FR flagged but dropped towers.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT FR flagged dropped counter%(suffix)s')
                ),
                FlagCounterMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Tower occupancy of any SR flag.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower flag counter%(suffix)s')
                ),
                FullReadout = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Number of FR flags per event.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT full readout SR Flags Number%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(200.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('number of towers')
                    )
                ),
                FullReadoutMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Tower occupancy with FR flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower full readout counter%(suffix)s')
                ),
                HighIntOutput = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Output of the ZS filter for high interest towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT high interest ZS filter output%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(60.0),
                        low = cms.untracked.double(-60.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('ADC counts*4')
                    )
                ),
                HighIntPayload = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Total data size from all high interest towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT high interest payload%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(3.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('event size (kB)')
                    )
                ),
                LowIntOutput = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Output of the ZS filter for low interest towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT low interest ZS filter output%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(60.0),
                        low = cms.untracked.double(-60.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('ADC counts*4')
                    )
                ),
                LowIntPayload = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Total data size from all low interest towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT low interest payload%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(3.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('event size (kB)')
                    )
                ),
                RUForcedMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Tower occupancy of FORCED flag.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT RU with forced SR counter%(suffix)s')
                ),
                TowerSize = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('2D distribution of the mean data size from each readout unit.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT tower event size%(suffix)s'),
                    zaxis = cms.untracked.PSet(
                        title = cms.untracked.string('size (bytes)')
                    )
                ),
                ZS1Map = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Tower occupancy with ZS1 flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower ZS1 counter%(suffix)s')
                ),
                ZSFullReadout = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Number of ZS flagged but fully read out towers.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT ZS Flagged Fully Readout Number%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(20.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(20),
                        title = cms.untracked.string('number of towers')
                    )
                ),
                ZSFullReadoutMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Number of ZS flagged but fully read out towers.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT ZS flagged full readout counter%(suffix)s')
                ),
                ZSMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('Tower occupancy of ZS1 and ZS2 flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower ZS1+ZS2 counter%(suffix)s')
                )
            ),
            params = cms.untracked.PSet(
                DCCZS1stSample = cms.untracked.int32(2),
                ZSFIRWeights = cms.untracked.vdouble(-0.374, -0.374, -0.3629, 0.2721, 0.4681, 
                    0.3707),
                useCondDb = cms.untracked.bool(False)
            )
        ),
        TimingTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                Time1D = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing 1D %(sm)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(12.5),
                        low = cms.untracked.double(-12.5),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                TimeAll = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing 1D summary%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(12.5),
                        low = cms.untracked.double(-12.5),
                        nbins = cms.untracked.int32(100),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                TimeAllMap = cms.untracked.PSet(
                    btype = cms.untracked.string('SuperCrystal'),
                    description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 7.0 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing map%(suffix)s'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(7.0),
                        low = cms.untracked.double(-7.0),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                TimeAmp = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Correlation between hit timing and energy. Only hits with GOOD or OUT_OF_TIME reconstruction flags are used.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing vs amplitude %(sm)s'),
                    xaxis = cms.untracked.PSet(
                        edges = cms.untracked.vdouble(0.316227766017, 0.354813389234, 0.398107170553, 0.446683592151, 0.501187233627, 
                            0.56234132519, 0.63095734448, 0.707945784384, 0.794328234724, 0.891250938134, 
                            1.0, 1.1220184543, 1.25892541179, 1.41253754462, 1.58489319246, 
                            1.77827941004, 1.99526231497, 2.23872113857, 2.51188643151, 2.81838293126, 
                            3.16227766017, 3.54813389234, 3.98107170553, 4.46683592151, 5.01187233627, 
                            5.6234132519, 6.3095734448, 7.07945784384, 7.94328234724, 8.91250938134, 
                            10.0, 11.220184543, 12.5892541179, 14.1253754462, 15.8489319246, 
                            17.7827941004, 19.9526231497, 22.3872113857, 25.1188643151, 28.1838293126, 
                            31.6227766017, 35.4813389234, 39.8107170553, 44.6683592151, 50.1187233627, 
                            56.234132519, 63.095734448, 70.7945784384, 79.4328234724, 89.1250938134),
                        title = cms.untracked.string('energy (GeV)')
                    ),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(50.0),
                        low = cms.untracked.double(-50.0),
                        nbins = cms.untracked.int32(200),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                TimeAmpAll = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Correlation between hit timing and energy. Only hits with GOOD or OUT_OF_TIME reconstruction flags are used.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing vs amplitude summary%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        edges = cms.untracked.vdouble(0.316227766017, 0.354813389234, 0.398107170553, 0.446683592151, 0.501187233627, 
                            0.56234132519, 0.63095734448, 0.707945784384, 0.794328234724, 0.891250938134, 
                            1.0, 1.1220184543, 1.25892541179, 1.41253754462, 1.58489319246, 
                            1.77827941004, 1.99526231497, 2.23872113857, 2.51188643151, 2.81838293126, 
                            3.16227766017, 3.54813389234, 3.98107170553, 4.46683592151, 5.01187233627, 
                            5.6234132519, 6.3095734448, 7.07945784384, 7.94328234724, 8.91250938134, 
                            10.0, 11.220184543, 12.5892541179, 14.1253754462, 15.8489319246, 
                            17.7827941004, 19.9526231497, 22.3872113857, 25.1188643151, 28.1838293126, 
                            31.6227766017, 35.4813389234, 39.8107170553, 44.6683592151, 50.1187233627, 
                            56.234132519, 63.095734448, 70.7945784384, 79.4328234724, 89.1250938134),
                        title = cms.untracked.string('energy (GeV)')
                    ),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(50.0),
                        low = cms.untracked.double(-50.0),
                        nbins = cms.untracked.int32(200),
                        title = cms.untracked.string('time (ns)')
                    )
                ),
                TimeMap = cms.untracked.PSet(
                    btype = cms.untracked.string('Crystal'),
                    description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 12.5 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing %(sm)s'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(12.5),
                        low = cms.untracked.double(-12.5),
                        title = cms.untracked.string('time (ns)')
                    )
                )
            ),
            params = cms.untracked.PSet(
                energyThresholdEB = cms.untracked.double(1.0),
                energyThresholdEE = cms.untracked.double(3.0)
            )
        ),
        TrigPrimTask = cms.untracked.PSet(
            MEs = cms.untracked.PSet(
                EmulMaxIndex = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the index of emulated TP with the highest Et value.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT max TP matching index%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(5.5),
                        labels = cms.untracked.vstring('no maximum', 
                            '0', 
                            '1', 
                            '2', 
                            '3', 
                            '4'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(6),
                        title = cms.untracked.string('TP index')
                    )
                ),
                EtEmulError = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulError %(sm)s')
                ),
                EtMaxEmul = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the maximum Et value within one emulated TP'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/Emulated/%(prefix)sTTT Et spectrum Emulated Digis max%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(256.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(128),
                        title = cms.untracked.string('TP Et')
                    )
                ),
                EtReal = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Distribution of the trigger primitive Et.'),
                    kind = cms.untracked.string('TH1F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et spectrum Real Digis%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(256.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(128),
                        title = cms.untracked.string('TP Et')
                    )
                ),
                EtRealMap = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('2D distribution of the trigger primitive Et.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et map Real Digis %(sm)s'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(256.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(128),
                        title = cms.untracked.string('TP Et')
                    )
                ),
                EtSummary = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('2D distribution of the trigger primitive Et.'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sTTT%(suffix)s Et trigger tower summary'),
                    zaxis = cms.untracked.PSet(
                        high = cms.untracked.double(256.0),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(128),
                        title = cms.untracked.string('TP Et')
                    )
                ),
                EtVsBx = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('Mean TP Et in different bunch crossing intervals. This plot is filled by data from physics data stream. It is normal to have very little entries in BX >= 3490.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et vs bx Real Digis%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(16.0),
                        labels = cms.untracked.vstring('1', 
                            '271', 
                            '541', 
                            '892', 
                            '1162', 
                            '1432', 
                            '1783', 
                            '2053', 
                            '2323', 
                            '2674', 
                            '2944', 
                            '3214', 
                            '3446', 
                            '3490', 
                            '3491', 
                            '3565'),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(16),
                        title = cms.untracked.string('bunch crossing')
                    ),
                    yaxis = cms.untracked.PSet(
                        title = cms.untracked.string('TP Et')
                    )
                ),
                FGEmulError = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulFineGrainVetoError %(sm)s')
                ),
                HighIntMap = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Tower occupancy of high interest flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower high interest counter%(suffix)s')
                ),
                LowIntMap = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Tower occupancy of low interest flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower low interest counter%(suffix)s')
                ),
                MatchedIndex = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Counter for TP "timing" (= index withing the emulated TP whose Et matched that of the real TP)'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulMatch %(sm)s'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(6.0),
                        labels = cms.untracked.vstring('no emul', 
                            '0', 
                            '1', 
                            '2', 
                            '3', 
                            '4'),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(6),
                        title = cms.untracked.string('TP index')
                    )
                ),
                MedIntMap = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string('Tower occupancy of medium interest flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower med interest counter%(suffix)s')
                ),
                OccVsBx = cms.untracked.PSet(
                    btype = cms.untracked.string('User'),
                    description = cms.untracked.string('TP occupancy in different bunch crossing intervals. This plot is filled by data from physics data stream. It is normal to have very little entries in BX >= 3490.'),
                    kind = cms.untracked.string('TProfile'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT TP occupancy vs bx Real Digis%(suffix)s'),
                    xaxis = cms.untracked.PSet(
                        high = cms.untracked.double(16.0),
                        labels = cms.untracked.vstring('1', 
                            '271', 
                            '541', 
                            '892', 
                            '1162', 
                            '1432', 
                            '1783', 
                            '2053', 
                            '2323', 
                            '2674', 
                            '2944', 
                            '3214', 
                            '3446', 
                            '3490', 
                            '3491', 
                            '3565'),
                        low = cms.untracked.double(0.0),
                        nbins = cms.untracked.int32(16),
                        title = cms.untracked.string('bunch crossing')
                    )
                ),
                TTFMismatch = cms.untracked.PSet(
                    btype = cms.untracked.string('TriggerTower'),
                    description = cms.untracked.string(''),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT flag mismatch%(suffix)s')
                ),
                TTFlags = cms.untracked.PSet(
                    btype = cms.untracked.string('DCC'),
                    description = cms.untracked.string('Distribution of the trigger tower flags.'),
                    kind = cms.untracked.string('TH2F'),
                    otype = cms.untracked.string('Ecal3P'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT Flags%(suffix)s'),
                    yaxis = cms.untracked.PSet(
                        high = cms.untracked.double(7.5),
                        labels = cms.untracked.vstring('0', 
                            '1', 
                            '2', 
                            '3', 
                            '4', 
                            '5', 
                            '6', 
                            '7'),
                        low = cms.untracked.double(-0.5),
                        nbins = cms.untracked.int32(8),
                        title = cms.untracked.string('TT flag')
                    )
                ),
                TTMaskMap = cms.untracked.PSet(
                    btype = cms.untracked.string('PseudoStrip'),
                    description = cms.untracked.string('Trigger tower and pseudo-strip masking status: a TT or strip is red if it is masked'),
                    kind = cms.untracked.string('TProfile2D'),
                    otype = cms.untracked.string('SM'),
                    path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/TTStatus/%(prefix)sTTT TT Masking Status%(sm)s')
                )
            ),
            params = cms.untracked.PSet(
                runOnEmul = cms.untracked.bool(True)
            )
        )
    ),
    workers = cms.untracked.vstring('ClusterTask', 
        'EnergyTask', 
        'IntegrityTask', 
        'OccupancyTask', 
        'PresampleTask', 
        'RawDataTask', 
        'RecoSummaryTask', 
        'TrigPrimTask')
)


process.ecalPreshowerFEDIntegrityTask = cms.EDAnalyzer("ESFEDIntegrityTask",
    ESDCCCollections = cms.InputTag("ecalPreshowerDigis"),
    ESKChipCollections = cms.InputTag("ecalPreshowerDigis"),
    FEDDirName = cms.untracked.string('FEDIntegrity'),
    FEDRawDataCollection = cms.InputTag("rawDataRepacker"),
    OutputFile = cms.untracked.string(''),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.ecalPreshowerIntegrityTask = cms.EDAnalyzer("ESIntegrityTask",
    DoLumiAnalysis = cms.bool(True),
    ESDCCCollections = cms.InputTag("ecalPreshowerDigis"),
    ESKChipCollections = cms.InputTag("ecalPreshowerDigis"),
    LookupTable = cms.untracked.FileInPath('EventFilter/ESDigiToRaw/data/ES_lookup_table.dat'),
    OutputFile = cms.untracked.string(''),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.ecalPreshowerOccupancyTask = cms.EDAnalyzer("ESOccupancyTask",
    DigiLabel = cms.InputTag("ecalPreshowerDigis"),
    RecHitLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.ecalPreshowerRawDataTask = cms.EDAnalyzer("ESRawDataTask",
    ESDCCCollections = cms.InputTag("ecalPreshowerDigis"),
    FEDRawDataCollection = cms.InputTag("rawDataRepacker"),
    OutputFile = cms.untracked.string(''),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.ecalPreshowerTrendTask = cms.EDAnalyzer("ESTrendTask",
    ESDCCCollections = cms.InputTag("ecalPreshowerDigis"),
    RecHitLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    prefixME = cms.untracked.string('EcalPreshower')
)


process.ecalzmasstask = cms.EDAnalyzer("EcalZmassTask",
    electronCollection = cms.InputTag("gedGsfElectrons"),
    prefixME = cms.untracked.string('EcalCalibration'),
    trackCollection = cms.InputTag("electronGsfTracks")
)


process.effPlotter_Loose = cms.EDAnalyzer("EfficiencyPlotter",
    MuonID = cms.string('Loose'),
    etaBin = cms.int32(8),
    etaMax = cms.double(2.5),
    etaMin = cms.double(-2.5),
    phiBin = cms.int32(8),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(10),
    ptMax = cms.double(100),
    ptMin = cms.double(10),
    vtxBin = cms.int32(10),
    vtxMax = cms.double(40.5),
    vtxMin = cms.double(0.5)
)


process.effPlotter_Medium = cms.EDAnalyzer("EfficiencyPlotter",
    MuonID = cms.string('Medium'),
    etaBin = cms.int32(8),
    etaMax = cms.double(2.5),
    etaMin = cms.double(-2.5),
    phiBin = cms.int32(8),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(10),
    ptMax = cms.double(100),
    ptMin = cms.double(10),
    vtxBin = cms.int32(10),
    vtxMax = cms.double(40.5),
    vtxMin = cms.double(0.5)
)


process.effPlotter_Tight = cms.EDAnalyzer("EfficiencyPlotter",
    MuonID = cms.string('Tight'),
    etaBin = cms.int32(8),
    etaMax = cms.double(2.5),
    etaMin = cms.double(-2.5),
    phiBin = cms.int32(8),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(10),
    ptMax = cms.double(100),
    ptMin = cms.double(10),
    vtxBin = cms.int32(10),
    vtxMax = cms.double(40.5),
    vtxMin = cms.double(0.5)
)


process.egHLTOffDQMSource = cms.EDAnalyzer("EgHLTOfflineSource",
    BarrelRecHitCollection = cms.InputTag("reducedEcalRecHitsEB"),
    BeamSpotProducer = cms.InputTag("offlineBeamSpot"),
    CaloJetCollection = cms.InputTag("ak4CaloJets"),
    CaloTowers = cms.InputTag("towerMaker"),
    DQMDirName = cms.string('HLT/EgOffline'),
    ElectronCollection = cms.InputTag("gedGsfElectrons"),
    EndcapRecHitCollection = cms.InputTag("reducedEcalRecHitsEE"),
    HBHERecHitCollection = cms.InputTag("hbhereco"),
    HFRecHitCollection = cms.InputTag("hfreco"),
    IsolTrackCollection = cms.InputTag("generalTracks"),
    PhotonCollection = cms.InputTag("gedPhotons"),
    TrigResults = cms.InputTag("TriggerResults","","HLT"),
    VertexCollection = cms.InputTag("offlinePrimaryVertices"),
    binData = cms.PSet(
        HLTenergy = cms.PSet(
            max = cms.double(300.0),
            min = cms.double(0.0),
            nr = cms.int32(60)
        ),
        HLTeta = cms.PSet(
            max = cms.double(3.0),
            min = cms.double(-3.0),
            nr = cms.int32(30)
        ),
        HLTphi = cms.PSet(
            max = cms.double(3.14),
            min = cms.double(-3.14),
            nr = cms.int32(16)
        ),
        charge = cms.PSet(
            max = cms.double(1.5),
            min = cms.double(-1.5),
            nr = cms.int32(2)
        ),
        dEtaIn = cms.PSet(
            max = cms.double(0.02),
            min = cms.double(-0.02),
            nr = cms.int32(10)
        ),
        dPhiIn = cms.PSet(
            max = cms.double(0.15),
            min = cms.double(-0.15),
            nr = cms.int32(10)
        ),
        deltaE = cms.PSet(
            max = cms.double(50.0),
            min = cms.double(-50.0),
            nr = cms.int32(50)
        ),
        e1x5 = cms.PSet(
            max = cms.double(1.1),
            min = cms.double(-0.1),
            nr = cms.int32(24)
        ),
        e2x5 = cms.PSet(
            max = cms.double(1.1),
            min = cms.double(-0.1),
            nr = cms.int32(24)
        ),
        eOverP = cms.PSet(
            max = cms.double(5),
            min = cms.double(-1.0),
            nr = cms.int32(12)
        ),
        energy = cms.PSet(
            max = cms.double(300.0),
            min = cms.double(0.0),
            nr = cms.int32(60)
        ),
        err = cms.PSet(
            max = cms.double(100.5),
            min = cms.double(-0.5),
            nr = cms.int32(101)
        ),
        et = cms.PSet(
            max = cms.double(155.0),
            min = cms.double(-5.0),
            nr = cms.int32(80)
        ),
        etHigh = cms.PSet(
            max = cms.double(2025),
            min = cms.double(25),
            nr = cms.int32(30)
        ),
        eta = cms.PSet(
            max = cms.double(3.0),
            min = cms.double(-3.0),
            nr = cms.int32(30)
        ),
        etaVsPhi = cms.PSet(
            nrX = cms.int32(15),
            nrY = cms.int32(8),
            xMax = cms.double(3.0),
            xMin = cms.double(-3.0),
            yMax = cms.double(3.14),
            yMin = cms.double(-3.14)
        ),
        hOverE = cms.PSet(
            max = cms.double(0.1),
            min = cms.double(0.0),
            nr = cms.int32(30)
        ),
        invEInvP = cms.PSet(
            max = cms.double(0.2),
            min = cms.double(-0.2),
            nr = cms.int32(10)
        ),
        isolEm = cms.PSet(
            max = cms.double(10),
            min = cms.double(-1),
            nr = cms.int32(22)
        ),
        isolHad = cms.PSet(
            max = cms.double(10),
            min = cms.double(-1),
            nr = cms.int32(22)
        ),
        isolNrTrks = cms.PSet(
            max = cms.double(10),
            min = cms.double(-1),
            nr = cms.int32(22)
        ),
        isolPtTrks = cms.PSet(
            max = cms.double(10),
            min = cms.double(-1),
            nr = cms.int32(22)
        ),
        mass = cms.PSet(
            max = cms.double(120),
            min = cms.double(-10.0),
            nr = cms.int32(26)
        ),
        massHigh = cms.PSet(
            max = cms.double(5000),
            min = cms.double(0.0),
            nr = cms.int32(20)
        ),
        maxr9 = cms.PSet(
            max = cms.double(1.1),
            min = cms.double(-0.1),
            nr = cms.int32(24)
        ),
        minr9 = cms.PSet(
            max = cms.double(1.1),
            min = cms.double(-0.1),
            nr = cms.int32(24)
        ),
        nVertex = cms.PSet(
            max = cms.double(21.0),
            min = cms.double(-1.0),
            nr = cms.int32(22)
        ),
        phi = cms.PSet(
            max = cms.double(3.14),
            min = cms.double(-3.14),
            nr = cms.int32(16)
        ),
        sigEtaEta = cms.PSet(
            max = cms.double(0.05),
            min = cms.double(-0.01),
            nr = cms.int32(30)
        )
    ),
    calHLTEleTrkIsol = cms.bool(True),
    calHLTEmIsol = cms.bool(True),
    calHLTHcalIsol = cms.bool(True),
    calHLTPhoTrkIsol = cms.bool(False),
    cutMasks = cms.PSet(
        fakeEle = cms.string('et:detEta:hadem'),
        probeEle = cms.string('et:detEta'),
        stdEle = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:hltIsolTrksEle:hltIsolHad:hltIsolEm'),
        stdPho = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:isolEm:isolHad:isolPtTrks'),
        tagEle = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:hltIsolTrksEle:hltIsolHad:hltIsolEm'),
        trigTPEle = cms.string('detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:hltIsolTrksEle:hltIsolHad:hltIsolEm'),
        trigTPPho = cms.string('hadem:sigmaIEtaIEta:isolEm:isolHad:isolPtTrks')
    ),
    diEleTightLooseTrigNames = cms.vstring(),
    diPhoTightLooseTrigNames = cms.vstring(),
    eleCuts = cms.PSet(
        barrel = cms.PSet(
            cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
            isolEmConstTerm = cms.double(3),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.03),
            isolHadConstTerm = cms.double(3),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.03),
            isolNrTrksConstTerm = cms.int32(0),
            isolPtTrksConstTerm = cms.double(7.5),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.0),
            maxCTFTrkChi2NDof = cms.double(99999),
            maxCTFTrkInnerRadius = cms.double(99999),
            maxDEtaIn = cms.double(0.004),
            maxDPhiIn = cms.double(0.06),
            maxEta = cms.double(1.442),
            maxHLTDEtaIn = cms.double(0.008),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(9999),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0.07),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0.1),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0.09),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.04),
            maxInvEInvP = cms.double(0.1),
            maxNrCTFTrkHitsLost = cms.int32(999),
            maxR9 = cms.double(0.98),
            maxSigmaEtaEta = cms.double(0.01),
            maxSigmaIEtaIEta = cms.double(0.01),
            minCTFTrkOuterRadius = cms.double(0.0),
            minEt = cms.double(15),
            minEta = cms.double(0.0),
            minNrCTFTrkHits = cms.int32(7),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        ),
        endcap = cms.PSet(
            cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
            isolEmConstTerm = cms.double(3),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.03),
            isolHadConstTerm = cms.double(3),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.03),
            isolNrTrksConstTerm = cms.int32(0),
            isolPtTrksConstTerm = cms.double(15),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.0),
            maxCTFTrkChi2NDof = cms.double(99999),
            maxCTFTrkInnerRadius = cms.double(9999.0),
            maxDEtaIn = cms.double(0.007),
            maxDPhiIn = cms.double(0.03),
            maxEta = cms.double(2.5),
            maxHLTDEtaIn = cms.double(0.008),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(9999),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0.05),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0.025),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0.04),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.025),
            maxInvEInvP = cms.double(0.1),
            maxNrCTFTrkHitsLost = cms.int32(999),
            maxR9 = cms.double(999.0),
            maxSigmaEtaEta = cms.double(0.03),
            maxSigmaIEtaIEta = cms.double(0.03),
            minCTFTrkOuterRadius = cms.double(0.0),
            minEt = cms.double(15),
            minEta = cms.double(1.56),
            minNrCTFTrkHits = cms.int32(7),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        )
    ),
    eleHLTFilterNames = cms.vstring('hltEle65CaloIdVTTrkIdTDphiFilter'),
    eleHLTFilterNames2Leg = cms.vstring(),
    eleLooseCuts = cms.PSet(
        barrel = cms.PSet(
            cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
            isolEmConstTerm = cms.double(3),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.03),
            isolHadConstTerm = cms.double(3),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.03),
            isolNrTrksConstTerm = cms.int32(0),
            isolPtTrksConstTerm = cms.double(7.5),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.0),
            maxCTFTrkChi2NDof = cms.double(99999),
            maxCTFTrkInnerRadius = cms.double(99999),
            maxDEtaIn = cms.double(0.004),
            maxDPhiIn = cms.double(0.06),
            maxEta = cms.double(1.442),
            maxHLTDEtaIn = cms.double(0.008),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(9999),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0.07),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0.1),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0.09),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.04),
            maxInvEInvP = cms.double(0.1),
            maxNrCTFTrkHitsLost = cms.int32(999),
            maxR9 = cms.double(0.98),
            maxSigmaEtaEta = cms.double(0.01),
            maxSigmaIEtaIEta = cms.double(0.01),
            minCTFTrkOuterRadius = cms.double(0.0),
            minEt = cms.double(15),
            minEta = cms.double(0.0),
            minNrCTFTrkHits = cms.int32(7),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        ),
        endcap = cms.PSet(
            cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
            isolEmConstTerm = cms.double(3),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.03),
            isolHadConstTerm = cms.double(3),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.03),
            isolNrTrksConstTerm = cms.int32(0),
            isolPtTrksConstTerm = cms.double(15),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.0),
            maxCTFTrkChi2NDof = cms.double(99999),
            maxCTFTrkInnerRadius = cms.double(9999.0),
            maxDEtaIn = cms.double(0.007),
            maxDPhiIn = cms.double(0.03),
            maxEta = cms.double(2.5),
            maxHLTDEtaIn = cms.double(0.008),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(9999),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0.05),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0.025),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0.04),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.025),
            maxInvEInvP = cms.double(0.1),
            maxNrCTFTrkHitsLost = cms.int32(999),
            maxR9 = cms.double(999.0),
            maxSigmaEtaEta = cms.double(0.03),
            maxSigmaIEtaIEta = cms.double(0.03),
            minCTFTrkOuterRadius = cms.double(0.0),
            minEt = cms.double(15),
            minEta = cms.double(1.56),
            minNrCTFTrkHits = cms.int32(7),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        )
    ),
    eleTightLooseTrigNames = cms.vstring(),
    filterInactiveTriggers = cms.bool(True),
    hltEMIsolEMinEB = cms.double(0.08),
    hltEMIsolEMinEE = cms.double(0.3),
    hltEMIsolEtMinEB = cms.double(-9999.0),
    hltEMIsolEtMinEE = cms.double(-9999.0),
    hltEMIsolEtaSliceEB = cms.double(0.02),
    hltEMIsolEtaSliceEE = cms.double(0.02),
    hltEMIsolInnerConeEB = cms.double(0.045),
    hltEMIsolInnerConeEE = cms.double(0.07),
    hltEMIsolOuterCone = cms.double(0.4),
    hltEleTrkIsolInnerCone = cms.double(0.02),
    hltEleTrkIsolOuterCone = cms.double(0.2),
    hltEleTrkIsolPtMin = cms.double(1.5),
    hltEleTrkIsolRSpan = cms.double(999999.0),
    hltEleTrkIsolZSpan = cms.double(0.1),
    hltHadIsolDepth = cms.int32(-1),
    hltHadIsolEtMin = cms.double(0.0),
    hltHadIsolInnerCone = cms.double(0.0),
    hltHadIsolOuterCone = cms.double(0.3),
    hltPhoTrkIsolCountTrks = cms.bool(False),
    hltPhoTrkIsolInnerCone = cms.double(0.06),
    hltPhoTrkIsolOuterCone = cms.double(0.3),
    hltPhoTrkIsolPtMin = cms.double(1.5),
    hltPhoTrkIsolRSpan = cms.double(999999.0),
    hltPhoTrkIsolZSpan = cms.double(999999.0),
    hltTag = cms.string('HLT'),
    phoCuts = cms.PSet(
        barrel = cms.PSet(
            cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
            isolEmConstTerm = cms.double(5.0),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.012),
            isolHadConstTerm = cms.double(3.0),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.005),
            isolNrTrksConstTerm = cms.int32(4),
            isolPtTrksConstTerm = cms.double(3.0),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.002),
            maxCTFTrkChi2NDof = cms.double(99999.0),
            maxCTFTrkInnerRadius = cms.double(9.0),
            maxDEtaIn = cms.double(-1),
            maxDPhiIn = cms.double(-1),
            maxEta = cms.double(1.442),
            maxHLTDEtaIn = cms.double(0.1),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(0.1),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.05),
            maxInvEInvP = cms.double(-1),
            maxNrCTFTrkHitsLost = cms.int32(0),
            maxR9 = cms.double(0.98),
            maxSigmaEtaEta = cms.double(0.011),
            maxSigmaIEtaIEta = cms.double(0.011),
            minCTFTrkOuterRadius = cms.double(40.0),
            minEt = cms.double(20),
            minEta = cms.double(0.0),
            minNrCTFTrkHits = cms.int32(5),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        ),
        endcap = cms.PSet(
            cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
            isolEmConstTerm = cms.double(5.0),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.012),
            isolHadConstTerm = cms.double(3.0),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.005),
            isolNrTrksConstTerm = cms.int32(4),
            isolPtTrksConstTerm = cms.double(3.0),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.002),
            maxCTFTrkChi2NDof = cms.double(99999.0),
            maxCTFTrkInnerRadius = cms.double(9.0),
            maxDEtaIn = cms.double(-1),
            maxDPhiIn = cms.double(-1),
            maxEta = cms.double(2.5),
            maxHLTDEtaIn = cms.double(0.1),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(0.1),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.05),
            maxInvEInvP = cms.double(-1),
            maxNrCTFTrkHitsLost = cms.int32(0),
            maxR9 = cms.double(999.0),
            maxSigmaEtaEta = cms.double(0.031),
            maxSigmaIEtaIEta = cms.double(0.031),
            minCTFTrkOuterRadius = cms.double(40.0),
            minEt = cms.double(20),
            minEta = cms.double(1.56),
            minNrCTFTrkHits = cms.int32(5),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        )
    ),
    phoHLTFilterNames = cms.vstring(),
    phoHLTFilterNames2Leg = cms.vstring(),
    phoLooseCuts = cms.PSet(
        barrel = cms.PSet(
            cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
            isolEmConstTerm = cms.double(5.0),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.012),
            isolHadConstTerm = cms.double(3.0),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.005),
            isolNrTrksConstTerm = cms.int32(4),
            isolPtTrksConstTerm = cms.double(3.0),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.002),
            maxCTFTrkChi2NDof = cms.double(99999.0),
            maxCTFTrkInnerRadius = cms.double(9.0),
            maxDEtaIn = cms.double(-1),
            maxDPhiIn = cms.double(-1),
            maxEta = cms.double(1.442),
            maxHLTDEtaIn = cms.double(0.1),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(0.1),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.05),
            maxInvEInvP = cms.double(-1),
            maxNrCTFTrkHitsLost = cms.int32(0),
            maxR9 = cms.double(0.98),
            maxSigmaEtaEta = cms.double(0.011),
            maxSigmaIEtaIEta = cms.double(0.011),
            minCTFTrkOuterRadius = cms.double(40.0),
            minEt = cms.double(20),
            minEta = cms.double(0.0),
            minNrCTFTrkHits = cms.int32(5),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        ),
        endcap = cms.PSet(
            cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
            isolEmConstTerm = cms.double(5.0),
            isolEmGradStart = cms.double(0.0),
            isolEmGradTerm = cms.double(0.012),
            isolHadConstTerm = cms.double(3.0),
            isolHadGradStart = cms.double(0.0),
            isolHadGradTerm = cms.double(0.005),
            isolNrTrksConstTerm = cms.int32(4),
            isolPtTrksConstTerm = cms.double(3.0),
            isolPtTrksGradStart = cms.double(0.0),
            isolPtTrksGradTerm = cms.double(0.002),
            maxCTFTrkChi2NDof = cms.double(99999.0),
            maxCTFTrkInnerRadius = cms.double(9.0),
            maxDEtaIn = cms.double(-1),
            maxDPhiIn = cms.double(-1),
            maxEta = cms.double(2.5),
            maxHLTDEtaIn = cms.double(0.1),
            maxHLTDPhiIn = cms.double(0.1),
            maxHLTInvEInvP = cms.double(0.1),
            maxHLTIsolEm = cms.double(0),
            maxHLTIsolEmOverEt = cms.double(0),
            maxHLTIsolEmOverEt2 = cms.double(0),
            maxHLTIsolHad = cms.double(0),
            maxHLTIsolHadOverEt = cms.double(0),
            maxHLTIsolHadOverEt2 = cms.double(0),
            maxHLTIsolTrksEle = cms.double(0),
            maxHLTIsolTrksEleOverPt = cms.double(0),
            maxHLTIsolTrksEleOverPt2 = cms.double(0),
            maxHLTIsolTrksPho = cms.double(0),
            maxHLTIsolTrksPhoOverPt = cms.double(0),
            maxHLTIsolTrksPhoOverPt2 = cms.double(0),
            maxHadEnergy = cms.double(0),
            maxHadem = cms.double(0.05),
            maxInvEInvP = cms.double(-1),
            maxNrCTFTrkHitsLost = cms.int32(0),
            maxR9 = cms.double(999.0),
            maxSigmaEtaEta = cms.double(0.031),
            maxSigmaIEtaIEta = cms.double(0.031),
            minCTFTrkOuterRadius = cms.double(40.0),
            minEt = cms.double(20),
            minEta = cms.double(1.56),
            minNrCTFTrkHits = cms.int32(5),
            minR9 = cms.double(0.0),
            requirePixelHitsIfOuterInOuter = cms.bool(True)
        )
    ),
    phoTightLooseTrigNames = cms.vstring(),
    triggerCuts = cms.VPSet(),
    triggerSummaryLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT")
)


process.ewkElecDQM = cms.EDAnalyzer("EwkElecDQM",
    BeamSpotTag = cms.untracked.InputTag("offlineBeamSpot"),
    DetainBarrel = cms.untracked.double(0.0071),
    DetainEndcap = cms.untracked.double(0.0066),
    EJetMin = cms.untracked.double(30.0),
    EcalIsoCutBarrel = cms.untracked.double(5.7),
    EcalIsoCutEndcap = cms.untracked.double(5.0),
    ElecTag = cms.untracked.InputTag("gedGsfElectrons"),
    ElecTrig = cms.untracked.vstring('HLT_Ele', 
        'HLT_DoubleEle', 
        'HLT_DoublePhoton', 
        'HLT_Photon', 
        'HLT_L1SingleEG'),
    EtaCut = cms.untracked.double(2.4),
    HcalIsoCutBarrel = cms.untracked.double(8.1),
    HcalIsoCutEndcap = cms.untracked.double(3.4),
    JetTag = cms.untracked.InputTag("ak4PFJets"),
    METIncludesMuons = cms.untracked.bool(False),
    METTag = cms.untracked.InputTag("pfMet"),
    MetMax = cms.untracked.double(999999.0),
    MetMin = cms.untracked.double(-999999.0),
    MtMax = cms.untracked.double(999999.0),
    MtMin = cms.untracked.double(-999999),
    NJetMax = cms.untracked.int32(999999),
    PUBinCount = cms.untracked.uint32(12),
    PUMax = cms.untracked.uint32(60),
    PtCut = cms.untracked.double(10.0),
    SieieBarrel = cms.untracked.double(0.01),
    SieieEndcap = cms.untracked.double(0.028),
    TrigTag = cms.untracked.InputTag("TriggerResults","","HLT"),
    TrkIsoCutBarrel = cms.untracked.double(7.2),
    TrkIsoCutEndcap = cms.untracked.double(5.1),
    VertexTag = cms.untracked.InputTag("offlinePrimaryVertices")
)


process.ewkMuDQM = cms.EDAnalyzer("EwkMuDQM",
    AcopCut = cms.untracked.double(999.0),
    DxyCut = cms.untracked.double(0.2),
    EJetMin = cms.untracked.double(40.0),
    EtaCut = cms.untracked.double(2.1),
    IsAlsoTrackerMuon = cms.untracked.bool(True),
    IsCombinedIso = cms.untracked.bool(True),
    IsRelativeIso = cms.untracked.bool(True),
    IsoCut03 = cms.untracked.double(0.1),
    JetTag = cms.untracked.InputTag("ak4PFJets"),
    METTag = cms.untracked.InputTag("pfMet"),
    MetMax = cms.untracked.double(999999.0),
    MetMin = cms.untracked.double(-999999.0),
    MtMax = cms.untracked.double(9999999),
    MtMin = cms.untracked.double(50.0),
    MuonHitsCut = cms.untracked.int32(1),
    MuonTag = cms.untracked.InputTag("muons"),
    NJetMax = cms.untracked.int32(999999),
    NMatchesCut = cms.untracked.int32(2),
    NormalizedChi2Cut = cms.untracked.double(10.0),
    PixelHitsCut = cms.untracked.int32(1),
    PtCut = cms.untracked.double(25.0),
    PtThrForZ1 = cms.untracked.double(20.0),
    PtThrForZ2 = cms.untracked.double(10.0),
    TrackerHitsCut = cms.untracked.int32(11),
    TrigPathNames = cms.untracked.vstring('HLT_Mu', 
        'HLT_DoubleMu', 
        'HLT_IsoMu'),
    TrigTag = cms.untracked.InputTag("TriggerResults","","HLT"),
    VertexTag = cms.untracked.InputTag("offlinePrimaryVertices")
)


process.ewkMuLumiMonitorDQM = cms.EDAnalyzer("EwkMuLumiMonitorDQM",
    DxyCut = cms.untracked.double(0.2),
    IsCombinedIso = cms.untracked.bool(False),
    IsRelativeIso = cms.untracked.bool(False),
    IsoCut03 = cms.untracked.double(3.0),
    METIncludesMuons = cms.untracked.bool(True),
    TrigTag = cms.untracked.InputTag("TriggerResults","","HLT"),
    acopCut = cms.untracked.double(999.0),
    calotower = cms.untracked.InputTag("towerMaker"),
    etaMuCut = cms.untracked.double(2.1),
    maxDPtRel = cms.untracked.double(1.0),
    maxDeltaR = cms.untracked.double(0.2),
    metTag = cms.untracked.InputTag("pfMet"),
    mtMax = cms.untracked.double(999.0),
    mtMin = cms.untracked.double(50.0),
    muons = cms.untracked.InputTag("muons"),
    ptMuCut = cms.untracked.double(20.0),
    ptThreshold = cms.untracked.double(0.0),
    tracks = cms.untracked.InputTag("generalTracks"),
    triggerEvent = cms.untracked.InputTag("hltTriggerSummaryAOD","","HLT")
)


process.fsqHLTOfflineSource = cms.EDAnalyzer("FSQDiJetAve",
    todo = cms.VPSet(cms.PSet(
        combinedObjectDimension = cms.int32(1),
        combinedObjectDrawables = cms.VPSet(),
        combinedObjectSelection = cms.string('1==1'),
        combinedObjectSortCriteria = cms.string('at(0).pt'),
        dqmhistolabel = cms.string('hltPixelTracks'),
        handlerType = cms.string('FromHLT'),
        mainDQMDirname = cms.untracked.string('HLT/FSQ/'),
        partialFilterName = cms.string('hltMinBiasPixelFilt'),
        partialPathName = cms.string('HLT_ZeroBias_SinglePixelTrack_v'),
        singleObjectDrawables = cms.VPSet(cms.PSet(
            bins = cms.int32(50),
            expression = cms.string('pt'),
            max = cms.double(10),
            min = cms.double(0.4),
            name = cms.string('pt')
        ), 
            cms.PSet(
                bins = cms.int32(100),
                expression = cms.string('eta'),
                max = cms.double(2.5),
                min = cms.double(-2.5),
                name = cms.string('eta')
            ), 
            cms.PSet(
                bins = cms.int32(100),
                expression = cms.string('phi'),
                max = cms.double(3.15),
                min = cms.double(-3.15),
                name = cms.string('phi')
            )),
        singleObjectsPreselection = cms.string('1==1'),
        triggerSelection = cms.string('HLT_ZeroBias_SinglePixelTrack_v*')
    ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(1),
                expression = cms.string('0*at(0).pt()'),
                max = cms.double(0.5),
                min = cms.double(-0.5),
                name = cms.string('Eff_nominator')
            )),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt()'),
            dqmhistolabel = cms.string('zb'),
            handlerType = cms.string('RecoTrack'),
            inputCol = cms.InputTag("generalTracks"),
            mainDQMDirname = cms.untracked.string('HLT/FSQ/'),
            partialFilterName = cms.string('hltL1sETT'),
            partialPathName = cms.string('HLT_ZeroBias_SinglePixelTrack_v'),
            singleObjectDrawables = cms.VPSet(),
            singleObjectsPreselection = cms.string('pt > 0.4 && abs(eta) < 2.4'),
            triggerSelection = cms.string('HLT_ZeroBias_SinglePixelTrack_v*')
        ), 
        cms.PSet(
            combinedObjectDimension = cms.int32(1),
            combinedObjectDrawables = cms.VPSet(cms.PSet(
                bins = cms.int32(1),
                expression = cms.string('0*at(0).pt()'),
                max = cms.double(0.5),
                min = cms.double(-0.5),
                name = cms.string('Eff_denominator')
            )),
            combinedObjectSelection = cms.string('1==1'),
            combinedObjectSortCriteria = cms.string('at(0).pt()'),
            dqmhistolabel = cms.string('zb'),
            handlerType = cms.string('RecoTrack'),
            inputCol = cms.InputTag("generalTracks"),
            mainDQMDirname = cms.untracked.string('HLT/FSQ/'),
            partialFilterName = cms.string('hltL1sETT'),
            partialPathName = cms.string('HLT_ZeroBias_SinglePixelTrack_v'),
            singleObjectDrawables = cms.VPSet(),
            singleObjectsPreselection = cms.string('pt > 0.4 && abs(eta) < 2.4'),
            triggerSelection = cms.string('HLT_ZeroBias_v*')
        )),
    triggerConfiguration = cms.PSet(
        daqPartitions = cms.uint32(1),
        hltResults = cms.InputTag("TriggerResults","","HLT"),
        l1tIgnoreMask = cms.bool(False),
        l1tResults = cms.InputTag(""),
        l1techIgnorePrescales = cms.bool(False),
        throw = cms.bool(False)
    ),
    triggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    triggerSummaryLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    useGenWeight = cms.bool(False)
)


process.glbMuonSegmentAnalyzer = cms.EDAnalyzer("SegmentTrackAnalyzer",
    MuTrackCollection = cms.InputTag("globalMuons"),
    SegmentsTrackAssociatorParameters = cms.PSet(
        SelectedSegments = cms.untracked.InputTag("SelectedSegments"),
        segmentsCSC = cms.untracked.InputTag("cscSegments"),
        segmentsDt = cms.untracked.InputTag("dt4DSegments")
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    etaBin = cms.int32(100),
    etaMax = cms.double(3.0),
    etaMin = cms.double(-3.0),
    phiBin = cms.int32(100),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(200),
    ptMax = cms.double(200.0),
    ptMin = cms.double(0.0)
)


process.globalAnalyzer = cms.EDAnalyzer("HLTMuonOfflineAnalyzer",
    binParams = cms.untracked.PSet(
        NVertex = cms.untracked.vdouble(20, 1, 50),
        charge = cms.untracked.vdouble(2, -2.0, 2.0),
        d0 = cms.untracked.vdouble(10, -0.5, 0.5),
        deltaR = cms.untracked.vdouble(20, 0.0, 0.05),
        eta = cms.untracked.vdouble(20, -2.4, 2.4),
        etaCoarse = cms.untracked.vdouble(-2.4, -2.1, -1.6, -1.2, -0.8, 
            0.0, 0.8, 1.2, 1.6, 2.1, 
            2.4),
        jpsiMass = cms.untracked.vdouble(60, 0.0, 6.0),
        phi = cms.untracked.vdouble(20, -3.14, 3.14),
        phiCoarse = cms.untracked.vdouble(10, -3.14, 3.14),
        pt = cms.untracked.vdouble(0.0, 2.0, 4.0, 6.0, 8.0, 
            10.0, 20.0, 30.0, 40.0, 100.0, 
            200.0, 400.0),
        ptCoarse = cms.untracked.vdouble(10.0, 20.0, 40.0, 60.0, 80.0, 
            100.0, 200.0),
        resolutionEta = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionPhi = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionRel = cms.untracked.vdouble(20, -0.15, 0.15),
        z0 = cms.untracked.vdouble(10, -15.0, 15.0),
        zMass = cms.untracked.vdouble(50, 65.0, 115.0)
    ),
    destination = cms.untracked.string('HLT/Muon/DistributionsGlobal'),
    hltPathsToCheck = cms.vstring('HLT_Mu45_eta2p1_v1', 
        'HLT_Mu50_v', 
        'HLT_IsoMu24_v', 
        'HLT_IsoTkMu24_v', 
        'HLT_Mu17_Mu8_DZ_v', 
        'HLT_Mu17_TkMu8_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v', 
        'HLT_IsoMu20_eta2p1_v', 
        'HLT_IsoTkMu20_eta2p1_v', 
        'HLT_IsoMu24_eta2p1_v', 
        'HLT_IsoTkMu24_eta2p1_v', 
        'HLT_Mu24_eta2p1_v', 
        'HLT_TkMu24_v', 
        'HLT_IsoMu27_v', 
        'HLT_IsoTkMu27_v', 
        'HLT_Mu27_v', 
        'HLT_TkMu27_v', 
        'HLT_IsoMu20_v', 
        'HLT_Mu20_v', 
        'HLT_TkMu20_v', 
        'HLT_IsoTkMu20_v', 
        'HLT_IsoMu22_v', 
        'HLT_IsoTkMu22_v', 
        'HLT_IsoMu18_v', 
        'HLT_IsoTkMu18_v', 
        'HLT_OldIsoMu18_v', 
        'HLT_OldIsoTkMu18_v', 
        'HLT_L1SingleMu16_v', 
        'HLT_L2Mu10_v', 
        'HLT_HIL1DoubleMu0', 
        'HLT_HIL1DoubleMu0BPTX', 
        'HLT_HIL2Mu3', 
        'HLT_HIL2Mu3BPTX', 
        'HLT_HIL2Mu7', 
        'HLT_HIL2Mu15', 
        'HLT_HIL2Mu3_NHitQ', 
        'HLT_HIL2DoubleMu0', 
        'HLT_HIL2DoubleMu0BPTX', 
        'HLT_HIL2DoubleMu0_NHitQ', 
        'HLT_HIL2DoubleMu3', 
        'HLT_HIL3Mu3', 
        'HLT_HIL3Mu3BPTX', 
        'HLT_HIL3DoubleMuOpen'),
    hltProcessName = cms.string('HLT'),
    inputTags = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        offlinePVs = cms.InputTag("hiSelectedVertex"),
        recoMuon = cms.InputTag("muons"),
        triggerResults = cms.InputTag("TriggerResults"),
        triggerSummary = cms.InputTag("hltTriggerSummaryAOD")
    ),
    plotCuts = cms.PSet(
        L1DeltaR = cms.untracked.double(0.3),
        L2DeltaR = cms.untracked.double(0.3),
        L3DeltaR = cms.untracked.double(0.05),
        maxEta = cms.untracked.double(2.1),
        minPtFactor = cms.untracked.double(1.2)
    ),
    probeParams = cms.PSet(
        d0Cut = cms.untracked.double(2.0),
        hltCuts = cms.untracked.string('abs(eta) < 2.0'),
        recoCuts = cms.untracked.string('isGlobalMuon && abs(eta) < 2.0'),
        z0Cut = cms.untracked.double(25.0)
    ),
    requiredTriggers = cms.untracked.vstring(),
    targetParams = cms.PSet(
        d0Cut = cms.untracked.double(2.0),
        hltCuts = cms.untracked.string('abs(eta) < 2.4'),
        recoCuts = cms.untracked.string('isGlobalMuon && abs(eta) < 2.4'),
        z0Cut = cms.untracked.double(25.0)
    )
)


process.hcalBeamMonitor = cms.EDAnalyzer("HcalBeamMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5, 6, 7),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataRepacker"),
    NLumiBlocks = cms.untracked.int32(4000),
    Overwrite = cms.untracked.bool(False),
    TaskFolder = cms.untracked.string('BeamMonitor_Hcal/'),
    debug = cms.untracked.int32(0),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    enableCleanup = cms.untracked.bool(False),
    hbheRechitLabel = cms.untracked.InputTag("hbhereco"),
    hfRechitLabel = cms.untracked.InputTag("hfreco"),
    hoRechitLabel = cms.untracked.InputTag("horeco"),
    hotrate = cms.untracked.double(0.25),
    lumiqualitydir = cms.untracked.string(''),
    mergeRuns = cms.untracked.bool(False),
    minBadCells = cms.untracked.int32(10),
    minEvents = cms.untracked.int32(500),
    occupancyThresh = cms.untracked.double(0.0625),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalCoarsePedestalMonitor = cms.EDAnalyzer("HcalCoarsePedestalMonitor",
    ADCDiffThresh = cms.untracked.double(1.0),
    AllowedCalibTypes = cms.untracked.vint32(1),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataCollector"),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('CoarsePedestalMonitor_Hcal/'),
    debug = cms.untracked.int32(0),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    enableCleanup = cms.untracked.bool(False),
    excludeHORing2 = cms.untracked.bool(True),
    makeDiagnostics = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    minEvents = cms.untracked.int32(25),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalDataIntegrityMonitor = cms.EDAnalyzer("HcalDataIntegrityTask",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5, 6, 7),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataCollector"),
    NLumiBlocks = cms.untracked.int32(4000),
    RawDataLabel = cms.untracked.InputTag("rawDataCollector"),
    TaskFolder = cms.untracked.string('FEDIntegrity/'),
    UnpackerReportLabel = cms.untracked.InputTag("hcalDigis"),
    debug = cms.untracked.int32(0),
    enableCleanup = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalDeadCellMonitor = cms.EDAnalyzer("HcalDeadCellMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5, 6, 7),
    BadChannelStatusMask = cms.untracked.int32(34),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataRepacker"),
    MissingRechitEnergyThreshold = cms.untracked.double(-99.0),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('DeadCellMonitor_Hcal/'),
    debug = cms.untracked.int32(0),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    enableCleanup = cms.untracked.bool(False),
    excludeHO1P02 = cms.untracked.bool(False),
    excludeHORing2 = cms.untracked.bool(True),
    hbheRechitLabel = cms.untracked.InputTag("hbhereco"),
    hfRechitLabel = cms.untracked.InputTag("hfreco"),
    hoRechitLabel = cms.untracked.InputTag("horeco"),
    makeDiagnostics = cms.untracked.bool(True),
    mergeRuns = cms.untracked.bool(False),
    minDeadEventCount = cms.untracked.int32(1000),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/'),
    test_digis = cms.untracked.bool(True),
    test_rechits = cms.untracked.bool(True)
)


process.hcalDetDiagLEDMonitor = cms.EDAnalyzer("HcalDetDiagLEDMonitor",
    AllowedCalibTypes = cms.untracked.vint32(1, 2, 3, 4, 5),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataCollector"),
    LEDMeanThreshold = cms.untracked.double(0.1),
    LEDReferenceData = cms.untracked.string(''),
    LEDRmsThreshold = cms.untracked.double(0.1),
    NLumiBlocks = cms.untracked.int32(4000),
    OutputFilePath = cms.untracked.string(''),
    TaskFolder = cms.untracked.string('DetDiagLEDMonitor_Hcal/'),
    XmlFilePath = cms.untracked.string(''),
    calibDigiLabel = cms.untracked.InputTag("hcalDigis"),
    debug = cms.untracked.int32(0),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    enableCleanup = cms.untracked.bool(False),
    hcalTBTriggerDataTag = cms.InputTag("tbunpack"),
    makeDiagnostics = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(True),
    subSystemFolder = cms.untracked.string('Hcal/'),
    triggerLabel = cms.untracked.InputTag("l1GtUnpack")
)


process.hcalDetDiagLaserMonitor = cms.EDAnalyzer("HcalDetDiagLaserMonitor",
    AllowedCalibTypes = cms.untracked.vint32(1, 2, 3, 4, 5),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataCollector"),
    LaserDatasetName = cms.untracked.string(''),
    LaserEnergyThreshold = cms.untracked.double(0.1),
    LaserReferenceData = cms.untracked.string(''),
    LaserTimingThreshold = cms.untracked.double(0.2),
    NLumiBlocks = cms.untracked.int32(4000),
    OutputFilePath = cms.untracked.string(''),
    Overwrite = cms.untracked.bool(True),
    RawDataLabel = cms.untracked.InputTag("source"),
    TaskFolder = cms.untracked.string('DetDiagLaserMonitor_Hcal/'),
    XmlFilePath = cms.untracked.string(''),
    calibDigiLabel = cms.untracked.InputTag("hcalDigis"),
    debug = cms.untracked.int32(0),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    enableCleanup = cms.untracked.bool(False),
    hcalTBTriggerDataTag = cms.InputTag("tbunpack"),
    htmlOutputPath = cms.untracked.string(''),
    makeDiagnostics = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(True),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalDetDiagNoiseMonitor = cms.EDAnalyzer("HcalDetDiagNoiseMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5),
    ConstituentsToJetMatchingDeltaR = cms.untracked.double(0.5),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataRepacker"),
    HLTriggerResults = cms.untracked.InputTag("TriggerResults","","HLT"),
    HPDthresholdHi = cms.untracked.double(49.0),
    HPDthresholdLo = cms.untracked.double(10.0),
    JetMaxEta = cms.untracked.double(2.0),
    JetMinEt = cms.untracked.double(10.0),
    JetSource = cms.untracked.InputTag("iterativeCone5CaloJets"),
    MaxJetHadronicEnergyFraction = cms.untracked.double(0.98),
    MetSource = cms.untracked.InputTag("met"),
    MinJetChargeFraction = cms.untracked.double(0.05),
    MonitoringTriggerRequirement = cms.untracked.string('HLT_MET100'),
    NLumiBlocks = cms.untracked.int32(4000),
    OutputFilePath = cms.untracked.string(''),
    Overwrite = cms.untracked.bool(True),
    PhysDeclaredRequirement = cms.untracked.string('HLT_PhysicsDeclared'),
    RawDataLabel = cms.untracked.InputTag("rawDataRepacker"),
    SpikeThreshold = cms.untracked.double(0.5),
    TaskFolder = cms.untracked.string('DetDiagNoiseMonitor_Hcal/'),
    TrackMaxIp = cms.untracked.double(0.1),
    TrackMinThreshold = cms.untracked.double(1.0),
    TrackSource = cms.untracked.InputTag("generalTracks"),
    UseDB = cms.untracked.bool(False),
    UseMonitoringTrigger = cms.untracked.bool(False),
    UseVertexCuts = cms.untracked.bool(True),
    VertexSource = cms.untracked.InputTag("offlinePrimaryVertices"),
    XmlFilePath = cms.untracked.string(''),
    caloTowerCollName = cms.InputTag("towerMaker"),
    debug = cms.untracked.int32(0),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    enableCleanup = cms.untracked.bool(False),
    gtLabel = cms.untracked.InputTag("l1GtUnpack"),
    hcalTBTriggerDataTag = cms.InputTag("tbunpack"),
    makeDiagnostics = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    rbxCollName = cms.untracked.string('hcalnoise'),
    skipOutOfOrderLS = cms.untracked.bool(True),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalDetDiagPedestalMonitor = cms.EDAnalyzer("HcalDetDiagPedestalMonitor",
    AllowedCalibTypes = cms.untracked.vint32(1),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataCollector"),
    HBMeanTreshold = cms.untracked.double(0.2),
    HBRmsTreshold = cms.untracked.double(0.3),
    HEMeanTreshold = cms.untracked.double(0.2),
    HERmsTreshold = cms.untracked.double(0.3),
    HFMeanTreshold = cms.untracked.double(0.2),
    HFRmsTreshold = cms.untracked.double(0.3),
    HOMeanTreshold = cms.untracked.double(0.2),
    HORmsTreshold = cms.untracked.double(0.3),
    NLumiBlocks = cms.untracked.int32(4000),
    OutputFilePath = cms.untracked.string(''),
    Overwrite = cms.untracked.bool(True),
    PedestalDatasetName = cms.untracked.string(''),
    PedestalReferenceData = cms.untracked.string(''),
    TaskFolder = cms.untracked.string('DetDiagPedestalMonitor_Hcal/'),
    XmlFilePath = cms.untracked.string(''),
    debug = cms.untracked.int32(0),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    enableCleanup = cms.untracked.bool(False),
    hcalTBTriggerDataTag = cms.InputTag("tbunpack"),
    htmlOutputPath = cms.untracked.string(''),
    makeDiagnostics = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    rawDataLabel = cms.untracked.InputTag("rawDataCollector"),
    skipOutOfOrderLS = cms.untracked.bool(True),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalDetDiagTimingMonitor = cms.EDAnalyzer("HcalDetDiagTimingMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0),
    CosmicsCorr = cms.untracked.bool(False),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataCollector"),
    GCTTriggerBit1 = cms.untracked.int32(15),
    GCTTriggerBit2 = cms.untracked.int32(16),
    GCTTriggerBit3 = cms.untracked.int32(17),
    GCTTriggerBit4 = cms.untracked.int32(18),
    GCTTriggerBit5 = cms.untracked.int32(19),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('DetDiagTimingMonitor_Hcal/'),
    debug = cms.untracked.int32(0),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    enableCleanup = cms.untracked.bool(False),
    gtLabel = cms.untracked.InputTag("l1GtUnpack"),
    makeDiagnostics = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(True),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalDigiMonitor = cms.EDAnalyzer("HcalDigiMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5, 6, 7),
    BadChannelStatusMask = cms.untracked.int32(34),
    ExpectedOrbitMessageTime = cms.untracked.int32(3559),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataRepacker"),
    HLTResultsLabel = cms.untracked.InputTag("TriggerResults","","HLT"),
    MinBiasHLTBits = cms.untracked.vstring('HLT_MinBiasPixel_SingleTrack', 
        'HLT_L1Tech_BSC_minBias', 
        'HLT_L1Tech_BSC_minBias_OR', 
        'HLT_L1Tech_BSC_minBias_threshold1_v2', 
        'HLT_ZeroBias'),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('DigiMonitor_Hcal/'),
    checkADCsum = cms.untracked.bool(True),
    checkCapID = cms.untracked.bool(True),
    checkDVerr = cms.untracked.bool(True),
    checkDigiSize = cms.untracked.bool(True),
    checkForMissingDigis = cms.untracked.bool(False),
    debug = cms.untracked.int32(0),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    enableCleanup = cms.untracked.bool(False),
    excludeBadQPLL = cms.untracked.bool(True),
    excludeHO1P02 = cms.untracked.bool(False),
    excludeHORing2 = cms.untracked.bool(False),
    hfRechitLabel = cms.untracked.InputTag("hfreco"),
    makeDiagnostics = cms.untracked.bool(True),
    maxDigiSizeHBHE = cms.untracked.int32(10),
    maxDigiSizeHF = cms.untracked.int32(6),
    maxDigiSizeHO = cms.untracked.int32(10),
    mergeRuns = cms.untracked.bool(False),
    minDigiSizeHBHE = cms.untracked.int32(10),
    minDigiSizeHF = cms.untracked.int32(4),
    minDigiSizeHO = cms.untracked.int32(10),
    online = cms.untracked.bool(False),
    shapeThresh = cms.untracked.int32(20),
    shapeThreshHB = cms.untracked.int32(20),
    shapeThreshHE = cms.untracked.int32(20),
    shapeThreshHF = cms.untracked.int32(20),
    shapeThreshHO = cms.untracked.int32(20),
    shutOffOrbitTest = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalHotCellMonitor = cms.EDAnalyzer("HcalHotCellMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5, 6, 7),
    ETThreshold = cms.untracked.double(5.0),
    ETThreshold_HF = cms.untracked.double(5.0),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataRepacker"),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('HotCellMonitor_Hcal/'),
    debug = cms.untracked.int32(0),
    enableCleanup = cms.untracked.bool(False),
    energyThreshold = cms.untracked.double(50.0),
    energyThreshold_HF = cms.untracked.double(200.0),
    excludeHORing2 = cms.untracked.bool(False),
    hbheRechitLabel = cms.untracked.InputTag("hbhereco"),
    hfRechitLabel = cms.untracked.InputTag("hfreco"),
    hoRechitLabel = cms.untracked.InputTag("horeco"),
    makeDiagnostics = cms.untracked.bool(True),
    mergeRuns = cms.untracked.bool(False),
    minErrorFlag = cms.untracked.double(0.1),
    minEvents = cms.untracked.int32(200),
    online = cms.untracked.bool(False),
    persistentETThreshold = cms.untracked.double(3.0),
    persistentETThreshold_HF = cms.untracked.double(3.0),
    persistentThreshold = cms.untracked.double(6.0),
    persistentThreshold_HF = cms.untracked.double(10.0),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/'),
    test_energy = cms.untracked.bool(False),
    test_et = cms.untracked.bool(True),
    test_neighbor = cms.untracked.bool(False),
    test_persistent = cms.untracked.bool(True)
)


process.hcalLSbyLSMonitor = cms.EDAnalyzer("HcalLSbyLSMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5, 6, 7),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataRepacker"),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskDirectories = cms.untracked.vstring('DeadCellMonitor_Hcal/', 
        'DigiMonitor_Hcal/', 
        'HotCellMonitor_Hcal/', 
        'BeamMonitor_Hcal/'),
    TaskFolder = cms.untracked.string('LSbyLS_Hcal/'),
    debug = cms.untracked.int32(0),
    enableCleanup = cms.untracked.bool(False),
    makeDiagnostics = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    minEvents = cms.untracked.int32(1000),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalMonitor = cms.EDAnalyzer("HcalMonitorModule",
    FEDRawDataCollection = cms.untracked.InputTag("rawDataRepacker"),
    UnpackerReport = cms.untracked.InputTag("hcalDigis"),
    UnpackerReportUTCA = cms.untracked.InputTag("utcaDigis"),
    debug = cms.untracked.int32(0),
    enableCleanup = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalNZSMonitor = cms.EDAnalyzer("HcalNZSMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5, 6, 7),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataCollector"),
    HLTResultsLabel = cms.untracked.InputTag("TriggerResults","","HLT"),
    NLumiBlocks = cms.untracked.int32(4000),
    NZSeventPeriod = cms.untracked.int32(4096),
    RawDataLabel = cms.untracked.InputTag("rawDataCollector"),
    TaskFolder = cms.untracked.string('NZSMonitor_Hcal/'),
    debug = cms.untracked.int32(0),
    enableCleanup = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    nzsHLTnames = cms.untracked.vstring('HLT_HcalPhiSym', 
        'HLT_HcalNZS_8E29'),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalNoiseMonitor = cms.EDAnalyzer("HcalNoiseMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0),
    E2E10MinEnergy = cms.untracked.double(50),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataRepacker"),
    HLTResultsLabel = cms.untracked.InputTag("TriggerResults","","HLT"),
    MaxADCZeros = cms.untracked.int32(10),
    MaxE2E10 = cms.untracked.double(0.96),
    MaxHPDHitCount = cms.untracked.int32(17),
    MaxHPDNoOtherHitCount = cms.untracked.int32(10),
    MinE2E10 = cms.untracked.double(0.7),
    NLumiBlocks = cms.untracked.int32(4000),
    NZSeventPeriod = cms.untracked.int32(4096),
    RawDataLabel = cms.untracked.InputTag("rawDataRepacker"),
    TaskFolder = cms.untracked.string('NoiseMonitor_Hcal/'),
    TotalZeroMinEnergy = cms.untracked.double(10),
    debug = cms.untracked.int32(0),
    enableCleanup = cms.untracked.bool(False),
    hbheDigiLabel = cms.untracked.InputTag("hcalDigis"),
    hbheRechitLabel = cms.untracked.InputTag("hbhereco"),
    mergeRuns = cms.untracked.bool(False),
    noiseLabel = cms.untracked.InputTag("hcalnoise"),
    nzsHLTnames = cms.untracked.vstring('HLT_HcalPhiSym', 
        'HLT_HcalNZS_8E29'),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalRawDataMonitor = cms.EDAnalyzer("HcalRawDataMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5, 6, 7),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataRepacker"),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('RawDataMonitor_Hcal/'),
    debug = cms.untracked.int32(0),
    digiLabel = cms.untracked.InputTag("hcalDigis"),
    enableCleanup = cms.untracked.bool(False),
    excludeHORing2 = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalRecHitMonitor = cms.EDAnalyzer("HcalRecHitMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5, 6, 7),
    ETThreshold = cms.untracked.double(0.0),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataRepacker"),
    HF_ETThreshold = cms.untracked.double(0.0),
    HF_energyThreshold = cms.untracked.double(3.0),
    HLTResultsLabel = cms.untracked.InputTag("TriggerResults","","HLT"),
    HO_energyThreshold = cms.untracked.double(5.0),
    HcalHLTBits = cms.untracked.vstring('HLT_ExclDiJet60_HF'),
    L1GTLabel = cms.untracked.InputTag("l1GtUnpack"),
    MinBiasHLTBits = cms.untracked.vstring('HLT_Physics', 
        'HLT_MinBias', 
        'HLT_ZeroBias'),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('RecHitMonitor_Hcal/'),
    collisiontimediffThresh = cms.untracked.double(10.0),
    debug = cms.untracked.int32(0),
    enableCleanup = cms.untracked.bool(False),
    energyThreshold = cms.untracked.double(2.0),
    hbheRechitLabel = cms.untracked.InputTag("hbhereco"),
    hfRechitLabel = cms.untracked.InputTag("hfreco"),
    hoRechitLabel = cms.untracked.InputTag("horeco"),
    makeDiagnostics = cms.untracked.bool(True),
    mergeRuns = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.hcalTrigPrimMonitor = cms.EDAnalyzer("HcalTrigPrimMonitor",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5, 6, 7),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataCollector"),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('TrigPrimMonitor_Hcal/'),
    ZSAlarmThreshold = cms.vint32(0, 10, 10, 10, 10, 
        10, 10, 10, 10, 10, 
        10, 10, 10, 10, 10, 
        40, 50, 10, 30, 30, 
        30, 20, 15, 15, 15, 
        15, 15, 10, 10, 5, 
        5, 5, 5),
    ZSBadTPThreshold = cms.vint32(0, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2, 2, 2, 
        2, 2, 2),
    dataLabel = cms.InputTag("hcalDigis"),
    debug = cms.untracked.int32(0),
    emulLabel = cms.InputTag("valHcalTriggerPrimitiveDigis"),
    enableCleanup = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)


process.higPhotonJetHLTOfflineSource = cms.EDAnalyzer("HigPhotonJetHLTOfflineSource",
    dirname = cms.untracked.string('HLT/Higgs/PhotonJet'),
    hltPathsToCheck = cms.vstring('HLT_Photon22_R9Id90_HE10_Iso40_EBOnly_PFMET40_v', 
        'HLT_Photon22_R9Id90_HE10_Iso40_EBOnly_VBF_v', 
        'HLT_Photon36_R9Id90_HE10_Iso40_EBOnly_PFMET40_v', 
        'HLT_Photon36_R9Id90_HE10_Iso40_EBOnly_VBF_v', 
        'HLT_Photon50_R9Id90_HE10_Iso40_EBOnly_PFMET40_v', 
        'HLT_Photon50_R9Id90_HE10_Iso40_EBOnly_VBF_v', 
        'HLT_Photon75_R9Id90_HE10_Iso40_EBOnly_PFMET40_v', 
        'HLT_Photon75_R9Id90_HE10_Iso40_EBOnly_VBF_v', 
        'HLT_Photon90_R9Id90_HE10_Iso40_EBOnly_PFMET40_v', 
        'HLT_Photon90_R9Id90_HE10_Iso40_EBOnly_VBF_v', 
        'HLT_Photon120_R9Id90_HE10_Iso40_EBOnly_PFMET40_v', 
        'HLT_Photon120_R9Id90_HE10_Iso40_EBOnly_VBF_v', 
        'HLT_Photon135_PFMET40_v', 
        'HLT_Photon135_VBF_v', 
        'HLT_Photon155_v', 
        'HLT_Photon250_NoHE_v', 
        'HLT_Photon300_NoHE_v'),
    hltProcessName = cms.string('HLT'),
    pfJetsToken = cms.InputTag("ak4PFJets"),
    pfMetToken = cms.InputTag("pfMet"),
    pfjetMinPt = cms.untracked.double(30.0),
    photonMinPt = cms.untracked.double(20.0),
    photonsToken = cms.InputTag("gedPhotons"),
    pvToken = cms.InputTag("offlinePrimaryVertices"),
    triggerAccept = cms.untracked.bool(True),
    triggerResultsToken = cms.InputTag("TriggerResults"),
    verbose = cms.untracked.bool(False)
)


process.hltInclusiveVBFSource = cms.EDAnalyzer("HLTInclusiveVBFSource",
    CaloJetCollectionLabel = cms.InputTag("ak4CaloJets"),
    CaloMETCollectionLabel = cms.InputTag("met"),
    PFJetCollectionLabel = cms.InputTag("ak4PFJets"),
    PFMETCollectionLabel = cms.InputTag("pfMet"),
    debug = cms.untracked.bool(False),
    deltaRMatch = cms.untracked.double(0.1),
    dirname = cms.untracked.string('HLT/InclusiveVBF'),
    etaOpposite = cms.untracked.bool(True),
    minDeltaEta = cms.untracked.double(3.5),
    minInvMass = cms.untracked.double(1000.0),
    minPtHigh = cms.untracked.double(40.0),
    minPtLow = cms.untracked.double(40.0),
    processname = cms.string('HLT'),
    triggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    triggerSummaryLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT")
)


process.hltMuonOfflineAnalyzer = cms.EDAnalyzer("HLTMuonOfflineAnalyzer",
    binParams = cms.untracked.PSet(
        NVertex = cms.untracked.vdouble(20, 1, 50),
        charge = cms.untracked.vdouble(2, -2.0, 2.0),
        d0 = cms.untracked.vdouble(10, -0.5, 0.5),
        deltaR = cms.untracked.vdouble(20, 0.0, 0.05),
        eta = cms.untracked.vdouble(20, -2.4, 2.4),
        etaCoarse = cms.untracked.vdouble(-2.4, -2.1, -1.6, -1.2, -0.8, 
            0.0, 0.8, 1.2, 1.6, 2.1, 
            2.4),
        jpsiMass = cms.untracked.vdouble(60, 0.0, 6.0),
        phi = cms.untracked.vdouble(20, -3.14, 3.14),
        phiCoarse = cms.untracked.vdouble(10, -3.14, 3.14),
        pt = cms.untracked.vdouble(0.0, 2.0, 4.0, 6.0, 8.0, 
            10.0, 20.0, 30.0, 40.0, 100.0, 
            200.0, 400.0),
        ptCoarse = cms.untracked.vdouble(10.0, 20.0, 40.0, 60.0, 80.0, 
            100.0, 200.0),
        resolutionEta = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionPhi = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionRel = cms.untracked.vdouble(20, -0.15, 0.15),
        z0 = cms.untracked.vdouble(10, -15.0, 15.0),
        zMass = cms.untracked.vdouble(50, 65.0, 115.0)
    ),
    destination = cms.untracked.string('HLT/Muon/Distributions/globalMuons'),
    hltPathsToCheck = cms.vstring('HLT_Mu45_eta2p1_v1', 
        'HLT_Mu50_v', 
        'HLT_IsoMu24_v', 
        'HLT_IsoTkMu24_v', 
        'HLT_Mu17_Mu8_DZ_v', 
        'HLT_Mu17_TkMu8_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v', 
        'HLT_IsoMu20_eta2p1_v', 
        'HLT_IsoTkMu20_eta2p1_v', 
        'HLT_IsoMu24_eta2p1_v', 
        'HLT_IsoTkMu24_eta2p1_v', 
        'HLT_Mu24_eta2p1_v', 
        'HLT_TkMu24_v', 
        'HLT_IsoMu27_v', 
        'HLT_IsoTkMu27_v', 
        'HLT_Mu27_v', 
        'HLT_TkMu27_v', 
        'HLT_IsoMu20_v', 
        'HLT_Mu20_v', 
        'HLT_TkMu20_v', 
        'HLT_IsoTkMu20_v', 
        'HLT_IsoMu22_v', 
        'HLT_IsoTkMu22_v', 
        'HLT_IsoMu18_v', 
        'HLT_IsoTkMu18_v', 
        'HLT_OldIsoMu18_v', 
        'HLT_OldIsoTkMu18_v', 
        'HLT_L1SingleMu16_v', 
        'HLT_L2Mu10_v', 
        'HLT_HIL1DoubleMu0', 
        'HLT_HIL1DoubleMu0BPTX', 
        'HLT_HIL2Mu3', 
        'HLT_HIL2Mu3BPTX', 
        'HLT_HIL2Mu7', 
        'HLT_HIL2Mu15', 
        'HLT_HIL2Mu3_NHitQ', 
        'HLT_HIL2DoubleMu0', 
        'HLT_HIL2DoubleMu0BPTX', 
        'HLT_HIL2DoubleMu0_NHitQ', 
        'HLT_HIL2DoubleMu3', 
        'HLT_HIL3Mu3', 
        'HLT_HIL3Mu3BPTX', 
        'HLT_HIL3DoubleMuOpen'),
    hltProcessName = cms.string('HLT'),
    inputTags = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        offlinePVs = cms.InputTag("offlinePrimaryVertices"),
        recoMuon = cms.InputTag("muons"),
        triggerResults = cms.InputTag("TriggerResults"),
        triggerSummary = cms.InputTag("hltTriggerSummaryAOD")
    ),
    plotCuts = cms.PSet(
        L1DeltaR = cms.untracked.double(0.3),
        L2DeltaR = cms.untracked.double(0.3),
        L3DeltaR = cms.untracked.double(0.05),
        maxEta = cms.untracked.double(2.1),
        minPtFactor = cms.untracked.double(1.2)
    ),
    probeParams = cms.PSet(
        d0Cut = cms.untracked.double(2.0),
        hltCuts = cms.untracked.string('abs(eta) < 2.0'),
        recoCuts = cms.untracked.string('isGlobalMuon && abs(eta) < 2.0'),
        z0Cut = cms.untracked.double(25.0)
    ),
    requiredTriggers = cms.untracked.vstring(),
    targetParams = cms.PSet(
        d0Cut = cms.untracked.double(2.0),
        hltCuts = cms.untracked.string('abs(eta) < 2.4'),
        recoCuts = cms.untracked.string('isGlobalMuon && abs(eta) < 2.4'),
        z0Cut = cms.untracked.double(25.0)
    )
)


process.hltResults = cms.EDAnalyzer("GeneralHLTOffline",
    HltProcessName = cms.string('HLT'),
    LuminositySegmentSize = cms.untracked.double(23),
    NLuminositySegments = cms.untracked.uint32(2000),
    Nbins = cms.untracked.uint32(50),
    Nbins2D = cms.untracked.uint32(40),
    NbinsOneOverEt = cms.untracked.uint32(1000),
    RecHitsEBTag = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEB"),
    RecHitsEETag = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEE"),
    dirname = cms.untracked.string('HLT/General/paths'),
    electronEtMin = cms.untracked.double(5.0),
    jetEtMin = cms.untracked.double(5.0),
    jetEtaMax = cms.untracked.double(3.0),
    muonEtaMax = cms.untracked.double(2.1),
    muonRecoCollectionName = cms.untracked.string('muons'),
    photonEtMin = cms.untracked.double(5.0),
    plotAll = cms.untracked.bool(False),
    processname = cms.string('HLT'),
    ptMax = cms.untracked.double(100.0),
    ptMin = cms.untracked.double(0.0),
    referenceBX = cms.untracked.uint32(1),
    tauEtMin = cms.untracked.double(10.0),
    triggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    triggerSummaryLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT")
)


process.hltTauOfflineCertification = cms.EDAnalyzer("HLTTauCertifier",
    inputMEs = cms.vstring('HLT/TauOffline/Inclusive/DoubleTau/TriggerBits'),
    setBadRunOnErrors = cms.bool(True),
    setBadRunOnWarnings = cms.bool(False),
    targetDir = cms.string('HLT/EventInfo/reportSummaryContents'),
    targetME = cms.string('HLT_Tau')
)


process.hltTauOfflineMonitor_Inclusive = cms.EDAnalyzer("HLTTauDQMOfflineSource",
    DQMBaseFolder = cms.untracked.string('HLT/TauOffline/Inclusive'),
    HLTProcessName = cms.untracked.string('HLT'),
    L1Plotter = cms.untracked.PSet(
        DQMFolder = cms.untracked.string('L1'),
        L1ETM = cms.untracked.InputTag("l1extraParticles","MET"),
        L1ETMMin = cms.untracked.double(50),
        L1IsoTaus = cms.untracked.InputTag("l1extraParticles","IsoTau"),
        L1JetMinEt = cms.untracked.double(40),
        L1Jets = cms.untracked.InputTag("l1extraParticles","Central"),
        L1Taus = cms.untracked.InputTag("l1extraParticles","Tau")
    ),
    Matching = cms.PSet(
        doMatching = cms.untracked.bool(False),
        matchFilters = cms.untracked.VPSet()
    ),
    PathSummaryPlotter = cms.untracked.PSet(
        DQMFolder = cms.untracked.string('Summary')
    ),
    Paths = cms.untracked.string('PFTau'),
    TriggerEventSrc = cms.untracked.InputTag("hltTriggerSummaryAOD","","HLT"),
    TriggerResultsSrc = cms.untracked.InputTag("TriggerResults","","HLT")
)


process.hltTauOfflineMonitor_PFTaus = cms.EDAnalyzer("HLTTauDQMOfflineSource",
    DQMBaseFolder = cms.untracked.string('HLT/TauOffline/PFTaus'),
    HLTProcessName = cms.untracked.string('HLT'),
    L1Plotter = cms.untracked.PSet(
        DQMFolder = cms.untracked.string('L1'),
        L1ETM = cms.untracked.InputTag("l1extraParticles","MET"),
        L1ETMMin = cms.untracked.double(50),
        L1IsoTaus = cms.untracked.InputTag("l1extraParticles","IsoTau"),
        L1JetMinEt = cms.untracked.double(40),
        L1Jets = cms.untracked.InputTag("l1extraParticles","Central"),
        L1Taus = cms.untracked.InputTag("l1extraParticles","Tau")
    ),
    Matching = cms.PSet(
        doMatching = cms.untracked.bool(False),
        matchFilters = cms.untracked.VPSet(cms.untracked.PSet(
            FilterName = cms.untracked.InputTag("TauRefProducer","PFTaus"),
            matchObjectID = cms.untracked.int32(15)
        ), 
            cms.untracked.PSet(
                FilterName = cms.untracked.InputTag("TauRefProducer","Electrons"),
                matchObjectID = cms.untracked.int32(11)
            ), 
            cms.untracked.PSet(
                FilterName = cms.untracked.InputTag("TauRefProducer","Muons"),
                matchObjectID = cms.untracked.int32(13)
            ), 
            cms.untracked.PSet(
                FilterName = cms.untracked.InputTag("TauRefProducer","MET"),
                matchObjectID = cms.untracked.int32(0)
            ))
    ),
    PathSummaryPlotter = cms.untracked.PSet(
        DQMFolder = cms.untracked.string('Summary')
    ),
    Paths = cms.untracked.string('PFTau'),
    TriggerEventSrc = cms.untracked.InputTag("hltTriggerSummaryAOD","","HLT"),
    TriggerResultsSrc = cms.untracked.InputTag("TriggerResults","","HLT")
)


process.hltTauOfflineQualityTests = cms.EDAnalyzer("QualityTester",
    getQualityTestsFromFile = cms.untracked.bool(True),
    prescaleFactor = cms.untracked.int32(1),
    qtList = cms.untracked.FileInPath('DQMOffline/Trigger/data/HLT_Tau_QualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string('black'),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(False)
)


process.hotlineDQM_HT = cms.EDAnalyzer("HotlineDQM",
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMetCollection = cms.InputTag("caloMet"),
    muonCollection = cms.InputTag("muons"),
    pfMetCollection = cms.InputTag("pfMet"),
    photonCollection = cms.InputTag("photons"),
    trigSummary = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerFilter = cms.InputTag("hltHT2000","","HLT"),
    triggerPath = cms.string('HLT_HT2000_v'),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    useHT = cms.bool(True)
)


process.hotlineDQM_HT_Tight = cms.EDAnalyzer("HotlineDQM",
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMetCollection = cms.InputTag("caloMet"),
    muonCollection = cms.InputTag("muons"),
    pfMetCollection = cms.InputTag("pfMet"),
    photonCollection = cms.InputTag("photons"),
    trigSummary = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerFilter = cms.InputTag("hltHT2500","","HLT"),
    triggerPath = cms.string('HLT_HT2500_v'),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    useHT = cms.bool(True)
)


process.hotlineDQM_MET = cms.EDAnalyzer("HotlineDQM",
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMetCollection = cms.InputTag("caloMet"),
    muonCollection = cms.InputTag("muons"),
    pfMetCollection = cms.InputTag("pfMet"),
    photonCollection = cms.InputTag("photons"),
    trigSummary = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerFilter = cms.InputTag("hltMET250","","HLT"),
    triggerPath = cms.string('HLT_MET250_v'),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    useMet = cms.bool(True)
)


process.hotlineDQM_MET_Tight = cms.EDAnalyzer("HotlineDQM",
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMetCollection = cms.InputTag("caloMet"),
    muonCollection = cms.InputTag("muons"),
    pfMetCollection = cms.InputTag("pfMet"),
    photonCollection = cms.InputTag("photons"),
    trigSummary = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerFilter = cms.InputTag("hltMET300","","HLT"),
    triggerPath = cms.string('HLT_MET300_v'),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    useMet = cms.bool(True)
)


process.hotlineDQM_Muon = cms.EDAnalyzer("HotlineDQM",
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMetCollection = cms.InputTag("caloMet"),
    muonCollection = cms.InputTag("muons"),
    pfMetCollection = cms.InputTag("pfMet"),
    photonCollection = cms.InputTag("photons"),
    trigSummary = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerFilter = cms.InputTag("hltL3fL1sMu16orMu25L1f0L2f16QL3Filtered300Q","","HLT"),
    triggerPath = cms.string('HLT_Mu300_v'),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    useMuons = cms.bool(True)
)


process.hotlineDQM_Muon_Tight = cms.EDAnalyzer("HotlineDQM",
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMetCollection = cms.InputTag("caloMet"),
    muonCollection = cms.InputTag("muons"),
    pfMetCollection = cms.InputTag("pfMet"),
    photonCollection = cms.InputTag("photons"),
    trigSummary = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerFilter = cms.InputTag("hltL3fL1sMu16orMu25L1f0L2f16QL3Filtered350Q","","HLT"),
    triggerPath = cms.string('HLT_Mu350_v'),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    useMuons = cms.bool(True)
)


process.hotlineDQM_PFMET = cms.EDAnalyzer("HotlineDQM",
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMetCollection = cms.InputTag("caloMet"),
    muonCollection = cms.InputTag("muons"),
    pfMetCollection = cms.InputTag("pfMet"),
    photonCollection = cms.InputTag("photons"),
    trigSummary = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerFilter = cms.InputTag("hltPFMET300Filter","","HLT"),
    triggerPath = cms.string('HLT_PFMET300_JetIdCleaned_v'),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    usePFMet = cms.bool(True)
)


process.hotlineDQM_PFMET_Tight = cms.EDAnalyzer("HotlineDQM",
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMetCollection = cms.InputTag("caloMet"),
    muonCollection = cms.InputTag("muons"),
    pfMetCollection = cms.InputTag("pfMet"),
    photonCollection = cms.InputTag("photons"),
    trigSummary = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerFilter = cms.InputTag("hltPFMET400Filter","","HLT"),
    triggerPath = cms.string('HLT_PFMET400_JetIdCleaned_v'),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    usePFMet = cms.bool(True)
)


process.hotlineDQM_Photon = cms.EDAnalyzer("HotlineDQM",
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMetCollection = cms.InputTag("caloMet"),
    muonCollection = cms.InputTag("muons"),
    pfMetCollection = cms.InputTag("pfMet"),
    photonCollection = cms.InputTag("photons"),
    trigSummary = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerFilter = cms.InputTag("hltEG500HEFilter","","HLT"),
    triggerPath = cms.string('HLT_Photon500_v'),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    usePhotons = cms.bool(True)
)


process.hotlineDQM_Photon_Tight = cms.EDAnalyzer("HotlineDQM",
    caloJetCollection = cms.InputTag("ak4CaloJets"),
    caloMetCollection = cms.InputTag("caloMet"),
    muonCollection = cms.InputTag("muons"),
    pfMetCollection = cms.InputTag("pfMet"),
    photonCollection = cms.InputTag("photons"),
    trigSummary = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    triggerFilter = cms.InputTag("hltEG600HEFilter","","HLT"),
    triggerPath = cms.string('HLT_Photon600_v'),
    triggerResults = cms.InputTag("TriggerResults","","HLT"),
    usePhotons = cms.bool(True)
)


process.iter0HPTracksMonitoringHLT = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('GenTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(49.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot', 
        'Strip', 
        'Pix') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('HLT/Tracking/iter0HP') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(100) ),
        ("TCSizeMax" , cms.double(499.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(100) ),
        ("TkSeedSizeMax" , cms.double(499.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(200) ),
        ("TkSizeMax" , cms.double(999.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("hltIter0PFlowTrackSelectionHighPurity") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hltIter0PFlowTrackSelectionHighPurity") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doGoodTrackLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doGoodTrackPlots" , cms.bool(True) ),
        ("doGoodTrackRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
    ] +
    [
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag(cms.InputTag("offlinePrimaryVertices"), cms.InputTag("pixelVertices")) ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring('offline', 
        'pixel') ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag(cms.InputTag("goodOfflinePrimaryVertices"), cms.InputTag("")) ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.iter0TracksMonitoringHLT = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('GenTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(49.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot', 
        'Strip', 
        'Pix') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('HLT/Tracking/iter0') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(100) ),
        ("TCSizeMax" , cms.double(499.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(100) ),
        ("TkSeedSizeMax" , cms.double(499.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(200) ),
        ("TkSizeMax" , cms.double(999.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("hltIter0PFlowCtfWithMaterialTracks") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hltIter0PFlowCtfWithMaterialTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doGoodTrackLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doGoodTrackPlots" , cms.bool(True) ),
        ("doGoodTrackRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
    ] +
    [
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag(cms.InputTag("offlinePrimaryVertices"), cms.InputTag("pixelVertices")) ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring('offline', 
        'pixel') ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag(cms.InputTag("goodOfflinePrimaryVertices"), cms.InputTag("")) ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.iter1HPTracksMonitoringHLT = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('GenTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(49.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot', 
        'Strip', 
        'Pix') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('HLT/Tracking/iter1HP') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(100) ),
        ("TCSizeMax" , cms.double(499.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(100) ),
        ("TkSeedSizeMax" , cms.double(499.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(200) ),
        ("TkSizeMax" , cms.double(999.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("hltIter1PFlowTrackSelectionHighPurity") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hltIter1PFlowTrackSelectionHighPurity") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doGoodTrackLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doGoodTrackPlots" , cms.bool(True) ),
        ("doGoodTrackRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
    ] +
    [
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag(cms.InputTag("offlinePrimaryVertices"), cms.InputTag("pixelVertices")) ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring('offline', 
        'pixel') ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag(cms.InputTag("goodOfflinePrimaryVertices"), cms.InputTag("")) ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.iter1TracksMonitoringHLT = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('GenTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(49.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot', 
        'Strip', 
        'Pix') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('HLT/Tracking/iter1') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(100) ),
        ("TCSizeMax" , cms.double(499.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(100) ),
        ("TkSeedSizeMax" , cms.double(499.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(200) ),
        ("TkSizeMax" , cms.double(999.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("hltIter1PFlowCtfWithMaterialTracks") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hltIter1PFlowCtfWithMaterialTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doGoodTrackLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doGoodTrackPlots" , cms.bool(True) ),
        ("doGoodTrackRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
    ] +
    [
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag(cms.InputTag("offlinePrimaryVertices"), cms.InputTag("pixelVertices")) ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring('offline', 
        'pixel') ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag(cms.InputTag("goodOfflinePrimaryVertices"), cms.InputTag("")) ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.iter2HPTracksMonitoringHLT = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('GenTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(49.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot', 
        'Strip', 
        'Pix') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('HLT/Tracking/iter2HP') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(100) ),
        ("TCSizeMax" , cms.double(499.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(100) ),
        ("TkSeedSizeMax" , cms.double(499.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(200) ),
        ("TkSizeMax" , cms.double(999.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("hltIter2PFlowTrackSelectionHighPurity") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hltIter2PFlowTrackSelectionHighPurity") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doGoodTrackLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doGoodTrackPlots" , cms.bool(True) ),
        ("doGoodTrackRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
    ] +
    [
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag(cms.InputTag("offlinePrimaryVertices"), cms.InputTag("pixelVertices")) ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring('offline', 
        'pixel') ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag(cms.InputTag("goodOfflinePrimaryVertices"), cms.InputTag("")) ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.iter2TracksMonitoringHLT = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('GenTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(49.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot', 
        'Strip', 
        'Pix') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('HLT/Tracking/iter2') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(100) ),
        ("TCSizeMax" , cms.double(499.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(100) ),
        ("TkSeedSizeMax" , cms.double(499.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(200) ),
        ("TkSizeMax" , cms.double(999.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("hltIter2PFlowCtfWithMaterialTracks") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hltIter2PFlowCtfWithMaterialTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doGoodTrackLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doGoodTrackPlots" , cms.bool(True) ),
        ("doGoodTrackRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
    ] +
    [
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag(cms.InputTag("offlinePrimaryVertices"), cms.InputTag("pixelVertices")) ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring('offline', 
        'pixel') ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag(cms.InputTag("goodOfflinePrimaryVertices"), cms.InputTag("")) ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.iter3TracksMonitoringHLT = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('GenTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(49.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot', 
        'Strip', 
        'Pix') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('HLT/Tracking/iter3Merged') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(100) ),
        ("TCSizeMax" , cms.double(499.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(100) ),
        ("TkSeedSizeMax" , cms.double(499.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(200) ),
        ("TkSizeMax" , cms.double(999.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("hltIter3Merged") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hltIter3Merged") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doGoodTrackLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doGoodTrackPlots" , cms.bool(True) ),
        ("doGoodTrackRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
    ] +
    [
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag(cms.InputTag("offlinePrimaryVertices"), cms.InputTag("pixelVertices")) ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring('offline', 
        'pixel') ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag(cms.InputTag("goodOfflinePrimaryVertices"), cms.InputTag("")) ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.iter4TracksMonitoringHLT = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('GenTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(49.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot', 
        'Strip', 
        'Pix') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('HLT/Tracking/iter4Merged') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(100) ),
        ("TCSizeMax" , cms.double(499.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(100) ),
        ("TkSeedSizeMax" , cms.double(499.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(200) ),
        ("TkSizeMax" , cms.double(999.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("hltIter4Merged") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hltIter4Merged") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doGoodTrackLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doGoodTrackPlots" , cms.bool(True) ),
        ("doGoodTrackRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
    ] +
    [
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag(cms.InputTag("offlinePrimaryVertices"), cms.InputTag("pixelVertices")) ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring('offline', 
        'pixel') ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag(cms.InputTag("goodOfflinePrimaryVertices"), cms.InputTag("")) ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.iterHLTTracksMonitoringHLT = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('GenTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(49.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot', 
        'Strip', 
        'Pix') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('HLT/Tracking/iter2Merged') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(100) ),
        ("TCSizeMax" , cms.double(499.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(100) ),
        ("TkSeedSizeMax" , cms.double(499.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(200) ),
        ("TkSizeMax" , cms.double(999.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("hltIter2Merged") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hltIter2Merged") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doGoodTrackLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doGoodTrackPlots" , cms.bool(True) ),
        ("doGoodTrackRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
    ] +
    [
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag(cms.InputTag("offlinePrimaryVertices"), cms.InputTag("pixelVertices")) ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring('offline', 
        'pixel') ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag(cms.InputTag("goodOfflinePrimaryVertices"), cms.InputTag("")) ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.jetDQMAnalyzerAk4CaloCleaned = cms.EDAnalyzer("JetAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(False),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
    ),
    DCSFilterForJetMonitoring = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf'),
        alwaysPass = cms.untracked.bool(False)
    ),
    InputCutPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedDiscriminant"),
    InputCutPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedId"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    InputMVAPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","fullDiscriminant"),
    InputMVAPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","fullId"),
    InputQGAxis2 = cms.InputTag("QGTagger","axis2"),
    InputQGLikelihood = cms.InputTag("QGTagger","qgLikelihood"),
    InputQGMultiplicity = cms.InputTag("QGTagger","mult"),
    InputQGPtDToken = cms.InputTag("QGTagger","ptD"),
    JetCleaningFlag = cms.untracked.bool(True),
    JetCorrections = cms.InputTag("dqmAk4CaloL2L3ResidualCorrector"),
    JetIDQuality = cms.string('LOOSE'),
    JetIDVersion = cms.string('PURE09'),
    JetType = cms.string('calo'),
    METCollectionLabel = cms.InputTag("caloMet"),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCHShistos = cms.bool(False),
    filljetHighLevel = cms.bool(False),
    highPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_highptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet300_v', 
            'HLT_Jet300_v6', 
            'HLT_Jet300_v7', 
            'HLT_Jet300_v8')
    ),
    jetAnalysis = cms.PSet(
        asymmetryThirdJetCut = cms.double(30),
        balanceThirdJetCut = cms.double(0.2),
        eBin = cms.int32(100),
        eMax = cms.double(1000.0),
        eMin = cms.double(0.0),
        etaBin = cms.int32(100),
        etaMax = cms.double(5.0),
        etaMin = cms.double(-5.0),
        fillJIDPassFrac = cms.int32(1),
        pBin = cms.int32(100),
        pMax = cms.double(500.0),
        pMin = cms.double(0.0),
        pVBin = cms.int32(100),
        pVMax = cms.double(100.0),
        pVMin = cms.double(0.0),
        phiBin = cms.int32(70),
        phiMax = cms.double(3.2),
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(100),
        ptMax = cms.double(500.0),
        ptMin = cms.double(20.0),
        ptThreshold = cms.double(20.0),
        ptThresholdUnc = cms.double(30),
        verbose = cms.int32(0)
    ),
    jetsrc = cms.InputTag("ak4CaloJets"),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    lowPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_lowptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet60_v', 
            'HLT_Jet60_v6', 
            'HLT_Jet60_v7', 
            'HLT_Jet60_v8')
    ),
    muonsrc = cms.InputTag("muons"),
    processname = cms.string('HLT'),
    runcosmics = cms.untracked.bool(False)
)


process.jetDQMAnalyzerAk4CaloUncleaned = cms.EDAnalyzer("JetAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(True),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
    ),
    DCSFilterForJetMonitoring = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf'),
        alwaysPass = cms.untracked.bool(False)
    ),
    InputCutPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedDiscriminant"),
    InputCutPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedId"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    InputMVAPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","fullDiscriminant"),
    InputMVAPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","fullId"),
    InputQGAxis2 = cms.InputTag("QGTagger","axis2"),
    InputQGLikelihood = cms.InputTag("QGTagger","qgLikelihood"),
    InputQGMultiplicity = cms.InputTag("QGTagger","mult"),
    InputQGPtDToken = cms.InputTag("QGTagger","ptD"),
    JetCleaningFlag = cms.untracked.bool(False),
    JetCorrections = cms.InputTag("dqmAk4CaloL2L3ResidualCorrector"),
    JetIDQuality = cms.string('LOOSE'),
    JetIDVersion = cms.string('PURE09'),
    JetType = cms.string('calo'),
    METCollectionLabel = cms.InputTag("caloMet"),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCHShistos = cms.bool(False),
    filljetHighLevel = cms.bool(False),
    highPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_highptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet300_v', 
            'HLT_Jet300_v6', 
            'HLT_Jet300_v7', 
            'HLT_Jet300_v8')
    ),
    jetAnalysis = cms.PSet(
        asymmetryThirdJetCut = cms.double(30),
        balanceThirdJetCut = cms.double(0.2),
        eBin = cms.int32(100),
        eMax = cms.double(1000.0),
        eMin = cms.double(0.0),
        etaBin = cms.int32(100),
        etaMax = cms.double(5.0),
        etaMin = cms.double(-5.0),
        fillJIDPassFrac = cms.int32(1),
        pBin = cms.int32(100),
        pMax = cms.double(500.0),
        pMin = cms.double(0.0),
        pVBin = cms.int32(100),
        pVMax = cms.double(100.0),
        pVMin = cms.double(0.0),
        phiBin = cms.int32(70),
        phiMax = cms.double(3.2),
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(100),
        ptMax = cms.double(500.0),
        ptMin = cms.double(20.0),
        ptThreshold = cms.double(20.0),
        ptThresholdUnc = cms.double(30),
        verbose = cms.int32(0)
    ),
    jetsrc = cms.InputTag("ak4CaloJets"),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    lowPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_lowptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet60_v', 
            'HLT_Jet60_v6', 
            'HLT_Jet60_v7', 
            'HLT_Jet60_v8')
    ),
    muonsrc = cms.InputTag("muons"),
    processname = cms.string('HLT'),
    runcosmics = cms.untracked.bool(False)
)


process.jetDQMAnalyzerAk4PFCHSCleaned = cms.EDAnalyzer("JetAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(False),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
    ),
    DCSFilterForJetMonitoring = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf:pixel:sistrip:es:muon'),
        alwaysPass = cms.untracked.bool(False)
    ),
    InputCutPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorCHSDQM","cutbasedDiscriminant"),
    InputCutPUIDValue = cms.InputTag("pileupJetIdEvaluatorCHSDQM","cutbasedId"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    InputMVAPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorCHSDQM","fullDiscriminant"),
    InputMVAPUIDValue = cms.InputTag("pileupJetIdEvaluatorCHSDQM","fullId"),
    InputQGAxis2 = cms.InputTag("QGTagger","axis2"),
    InputQGLikelihood = cms.InputTag("QGTagger","qgLikelihood"),
    InputQGMultiplicity = cms.InputTag("QGTagger","mult"),
    InputQGPtDToken = cms.InputTag("QGTagger","ptD"),
    JetCleaningFlag = cms.untracked.bool(True),
    JetCorrections = cms.InputTag("dqmAk4PFCHSL1FastL2L3ResidualCorrector"),
    JetIDQuality = cms.string('LOOSE'),
    JetIDVersion = cms.string('FIRSTDATA'),
    JetType = cms.string('pf'),
    METCollectionLabel = cms.InputTag("pfMETT1"),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCHShistos = cms.bool(True),
    filljetHighLevel = cms.bool(True),
    highPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_highptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet300_v', 
            'HLT_Jet300_v6', 
            'HLT_Jet300_v7', 
            'HLT_Jet300_v8')
    ),
    jetAnalysis = cms.PSet(
        asymmetryThirdJetCut = cms.double(30),
        balanceThirdJetCut = cms.double(0.2),
        eBin = cms.int32(100),
        eMax = cms.double(1000.0),
        eMin = cms.double(0.0),
        etaBin = cms.int32(100),
        etaMax = cms.double(5.0),
        etaMin = cms.double(-5.0),
        fillJIDPassFrac = cms.int32(1),
        pBin = cms.int32(100),
        pMax = cms.double(500.0),
        pMin = cms.double(0.0),
        pVBin = cms.int32(100),
        pVMax = cms.double(100.0),
        pVMin = cms.double(0.0),
        phiBin = cms.int32(70),
        phiMax = cms.double(3.2),
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(100),
        ptMax = cms.double(500.0),
        ptMin = cms.double(20.0),
        ptThreshold = cms.double(20.0),
        ptThresholdUnc = cms.double(30),
        verbose = cms.int32(0)
    ),
    jetsrc = cms.InputTag("ak4PFJetsCHS"),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    lowPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_lowptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet60_v', 
            'HLT_Jet60_v6', 
            'HLT_Jet60_v7', 
            'HLT_Jet60_v8')
    ),
    muonsrc = cms.InputTag("muons"),
    processname = cms.string('HLT'),
    runcosmics = cms.untracked.bool(False)
)


process.jetDQMAnalyzerAk4PFCHSCleanedMiniAOD = cms.EDAnalyzer("JetAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(False),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQMforMiniAOD")
    ),
    DCSFilterForJetMonitoring = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf:pixel:sistrip:es:muon'),
        alwaysPass = cms.untracked.bool(False)
    ),
    InputCutPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedDiscriminant"),
    InputCutPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedId"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    InputMVAPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","fullDiscriminant"),
    InputMVAPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","fullId"),
    InputQGAxis2 = cms.InputTag("QGTagger","axis2"),
    InputQGLikelihood = cms.InputTag("QGTagger","qgLikelihood"),
    InputQGMultiplicity = cms.InputTag("QGTagger","mult"),
    InputQGPtDToken = cms.InputTag("QGTagger","ptD"),
    JetCleaningFlag = cms.untracked.bool(True),
    JetCorrections = cms.InputTag("dqmAk4PFL1FastL2L3ResidualCorrector"),
    JetIDQuality = cms.string('LOOSE'),
    JetIDVersion = cms.string('FIRSTDATA'),
    JetType = cms.string('miniaod'),
    METCollectionLabel = cms.InputTag("pfMet"),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCHShistos = cms.bool(False),
    filljetHighLevel = cms.bool(False),
    highPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_highptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet300_v', 
            'HLT_Jet300_v6', 
            'HLT_Jet300_v7', 
            'HLT_Jet300_v8')
    ),
    jetAnalysis = cms.PSet(
        asymmetryThirdJetCut = cms.double(30),
        balanceThirdJetCut = cms.double(0.2),
        eBin = cms.int32(100),
        eMax = cms.double(1000.0),
        eMin = cms.double(0.0),
        etaBin = cms.int32(100),
        etaMax = cms.double(5.0),
        etaMin = cms.double(-5.0),
        fillJIDPassFrac = cms.int32(1),
        pBin = cms.int32(100),
        pMax = cms.double(500.0),
        pMin = cms.double(0.0),
        pVBin = cms.int32(100),
        pVMax = cms.double(100.0),
        pVMin = cms.double(0.0),
        phiBin = cms.int32(70),
        phiMax = cms.double(3.2),
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(100),
        ptMax = cms.double(500.0),
        ptMin = cms.double(20.0),
        ptThreshold = cms.double(20.0),
        ptThresholdUnc = cms.double(30),
        verbose = cms.int32(0)
    ),
    jetsrc = cms.InputTag("slimmedJets"),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    lowPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_lowptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet60_v', 
            'HLT_Jet60_v6', 
            'HLT_Jet60_v7', 
            'HLT_Jet60_v8')
    ),
    muonsrc = cms.InputTag("muons"),
    processname = cms.string('HLT'),
    runcosmics = cms.untracked.bool(False)
)


process.jetDQMAnalyzerAk4PFCHSUncleanedMiniAOD = cms.EDAnalyzer("JetAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(False),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQMforMiniAOD")
    ),
    DCSFilterForJetMonitoring = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf:pixel:sistrip:es:muon'),
        alwaysPass = cms.untracked.bool(False)
    ),
    InputCutPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedDiscriminant"),
    InputCutPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedId"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    InputMVAPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","fullDiscriminant"),
    InputMVAPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","fullId"),
    InputQGAxis2 = cms.InputTag("QGTagger","axis2"),
    InputQGLikelihood = cms.InputTag("QGTagger","qgLikelihood"),
    InputQGMultiplicity = cms.InputTag("QGTagger","mult"),
    InputQGPtDToken = cms.InputTag("QGTagger","ptD"),
    JetCleaningFlag = cms.untracked.bool(False),
    JetCorrections = cms.InputTag("dqmAk4PFL1FastL2L3ResidualCorrector"),
    JetIDQuality = cms.string('LOOSE'),
    JetIDVersion = cms.string('FIRSTDATA'),
    JetType = cms.string('miniaod'),
    METCollectionLabel = cms.InputTag("slimmedMETs"),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCHShistos = cms.bool(False),
    filljetHighLevel = cms.bool(True),
    highPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_highptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet300_v', 
            'HLT_Jet300_v6', 
            'HLT_Jet300_v7', 
            'HLT_Jet300_v8')
    ),
    jetAnalysis = cms.PSet(
        asymmetryThirdJetCut = cms.double(30),
        balanceThirdJetCut = cms.double(0.2),
        eBin = cms.int32(100),
        eMax = cms.double(1000.0),
        eMin = cms.double(0.0),
        etaBin = cms.int32(100),
        etaMax = cms.double(5.0),
        etaMin = cms.double(-5.0),
        fillJIDPassFrac = cms.int32(1),
        pBin = cms.int32(100),
        pMax = cms.double(500.0),
        pMin = cms.double(0.0),
        pVBin = cms.int32(100),
        pVMax = cms.double(100.0),
        pVMin = cms.double(0.0),
        phiBin = cms.int32(70),
        phiMax = cms.double(3.2),
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(100),
        ptMax = cms.double(500.0),
        ptMin = cms.double(20.0),
        ptThreshold = cms.double(20.0),
        ptThresholdUnc = cms.double(30),
        verbose = cms.int32(0)
    ),
    jetsrc = cms.InputTag("slimmedJets"),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    lowPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_lowptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet60_v', 
            'HLT_Jet60_v6', 
            'HLT_Jet60_v7', 
            'HLT_Jet60_v8')
    ),
    muonsrc = cms.InputTag("muons"),
    processname = cms.string('HLT'),
    runcosmics = cms.untracked.bool(False)
)


process.jetDQMAnalyzerAk4PFCleaned = cms.EDAnalyzer("JetAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(False),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
    ),
    DCSFilterForJetMonitoring = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf:pixel:sistrip:es:muon'),
        alwaysPass = cms.untracked.bool(False)
    ),
    InputCutPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedDiscriminant"),
    InputCutPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedId"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    InputMVAPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","fullDiscriminant"),
    InputMVAPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","fullId"),
    InputQGAxis2 = cms.InputTag("QGTagger","axis2"),
    InputQGLikelihood = cms.InputTag("QGTagger","qgLikelihood"),
    InputQGMultiplicity = cms.InputTag("QGTagger","mult"),
    InputQGPtDToken = cms.InputTag("QGTagger","ptD"),
    JetCleaningFlag = cms.untracked.bool(True),
    JetCorrections = cms.InputTag("dqmAk4PFL1FastL2L3ResidualCorrector"),
    JetIDQuality = cms.string('LOOSE'),
    JetIDVersion = cms.string('FIRSTDATA'),
    JetType = cms.string('pf'),
    METCollectionLabel = cms.InputTag("pfMet"),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCHShistos = cms.bool(False),
    filljetHighLevel = cms.bool(False),
    highPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_highptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet300_v', 
            'HLT_Jet300_v6', 
            'HLT_Jet300_v7', 
            'HLT_Jet300_v8')
    ),
    jetAnalysis = cms.PSet(
        asymmetryThirdJetCut = cms.double(30),
        balanceThirdJetCut = cms.double(0.2),
        eBin = cms.int32(100),
        eMax = cms.double(1000.0),
        eMin = cms.double(0.0),
        etaBin = cms.int32(100),
        etaMax = cms.double(5.0),
        etaMin = cms.double(-5.0),
        fillJIDPassFrac = cms.int32(1),
        pBin = cms.int32(100),
        pMax = cms.double(500.0),
        pMin = cms.double(0.0),
        pVBin = cms.int32(100),
        pVMax = cms.double(100.0),
        pVMin = cms.double(0.0),
        phiBin = cms.int32(70),
        phiMax = cms.double(3.2),
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(100),
        ptMax = cms.double(500.0),
        ptMin = cms.double(20.0),
        ptThreshold = cms.double(20.0),
        ptThresholdUnc = cms.double(30),
        verbose = cms.int32(0)
    ),
    jetsrc = cms.InputTag("ak4PFJets"),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    lowPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_lowptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet60_v', 
            'HLT_Jet60_v6', 
            'HLT_Jet60_v7', 
            'HLT_Jet60_v8')
    ),
    muonsrc = cms.InputTag("muons"),
    processname = cms.string('HLT'),
    runcosmics = cms.untracked.bool(False)
)


process.jetDQMAnalyzerAk4PFUncleaned = cms.EDAnalyzer("JetAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(False),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
    ),
    DCSFilterForJetMonitoring = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf:pixel:sistrip:es:muon'),
        alwaysPass = cms.untracked.bool(False)
    ),
    InputCutPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedDiscriminant"),
    InputCutPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedId"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    InputMVAPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","fullDiscriminant"),
    InputMVAPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","fullId"),
    InputQGAxis2 = cms.InputTag("QGTagger","axis2"),
    InputQGLikelihood = cms.InputTag("QGTagger","qgLikelihood"),
    InputQGMultiplicity = cms.InputTag("QGTagger","mult"),
    InputQGPtDToken = cms.InputTag("QGTagger","ptD"),
    JetCleaningFlag = cms.untracked.bool(False),
    JetCorrections = cms.InputTag("dqmAk4PFL1FastL2L3ResidualCorrector"),
    JetIDQuality = cms.string('LOOSE'),
    JetIDVersion = cms.string('FIRSTDATA'),
    JetType = cms.string('pf'),
    METCollectionLabel = cms.InputTag("pfMet"),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCHShistos = cms.bool(False),
    filljetHighLevel = cms.bool(False),
    highPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_highptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet300_v', 
            'HLT_Jet300_v6', 
            'HLT_Jet300_v7', 
            'HLT_Jet300_v8')
    ),
    jetAnalysis = cms.PSet(
        asymmetryThirdJetCut = cms.double(30),
        balanceThirdJetCut = cms.double(0.2),
        eBin = cms.int32(100),
        eMax = cms.double(1000.0),
        eMin = cms.double(0.0),
        etaBin = cms.int32(100),
        etaMax = cms.double(5.0),
        etaMin = cms.double(-5.0),
        fillJIDPassFrac = cms.int32(1),
        pBin = cms.int32(100),
        pMax = cms.double(500.0),
        pMin = cms.double(0.0),
        pVBin = cms.int32(100),
        pVMax = cms.double(100.0),
        pVMin = cms.double(0.0),
        phiBin = cms.int32(70),
        phiMax = cms.double(3.2),
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(100),
        ptMax = cms.double(500.0),
        ptMin = cms.double(20.0),
        ptThreshold = cms.double(20.0),
        ptThresholdUnc = cms.double(30),
        verbose = cms.int32(0)
    ),
    jetsrc = cms.InputTag("ak4PFJets"),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    lowPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_lowptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet60_v', 
            'HLT_Jet60_v6', 
            'HLT_Jet60_v7', 
            'HLT_Jet60_v8')
    ),
    muonsrc = cms.InputTag("muons"),
    processname = cms.string('HLT'),
    runcosmics = cms.untracked.bool(False)
)


process.jetDQMAnalyzerAkPU3Calo = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundCalo"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('calo'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Pu'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akPu3CaloJets")
)


process.jetDQMAnalyzerAkPU3PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundPF"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('pf'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Pu'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akPu3PFJets")
)


process.jetDQMAnalyzerAkPU4Calo = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundCalo"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('calo'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Pu'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akPu4CaloJets")
)


process.jetDQMAnalyzerAkPU4PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundPF"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('pf'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Pu'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akPu4PFJets")
)


process.jetDQMAnalyzerAkPU5Calo = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundCalo"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('calo'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Pu'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akPu5CaloJets")
)


process.jetDQMAnalyzerAkPU5PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundPF"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('pf'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Pu'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akPu5PFJets")
)


process.jetDQMAnalyzerAkVs2Calo = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundCalo"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('calo'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Vs'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akVs2CaloJets")
)


process.jetDQMAnalyzerAkVs3Calo = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundCalo"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('calo'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Vs'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akVs3CaloJets")
)


process.jetDQMAnalyzerAkVs3PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundPF"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('pf'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Vs'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akVs3PFJets")
)


process.jetDQMAnalyzerAkVs4Calo = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundCalo"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('calo'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Vs'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akVs4CaloJets")
)


process.jetDQMAnalyzerAkVs4PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundPF"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('pf'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Vs'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akVs4PFJets")
)


process.jetDQMAnalyzerAkVs5Calo = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundCalo"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('calo'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Vs'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akVs5CaloJets")
)


process.jetDQMAnalyzerAkVs5PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons",
    Background = cms.InputTag("voronoiBackgroundPF"),
    JetCorrections = cms.string(''),
    JetType = cms.untracked.string('pf'),
    OutputFile = cms.untracked.string(''),
    PFcands = cms.InputTag("particleFlowTmp"),
    RThreshold = cms.double(0.3),
    UEAlgo = cms.untracked.string('Vs'),
    centralitybincollection = cms.InputTag("centralityBin","HFtowers"),
    centralitycollection = cms.InputTag("hiCentrality"),
    recoJetPtThreshold = cms.double(10),
    reverseEnergyFractionThreshold = cms.double(0.5),
    src = cms.InputTag("akVs5PFJets")
)


process.jetDQMAnalyzerIC5CaloHIUncleaned = cms.EDAnalyzer("JetAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(False),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("hiSelectedVertex")
    ),
    DCSFilterForJetMonitoring = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf:pixel:sistrip:es:muon'),
        alwaysPass = cms.untracked.bool(False)
    ),
    InputCutPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedDiscriminant"),
    InputCutPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","cutbasedId"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    InputMVAPUIDDiscriminant = cms.InputTag("pileupJetIdEvaluatorDQM","fullDiscriminant"),
    InputMVAPUIDValue = cms.InputTag("pileupJetIdEvaluatorDQM","fullId"),
    InputQGAxis2 = cms.InputTag("QGTagger","axis2"),
    InputQGLikelihood = cms.InputTag("QGTagger","qgLikelihood"),
    InputQGMultiplicity = cms.InputTag("QGTagger","mult"),
    InputQGPtDToken = cms.InputTag("QGTagger","ptD"),
    JetCleaningFlag = cms.untracked.bool(False),
    JetCorrections = cms.InputTag(""),
    JetIDQuality = cms.string('LOOSE'),
    JetIDVersion = cms.string('PURE09'),
    JetType = cms.string('calo'),
    METCollectionLabel = cms.InputTag("caloMet"),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCHShistos = cms.bool(False),
    filljetHighLevel = cms.bool(True),
    highPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_highptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet300_v', 
            'HLT_Jet300_v6', 
            'HLT_Jet300_v7', 
            'HLT_Jet300_v8')
    ),
    jetAnalysis = cms.PSet(
        asymmetryThirdJetCut = cms.double(30),
        balanceThirdJetCut = cms.double(0.2),
        eBin = cms.int32(100),
        eMax = cms.double(1000.0),
        eMin = cms.double(0.0),
        etaBin = cms.int32(100),
        etaMax = cms.double(5.0),
        etaMin = cms.double(-5.0),
        fillJIDPassFrac = cms.int32(1),
        pBin = cms.int32(100),
        pMax = cms.double(500.0),
        pMin = cms.double(0.0),
        pVBin = cms.int32(100),
        pVMax = cms.double(100.0),
        pVMin = cms.double(0.0),
        phiBin = cms.int32(70),
        phiMax = cms.double(3.2),
        phiMin = cms.double(-3.2),
        ptBin = cms.int32(100),
        ptMax = cms.double(500.0),
        ptMin = cms.double(20.0),
        ptThreshold = cms.double(20.0),
        ptThresholdUnc = cms.double(30),
        verbose = cms.int32(0)
    ),
    jetsrc = cms.InputTag("iterativeConePu5CaloJets"),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    lowPtJetTrigger = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_lowptjet'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Jet60_v', 
            'HLT_Jet60_v6', 
            'HLT_Jet60_v7', 
            'HLT_Jet60_v8')
    ),
    muonsrc = cms.InputTag("muons"),
    processname = cms.string('HLT'),
    runcosmics = cms.untracked.bool(True)
)


process.jetDQMMatchAkPu2CaloAkPu2PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuCalo'),
    Jet2 = cms.untracked.string('PuPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu2CaloJets"),
    src_Jet2 = cms.InputTag("akPu2PFJets")
)


process.jetDQMMatchAkPu2CaloAkVs2Calo = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuCalo'),
    Jet2 = cms.untracked.string('VsCalo'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu2CaloJets"),
    src_Jet2 = cms.InputTag("akVs2CaloJets")
)


process.jetDQMMatchAkPu2PFAkVs2PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuPF'),
    Jet2 = cms.untracked.string('VsPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu2PFJets"),
    src_Jet2 = cms.InputTag("akVs2PFJets")
)


process.jetDQMMatchAkPu3CaloAkPu3PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuCalo'),
    Jet2 = cms.untracked.string('PuPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu3CaloJets"),
    src_Jet2 = cms.InputTag("akPu3PFJets")
)


process.jetDQMMatchAkPu3CaloAkVs3Calo = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuCalo'),
    Jet2 = cms.untracked.string('VsCalo'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu3CaloJets"),
    src_Jet2 = cms.InputTag("akVs3CaloJets")
)


process.jetDQMMatchAkPu3PFAkVs3PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuPF'),
    Jet2 = cms.untracked.string('VsPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu3PFJets"),
    src_Jet2 = cms.InputTag("akVs3PFJets")
)


process.jetDQMMatchAkPu4CaloAkPu4PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuCalo'),
    Jet2 = cms.untracked.string('PuPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu4CaloJets"),
    src_Jet2 = cms.InputTag("akPu4PFJets")
)


process.jetDQMMatchAkPu4CaloAkVs4Calo = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuCalo'),
    Jet2 = cms.untracked.string('VsCalo'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu4CaloJets"),
    src_Jet2 = cms.InputTag("akVs4CaloJets")
)


process.jetDQMMatchAkPu4PFAkVs4PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuPF'),
    Jet2 = cms.untracked.string('VsPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu4PFJets"),
    src_Jet2 = cms.InputTag("akVs4PFJets")
)


process.jetDQMMatchAkPu5CaloAkPu5PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuCalo'),
    Jet2 = cms.untracked.string('PuPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu5CaloJets"),
    src_Jet2 = cms.InputTag("akPu5PFJets")
)


process.jetDQMMatchAkPu5CaloAkVs5Calo = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuCalo'),
    Jet2 = cms.untracked.string('VsCalo'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu5CaloJets"),
    src_Jet2 = cms.InputTag("akVs5CaloJets")
)


process.jetDQMMatchAkPu5PFAkVs5PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('PuPF'),
    Jet2 = cms.untracked.string('VsPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akPu5PFJets"),
    src_Jet2 = cms.InputTag("akVs5PFJets")
)


process.jetDQMMatchAkVs2CaloAkVs2PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('VsCalo'),
    Jet2 = cms.untracked.string('VsPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akVs2CaloJets"),
    src_Jet2 = cms.InputTag("akVs2PFJets")
)


process.jetDQMMatchAkVs3CaloAkVs3PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('VsCalo'),
    Jet2 = cms.untracked.string('VsPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akVs3CaloJets"),
    src_Jet2 = cms.InputTag("akVs3PFJets")
)


process.jetDQMMatchAkVs4CaloAkVs4PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('VsCalo'),
    Jet2 = cms.untracked.string('VsPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akVs4CaloJets"),
    src_Jet2 = cms.InputTag("akVs4PFJets")
)


process.jetDQMMatchAkVs5CaloAkVs5PF = cms.EDAnalyzer("JetAnalyzer_HeavyIons_matching",
    Jet1 = cms.untracked.string('VsCalo'),
    Jet2 = cms.untracked.string('VsPF'),
    recoDelRMatch = cms.double(0.2),
    recoJetEtaCut = cms.double(2.0),
    recoJetPtThreshold = cms.double(20.0),
    src_Jet1 = cms.InputTag("akVs5CaloJets"),
    src_Jet2 = cms.InputTag("akVs5PFJets")
)


process.jetMETHLTOfflineSource = cms.EDAnalyzer("JetMETHLTOfflineSource",
    CaloJetCollectionLabel = cms.InputTag("ak4CaloJets"),
    CaloJetCorLabel = cms.InputTag("ak4CaloL1FastL2L3Corrector"),
    CaloMETCollectionLabel = cms.InputTag("caloMet"),
    JetIDParams = cms.PSet(
        ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        hbheRecHitsColl = cms.InputTag("hbhereco"),
        hfRecHitsColl = cms.InputTag("hfreco"),
        hoRecHitsColl = cms.InputTag("horeco"),
        useRecHits = cms.bool(True)
    ),
    PFJetCollectionLabel = cms.InputTag("ak4PFJets"),
    PFJetCorLabel = cms.InputTag("ak4PFL1FastL2L3Corrector"),
    PFMETCollectionLabel = cms.InputTag("pfMet"),
    dirname = cms.untracked.string('HLT/JetMET'),
    fEMF = cms.untracked.double(0.01),
    fHPD = cms.untracked.double(0.98),
    feta = cms.untracked.double(2.6),
    maxCEMF = cms.untracked.double(1.0),
    maxCHEF = cms.untracked.double(1.0),
    maxNEMF = cms.untracked.double(1.0),
    maxNHEF = cms.untracked.double(1.0),
    minCEMF = cms.untracked.double(0.0),
    minCHEF = cms.untracked.double(0.0),
    minNEMF = cms.untracked.double(0.0),
    minNHEF = cms.untracked.double(0.0),
    n90Hits = cms.untracked.double(1),
    nameForEff = cms.untracked.bool(True),
    pathFilter = cms.untracked.vstring('HLT_CaloJet', 
        'HLT_PFJet', 
        'HLT_PFNoPUJet', 
        'HLT_DiPFJetAve', 
        'HLT_DiCaloJetAve', 
        'HLT_PFMET', 
        'HLT_PFchMET', 
        'HLT_MET', 
        'HLT_CaloMET'),
    pathPairs = cms.VPSet(cms.PSet(
        denompathname = cms.string('HLT_PFJet40_v'),
        pathname = cms.string('HLT_PFJet60_v')
    ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet60_v'),
            pathname = cms.string('HLT_PFJet80_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet80_v'),
            pathname = cms.string('HLT_PFJet140_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet140_v'),
            pathname = cms.string('HLT_PFJet200_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet200_v'),
            pathname = cms.string('HLT_PFJet260_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet260_v'),
            pathname = cms.string('HLT_PFJet320_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet320_v'),
            pathname = cms.string('HLT_PFJet400_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet400_v'),
            pathname = cms.string('HLT_PFJet450_v')
        ), 
        cms.PSet(
            denompathname = cms.string('HLT_PFJet450_v'),
            pathname = cms.string('HLT_PFJet500_v')
        )),
    pathRejectKeyword = cms.untracked.vstring('dEdx', 
        'NoBPTX'),
    pathnameMB = cms.untracked.vstring('HLT_Physics_v'),
    pathnameMuon = cms.untracked.vstring('HLT_IsoMu24_IterTrk02_v'),
    plotAll = cms.untracked.bool(True),
    plotEff = cms.untracked.bool(True),
    processname = cms.string('HLT'),
    runStandalone = cms.untracked.bool(False),
    triggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    triggerSummaryLabel = cms.InputTag("hltTriggerSummaryAOD","","HLT"),
    verbose = cms.untracked.bool(False)
)


process.l1EmulatorCsctfQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorCsctfQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorCsctpgQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorCsctpgQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorDttfQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorDttfQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorEcalQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorEcalQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorErrorFlagClient = cms.EDAnalyzer("L1EmulatorErrorFlagClient",
    L1Systems = cms.VPSet(cms.PSet(
        HwValLabel = cms.string('ETP'),
        SystemFolder = cms.string(''),
        SystemLabel = cms.string('ECAL'),
        SystemMask = cms.uint32(1)
    ), 
        cms.PSet(
            HwValLabel = cms.string('HTP'),
            SystemFolder = cms.string(''),
            SystemLabel = cms.string('HCAL'),
            SystemMask = cms.uint32(1)
        ), 
        cms.PSet(
            HwValLabel = cms.string('RCT'),
            SystemFolder = cms.string(''),
            SystemLabel = cms.string('RCT'),
            SystemMask = cms.uint32(0)
        ), 
        cms.PSet(
            HwValLabel = cms.string('GCT'),
            SystemFolder = cms.string(''),
            SystemLabel = cms.string('GCT'),
            SystemMask = cms.uint32(0)
        ), 
        cms.PSet(
            HwValLabel = cms.string('DTF'),
            SystemFolder = cms.string(''),
            SystemLabel = cms.string('DTTF'),
            SystemMask = cms.uint32(0)
        ), 
        cms.PSet(
            HwValLabel = cms.string('DTP'),
            SystemFolder = cms.string(''),
            SystemLabel = cms.string('DTTPG'),
            SystemMask = cms.uint32(1)
        ), 
        cms.PSet(
            HwValLabel = cms.string('CTF'),
            SystemFolder = cms.string(''),
            SystemLabel = cms.string('CSCTF'),
            SystemMask = cms.uint32(1)
        ), 
        cms.PSet(
            HwValLabel = cms.string('CTP'),
            SystemFolder = cms.string(''),
            SystemLabel = cms.string('CSCTPG'),
            SystemMask = cms.uint32(1)
        ), 
        cms.PSet(
            HwValLabel = cms.string('RPC'),
            SystemFolder = cms.string(''),
            SystemLabel = cms.string('RPC'),
            SystemMask = cms.uint32(0)
        ), 
        cms.PSet(
            HwValLabel = cms.string('GMT'),
            SystemFolder = cms.string(''),
            SystemLabel = cms.string('GMT'),
            SystemMask = cms.uint32(0)
        ), 
        cms.PSet(
            HwValLabel = cms.string('GT'),
            SystemFolder = cms.string('L1TEMU/GTexpert'),
            SystemLabel = cms.string('GT'),
            SystemMask = cms.uint32(1)
        ))
)


process.l1EmulatorGctQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorGctQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorGmtQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorGmtQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorGtQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorGtQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorHcalQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorHcalQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjCenJetQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjCenJetQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjETMQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjETMQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjETTQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjETTQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjForJetQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjForJetQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjGtExternalQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjGtExternalQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjHTMQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjHTMQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjHTTQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjHTTQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjHfBitCountsQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjHfBitCountsQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjHfRingEtSumsQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjHfRingEtSumsQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjIsoEGQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjIsoEGQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjMuQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjMuQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjNoIsoEGQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjNoIsoEGQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjTauJetQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjTauJetQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorObjTechTrigQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorObjTechTrigQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorRctQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorRctQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1EmulatorRpcQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1EmulatorRpcQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(False),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1ExtraDQM = cms.EDAnalyzer("L1ExtraDQM",
    DQMStore = cms.untracked.bool(True),
    DirName = cms.string('L1T/L1Extra'),
    L1ExtraInputTags = cms.PSet(
        TagL1ExtraCenJet = cms.InputTag("dqmL1ExtraParticles","Central"),
        TagL1ExtraEtMissHTM = cms.InputTag("dqmL1ExtraParticles","MHT"),
        TagL1ExtraEtMissMET = cms.InputTag("dqmL1ExtraParticles","MET"),
        TagL1ExtraForJet = cms.InputTag("dqmL1ExtraParticles","Forward"),
        TagL1ExtraHFRings = cms.InputTag("dqmL1ExtraParticles"),
        TagL1ExtraIsoEG = cms.InputTag("dqmL1ExtraParticles","Isolated"),
        TagL1ExtraMuon = cms.InputTag("dqmL1ExtraParticles"),
        TagL1ExtraNoIsoEG = cms.InputTag("dqmL1ExtraParticles","NonIsolated"),
        TagL1ExtraTauJet = cms.InputTag("dqmL1ExtraParticles","Tau")
    ),
    L1ExtraIsoTauJetSource_ = cms.InputTag("fake"),
    NrBxInEventGct = cms.int32(5),
    NrBxInEventGmt = cms.int32(5),
    disableROOToutput = cms.untracked.bool(True),
    stage1_layer2_ = cms.bool(False),
    verbose = cms.untracked.bool(False)
)


process.l1ExtraDQMStage1 = cms.EDAnalyzer("L1ExtraDQM",
    DQMStore = cms.untracked.bool(True),
    DirName = cms.string('L1T/L1ExtraStage1'),
    L1ExtraInputTags = cms.PSet(
        TagL1ExtraCenJet = cms.InputTag("dqmL1ExtraParticlesStage1","Central"),
        TagL1ExtraEtMissHTM = cms.InputTag("dqmL1ExtraParticlesStage1","MHT"),
        TagL1ExtraEtMissMET = cms.InputTag("dqmL1ExtraParticlesStage1","MET"),
        TagL1ExtraForJet = cms.InputTag("dqmL1ExtraParticlesStage1","Forward"),
        TagL1ExtraHFRings = cms.InputTag("dqmL1ExtraParticlesStage1"),
        TagL1ExtraIsoEG = cms.InputTag("dqmL1ExtraParticlesStage1","Isolated"),
        TagL1ExtraMuon = cms.InputTag("dqmL1ExtraParticlesStage1"),
        TagL1ExtraNoIsoEG = cms.InputTag("dqmL1ExtraParticlesStage1","NonIsolated"),
        TagL1ExtraTauJet = cms.InputTag("dqmL1ExtraParticlesStage1","Tau")
    ),
    L1ExtraIsoTauJetSource_ = cms.InputTag("dqmL1ExtraParticlesStage1","IsoTau"),
    NrBxInEventGct = cms.int32(5),
    NrBxInEventGmt = cms.int32(5),
    disableROOToutput = cms.untracked.bool(True),
    stage1_layer2_ = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.l1GtHwValidation = cms.EDAnalyzer("L1GtHwValidation",
    DirName = cms.untracked.string('L1TEMU/GTexpert'),
    ExcludeAlgoTrigByBit = cms.vint32(),
    ExcludeAlgoTrigByName = cms.vstring(),
    ExcludeCondCategTypeObject = cms.VPSet(cms.PSet(
        ExcludedCondCategory = cms.string(''),
        ExcludedCondType = cms.string(''),
        ExcludedL1GtObject = cms.string('GtExternal')
    )),
    L1GctDataInputTag = cms.InputTag("gctDigis"),
    L1GtDataDaqInputTag = cms.InputTag("gtDigis"),
    L1GtDataEvmInputTag = cms.InputTag("gtEvmDigis"),
    L1GtEmulDaqInputTag = cms.InputTag("valGtDigis"),
    L1GtEmulEvmInputTag = cms.InputTag("valGtDigis")
)


process.l1Stage1GtHwValidation = cms.EDAnalyzer("L1GtHwValidation",
    DirName = cms.untracked.string('L1TEMU/GTexpert'),
    ExcludeAlgoTrigByBit = cms.vint32(),
    ExcludeAlgoTrigByName = cms.vstring(),
    ExcludeCondCategTypeObject = cms.VPSet(cms.PSet(
        ExcludedCondCategory = cms.string(''),
        ExcludedCondType = cms.string(''),
        ExcludedL1GtObject = cms.string('GtExternal')
    )),
    L1GctDataInputTag = cms.InputTag("gctDigis"),
    L1GtDataDaqInputTag = cms.InputTag("gtDigis"),
    L1GtDataEvmInputTag = cms.InputTag("gtEvmDigis"),
    L1GtEmulDaqInputTag = cms.InputTag("valStage1GtDigis"),
    L1GtEmulEvmInputTag = cms.InputTag("valStage1GtDigis")
)


process.l1TdeCSCTF = cms.EDAnalyzer("L1TdeCSCTF",
    DQMFolder = cms.untracked.string('L1TEMU/CSCTFexpert'),
    DQMStore = cms.untracked.bool(True),
    PTLUT = cms.PSet(
        LowQualityFlag = cms.untracked.uint32(4),
        PtMethod = cms.untracked.uint32(1),
        ReadPtLUT = cms.bool(False)
    ),
    dataStubProducer = cms.InputTag("csctfDigis","DT"),
    dataTrackProducer = cms.InputTag("csctfDigis"),
    disableROOToutput = cms.untracked.bool(True),
    emulStubProducer = cms.InputTag("dttfDigis"),
    emulTrackProducer = cms.InputTag("valCsctfTrackDigis"),
    lctProducer = cms.InputTag("csctfDigis"),
    outFile = cms.untracked.string('')
)


process.l1TdeGCT = cms.EDAnalyzer("L1TdeGCT",
    DataEmulCompareSource = cms.InputTag("l1compare"),
    HistFile = cms.untracked.string(''),
    HistFolder = cms.untracked.string('L1TEMU/GCTexpert'),
    VerboseFlag = cms.untracked.int32(0),
    disableROOToutput = cms.untracked.bool(True),
    stage1_layer2_ = cms.bool(False)
)


process.l1TdeRCT = cms.EDAnalyzer("L1TdeRCT",
    DQMStore = cms.untracked.bool(True),
    HistFolder = cms.untracked.string('L1TEMU/L1TdeRCT'),
    disableROOToutput = cms.untracked.bool(True),
    doubleThreshold = cms.int32(3),
    ecalTPGData = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    filterTriggerType = cms.int32(1),
    gtDigisLabel = cms.InputTag("gtDigis"),
    gtEGAlgoName = cms.string('L1_SingleEG1'),
    hcalTPGData = cms.InputTag("hcalDigis"),
    outputFile = cms.untracked.string(''),
    rctSourceData = cms.InputTag("caloStage1Digis"),
    rctSourceEmul = cms.InputTag("valRctDigis"),
    selectBX = cms.untracked.int32(0),
    singlechannelhistos = cms.untracked.bool(False),
    verbose = cms.untracked.bool(False)
)


process.l1TdeRCTRun1 = cms.EDAnalyzer("L1TdeRCT",
    DQMStore = cms.untracked.bool(True),
    HistFolder = cms.untracked.string('L1TEMU/L1TdeRCT'),
    disableROOToutput = cms.untracked.bool(True),
    doubleThreshold = cms.int32(3),
    ecalTPGData = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    filterTriggerType = cms.int32(1),
    gtDigisLabel = cms.InputTag("gtDigis"),
    gtEGAlgoName = cms.string('L1_SingleEG1'),
    hcalTPGData = cms.InputTag("hcalDigis"),
    outputFile = cms.untracked.string(''),
    rctSourceData = cms.InputTag("gctDigis"),
    rctSourceEmul = cms.InputTag("valRctDigis"),
    selectBX = cms.untracked.int32(0),
    singlechannelhistos = cms.untracked.bool(False),
    verbose = cms.untracked.bool(False)
)


process.l1TdeRCTfromRCT = cms.EDAnalyzer("L1TdeRCT",
    DQMStore = cms.untracked.bool(True),
    HistFolder = cms.untracked.string('L1TEMU/L1TdeRCT_FromRCT'),
    disableROOToutput = cms.untracked.bool(True),
    doubleThreshold = cms.int32(3),
    ecalTPGData = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    filterTriggerType = cms.int32(1),
    gtDigisLabel = cms.InputTag("gtDigis"),
    gtEGAlgoName = cms.string('L1_SingleEG1'),
    hcalTPGData = cms.InputTag("hcalDigis"),
    outputFile = cms.untracked.string(''),
    rctSourceData = cms.InputTag("rctDigis"),
    rctSourceEmul = cms.InputTag("valRctDigis"),
    selectBX = cms.untracked.int32(0),
    singlechannelhistos = cms.untracked.bool(False),
    verbose = cms.untracked.bool(False)
)


process.l1TdeStage1Layer2 = cms.EDAnalyzer("L1TdeGCT",
    DataEmulCompareSource = cms.InputTag("l1compareforstage1"),
    HistFile = cms.untracked.string(''),
    HistFolder = cms.untracked.string('L1TEMU/Stage1Layer2expert'),
    VerboseFlag = cms.untracked.int32(0),
    disableROOToutput = cms.untracked.bool(True),
    stage1_layer2_ = cms.bool(True)
)


process.l1TriggerCsctfQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerCsctfQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerCsctpgQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerCsctpgQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerDttfQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerDttfQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerDttpgQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerDttpgQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerEcalQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerEcalQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerGctQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerGctQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerGmtQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerGmtQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerGtQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerGtQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerHcalQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerHcalQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjCenJetQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjCenJetQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjETMQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjETMQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjETTQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjETTQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjForJetQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjForJetQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjGtExternalQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjGtExternalQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjHTMQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjHTMQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjHTTQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjHTTQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjHfBitCountsQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjHfBitCountsQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjHfRingEtSumsQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjHfRingEtSumsQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjIsoEGQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjIsoEGQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjMuQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjMuQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjNoIsoEGQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjNoIsoEGQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjTauJetQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjTauJetQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerObjTechTrigQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerObjTechTrigQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerOccupancyQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerOccupancyQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerRateQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerRateQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerRctQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerRctQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerRpcQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerRpcQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1TriggerSyncQualityTests = cms.EDAnalyzer("QualityTester",
    QualityTestPrescaler = cms.untracked.int32(1),
    getQualityTestsFromFile = cms.untracked.bool(True),
    qtList = cms.untracked.FileInPath('DQM/L1TMonitorClient/data/L1TriggerSyncQualityTests.xml'),
    qtestOnEndJob = cms.untracked.bool(False),
    qtestOnEndLumi = cms.untracked.bool(True),
    qtestOnEndRun = cms.untracked.bool(True),
    reportThreshold = cms.untracked.string(''),
    testInEventloop = cms.untracked.bool(False),
    verboseQT = cms.untracked.bool(True)
)


process.l1demon = cms.EDAnalyzer("L1TDEMON",
    COMPARE_COLLS = cms.untracked.vuint32(0, 0, 1, 1, 0, 
        1, 0, 0, 1, 0, 
        1, 0),
    DataEmulCompareSource = cms.InputTag("l1compare"),
    HistFile = cms.untracked.string('l1demon.root'),
    HistFolder = cms.untracked.string('L1TEMU'),
    RunInFilterFarm = cms.untracked.bool(False),
    VerboseFlag = cms.untracked.int32(0),
    disableROOToutput = cms.untracked.bool(True)
)


process.l1demonstage1 = cms.EDAnalyzer("L1TDEMON",
    COMPARE_COLLS = cms.untracked.vuint32(0, 0, 1, 1, 0, 
        1, 0, 0, 1, 0, 
        1, 0),
    DataEmulCompareSource = cms.InputTag("l1compareforstage1"),
    HistFile = cms.untracked.string('l1demon.root'),
    HistFolder = cms.untracked.string('L1TEMU'),
    RunInFilterFarm = cms.untracked.bool(False),
    VerboseFlag = cms.untracked.int32(0),
    disableROOToutput = cms.untracked.bool(True)
)


process.l1s = cms.EDAnalyzer("L1Scalers",
    HFRecHitCollection = cms.InputTag("hfreco"),
    algoMonitorBits = cms.untracked.vuint32(8, 9, 15, 46, 54, 
        55, 100, 124),
    denomBit = cms.untracked.uint32(0),
    denomIsTech = cms.untracked.bool(True),
    dqmFolder = cms.untracked.string('L1T/L1Scalers_SM'),
    fedRawData = cms.InputTag("source"),
    firstFED = cms.untracked.uint32(0),
    l1GtData = cms.InputTag("gtDigis"),
    lastFED = cms.untracked.uint32(39),
    maskedChannels = cms.untracked.vint32(),
    techMonitorBits = cms.untracked.vuint32(0, 9),
    tfBit = cms.untracked.uint32(41),
    tfIsTech = cms.untracked.bool(True),
    verbose = cms.untracked.bool(False)
)


process.l1tBPTX = cms.EDAnalyzer("L1TBPTX",
    MonitorBits = cms.VPSet(cms.PSet(
        bitNumber = cms.int32(0),
        bitOffset = cms.int32(0),
        bitType = cms.bool(False),
        testName = cms.string('Tech_BPTX_AND')
    ), 
        cms.PSet(
            bitNumber = cms.int32(16),
            bitOffset = cms.int32(-1),
            bitType = cms.bool(False),
            testName = cms.string('Tech_preBPTX_Veto')
        )),
    MonitorRates = cms.VPSet(cms.PSet(
        bitNumber = cms.int32(0),
        bitType = cms.bool(True),
        testName = cms.string('Algo_BPTX_AND')
    )),
    disableROOToutput = cms.untracked.bool(True),
    dqmStore = cms.untracked.bool(True),
    inputTagL1GtDataDaq = cms.InputTag("gtDigis"),
    inputTagScalersResults = cms.InputTag("scalersRawToDigi"),
    inputTagtEvmSource = cms.InputTag("gtEvmDigis"),
    oracleDB = cms.string('oracle://CMS_OMDS_LB/CMS_TRG_R'),
    pathCondDB = cms.string('/nfshome0/centraltspro/secure/'),
    verbose = cms.untracked.bool(False)
)


process.l1tCsctf = cms.EDAnalyzer("L1TCSCTF",
    DQMStore = cms.untracked.bool(True),
    disableROOToutput = cms.untracked.bool(True),
    gangedME11a = cms.untracked.bool(False),
    gmtProducer = cms.InputTag("gtDigis"),
    lctProducer = cms.InputTag("csctfDigis"),
    mbProducer = cms.InputTag("csctfDigis","DT"),
    outputFile = cms.untracked.string(''),
    statusProducer = cms.InputTag("csctfDigis"),
    trackProducer = cms.InputTag("csctfDigis"),
    verbose = cms.untracked.bool(False)
)


process.l1tCsctfClient = cms.EDAnalyzer("L1TCSCTFClient",
    input_dir = cms.untracked.string('L1T/L1TCSCTF'),
    output_dir = cms.untracked.string('L1T/L1TCSCTF/Client'),
    prescaleEvt = cms.untracked.int32(500),
    prescaleLS = cms.untracked.int32(-1),
    runInEndJob = cms.untracked.bool(False),
    runInEndLumi = cms.untracked.bool(False),
    runInEndRun = cms.untracked.bool(True),
    runInEventLoop = cms.untracked.bool(False),
    verbose = cms.untracked.bool(False)
)


process.l1tDttf = cms.EDAnalyzer("L1TDTTF",
    DQMStore = cms.untracked.bool(True),
    MuonCollection = cms.InputTag("muons"),
    disableROOToutput = cms.untracked.bool(True),
    dttpgSource = cms.InputTag("dttfDigis"),
    gmtSource = cms.InputTag("gtDigis"),
    l1tInfoFolder = cms.untracked.string('L1T/EventInfo'),
    l1tSystemFolder = cms.untracked.string('L1T/L1TDTTF'),
    online = cms.untracked.bool(False),
    verbose = cms.untracked.bool(False)
)


process.l1tDttfClient = cms.EDAnalyzer("L1TDTTFClient",
    dttfSource = cms.InputTag("l1tDttf"),
    l1tSourceFolder = cms.untracked.string('L1T/L1TDTTF'),
    online = cms.untracked.bool(False),
    resetAfterLumi = cms.untracked.int32(3)
)


process.l1tEventInfoClient = cms.EDAnalyzer("L1TEventInfoClient",
    DisableL1Objects = cms.vstring(),
    DisableL1Systems = cms.vstring(),
    L1Objects = cms.VPSet(cms.PSet(
        ObjectDisable = cms.uint32(0),
        ObjectLabel = cms.string('TechTrig'),
        QualityTests = cms.VPSet(cms.PSet(
            QualityTestHist = cms.string(''),
            QualityTestName = cms.string(''),
            QualityTestSummaryEnabled = cms.uint32(0)
        ))
    ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('GtExternal'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('HfRingEtSums'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('HfBitCounts'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('HTM'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('HTT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('ETM'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('ETT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('TauJet'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('ForJet'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('CenJet'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('IsoEG'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('NoIsoEG'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('Mu'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        )),
    L1Systems = cms.VPSet(cms.PSet(
        HwValLabel = cms.string('ETP'),
        QualityTests = cms.VPSet(cms.PSet(
            QualityTestHist = cms.string(''),
            QualityTestName = cms.string(''),
            QualityTestSummaryEnabled = cms.uint32(0)
        )),
        SystemDisable = cms.uint32(0),
        SystemLabel = cms.string('ECAL_TPG')
    ), 
        cms.PSet(
            HwValLabel = cms.string('HTP'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('HCAL_TPG')
        ), 
        cms.PSet(
            HwValLabel = cms.string('RCT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1T/L1TRCT/RctEmIsoEmEtEtaPhi'),
                QualityTestName = cms.string('HotChannels_RCT_2D'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TRCT/RctEmIsoEmEtEtaPhi'),
                    QualityTestName = cms.string('DeadChannels_RCT_2D_loose'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TRCT/RctEmNonIsoEmEtEtaPhi'),
                    QualityTestName = cms.string('HotChannels_RCT_2D'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TRCT/RctEmNonIsoEmEtEtaPhi'),
                    QualityTestName = cms.string('DeadChannels_RCT_2D_loose'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TRCT/RctRegionsEtEtaPhi'),
                    QualityTestName = cms.string('HotChannels_RCT_2D'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TRCT/RctRegionsEtEtaPhi'),
                    QualityTestName = cms.string('DeadChannels_RCT_2D_tight'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('RCT')
        ), 
        cms.PSet(
            HwValLabel = cms.string('GCT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1T/L1TGCT/IsoEmRankEtaPhi'),
                QualityTestName = cms.string('HotChannels_GCT_2D'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TGCT/IsoEmRankEtaPhi'),
                    QualityTestName = cms.string('DeadChannels_GCT_2D_loose'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TGCT/IsoEmRankEtaPhi'),
                    QualityTestName = cms.string('HotChannels_GCT_2D'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TGCT/NonIsoEmRankEtaPhi'),
                    QualityTestName = cms.string('DeadChannels_GCT_2D_loose'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TGCT/AllJetsEtEtaPhi'),
                    QualityTestName = cms.string('HotChannels_GCT_2D'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TGCT/AllJetsEtEtaPhi'),
                    QualityTestName = cms.string('DeadChannels_GCT_2D_tight'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TGCT/TauJetsEtEtaPhi'),
                    QualityTestName = cms.string('HotChannels_GCT_2D'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TGCT/TauJetsEtEtaPhi'),
                    QualityTestName = cms.string('DeadChannels_GCT_2D_tight'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('GCT')
        ), 
        cms.PSet(
            HwValLabel = cms.string('DTP'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('DT_TPG')
        ), 
        cms.PSet(
            HwValLabel = cms.string('DTF'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('DTTF')
        ), 
        cms.PSet(
            HwValLabel = cms.string('CTP'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('CSC_TPG')
        ), 
        cms.PSet(
            HwValLabel = cms.string('CTF'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1T/L1TCSCTF/CSCTF_Chamber_Occupancies'),
                QualityTestName = cms.string('DeadChannels_CSCTF_2D'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TCSCTF/CSCTF_Chamber_Occupancies'),
                    QualityTestName = cms.string('HotChannels_CSCTF_2D'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TCSCTF/CSCTF_occupancies'),
                    QualityTestName = cms.string('DeadChannels_CSCTF_2D'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TCSCTF/CSCTF_occupancies'),
                    QualityTestName = cms.string('HotChannels_CSCTF_2D'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('CSCTF')
        ), 
        cms.PSet(
            HwValLabel = cms.string('RPC'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1T/L1TRPCTF/RPCTF_muons_eta_phi_bx0'),
                QualityTestName = cms.string('DeadChannels_RPCTF_2D'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TRPCTF/RPCTF_muons_eta_phi_bx0'),
                    QualityTestName = cms.string('HotChannels_RPCTF_2D'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('RPC')
        ), 
        cms.PSet(
            HwValLabel = cms.string('GMT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1T/L1TGMT/GMT_etaphi'),
                QualityTestName = cms.string('DeadChannels_GMT_2D'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TGMT/GMT_etaphi'),
                    QualityTestName = cms.string('HotChannels_GMT_2D'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1T/L1TGMT/Regional_trigger'),
                    QualityTestName = cms.string('CompareHist_GMT'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('GMT')
        ), 
        cms.PSet(
            HwValLabel = cms.string('GT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('GT')
        )),
    monitorDir = cms.untracked.string('L1T'),
    runInEndJob = cms.untracked.bool(False),
    runInEndLumi = cms.untracked.bool(True),
    runInEndRun = cms.untracked.bool(True),
    runInEventLoop = cms.untracked.bool(False)
)


process.l1tGct = cms.EDAnalyzer("L1TGCT",
    DQMStore = cms.untracked.bool(True),
    disableROOToutput = cms.untracked.bool(True),
    filterTriggerType = cms.int32(1),
    gctCentralJetsSource = cms.InputTag("gctDigis","cenJets"),
    gctEnergySumsSource = cms.InputTag("gctDigis"),
    gctForwardJetsSource = cms.InputTag("gctDigis","forJets"),
    gctIsoEmSource = cms.InputTag("gctDigis","isoEm"),
    gctIsoTauJetsSource = cms.InputTag("gctDigis","fake"),
    gctNonIsoEmSource = cms.InputTag("gctDigis","nonIsoEm"),
    gctTauJetsSource = cms.InputTag("gctDigis","tauJets"),
    monitorDir = cms.untracked.string('L1T/L1TGCT'),
    stage1_layer2_ = cms.bool(False),
    verbose = cms.untracked.bool(False)
)


process.l1tGctClient = cms.EDAnalyzer("L1TGCTClient",
    monitorDir = cms.untracked.string('L1T/L1TGCT'),
    prescaleEvt = cms.untracked.int32(1),
    prescaleLS = cms.untracked.int32(-1),
    runInEndJob = cms.untracked.bool(False),
    runInEndLumi = cms.untracked.bool(False),
    runInEndRun = cms.untracked.bool(True),
    runInEventLoop = cms.untracked.bool(False),
    stage1_layer2_ = cms.untracked.bool(False)
)


process.l1tGmt = cms.EDAnalyzer("L1TGMT",
    DQMStore = cms.untracked.bool(True),
    disableROOToutput = cms.untracked.bool(True),
    gmtSource = cms.InputTag("gtDigis"),
    verbose = cms.untracked.bool(False)
)


process.l1tGmtClient = cms.EDAnalyzer("L1TGMTClient",
    input_dir = cms.untracked.string('L1T/L1TGMT'),
    monitorName = cms.untracked.string('L1T/L1TGMT'),
    output_dir = cms.untracked.string('L1T/L1TGMT/Client'),
    runInEndJob = cms.untracked.bool(False),
    runInEndLumi = cms.untracked.bool(False),
    runInEndRun = cms.untracked.bool(True),
    runInEventLoop = cms.untracked.bool(False)
)


process.l1tGt = cms.EDAnalyzer("L1TGT",
    gtEvmSource = cms.InputTag("gtEvmDigis"),
    gtSource = cms.InputTag("gtDigis"),
    runInEndJob = cms.untracked.bool(False),
    runInEndLumi = cms.untracked.bool(True),
    runInEndRun = cms.untracked.bool(True),
    runInEventLoop = cms.untracked.bool(False),
    verbose = cms.untracked.bool(False)
)


process.l1tOccupancyClient = cms.EDAnalyzer("L1TOccupancyClient",
    testParams = cms.VPSet(cms.PSet(
        algoParams = cms.PSet(
            histPath = cms.string('L1T/L1TDTTF/09-TEST/dttf_01_tracks_occupancy_test_summary'),
            maskedAreas = cms.VPSet(cms.PSet(
                kind = cms.int32(1),
                xmax = cms.double(3),
                xmin = cms.double(3),
                ymax = cms.double(12),
                ymin = cms.double(1)
            ))
        ),
        testName = cms.string('dttf_01_tracks_occupancy_test_summary')
    ), 
        cms.PSet(
            algoParams = cms.PSet(
                histPath = cms.string('L1T/L1TGCT/TauJetsOccEtaPhi'),
                maskedAreas = cms.VPSet(cms.PSet(
                    kind = cms.int32(1),
                    xmax = cms.double(4),
                    xmin = cms.double(1),
                    ymax = cms.double(18),
                    ymin = cms.double(1)
                ), 
                    cms.PSet(
                        kind = cms.int32(1),
                        xmax = cms.double(22),
                        xmin = cms.double(19),
                        ymax = cms.double(18),
                        ymin = cms.double(1)
                    ))
            ),
            testName = cms.string('TauJetsOccEtaPhi')
        ), 
        cms.PSet(
            algoParams = cms.PSet(
                histPath = cms.string('L1T/L1TGCT/AllJetsOccEtaPhi'),
                maskedAreas = cms.VPSet()
            ),
            testName = cms.string('AllJetsOccEtaPhi')
        ), 
        cms.PSet(
            algoParams = cms.PSet(
                histPath = cms.string('L1T/L1TRCT/RctRegionsOccEtaPhi'),
                maskedAreas = cms.VPSet()
            ),
            testName = cms.string('RctRegionsOccEtaPhi')
        ), 
        cms.PSet(
            algoParams = cms.PSet(
                histPath = cms.string('L1T/L1TRCT/RctEmIsoEmOccEtaPhi'),
                maskedAreas = cms.VPSet(cms.PSet(
                    kind = cms.int32(1),
                    xmax = cms.double(4),
                    xmin = cms.double(1),
                    ymax = cms.double(18),
                    ymin = cms.double(1)
                ), 
                    cms.PSet(
                        kind = cms.int32(1),
                        xmax = cms.double(22),
                        xmin = cms.double(19),
                        ymax = cms.double(18),
                        ymin = cms.double(1)
                    ))
            ),
            testName = cms.string('RctEmIsoEmOccEtaPhi')
        ), 
        cms.PSet(
            algoParams = cms.PSet(
                histPath = cms.string('L1T/L1TRCT/RctEmNonIsoEmOccEtaPhi'),
                maskedAreas = cms.VPSet(cms.PSet(
                    kind = cms.int32(1),
                    xmax = cms.double(4),
                    xmin = cms.double(1),
                    ymax = cms.double(18),
                    ymin = cms.double(1)
                ), 
                    cms.PSet(
                        kind = cms.int32(1),
                        xmax = cms.double(22),
                        xmin = cms.double(19),
                        ymax = cms.double(18),
                        ymin = cms.double(1)
                    ))
            ),
            testName = cms.string('RctEmNonIsoEmOccEtaPhi')
        ), 
        cms.PSet(
            algoParams = cms.PSet(
                histPath = cms.string('L1T/L1TGCT/NonIsoEmOccEtaPhi'),
                maskedAreas = cms.VPSet(cms.PSet(
                    kind = cms.int32(1),
                    xmax = cms.double(4),
                    xmin = cms.double(1),
                    ymax = cms.double(18),
                    ymin = cms.double(1)
                ), 
                    cms.PSet(
                        kind = cms.int32(1),
                        xmax = cms.double(22),
                        xmin = cms.double(19),
                        ymax = cms.double(18),
                        ymin = cms.double(1)
                    ))
            ),
            testName = cms.string('NonIsoEmOccEtaPhi')
        ), 
        cms.PSet(
            algoParams = cms.PSet(
                histPath = cms.string('L1T/L1TGCT/IsoEmOccEtaPhi'),
                maskedAreas = cms.VPSet(cms.PSet(
                    kind = cms.int32(1),
                    xmax = cms.double(4),
                    xmin = cms.double(1),
                    ymax = cms.double(18),
                    ymin = cms.double(1)
                ), 
                    cms.PSet(
                        kind = cms.int32(1),
                        xmax = cms.double(22),
                        xmin = cms.double(19),
                        ymax = cms.double(18),
                        ymin = cms.double(1)
                    ))
            ),
            testName = cms.string('IsoEmOccEtaPhi')
        )),
    verbose = cms.bool(False)
)


process.l1tPUM = cms.EDAnalyzer("L1TPUM",
    histFolder = cms.string('L1T/L1TPUM'),
    regionSource = cms.InputTag("rctDigis")
)


process.l1tRate = cms.EDAnalyzer("L1TRate",
    categories = cms.PSet(
        CenJet = cms.untracked.bool(False),
        EG = cms.untracked.bool(True),
        ETM = cms.untracked.bool(True),
        ETT = cms.untracked.bool(True),
        ForJet = cms.untracked.bool(False),
        HTM = cms.untracked.bool(False),
        HTT = cms.untracked.bool(True),
        IsoEG = cms.untracked.bool(True),
        Jet = cms.untracked.bool(True),
        Mu = cms.untracked.bool(True),
        TauJet = cms.untracked.bool(False)
    ),
    disableROOToutput = cms.untracked.bool(True),
    dqmStore = cms.untracked.bool(True),
    fitParameters = cms.VPSet(cms.PSet(
        AlgoName = cms.string('L1_BeamHalo'),
        ParErrors = cms.vdouble(917, 8.9, 0.0536, 0.000189),
        Parameters = cms.vdouble(-221700.0, 4674, -24.57, 0.0403),
        TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
    ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet36'),
            ParErrors = cms.vdouble(196, 1.9, 0.0115, 4.04e-05),
            Parameters = cms.vdouble(-30630.0, 573.5, -2.557, 0.003734),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu3_Jet28_Central'),
            ParErrors = cms.vdouble(0.767, 0.0074, 4.37e-05, 1.55e-07),
            Parameters = cms.vdouble(28.02, 0.8295, 0.005182, -3.804e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleEG12_Eta1p39'),
            ParErrors = cms.vdouble(1.67, 0.0161, 9.51e-05, 3.37e-07),
            Parameters = cms.vdouble(-48.09, 8.644, -0.007349, 1.327e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet80_Central'),
            ParErrors = cms.vdouble(0.809, 0.00781, 4.61e-05, 1.64e-07),
            Parameters = cms.vdouble(2.729, 1.798, -0.0004621, 2.024e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleMu0_HighQ'),
            ParErrors = cms.vdouble(0.547, 0.00528, 3.12e-05, 1.11e-07),
            Parameters = cms.vdouble(5.465, 0.842, -0.0003247, 7.12e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_ETT220'),
            ParErrors = cms.vdouble(0.166, 0.0016, 9.45e-06, 3.35e-08),
            Parameters = cms.vdouble(-0.1326, 0.0824, -3.825e-05, 3.86e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_ETM100'),
            ParErrors = cms.vdouble(0.115, 0.00111, 6.54e-06, 2.32e-08),
            Parameters = cms.vdouble(0.5002, 0.0287, -2.59e-05, 1.145e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_EG5_HTT100'),
            ParErrors = cms.vdouble(0.352, 0.0034, 2.01e-05, 7.12e-08),
            Parameters = cms.vdouble(0.2832, 0.4398, -0.0001367, 8.933e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleEG3'),
            ParErrors = cms.vdouble(724, 7.03, 0.0428, 0.00015),
            Parameters = cms.vdouble(-180400.0, 3289, -16.4, 0.02692),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Bsc2Plus_BptxPlus'),
            ParErrors = cms.vdouble(0.827, 0.00798, 4.72e-05, 1.67e-07),
            Parameters = cms.vdouble(-332.6, 6.053, -0.02989, 5.071e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleEG5'),
            ParErrors = cms.vdouble(77.5, 0.752, 0.00457, 1.6e-05),
            Parameters = cms.vdouble(-20080.0, 371, -1.88, 0.003111),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu0_HTT75'),
            ParErrors = cms.vdouble(0.154, 0.00149, 8.81e-06, 3.12e-08),
            Parameters = cms.vdouble(-0.5495, 0.08488, -1.23e-05, 1.535e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleEG8'),
            ParErrors = cms.vdouble(0.741, 0.00715, 4.23e-05, 1.5e-07),
            Parameters = cms.vdouble(-2.472, 2.01, -0.0003312, 1.398e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_MuOpen_EG12'),
            ParErrors = cms.vdouble(0.391, 0.00377, 2.23e-05, 7.9e-08),
            Parameters = cms.vdouble(-6.04, 0.5044, -4.981e-05, 1.392e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu7_EG5'),
            ParErrors = cms.vdouble(0.462, 0.00446, 2.64e-05, 9.34e-08),
            Parameters = cms.vdouble(19.57, 0.3116, 0.003338, -4.707e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleTauJet28'),
            ParErrors = cms.vdouble(1.44, 0.0139, 8.19e-05, 2.9e-07),
            Parameters = cms.vdouble(10.61, 4.514, 0.002078, 3.074e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu3_DoubleEG5'),
            ParErrors = cms.vdouble(0.304, 0.00294, 1.74e-05, 6.15e-08),
            Parameters = cms.vdouble(-4.805, 0.3497, -2.462e-05, 9.928e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_EG10_Jet24_Central_deltaPhi1'),
            ParErrors = cms.vdouble(1.39, 0.0134, 7.94e-05, 2.81e-07),
            Parameters = cms.vdouble(-37.21, 5.761, -0.003462, 1.259e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_TripleEG5'),
            ParErrors = cms.vdouble(0.613, 0.00592, 3.49e-05, 1.24e-07),
            Parameters = cms.vdouble(-14.55, 1.521, -0.0001348, 2.72e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleMu3_EG5'),
            ParErrors = cms.vdouble(0.202, 0.00195, 1.15e-05, 4.08e-08),
            Parameters = cms.vdouble(13.59, -0.1493, 0.001781, -2.755e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_BeamGas_Hf'),
            ParErrors = cms.vdouble(202, 1.96, 0.0118, 4.15e-05),
            Parameters = cms.vdouble(-31540.0, 521.7, -2.06, 0.002688),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_QuadJet20_Central'),
            ParErrors = cms.vdouble(0.474, 0.00458, 2.7e-05, 9.59e-08),
            Parameters = cms.vdouble(-5.859, 0.5604, -0.0004361, 5.489e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet36_FwdVeto'),
            ParErrors = cms.vdouble(0.818, 0.0079, 4.68e-05, 1.66e-07),
            Parameters = cms.vdouble(8.003, 1.331, -0.004132, 8.211e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleEG5_HTT75'),
            ParErrors = cms.vdouble(0.343, 0.00331, 1.95e-05, 6.93e-08),
            Parameters = cms.vdouble(-2.418, 0.5123, -8.796e-05, 9.052e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu10_Jet36_Central'),
            ParErrors = cms.vdouble(0.277, 0.00267, 1.58e-05, 5.6e-08),
            Parameters = cms.vdouble(-1.706, 0.2342, -2.527e-05, 4.362e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_BeamGas_Bsc'),
            ParErrors = cms.vdouble(1.33, 0.0129, 8.66e-05, 3.33e-07),
            Parameters = cms.vdouble(-889.9, 17.29, -0.1058, 0.0002141),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMu16'),
            ParErrors = cms.vdouble(1.23, 0.0119, 7e-05, 2.48e-07),
            Parameters = cms.vdouble(226.6, -0.3892, 0.021, -4.213e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMu10'),
            ParErrors = cms.vdouble(1.67, 0.0161, 9.53e-05, 3.38e-07),
            Parameters = cms.vdouble(307.6, 1.192, 0.02778, -5.663e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMu12'),
            ParErrors = cms.vdouble(1.45, 0.014, 8.25e-05, 2.93e-07),
            Parameters = cms.vdouble(278.3, 0.302, 0.02538, -5.128e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_TripleEG_8_8_5'),
            ParErrors = cms.vdouble(0.393, 0.00379, 2.24e-05, 7.94e-08),
            Parameters = cms.vdouble(-2.64, 0.5241, -5.105e-05, 4.443e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleForJet32_EtaOpp'),
            ParErrors = cms.vdouble(0.0765, 0.000739, 4.36e-06, 1.55e-08),
            Parameters = cms.vdouble(1.042, 0.005913, -0.0001012, 8.583e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_ETM50'),
            ParErrors = cms.vdouble(0.247, 0.00238, 1.41e-05, 4.99e-08),
            Parameters = cms.vdouble(1.501, 0.1614, -8.716e-05, 3.255e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleEG5'),
            ParErrors = cms.vdouble(1420.0, 13.8, 0.0839, 0.000294),
            Parameters = cms.vdouble(-382200.0, 7192, -36.99, 0.06157),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleTauJet52'),
            ParErrors = cms.vdouble(1.53, 0.0148, 8.72e-05, 3.09e-07),
            Parameters = cms.vdouble(4.432, 5.923, -0.00125, 4.003e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMuBeamHalo'),
            ParErrors = cms.vdouble(15.5, 0.149, 0.000882, 3.13e-06),
            Parameters = cms.vdouble(-5223, 105.5, -0.5779, 0.001169),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMu7'),
            ParErrors = cms.vdouble(2.21, 0.0213, 0.000126, 4.46e-07),
            Parameters = cms.vdouble(391.7, 4.519, 0.03322, -6.835e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet92_Central'),
            ParErrors = cms.vdouble(0.573, 0.00553, 3.27e-05, 1.16e-07),
            Parameters = cms.vdouble(3.282, 0.9599, -0.000304, 1.313e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMu3'),
            ParErrors = cms.vdouble(142, 1.39, 0.0087, 3.19e-05),
            Parameters = cms.vdouble(11600.0, -206.7, 2.232, -0.005963),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet16'),
            ParErrors = cms.vdouble(2720.0, 26.5, 0.164, 0.000573),
            Parameters = cms.vdouble(-286400.0, 4590, -13.57, 0.01042),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleTauJet32'),
            ParErrors = cms.vdouble(1.05, 0.0101, 5.96e-05, 2.11e-07),
            Parameters = cms.vdouble(16.08, 2.862, 0.001933, -1.043e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleTauJet36'),
            ParErrors = cms.vdouble(0.884, 0.00853, 5.04e-05, 1.79e-07),
            Parameters = cms.vdouble(-4.067, 2.15, -0.0003057, 1.282e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Bsc2Minus_BptxMinus'),
            ParErrors = cms.vdouble(1.03, 0.0101, 6.41e-05, 2.55e-07),
            Parameters = cms.vdouble(-563.2, 11, -0.07045, 0.0001489),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleEG12'),
            ParErrors = cms.vdouble(3.12, 0.0301, 0.000178, 6.31e-07),
            Parameters = cms.vdouble(-41.86, 14.6, -0.01057, 1.945e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleIsoEG12_Eta2p17'),
            ParErrors = cms.vdouble(2.68, 0.0258, 0.000153, 5.41e-07),
            Parameters = cms.vdouble(-68.49, 10.51, -0.01074, 1.996e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleEG12_Eta2p17'),
            ParErrors = cms.vdouble(2.76, 0.0266, 0.000157, 5.57e-07),
            Parameters = cms.vdouble(-89.66, 12.44, -0.01358, 2.542e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleEG15'),
            ParErrors = cms.vdouble(2.47, 0.0238, 0.000141, 4.98e-07),
            Parameters = cms.vdouble(16.19, 6.582, -0.001815, 4.02e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_HTT50_HTM30'),
            ParErrors = cms.vdouble(0.638, 0.00616, 3.64e-05, 1.29e-07),
            Parameters = cms.vdouble(-1.772, 1.116, -0.0003465, 2.65e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_TripleJet28_Central'),
            ParErrors = cms.vdouble(0.866, 0.00836, 4.94e-05, 1.75e-07),
            Parameters = cms.vdouble(15.37, 1.152, 0.002656, 1.155e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_HTM50'),
            ParErrors = cms.vdouble(6.08, 0.0587, 0.000347, 1.23e-06),
            Parameters = cms.vdouble(-21.27, 21.11, 0.007577, 4.491e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_HTT50_HTM50'),
            ParErrors = cms.vdouble(0.971, 0.00937, 5.54e-05, 1.96e-07),
            Parameters = cms.vdouble(-6.349, 2.243, -0.0006191, 5.275e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMuOpen'),
            ParErrors = cms.vdouble(650, 6.31, 0.0383, 0.000134),
            Parameters = cms.vdouble(-174500.0, 3285, -16.89, 0.02808),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleForJet44_EtaOpp'),
            ParErrors = cms.vdouble(0.0222, 0.000215, 1.27e-06, 4.5e-09),
            Parameters = cms.vdouble(-0.08928, 0.002069, 3.464e-07, 1.239e-08),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_EG5_Jet36_deltaPhi1'),
            ParErrors = cms.vdouble(2.49, 0.024, 0.000142, 5.03e-07),
            Parameters = cms.vdouble(7.584, 10.55, 0.004835, 1.546e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet128'),
            ParErrors = cms.vdouble(0.283, 0.00273, 1.62e-05, 5.72e-08),
            Parameters = cms.vdouble(1.714, 0.2416, -0.0001174, 4.736e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet32_NotBptxOR_NotMuBeamHalo'),
            ParErrors = cms.vdouble(1.01, 0.00972, 5.75e-05, 2.04e-07),
            Parameters = cms.vdouble(-37.43, 2.527, -0.005776, 1.052e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleJet44_Central'),
            ParErrors = cms.vdouble(1.47, 0.0142, 8.4e-05, 2.98e-07),
            Parameters = cms.vdouble(42.7, 3.178, 0.004426, -3.879e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu7_Jet20_Central'),
            ParErrors = cms.vdouble(0.538, 0.0052, 3.07e-05, 1.09e-07),
            Parameters = cms.vdouble(27.68, 0.2173, 0.003906, -4.363e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_InterBunch_Hf'),
            ParErrors = cms.vdouble(65300.0, 633, 3.81, 0.0134),
            Parameters = cms.vdouble(-10340000.0, 231000.0, -1180, 1.893),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_ETT260_EG5'),
            ParErrors = cms.vdouble(0.11, 0.00106, 6.26e-06, 2.22e-08),
            Parameters = cms.vdouble(-0.5519, 0.04146, 6.584e-07, 6.336e-08),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleEG20'),
            ParErrors = cms.vdouble(1.93, 0.0186, 0.00011, 3.9e-07),
            Parameters = cms.vdouble(5.959, 2.663, -0.001003, 2.586e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleEG5_HTT50'),
            ParErrors = cms.vdouble(0.687, 0.00663, 3.92e-05, 1.39e-07),
            Parameters = cms.vdouble(-6.566, 1.346, -0.000287, 2.907e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu3_Jet20_Central'),
            ParErrors = cms.vdouble(1.11, 0.0107, 6.35e-05, 2.25e-07),
            Parameters = cms.vdouble(29.36, 1.41, 0.007502, -1.804e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet92'),
            ParErrors = cms.vdouble(0.611, 0.0059, 3.49e-05, 1.24e-07),
            Parameters = cms.vdouble(1.996, 1.031, -0.0002973, 1.242e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_HTT50'),
            ParErrors = cms.vdouble(1.52, 0.0146, 8.64e-05, 3.06e-07),
            Parameters = cms.vdouble(-10.89, 3.884, -0.001037, 8.683e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_ETT300_EG5'),
            ParErrors = cms.vdouble(0.272, 0.00263, 1.55e-05, 5.5e-08),
            Parameters = cms.vdouble(-0.6599, 0.03346, 3.263e-05, -3.985e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleTauJet40'),
            ParErrors = cms.vdouble(0.675, 0.00652, 3.85e-05, 1.36e-07),
            Parameters = cms.vdouble(-1.449, 1.404, -0.0002159, 5.049e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_EG12_Jet24_Central_deltaPhi1'),
            ParErrors = cms.vdouble(1.13, 0.0109, 6.45e-05, 2.29e-07),
            Parameters = cms.vdouble(-27.42, 4.091, -0.002958, 9.164e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_TripleEG_8_5_5'),
            ParErrors = cms.vdouble(0.577, 0.00557, 3.29e-05, 1.17e-07),
            Parameters = cms.vdouble(-8.578, 1.128, -0.0001071, 1.566e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleEG_12_5_Eta1p39'),
            ParErrors = cms.vdouble(6.71, 0.0651, 0.000397, 1.39e-06),
            Parameters = cms.vdouble(-1654, 30.88, -0.157, 0.0002593),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleJet36_Central'),
            ParErrors = cms.vdouble(2.21, 0.0213, 0.000126, 4.46e-07),
            Parameters = cms.vdouble(33.82, 6.255, 0.004926, 1.289e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleEG30'),
            ParErrors = cms.vdouble(0.551, 0.00532, 3.15e-05, 1.12e-07),
            Parameters = cms.vdouble(1.746, 0.7654, -0.0002219, 6.079e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMu5_Eta1p5_Q80'),
            ParErrors = cms.vdouble(1.74, 0.0167, 9.89e-05, 3.51e-07),
            Parameters = cms.vdouble(-394.1, 11.07, -0.03401, 5.359e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleMu3p5'),
            ParErrors = cms.vdouble(0.74, 0.00714, 4.22e-05, 1.5e-07),
            Parameters = cms.vdouble(-1.123, 1.349, -0.000353, 2.354e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleMu0_HighQ_EtaCuts'),
            ParErrors = cms.vdouble(0.508, 0.0049, 2.89e-05, 1.03e-07),
            Parameters = cms.vdouble(7.947, 0.751, -0.0003687, 5.715e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_ZeroBias'),
            ParErrors = cms.vdouble(77.9, 0.751, 0.00444, 1.57e-05),
            Parameters = cms.vdouble(2176000.0, 107, -0.6558, 0.001318),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu12_EG5'),
            ParErrors = cms.vdouble(0.328, 0.00316, 1.87e-05, 6.62e-08),
            Parameters = cms.vdouble(11.32, 0.0644, 0.00173, -2.519e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_InterBunch_Bsc'),
            ParErrors = cms.vdouble(1480.0, 14.3, 0.0845, 0.0003),
            Parameters = cms.vdouble(-1064000.0, 62100.0, -305.5, 0.4944),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet68'),
            ParErrors = cms.vdouble(1.27, 0.0123, 7.25e-05, 2.57e-07),
            Parameters = cms.vdouble(-23.88, 4.347, -0.003147, 8.809e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_BptxMinus_NotBptxPlus'),
            ParErrors = cms.vdouble(7.81, 0.0754, 0.000445, 1.58e-06),
            Parameters = cms.vdouble(65200.0, 42.93, -0.2665, 0.0005436),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_BptxPlus_NotBptxMinus'),
            ParErrors = cms.vdouble(4.52, 0.0437, 0.000258, 9.14e-07),
            Parameters = cms.vdouble(66270.0, 22.82, -0.1415, 0.0002882),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu3_EG5'),
            ParErrors = cms.vdouble(0.922, 0.0089, 5.26e-05, 1.86e-07),
            Parameters = cms.vdouble(60.99, 0.967, 0.0123, -1.647e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_HTT150'),
            ParErrors = cms.vdouble(0.251, 0.00242, 1.43e-05, 5.07e-08),
            Parameters = cms.vdouble(0.9649, 0.1672, -7.215e-05, 3.948e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleIsoEG10'),
            ParErrors = cms.vdouble(0.341, 0.00329, 1.94e-05, 6.89e-08),
            Parameters = cms.vdouble(-0.2815, 0.4109, -6.543e-05, 1.158e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_QuadJet28_Central'),
            ParErrors = cms.vdouble(0.269, 0.0026, 1.54e-05, 5.45e-08),
            Parameters = cms.vdouble(-2.753, 0.2655, -9.579e-05, 1.405e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_HTT75'),
            ParErrors = cms.vdouble(0.69, 0.00666, 3.93e-05, 1.39e-07),
            Parameters = cms.vdouble(-1.871, 1.313, -0.0003372, 2.406e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_BscMinBiasOR_BptxPlusANDMinus'),
            ParErrors = cms.vdouble(500, 4.83, 0.0285, 0.000101),
            Parameters = cms.vdouble(750000.0, 19710.0, -92.59, 0.1468),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_PreCollisions'),
            ParErrors = cms.vdouble(352, 3.41, 0.0206, 7.24e-05),
            Parameters = cms.vdouble(-69140.0, 1158, -4.805, 0.006113),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleTauJet68'),
            ParErrors = cms.vdouble(0.712, 0.00687, 4.06e-05, 1.44e-07),
            Parameters = cms.vdouble(4.248, 1.65, -0.0004169, 9.507e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleJet52'),
            ParErrors = cms.vdouble(1.07, 0.0104, 6.12e-05, 2.17e-07),
            Parameters = cms.vdouble(-4.872, 2.418, -0.0004958, 3.303e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleTauJet80'),
            ParErrors = cms.vdouble(0.456, 0.0044, 2.6e-05, 9.22e-08),
            Parameters = cms.vdouble(2.613, 0.7176, -0.000204, 4.198e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu5_EG12'),
            ParErrors = cms.vdouble(0.211, 0.00203, 1.2e-05, 4.26e-08),
            Parameters = cms.vdouble(-0.9276, 0.1799, -2.543e-05, 2.733e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_MuOpen_EG5'),
            ParErrors = cms.vdouble(1.79, 0.0173, 0.000102, 3.62e-07),
            Parameters = cms.vdouble(115.9, 1.924, 0.0295, -3.29e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet20_NotBptxOR'),
            ParErrors = cms.vdouble(2.97, 0.0286, 0.000169, 6e-07),
            Parameters = cms.vdouble(-24.41, 11.01, -0.00962, 1.614e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleIsoEG12'),
            ParErrors = cms.vdouble(2.99, 0.0289, 0.000171, 6.05e-07),
            Parameters = cms.vdouble(-23.41, 12.41, -0.007881, 1.412e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_EG5_HTT125'),
            ParErrors = cms.vdouble(0.28, 0.0027, 1.6e-05, 5.66e-08),
            Parameters = cms.vdouble(0.9394, 0.2254, -9.459e-05, 5.622e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu0_HTT50'),
            ParErrors = cms.vdouble(0.238, 0.0023, 1.36e-05, 4.82e-08),
            Parameters = cms.vdouble(-1.826, 0.2027, -2.206e-05, 4.301e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_ETM70'),
            ParErrors = cms.vdouble(0.151, 0.00146, 8.63e-06, 3.06e-08),
            Parameters = cms.vdouble(0.8685, 0.05848, -4.67e-05, 1.856e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_ETM20'),
            ParErrors = cms.vdouble(2.74, 0.0265, 0.000156, 5.54e-07),
            Parameters = cms.vdouble(-69.51, 8.269, -0.001148, 6.683e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleEG_12_5'),
            ParErrors = cms.vdouble(0.948, 0.00915, 5.4e-05, 1.92e-07),
            Parameters = cms.vdouble(-4.085, 3.06, -0.0005698, 2.818e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_EG8_Jet20_Central_deltaPhi1'),
            ParErrors = cms.vdouble(2.08, 0.0201, 0.000119, 4.21e-07),
            Parameters = cms.vdouble(-23.1, 9.62, 0.0005052, 1.776e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu7_TauJet16'),
            ParErrors = cms.vdouble(0.497, 0.0048, 2.83e-05, 1e-07),
            Parameters = cms.vdouble(17.17, 0.371, 0.002836, -2.271e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_TripleEG7'),
            ParErrors = cms.vdouble(0.267, 0.00258, 1.52e-05, 5.4e-08),
            Parameters = cms.vdouble(-0.7609, 0.2553, -4.256e-05, 2.581e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_EG5_HTT75'),
            ParErrors = cms.vdouble(0.536, 0.00517, 3.06e-05, 1.08e-07),
            Parameters = cms.vdouble(-2.497, 0.9994, -0.0002386, 1.871e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet20_NotBptxOR_NotMuBeamHalo'),
            ParErrors = cms.vdouble(2.96, 0.0286, 0.000169, 5.99e-07),
            Parameters = cms.vdouble(-22.21, 10.95, -0.009189, 1.524e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMu25'),
            ParErrors = cms.vdouble(1.01, 0.00976, 5.77e-05, 2.04e-07),
            Parameters = cms.vdouble(173.8, -0.7411, 0.01661, -3.326e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleEG10'),
            ParErrors = cms.vdouble(0.456, 0.0044, 2.6e-05, 9.22e-08),
            Parameters = cms.vdouble(-0.05877, 0.748, -0.0001303, 1.851e-07),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMu20'),
            ParErrors = cms.vdouble(1.08, 0.0104, 6.17e-05, 2.19e-07),
            Parameters = cms.vdouble(186.1, -0.4123, 0.0174, -3.495e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMu7_Barrel'),
            ParErrors = cms.vdouble(0.995, 0.0096, 5.67e-05, 2.01e-07),
            Parameters = cms.vdouble(94.78, 1.884, 0.002084, -4.637e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_HTT100'),
            ParErrors = cms.vdouble(0.421, 0.00407, 2.4e-05, 8.52e-08),
            Parameters = cms.vdouble(0.9086, 0.57, -0.0001851, 1.12e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleEG2_FwdVeto'),
            ParErrors = cms.vdouble(31.9, 0.31, 0.00192, 6.74e-06),
            Parameters = cms.vdouble(-2721, 68.2, -0.3894, 0.0006788),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleIsoEG12_Eta1p39'),
            ParErrors = cms.vdouble(1.52, 0.0146, 8.65e-05, 3.07e-07),
            Parameters = cms.vdouble(-36.67, 7.33, -0.005623, 9.895e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_Mu3_Jet16_Central'),
            ParErrors = cms.vdouble(1.26, 0.0122, 7.19e-05, 2.55e-07),
            Parameters = cms.vdouble(54.42, 1.388, 0.01152, -4.061e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleMu3'),
            ParErrors = cms.vdouble(0.9, 0.00869, 5.13e-05, 1.82e-07),
            Parameters = cms.vdouble(44.72, 0.8847, 0.005398, -8.196e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleMu0'),
            ParErrors = cms.vdouble(1.22, 0.0118, 6.94e-05, 2.46e-07),
            Parameters = cms.vdouble(113.6, 0.3927, 0.01494, -2.432e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_DoubleMu5'),
            ParErrors = cms.vdouble(0.459, 0.00443, 2.61e-05, 9.27e-08),
            Parameters = cms.vdouble(-1.153, 0.6484, -0.0001937, 1.474e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_EG12_TauJet20_deltaPhi1'),
            ParErrors = cms.vdouble(0.849, 0.0082, 4.84e-05, 1.72e-07),
            Parameters = cms.vdouble(-35.16, 3.416, -0.003848, 9.685e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_ETM30'),
            ParErrors = cms.vdouble(0.644, 0.00622, 3.67e-05, 1.3e-07),
            Parameters = cms.vdouble(-30.37, 1.8, -0.003443, 9.613e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMu7_Eta2p1'),
            ParErrors = cms.vdouble(1.43, 0.0138, 8.18e-05, 2.9e-07),
            Parameters = cms.vdouble(115.2, 4.653, 0.003062, -6.747e-06),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet52'),
            ParErrors = cms.vdouble(2.85, 0.0275, 0.000163, 5.77e-07),
            Parameters = cms.vdouble(-12.22, 11.63, -0.001005, 1.478e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        )),
    inputTagL1GtDataDaq = cms.InputTag("gtDigis"),
    inputTagScalersResults = cms.InputTag("scalersRawToDigi"),
    lsShiftGTRates = cms.untracked.int32(-1),
    maxInstantLuminosity = cms.double(10000),
    minInstantLuminosity = cms.double(100),
    oracleDB = cms.string('oracle://CMS_OMDS_LB/CMS_TRG_R'),
    pathCondDB = cms.string('/nfshome0/centraltspro/secure/'),
    refPrescaleSet = cms.int32(0),
    srcAlgoXSecFit = cms.int32(0),
    testEventScalLS = cms.untracked.bool(True),
    useHFDeadTimeNormalization = cms.untracked.bool(False),
    verbose = cms.untracked.bool(False)
)


process.l1tRate_Offline = cms.EDAnalyzer("L1TRate_Offline",
    categories = cms.PSet(
        CenJet = cms.untracked.bool(False),
        EG = cms.untracked.bool(True),
        ETM = cms.untracked.bool(True),
        ETT = cms.untracked.bool(True),
        ForJet = cms.untracked.bool(False),
        HTM = cms.untracked.bool(True),
        HTT = cms.untracked.bool(True),
        IsoEG = cms.untracked.bool(True),
        Jet = cms.untracked.bool(True),
        Mu = cms.untracked.bool(True),
        TauJet = cms.untracked.bool(False)
    ),
    disableROOToutput = cms.untracked.bool(True),
    dqmStore = cms.untracked.bool(True),
    fitParameters = cms.VPSet(cms.PSet(
        AlgoName = cms.string('L1_SingleEG22'),
        ParErrors = cms.vdouble(4.6133, 0.00124988, 2.17871e-07, 2.56616e-11),
        Parameters = cms.vdouble(-250.646, 1.78975, -5.5801e-05, 5.90724e-09),
        TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
    ), 
        cms.PSet(
            AlgoName = cms.string('L1_ETM50'),
            ParErrors = cms.vdouble(1.57155, 0.000427218, 7.48549e-08, 8.83838e-12),
            Parameters = cms.vdouble(-781.253, 0.589212, -8.09682e-05, 6.11958e-09),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_ETT80'),
            ParErrors = cms.vdouble(34685.1, 9.68504, 0.00177067, 2.12745e-07),
            Parameters = cms.vdouble(6414890.0, -3748.94, 0.656481, -2.14204e-05),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_HTT100'),
            ParErrors = cms.vdouble(2026.82, 0.549814, 9.61286e-05, 1.1393e-08),
            Parameters = cms.vdouble(-461.806, 0.635347, -1.80574e-05, 1.61805e-08),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleIsoEG20er'),
            ParErrors = cms.vdouble(3.81866, 0.00103454, 1.80314e-07, 2.12361e-11),
            Parameters = cms.vdouble(152.06, 1.02088, 5.33485e-06, 9.91573e-10),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleJet128'),
            ParErrors = cms.vdouble(1.82347, 0.000494797, 8.64361e-08, 1.01899e-11),
            Parameters = cms.vdouble(-217.021, 0.326, -1.41957e-05, 1.4588e-09),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        ), 
        cms.PSet(
            AlgoName = cms.string('L1_SingleMu16'),
            ParErrors = cms.vdouble(7.08545, 0.00194953, 3.5046e-07, 4.37085e-11),
            Parameters = cms.vdouble(-5435.68, 6.38796, -0.000563198, 3.4096e-08),
            TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
        )),
    inputTagL1GtDataDaq = cms.InputTag("gtDigis"),
    inputTagScalersResults = cms.InputTag("scalersRawToDigi"),
    lsShiftGTRates = cms.untracked.int32(-1),
    maxInstantLuminosity = cms.double(10000),
    minInstantLuminosity = cms.double(100),
    oracleDB = cms.string('oracle://CMS_OMDS_LB/CMS_TRG_R'),
    pathCondDB = cms.string('/nfshome0/centraltspro/secure/'),
    refPrescaleSet = cms.int32(0),
    srcAlgoXSecFit = cms.int32(1),
    testEventScalLS = cms.untracked.bool(True),
    useHFDeadTimeNormalization = cms.untracked.bool(False),
    verbose = cms.untracked.bool(False)
)


process.l1tRct = cms.EDAnalyzer("L1TRCT",
    DQMStore = cms.untracked.bool(True),
    HistFolder = cms.untracked.string('L1T/L1TRCT'),
    disableROOToutput = cms.untracked.bool(True),
    filterTriggerType = cms.int32(1),
    rctSource = cms.InputTag("caloStage1Digis"),
    selectBX = cms.untracked.int32(0),
    verbose = cms.untracked.bool(False)
)


process.l1tRctRun1 = cms.EDAnalyzer("L1TRCT",
    DQMStore = cms.untracked.bool(True),
    HistFolder = cms.untracked.string('L1T/L1TRCT'),
    disableROOToutput = cms.untracked.bool(True),
    filterTriggerType = cms.int32(1),
    rctSource = cms.InputTag("gctDigis"),
    selectBX = cms.untracked.int32(0),
    verbose = cms.untracked.bool(False)
)


process.l1tRctfromRCT = cms.EDAnalyzer("L1TRCT",
    DQMStore = cms.untracked.bool(True),
    HistFolder = cms.untracked.string('L1T/L1TRCT_FromRCT'),
    disableROOToutput = cms.untracked.bool(True),
    filterTriggerType = cms.int32(1),
    rctSource = cms.InputTag("rctDigis"),
    selectBX = cms.untracked.int32(0),
    verbose = cms.untracked.bool(False)
)


process.l1tRpctf = cms.EDAnalyzer("L1TRPCTF",
    DQMStore = cms.untracked.bool(True),
    disableROOToutput = cms.untracked.bool(True),
    output_dir = cms.untracked.string('L1T/L1TRPCTF'),
    rateBinSize = cms.int32(60),
    rateNoOfBins = cms.int32(3000),
    rateUpdateTime = cms.int32(20),
    rpctfRPCDigiSource = cms.InputTag("muonRPCDigis"),
    rpctfSource = cms.InputTag("gtDigis"),
    verbose = cms.untracked.bool(False)
)


process.l1tRpctfClient = cms.EDAnalyzer("L1TRPCTFClient",
    input_dir = cms.untracked.string('L1T/L1TRPCTF'),
    output_dir = cms.untracked.string('L1T/L1TRPCTF/Client'),
    prescaleEvt = cms.untracked.int32(1),
    runInEndJob = cms.untracked.bool(False),
    runInEndLumi = cms.untracked.bool(False),
    runInEndRun = cms.untracked.bool(True),
    runInEventLoop = cms.untracked.bool(False),
    verbose = cms.untracked.bool(False)
)


process.l1tStage1Layer2 = cms.EDAnalyzer("L1TGCT",
    DQMStore = cms.untracked.bool(True),
    disableROOToutput = cms.untracked.bool(True),
    filterTriggerType = cms.int32(1),
    gctCentralJetsSource = cms.InputTag("caloStage1LegacyFormatDigis","cenJets"),
    gctEnergySumsSource = cms.InputTag("caloStage1LegacyFormatDigis"),
    gctForwardJetsSource = cms.InputTag("caloStage1LegacyFormatDigis","forJets"),
    gctIsoEmSource = cms.InputTag("caloStage1LegacyFormatDigis","isoEm"),
    gctIsoTauJetsSource = cms.InputTag("caloStage1LegacyFormatDigis","isoTauJets"),
    gctNonIsoEmSource = cms.InputTag("caloStage1LegacyFormatDigis","nonIsoEm"),
    gctTauJetsSource = cms.InputTag("caloStage1LegacyFormatDigis","tauJets"),
    monitorDir = cms.untracked.string('L1TStage1/L1TStage1Layer2'),
    stage1_layer2_ = cms.bool(True),
    verbose = cms.untracked.bool(False)
)


process.l1tStage1Layer2Client = cms.EDAnalyzer("L1TGCTClient",
    monitorDir = cms.untracked.string('L1T/stage1layer2'),
    prescaleEvt = cms.untracked.int32(1),
    prescaleLS = cms.untracked.int32(-1),
    runInEndJob = cms.untracked.bool(False),
    runInEndLumi = cms.untracked.bool(True),
    runInEndRun = cms.untracked.bool(True),
    runInEventLoop = cms.untracked.bool(False),
    stage1_layer2_ = cms.untracked.bool(True)
)


process.l1tSync_Offline = cms.EDAnalyzer("L1TSync_Offline",
    Categories = cms.PSet(
        BPTX = cms.PSet(
            CertMinEvents = cms.int32(50),
            algo = cms.string('Tech_BPTX_AND'),
            monitor = cms.bool(True)
        ),
        CenJet = cms.PSet(
            CertMinEvents = cms.int32(50),
            algo = cms.string(''),
            doAutoSelection = cms.bool(True),
            monitor = cms.bool(False)
        ),
        EG = cms.PSet(
            CertMinEvents = cms.int32(20),
            algo = cms.string(''),
            doAutoSelection = cms.bool(True),
            monitor = cms.bool(True)
        ),
        ETM = cms.PSet(
            CertMinEvents = cms.int32(20),
            algo = cms.string(''),
            doAutoSelection = cms.bool(True),
            monitor = cms.bool(True)
        ),
        ETT = cms.PSet(
            CertMinEvents = cms.int32(20),
            algo = cms.string(''),
            doAutoSelection = cms.bool(True),
            monitor = cms.bool(True)
        ),
        ForJet = cms.PSet(
            CertMinEvents = cms.int32(20),
            algo = cms.string(''),
            doAutoSelection = cms.bool(True),
            monitor = cms.bool(False)
        ),
        HTM = cms.PSet(
            CertMinEvents = cms.int32(20),
            algo = cms.string(''),
            doAutoSelection = cms.bool(True),
            monitor = cms.bool(True)
        ),
        HTT = cms.PSet(
            CertMinEvents = cms.int32(20),
            algo = cms.string(''),
            doAutoSelection = cms.bool(True),
            monitor = cms.bool(True)
        ),
        IsoEG = cms.PSet(
            CertMinEvents = cms.int32(20),
            algo = cms.string(''),
            doAutoSelection = cms.bool(True),
            monitor = cms.bool(True)
        ),
        Jet = cms.PSet(
            CertMinEvents = cms.int32(20),
            algo = cms.string(''),
            doAutoSelection = cms.bool(True),
            monitor = cms.bool(True)
        ),
        Mu = cms.PSet(
            CertMinEvents = cms.int32(20),
            algo = cms.string(''),
            doAutoSelection = cms.bool(True),
            monitor = cms.bool(True)
        ),
        TauJet = cms.PSet(
            CertMinEvents = cms.int32(20),
            algo = cms.string(''),
            doAutoSelection = cms.bool(True),
            monitor = cms.bool(False)
        ),
        doGlobalAutoSelection = cms.bool(False),
        forceGlobalParameters = cms.bool(False)
    ),
    disableROOToutput = cms.untracked.bool(True),
    dqmStore = cms.untracked.bool(True),
    inputTagL1GtDataDaq = cms.InputTag("gtDigis"),
    inputTagScalersResults = cms.InputTag("scalersRawToDigi"),
    inputTagtEvmSource = cms.InputTag("gtEvmDigis"),
    oracleDB = cms.string('oracle://CMS_OMDS_LB/CMS_TRG_R'),
    pathCondDB = cms.string('/nfshome0/centraltspro/secure/'),
    refPrescaleSet = cms.int32(0),
    verbose = cms.untracked.bool(False)
)


process.l1tTestsSummary = cms.EDAnalyzer("L1TTestsSummary",
    MonitorL1TOccupancy = cms.untracked.bool(False),
    MonitorL1TRate = cms.untracked.bool(True),
    MonitorL1TSync = cms.untracked.bool(True),
    verbose = cms.untracked.bool(False)
)


process.l1temuEventInfoClient = cms.EDAnalyzer("L1TEventInfoClient",
    DisableL1Objects = cms.vstring(),
    DisableL1Systems = cms.vstring(),
    L1Objects = cms.VPSet(cms.PSet(
        ObjectDisable = cms.uint32(0),
        ObjectLabel = cms.string('TechTrig'),
        QualityTests = cms.VPSet(cms.PSet(
            QualityTestHist = cms.string(''),
            QualityTestName = cms.string(''),
            QualityTestSummaryEnabled = cms.uint32(0)
        ))
    ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('GtExternal'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('HfRingEtSums'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCTexpert/HFSums/HFSumsErrorFlag'),
                QualityTestName = cms.string('L1EmulatorHfRingEtSumsGctErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('HfBitCounts'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCTexpert/HFCnts/HFCntsErrorFlag'),
                QualityTestName = cms.string('L1EmulatorHfBitCountsGctErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('HTM'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCTexpert/MHT/MHTErrorFlag'),
                QualityTestName = cms.string('L1EmulatorHtmGctErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('HTT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCTexpert/HT/HTErrorFlag'),
                QualityTestName = cms.string('L1EmulatorHttGctErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('ETM'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCTexpert/MET/METErrorFlag'),
                QualityTestName = cms.string('L1EmulatorEtmGctErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('ETT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCTexpert/ET/ETErrorFlag'),
                QualityTestName = cms.string('L1EmulatorEttGctErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('TauJet'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCTexpert/TauJet/TauJetErrorFlag'),
                QualityTestName = cms.string('L1EmulatorTauJetGctErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('ForJet'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCTexpert/ForJet/ForJetErrorFlag'),
                QualityTestName = cms.string('L1EmulatorForJetGctErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('CenJet'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCTexpert/CenJet/CenJetErrorFlag'),
                QualityTestName = cms.string('L1EmulatorCenJetGctErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('IsoEG'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCTexpert/IsoEM/IsoEMErrorFlag'),
                QualityTestName = cms.string('L1EmulatorIsoEGGctErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('NoIsoEG'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCTexpert/NoisoEM/NoisoEMErrorFlag'),
                QualityTestName = cms.string('L1EmulatorNoIsoEGGctErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ))
        ), 
        cms.PSet(
            ObjectDisable = cms.uint32(0),
            ObjectLabel = cms.string('Mu'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GMT/GMTErrorFlag'),
                QualityTestName = cms.string('L1EmulatorMuGmtErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/DTTF/DTFErrorFlag'),
                    QualityTestName = cms.string('L1EmulatorMuDttfErrorFlagQT'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/RPC/RPCErrorFlag'),
                    QualityTestName = cms.string('L1EmulatorMuRpcErrorFlagQT'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ))
        )),
    L1Systems = cms.VPSet(cms.PSet(
        HwValLabel = cms.string('ETP'),
        QualityTests = cms.VPSet(cms.PSet(
            QualityTestHist = cms.string(''),
            QualityTestName = cms.string(''),
            QualityTestSummaryEnabled = cms.uint32(0)
        )),
        SystemDisable = cms.uint32(0),
        SystemLabel = cms.string('ECAL_TPG')
    ), 
        cms.PSet(
            HwValLabel = cms.string('HTP'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('HCAL_TPG')
        ), 
        cms.PSet(
            HwValLabel = cms.string('RCT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/RCT/RCTErrorFlag'),
                QualityTestName = cms.string('L1EmulatorRCTErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/RegionData/rctRegEff2D'),
                    QualityTestName = cms.string('L1EmulatorRCTeff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/IsoEm/rctIsoEmEff1'),
                    QualityTestName = cms.string('L1EmulatorRCTeff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/NisoEm/rctNisoEmEff1'),
                    QualityTestName = cms.string('L1EmulatorRCTeff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/IsoEm/rctIsoEmEff2'),
                    QualityTestName = cms.string('L1EmulatorRCTeff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/NisoEm/rctNisoEmEff2'),
                    QualityTestName = cms.string('L1EmulatorRCTeff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/RegionData/rctRegEff1D'),
                    QualityTestName = cms.string('L1EmulatorRCTeff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/IsoEm/rctIsoEmEff1oneD'),
                    QualityTestName = cms.string('L1EmulatorRCTeff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/NisoEm/rctNisoEmEff1oneD'),
                    QualityTestName = cms.string('L1EmulatorRCTeff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/IsoEm/rctIsoEmEff2oneD'),
                    QualityTestName = cms.string('L1EmulatorRCTeff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/NisoEm/rctNisoEmEff2oneD'),
                    QualityTestName = cms.string('L1EmulatorRCTeff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/RegionData/rctRegIneff2D'),
                    QualityTestName = cms.string('L1EmulatorRCTineff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/IsoEm/rctIsoEmIneff'),
                    QualityTestName = cms.string('L1EmulatorRCTineff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/NisoEm/rctNisoEmIneff'),
                    QualityTestName = cms.string('L1EmulatorRCTineff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/IsoEm/rctIsoEmIneff2'),
                    QualityTestName = cms.string('L1EmulatorRCTineff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/NisoEm/rctNisoEmIneff2'),
                    QualityTestName = cms.string('L1EmulatorRCTineff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/RegionData/rctRegOvereff2D'),
                    QualityTestName = cms.string('L1EmulatorRCTineff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/IsoEm/rctIsoEmOvereff'),
                    QualityTestName = cms.string('L1EmulatorRCTineff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/NisoEm/rctNisoEmOvereff'),
                    QualityTestName = cms.string('L1EmulatorRCTineff2DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/RegionData/rctRegIneff1D'),
                    QualityTestName = cms.string('L1EmulatorRCTineff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/RegionData/rctRegSpIneff1D'),
                    QualityTestName = cms.string('L1EmulatorRCTineff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/IsoEm/rctIsoEmIneff1D'),
                    QualityTestName = cms.string('L1EmulatorRCTineff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/NisoEm/rctNisoEmIneff1D'),
                    QualityTestName = cms.string('L1EmulatorRCTineff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/IsoEm/rctIsoEmIneff2oneD'),
                    QualityTestName = cms.string('L1EmulatorRCTineff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/NisoEm/rctNisoEmIneff2oneD'),
                    QualityTestName = cms.string('L1EmulatorRCTineff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/RegionData/rctRegOvereff1D'),
                    QualityTestName = cms.string('L1EmulatorRCTineff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/IsoEm/rctIsoEmOvereff1D'),
                    QualityTestName = cms.string('L1EmulatorRCTineff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/L1TdeRCT/NisoEm/rctNisoEmOvereff1D'),
                    QualityTestName = cms.string('L1EmulatorRCTineff1DErrorQTest'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('RCT')
        ), 
        cms.PSet(
            HwValLabel = cms.string('GCT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GCT/GCTErrorFlag'),
                QualityTestName = cms.string('L1EmulatorGCTErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('GCT')
        ), 
        cms.PSet(
            HwValLabel = cms.string('DTP'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('DT_TPG')
        ), 
        cms.PSet(
            HwValLabel = cms.string('DTF'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/DTTF/DTFErrorFlag'),
                QualityTestName = cms.string('L1EmulatorDTTFErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('DTTF')
        ), 
        cms.PSet(
            HwValLabel = cms.string('CTP'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string(''),
                QualityTestName = cms.string(''),
                QualityTestSummaryEnabled = cms.uint32(0)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('CSC_TPG')
        ), 
        cms.PSet(
            HwValLabel = cms.string('CTF'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/CSCTFexpert/pt1Comp_1d'),
                QualityTestName = cms.string('L1EMulatorCSCTFDPhi12_ptLut'),
                QualityTestSummaryEnabled = cms.uint32(1)
            ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/CSCTFexpert/pt2Comp_1d'),
                    QualityTestName = cms.string('L1EMulatorCSCTFDPhi23_ptLut'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/CSCTFexpert/pt3Comp_1d'),
                    QualityTestName = cms.string('L1EMulatorCSCTFEta_ptLut'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/CSCTFexpert/pt4Comp_1d'),
                    QualityTestName = cms.string('L1EMulatorCSCTFMode_ptLut'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/CSCTFexpert/pt5Comp_1d'),
                    QualityTestName = cms.string('L1EMulatorCSCTFFRBit_ptLut'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/CSCTFexpert/phiComp_1d'),
                    QualityTestName = cms.string('L1EMulatorCSCTFPhi'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/CSCTFexpert/etaComp_1d'),
                    QualityTestName = cms.string('L1EMulatorCSCTFEta'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/CSCTFexpert/occComp_1d'),
                    QualityTestName = cms.string('L1EMulatorCSCTFOcc'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/CSCTFexpert/ptComp_1d'),
                    QualityTestName = cms.string('L1EMulatorCSCTFPt'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/CSCTFexpert/qualComp_1d'),
                    QualityTestName = cms.string('L1EMulatorCSCTFQual'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                ), 
                cms.PSet(
                    QualityTestHist = cms.string('L1TEMU/CSCTFexpert/dtStubPhi_1d'),
                    QualityTestName = cms.string('L1EMulatorCSCTF_dtStubPhi'),
                    QualityTestSummaryEnabled = cms.uint32(1)
                )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('CSCTF')
        ), 
        cms.PSet(
            HwValLabel = cms.string('RPC'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/RPC/RPCErrorFlag'),
                QualityTestName = cms.string('L1EmulatorRPCErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('RPC')
        ), 
        cms.PSet(
            HwValLabel = cms.string('GMT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GMT/GMTErrorFlag'),
                QualityTestName = cms.string('L1EmulatorGMTErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('GMT')
        ), 
        cms.PSet(
            HwValLabel = cms.string('GT'),
            QualityTests = cms.VPSet(cms.PSet(
                QualityTestHist = cms.string('L1TEMU/GTexpert/GTErrorFlag'),
                QualityTestName = cms.string('L1EmulatorGTErrorFlagQT'),
                QualityTestSummaryEnabled = cms.uint32(1)
            )),
            SystemDisable = cms.uint32(0),
            SystemLabel = cms.string('GT')
        )),
    monitorDir = cms.untracked.string('L1TEMU'),
    runInEndJob = cms.untracked.bool(False),
    runInEndLumi = cms.untracked.bool(False),
    runInEndRun = cms.untracked.bool(True),
    runInEventLoop = cms.untracked.bool(False)
)


process.l1tsClient = cms.EDAnalyzer("L1ScalersClient",
    algoMonitorBits = cms.untracked.vint32(54, 55, 56),
    dqmFolder = cms.untracked.string('L1T/L1Scalers_SM'),
    techMonitorBits = cms.untracked.vint32(1, 2, 9)
)


process.l1tscalers = cms.EDAnalyzer("L1TScalersSCAL",
    denomBit = cms.untracked.uint32(35),
    denomIsTech = cms.untracked.bool(True),
    egammaBit = cms.untracked.uint32(46),
    jetBit = cms.untracked.uint32(16),
    muonBit = cms.untracked.uint32(55),
    scalersResults = cms.InputTag("scalersRawToDigi","","DQM"),
    verbose = cms.untracked.bool(False)
)


process.looseAnalyzer = cms.EDAnalyzer("HLTMuonOfflineAnalyzer",
    binParams = cms.untracked.PSet(
        NVertex = cms.untracked.vdouble(20, 1, 50),
        charge = cms.untracked.vdouble(2, -2.0, 2.0),
        d0 = cms.untracked.vdouble(10, -0.5, 0.5),
        deltaR = cms.untracked.vdouble(20, 0.0, 0.05),
        eta = cms.untracked.vdouble(20, -2.4, 2.4),
        etaCoarse = cms.untracked.vdouble(-2.4, -2.1, -1.6, -1.2, -0.8, 
            0.0, 0.8, 1.2, 1.6, 2.1, 
            2.4),
        jpsiMass = cms.untracked.vdouble(60, 0.0, 6.0),
        phi = cms.untracked.vdouble(20, -3.14, 3.14),
        phiCoarse = cms.untracked.vdouble(10, -3.14, 3.14),
        pt = cms.untracked.vdouble(0.0, 2.0, 4.0, 6.0, 8.0, 
            10.0, 20.0, 30.0, 40.0, 100.0, 
            200.0, 400.0),
        ptCoarse = cms.untracked.vdouble(10.0, 20.0, 40.0, 60.0, 80.0, 
            100.0, 200.0),
        resolutionEta = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionPhi = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionRel = cms.untracked.vdouble(20, -0.15, 0.15),
        z0 = cms.untracked.vdouble(10, -15.0, 15.0),
        zMass = cms.untracked.vdouble(50, 65.0, 115.0)
    ),
    destination = cms.untracked.string('HLT/Muon/DistributionsLoose'),
    hltPathsToCheck = cms.vstring('HLT_Mu45_eta2p1_v1', 
        'HLT_Mu50_v', 
        'HLT_IsoMu24_v', 
        'HLT_IsoTkMu24_v', 
        'HLT_Mu17_Mu8_DZ_v', 
        'HLT_Mu17_TkMu8_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v', 
        'HLT_IsoMu20_eta2p1_v', 
        'HLT_IsoTkMu20_eta2p1_v', 
        'HLT_IsoMu24_eta2p1_v', 
        'HLT_IsoTkMu24_eta2p1_v', 
        'HLT_Mu24_eta2p1_v', 
        'HLT_TkMu24_v', 
        'HLT_IsoMu27_v', 
        'HLT_IsoTkMu27_v', 
        'HLT_Mu27_v', 
        'HLT_TkMu27_v', 
        'HLT_IsoMu20_v', 
        'HLT_Mu20_v', 
        'HLT_TkMu20_v', 
        'HLT_IsoTkMu20_v', 
        'HLT_IsoMu22_v', 
        'HLT_IsoTkMu22_v', 
        'HLT_IsoMu18_v', 
        'HLT_IsoTkMu18_v', 
        'HLT_OldIsoMu18_v', 
        'HLT_OldIsoTkMu18_v', 
        'HLT_L1SingleMu16_v', 
        'HLT_L2Mu10_v', 
        'HLT_HIL1DoubleMu0', 
        'HLT_HIL1DoubleMu0BPTX', 
        'HLT_HIL2Mu3', 
        'HLT_HIL2Mu3BPTX', 
        'HLT_HIL2Mu7', 
        'HLT_HIL2Mu15', 
        'HLT_HIL2Mu3_NHitQ', 
        'HLT_HIL2DoubleMu0', 
        'HLT_HIL2DoubleMu0BPTX', 
        'HLT_HIL2DoubleMu0_NHitQ', 
        'HLT_HIL2DoubleMu3', 
        'HLT_HIL3Mu3', 
        'HLT_HIL3Mu3BPTX', 
        'HLT_HIL3DoubleMuOpen'),
    hltProcessName = cms.string('HLT'),
    inputTags = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        offlinePVs = cms.InputTag("hiSelectedVertex"),
        recoMuon = cms.InputTag("muons"),
        triggerResults = cms.InputTag("TriggerResults"),
        triggerSummary = cms.InputTag("hltTriggerSummaryAOD")
    ),
    plotCuts = cms.PSet(
        L1DeltaR = cms.untracked.double(0.3),
        L2DeltaR = cms.untracked.double(0.3),
        L3DeltaR = cms.untracked.double(0.05),
        maxEta = cms.untracked.double(2.1),
        minPtFactor = cms.untracked.double(1.2)
    ),
    probeParams = cms.PSet(
        d0Cut = cms.untracked.double(2.0),
        hltCuts = cms.untracked.string('abs(eta) < 2.0'),
        recoCuts = cms.untracked.string('isGlobalMuon && abs(eta) < 2.0'),
        z0Cut = cms.untracked.double(25.0)
    ),
    requiredTriggers = cms.untracked.vstring(),
    targetParams = cms.PSet(
        d0Cut = cms.untracked.double(50),
        hltCuts = cms.untracked.string('abs(eta) < 2.4'),
        recoCuts = cms.untracked.string('isPFMuon && (isTrackerMuon || isGlobalMuon) && (pfIsolationR04().sumChargedHadronPt + max(pfIsolationR04().sumNeutralHadronEt + pfIsolationR04().sumPhotonEt - pfIsolationR04().sumPUPt/2,0.0))/pt < 0.20'),
        z0Cut = cms.untracked.double(100)
    )
)


process.muRecoTest = cms.EDAnalyzer("MuonRecoTest",
    diagnosticPrescale = cms.untracked.int32(1),
    efficiencyTestName = cms.untracked.string('EfficiencyInRange'),
    etaBin = cms.int32(100),
    etaMax = cms.double(3.0),
    etaMin = cms.double(-3.0),
    phiBin = cms.int32(100),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2)
)


process.muTrackResidualsTest = cms.EDAnalyzer("MuonTrackResidualsTest",
    diagnosticPrescale = cms.untracked.int32(1),
    meanTestName = cms.untracked.string('ResidualsMeanInRange'),
    resDistributionTestName = cms.untracked.string('ResidualsDistributionGaussianTest'),
    sigmaTestName = cms.untracked.string('ResidualsSigmaInRange')
)


process.muonClientsQualityTests = cms.EDAnalyzer("QualityTester",
    prescaleFactor = cms.untracked.int32(1),
    qtList = cms.untracked.FileInPath('DQMOffline/Muon/data/QualityTests2.xml')
)


process.muonComp2RefKolmoQualityTests = cms.EDAnalyzer("QualityTester",
    prescaleFactor = cms.untracked.int32(1),
    qtList = cms.untracked.FileInPath('DQMOffline/Muon/data/Mu_Comp2RefKolmogorov.xml')
)


process.muonComp2RefQualityTests = cms.EDAnalyzer("QualityTester",
    prescaleFactor = cms.untracked.int32(1),
    qtList = cms.untracked.FileInPath('DQMOffline/Muon/data/Mu_Comp2RefChi2.xml')
)


process.muonCosmicTestSummary = cms.EDAnalyzer("MuonTestSummary",
    chi2Fraction = cms.double(0.4),
    chi2Spread = cms.double(0.2),
    etaExpected = cms.double(0.5),
    expMultiplicityGlb_max = cms.double(0.1),
    expMultiplicityGlb_min = cms.double(0.0),
    expMultiplicitySta_max = cms.double(0.95),
    expMultiplicitySta_min = cms.double(0.75),
    expMultiplicityTk_max = cms.double(0.045),
    expMultiplicityTk_min = cms.double(0.0),
    expPeakEcalS9_max = cms.double(0.3),
    expPeakEcalS9_min = cms.double(0.1),
    expPeakHadS9_max = cms.double(3.0),
    expPeakHadS9_min = cms.double(1.0),
    matchesFractionCsc_max = cms.double(1.0),
    matchesFractionCsc_min = cms.double(0.75),
    matchesFractionDt_max = cms.double(1.0),
    matchesFractionDt_min = cms.double(0.75),
    numMatchedExpected_max = cms.double(5.0),
    numMatchedExpected_min = cms.double(3.0),
    phiExpected = cms.double(0.01),
    pullEtaSpread = cms.double(1.3),
    pullOneOvPSpread = cms.double(2.0),
    pullPhiSpread = cms.double(2.0),
    resChargeLimit_glbSta = cms.double(0.14),
    resChargeLimit_tkGlb = cms.double(0.1),
    resChargeLimit_tkSta = cms.double(0.18),
    resEtaSpread_glbSta = cms.double(0.05),
    resEtaSpread_tkGlb = cms.double(0.001),
    resOneOvPSpread_glbSta = cms.double(0.05),
    resOneOvPSpread_tkGlb = cms.double(0.001),
    resPhiSpread_glbSta = cms.double(0.05),
    resPhiSpread_tkGlb = cms.double(0.001),
    resSegmTrack_mean_max = cms.double(0.2),
    resSegmTrack_mean_min = cms.double(-0.2),
    resSegmTrack_rms_max = cms.double(1.1),
    resSegmTrack_rms_min = cms.double(0.9)
)


process.muonEnergyDepositAnalyzer = cms.EDAnalyzer("MuonEnergyDepositAnalyzer",
    AlgoName = cms.string('muons'),
    MuonCollection = cms.InputTag("muons"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    debug = cms.bool(False),
    emS9SizeBin = cms.int32(100),
    emS9SizeMax = cms.double(4.0),
    emS9SizeMin = cms.double(0.0),
    emSizeBin = cms.int32(100),
    emSizeMax = cms.double(4.0),
    emSizeMin = cms.double(0.0),
    hadS9SizeBin = cms.int32(200),
    hadS9SizeMax = cms.double(10.0),
    hadS9SizeMin = cms.double(0.0),
    hadSizeBin = cms.int32(200),
    hadSizeMax = cms.double(10.0),
    hadSizeMin = cms.double(0.0),
    hoS9SizeBin = cms.int32(100),
    hoS9SizeMax = cms.double(4.0),
    hoS9SizeMin = cms.double(0.0),
    hoSizeBin = cms.int32(100),
    hoSizeMax = cms.double(4.0),
    hoSizeMin = cms.double(0.0)
)


process.muonIdDQM = cms.EDAnalyzer("MuonIdDQM",
    baseFolder = cms.untracked.string('Muons/MuonIdDQM'),
    inputCSCSegmentCollection = cms.InputTag("cscSegments"),
    inputDTRecSegment4DCollection = cms.InputTag("dt4DSegments"),
    inputMuonCollection = cms.InputTag("muons"),
    useGlobalMuons = cms.untracked.bool(True),
    useGlobalMuonsNotTrackerMuons = cms.untracked.bool(False),
    useTrackerMuons = cms.untracked.bool(True),
    useTrackerMuonsNotGlobalMuons = cms.untracked.bool(True)
)


process.muonKinVsEtaAnalyzer = cms.EDAnalyzer("MuonKinVsEtaAnalyzer",
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    MuonCollection = cms.InputTag("muons"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    VertexLabel = cms.InputTag("offlinePrimaryVertices"),
    chiBin = cms.int32(100),
    chiMax = cms.double(20.0),
    chiMin = cms.double(0.0),
    chiprobMax = cms.double(1.0),
    chiprobMin = cms.double(0.0),
    etaBMax = cms.double(1.1),
    etaBMin = cms.double(0.0),
    etaBin = cms.int32(100),
    etaECMax = cms.double(2.4),
    etaECMin = cms.double(0.9),
    etaMax = cms.double(3.0),
    etaMin = cms.double(-3.0),
    etaOvlpMax = cms.double(1.1),
    etaOvlpMin = cms.double(0.9),
    pBin = cms.int32(100),
    pMax = cms.double(100.0),
    pMin = cms.double(0.0),
    phiBin = cms.int32(100),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(100),
    ptMax = cms.double(100.0),
    ptMin = cms.double(0.0)
)


process.muonPFsequence = cms.EDAnalyzer("MuonPFAnalyzer",
    folder = cms.string('Muons/MuonPFAnalyzer/'),
    highPtThreshold = cms.double(200.0),
    inputTagBeamSpot = cms.InputTag("offlineBeamSpot"),
    inputTagGenParticles = cms.InputTag("genParticles"),
    inputTagMuonReco = cms.InputTag("muons"),
    inputTagVertex = cms.InputTag("offlinePrimaryVertices"),
    recoGenDeltaR = cms.double(0.1),
    relCombIsoCut = cms.double(0.15),
    runOnMC = cms.bool(False)
)


process.muonRecoAnalyzer = cms.EDAnalyzer("MuonRecoAnalyzer",
    MuonCollection = cms.InputTag("muons"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    chi2Bin = cms.int32(100),
    chi2Max = cms.double(20),
    chi2Min = cms.double(0),
    etaBin = cms.int32(100),
    etaMax = cms.double(3.0),
    etaMin = cms.double(-3.0),
    pBin = cms.int32(500),
    pMax = cms.double(500.0),
    pMin = cms.double(0.0),
    pResBin = cms.int32(50),
    pResMax = cms.double(0.01),
    pResMin = cms.double(-0.01),
    phiBin = cms.int32(100),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(500),
    ptMax = cms.double(500.0),
    ptMin = cms.double(0.0),
    rhBin = cms.int32(25),
    rhMax = cms.double(1.001),
    rhMin = cms.double(0.0),
    thetaBin = cms.int32(100),
    thetaMax = cms.double(3.2),
    thetaMin = cms.double(0.0),
    tunePBin = cms.int32(100),
    tunePMax = cms.double(1.0),
    tunePMin = cms.double(-1.0)
)


process.muonRecoOneHLT = cms.EDAnalyzer("MuonRecoOneHLT",
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    DoubleMuonTrigger = cms.PSet(
        andOr = cms.bool(True),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('MuonDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('DoubleMu'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v*')
    ),
    MuonCollection = cms.InputTag("muons"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    SingleMuonTrigger = cms.PSet(
        andOr = cms.bool(True),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('MuonDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('SingleMu'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_IsoMu24_eta2p1_v*')
    ),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    VertexLabel = cms.InputTag("offlinePrimaryVertices"),
    chi2Bin = cms.int32(50),
    chi2Max = cms.double(20),
    chi2Min = cms.double(0.0),
    etaBin = cms.int32(50),
    etaMax = cms.double(3.0),
    etaMin = cms.double(-3.0),
    phiBin = cms.int32(50),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(50),
    ptMax = cms.double(100.0),
    ptMin = cms.double(0.0)
)


process.muonSeedsAnalyzer = cms.EDAnalyzer("MuonSeedsAnalyzer",
    EtaBin = cms.int32(100),
    EtaMax = cms.double(3.0),
    EtaMin = cms.double(-3.0),
    PhiBin = cms.int32(100),
    PhiMax = cms.double(3.2),
    PhiMin = cms.double(-3.2),
    RecHitBin = cms.int32(25),
    RecHitMax = cms.double(25.0),
    RecHitMin = cms.double(0.0),
    SeedCollection = cms.InputTag("ancientMuonSeed"),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    ThetaBin = cms.int32(100),
    ThetaMax = cms.double(3.2),
    ThetaMin = cms.double(0.0),
    debug = cms.bool(False),
    etaErrBin = cms.int32(200),
    etaErrMax = cms.double(0.5),
    etaErrMin = cms.double(0.0),
    pErrBin = cms.int32(200),
    pErrMax = cms.double(200.0),
    pErrMin = cms.double(0.0),
    phiErrBin = cms.int32(160),
    phiErrMax = cms.double(3.2),
    phiErrMin = cms.double(0.0),
    pxyzErrBin = cms.int32(100),
    pxyzErrMax = cms.double(100.0),
    pxyzErrMin = cms.double(-100.0),
    seedPtBin = cms.int32(1000),
    seedPtMax = cms.double(200.0),
    seedPtMin = cms.double(0.0),
    seedPxyzBin = cms.int32(100),
    seedPxyzMax = cms.double(50.0),
    seedPxyzMin = cms.double(-50.0)
)


process.muonSourcesQualityTests = cms.EDAnalyzer("QualityTester",
    prescaleFactor = cms.untracked.int32(1),
    qtList = cms.untracked.FileInPath('DQMOffline/Muon/data/QualityTests1.xml')
)


process.muonTestSummary = cms.EDAnalyzer("MuonTestSummary",
    chi2Fraction = cms.double(0.4),
    chi2Spread = cms.double(0.2),
    etaExpected = cms.double(1.0),
    expMultiplicityGlb_max = cms.double(0.95),
    expMultiplicityGlb_min = cms.double(0.75),
    expMultiplicitySta_max = cms.double(0.02),
    expMultiplicitySta_min = cms.double(0.01),
    expMultiplicityTk_max = cms.double(0.16),
    expMultiplicityTk_min = cms.double(0.08),
    expPeakEcalS9_max = cms.double(0.3),
    expPeakEcalS9_min = cms.double(0.1),
    expPeakHadS9_max = cms.double(3.0),
    expPeakHadS9_min = cms.double(1.0),
    matchesFractionCsc_max = cms.double(1.0),
    matchesFractionCsc_min = cms.double(0.75),
    matchesFractionDt_max = cms.double(1.0),
    matchesFractionDt_min = cms.double(0.75),
    numMatchedExpected_max = cms.double(5.0),
    numMatchedExpected_min = cms.double(3.0),
    phiExpected = cms.double(1.0),
    pullEtaSpread = cms.double(1.3),
    pullOneOvPSpread = cms.double(2.0),
    pullPhiSpread = cms.double(2.0),
    resChargeLimit_glbSta = cms.double(0.14),
    resChargeLimit_tkGlb = cms.double(0.1),
    resChargeLimit_tkSta = cms.double(0.18),
    resEtaSpread_glbSta = cms.double(0.05),
    resEtaSpread_tkGlb = cms.double(0.001),
    resOneOvPSpread_glbSta = cms.double(0.05),
    resOneOvPSpread_tkGlb = cms.double(0.001),
    resPhiSpread_glbSta = cms.double(0.05),
    resPhiSpread_tkGlb = cms.double(0.001),
    resSegmTrack_mean_max = cms.double(0.2),
    resSegmTrack_mean_min = cms.double(-0.2),
    resSegmTrack_rms_max = cms.double(1.1),
    resSegmTrack_rms_min = cms.double(0.9)
)


process.pfMetDQMAnalyzer = cms.EDAnalyzer("METAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(False),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
    ),
    DCSFilter = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf:pixel:sistrip:es:muon'),
        Filter = cms.untracked.bool(True)
    ),
    FolderName = cms.untracked.string('JetMET/MET/'),
    HBHENoiseFilterResultLabel = cms.InputTag("HBHENoiseFilterResultProducer","HBHENoiseFilterResult"),
    HcalNoiseRBXCollection = cms.InputTag("hcalnoise"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    JetCollectionLabel = cms.InputTag("ak4PFJets"),
    JetCorrections = cms.InputTag("dqmAk4PFL1FastL2L3ResidualCorrector"),
    LSBegin = cms.int32(0),
    LSEnd = cms.int32(-1),
    METCollectionLabel = cms.InputTag("pfMet"),
    METDiagonisticsParameters = cms.VPSet(cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(-2.7),
        etaNBins = cms.int32(108),
        nMax = cms.int32(7500),
        nMin = cms.int32(0),
        name = cms.string('h'),
        nbins = cms.double(250),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(160),
        type = cms.int32(1)
    ), 
        cms.PSet(
            etaMax = cms.double(1.392),
            etaMin = cms.double(-1.392),
            etaNBins = cms.int32(32),
            nMax = cms.int32(250),
            nMin = cms.int32(0),
            name = cms.string('h0Barrel'),
            nbins = cms.double(250),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(72),
            type = cms.int32(5)
        ), 
        cms.PSet(
            etaMax = cms.double(-1.392),
            etaMin = cms.double(-3.0),
            etaNBins = cms.int32(12),
            nMax = cms.int32(250),
            nMin = cms.int32(0),
            name = cms.string('h0Endcap'),
            nbins = cms.double(250),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(5)
        ), 
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(-1.479),
            etaNBins = cms.int32(170),
            nMax = cms.int32(2500),
            nMin = cms.int32(0),
            name = cms.string('gammaBarrel'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(360),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(-1.479),
            etaMin = cms.double(-3.0),
            etaNBins = cms.int32(20),
            nMax = cms.int32(750),
            nMin = cms.int32(0),
            name = cms.string('gammaEndcap'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(30),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(-3.0),
            etaMin = cms.double(-5.0),
            etaNBins = cms.int32(20),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('gammaForward'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(30),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(-2.7),
            etaNBins = cms.int32(27),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('e'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(40),
            type = cms.int32(2)
        ), 
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(-2.7),
            etaNBins = cms.int32(27),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('mu'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(40),
            type = cms.int32(3)
        ), 
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            etaNBins = cms.int32(11),
            nMax = cms.int32(1250),
            nMin = cms.int32(0),
            name = cms.string('hHF'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(6)
        ), 
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            etaNBins = cms.int32(11),
            nMax = cms.int32(1250),
            nMin = cms.int32(0),
            name = cms.string('egammaHF'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(7)
        )),
    METType = cms.untracked.string('pf'),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCandidateMaps = cms.bool(True),
    fillMetHighLevel = cms.bool(False),
    hcalMin = cms.double(1.0),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    muonsrc = cms.InputTag("muons"),
    onlyCleaned = cms.untracked.bool(False),
    pVBin = cms.int32(100),
    pVMax = cms.double(100.0),
    pVMin = cms.double(0.0),
    ptMinCand = cms.double(1.0),
    ptThreshold = cms.double(30),
    runcosmics = cms.untracked.bool(False),
    srcPFlow = cms.InputTag("particleFlow"),
    triggerSelectedSubFolders = cms.VPSet(cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_PFJet400_v*'),
        label = cms.string('highPtJet')
    ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(True),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_PFJet80_v*'),
            label = cms.string('lowPtJet')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_ZeroBias_v*'),
            label = cms.string('zeroBias')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_MET400_v*'),
            label = cms.string('highMET')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_IsoMu24_eta2p1_v*', 
                'HLT_IsoMu24_v*'),
            label = cms.string('singleMu')
        )),
    verbose = cms.int32(0)
)


process.pfMetDQMAnalyzerMiniAOD = cms.EDAnalyzer("METAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(False),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQMforMiniAOD")
    ),
    DCSFilter = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf:pixel:sistrip:es:muon'),
        Filter = cms.untracked.bool(True)
    ),
    FolderName = cms.untracked.string('JetMET/MET/'),
    HBHENoiseFilterResultLabel = cms.InputTag("HBHENoiseFilterResultProducer","HBHENoiseFilterResult"),
    HcalNoiseRBXCollection = cms.InputTag("hcalnoise"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    JetCollectionLabel = cms.InputTag("slimmedJets"),
    JetCorrections = cms.InputTag(""),
    LSBegin = cms.int32(0),
    LSEnd = cms.int32(-1),
    METCollectionLabel = cms.InputTag("slimmedMETs"),
    METDiagonisticsParameters = cms.VPSet(cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(-2.7),
        etaNBins = cms.int32(108),
        nMax = cms.int32(7500),
        nMin = cms.int32(0),
        name = cms.string('h'),
        nbins = cms.double(250),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(160),
        type = cms.int32(1)
    ), 
        cms.PSet(
            etaMax = cms.double(1.392),
            etaMin = cms.double(-1.392),
            etaNBins = cms.int32(32),
            nMax = cms.int32(250),
            nMin = cms.int32(0),
            name = cms.string('h0Barrel'),
            nbins = cms.double(250),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(72),
            type = cms.int32(5)
        ), 
        cms.PSet(
            etaMax = cms.double(-1.392),
            etaMin = cms.double(-3.0),
            etaNBins = cms.int32(12),
            nMax = cms.int32(250),
            nMin = cms.int32(0),
            name = cms.string('h0Endcap'),
            nbins = cms.double(250),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(5)
        ), 
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(-1.479),
            etaNBins = cms.int32(170),
            nMax = cms.int32(2500),
            nMin = cms.int32(0),
            name = cms.string('gammaBarrel'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(360),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(-1.479),
            etaMin = cms.double(-3.0),
            etaNBins = cms.int32(20),
            nMax = cms.int32(750),
            nMin = cms.int32(0),
            name = cms.string('gammaEndcap'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(30),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(-3.0),
            etaMin = cms.double(-5.0),
            etaNBins = cms.int32(20),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('gammaForward'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(30),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(-2.7),
            etaNBins = cms.int32(27),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('e'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(40),
            type = cms.int32(2)
        ), 
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(-2.7),
            etaNBins = cms.int32(27),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('mu'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(40),
            type = cms.int32(3)
        ), 
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            etaNBins = cms.int32(11),
            nMax = cms.int32(1250),
            nMin = cms.int32(0),
            name = cms.string('hHF'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(6)
        ), 
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            etaNBins = cms.int32(11),
            nMax = cms.int32(1250),
            nMin = cms.int32(0),
            name = cms.string('egammaHF'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(7)
        )),
    METType = cms.untracked.string('miniaod'),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCandidateMaps = cms.bool(False),
    fillMetHighLevel = cms.bool(False),
    hcalMin = cms.double(1.0),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    muonsrc = cms.InputTag("muons"),
    onlyCleaned = cms.untracked.bool(False),
    pVBin = cms.int32(100),
    pVMax = cms.double(100.0),
    pVMin = cms.double(0.0),
    ptMinCand = cms.double(1.0),
    ptThreshold = cms.double(30),
    runcosmics = cms.untracked.bool(False),
    srcPFlow = cms.InputTag("particleFlow"),
    triggerSelectedSubFolders = cms.VPSet(cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_PFJet400_v*'),
        label = cms.string('highPtJet')
    ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(True),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_PFJet80_v*'),
            label = cms.string('lowPtJet')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_ZeroBias_v*'),
            label = cms.string('zeroBias')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_MET400_v*'),
            label = cms.string('highMET')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_IsoMu24_eta2p1_v*', 
                'HLT_IsoMu24_v*'),
            label = cms.string('singleMu')
        )),
    verbose = cms.int32(0)
)


process.pfMetT1DQMAnalyzer = cms.EDAnalyzer("METAnalyzer",
    CleaningParameters = cms.PSet(
        bypassAllDCSChecks = cms.bool(False),
        bypassAllPVChecks = cms.bool(False),
        gtLabel = cms.InputTag("gtDigis"),
        trigSelection = cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(False),
            errorReplyHlt = cms.bool(False),
            hltDBKey = cms.string('jetmet_hltsel'),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('')
        ),
        vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
    ),
    DCSFilter = cms.PSet(
        DetectorTypes = cms.untracked.string('ecal:hbhe:hf:pixel:sistrip:es:muon'),
        Filter = cms.untracked.bool(True)
    ),
    FolderName = cms.untracked.string('JetMET/MET/'),
    HBHENoiseFilterResultLabel = cms.InputTag("HBHENoiseFilterResultProducer","HBHENoiseFilterResult"),
    HcalNoiseRBXCollection = cms.InputTag("hcalnoise"),
    InputJetIDValueMap = cms.InputTag("ak4JetID"),
    JetCollectionLabel = cms.InputTag("ak4PFJetsCHS"),
    JetCorrections = cms.InputTag("dqmAk4PFCHSL1FastL2L3ResidualCorrector"),
    LSBegin = cms.int32(0),
    LSEnd = cms.int32(-1),
    METCollectionLabel = cms.InputTag("pfMETT1"),
    METDiagonisticsParameters = cms.VPSet(cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(-2.7),
        etaNBins = cms.int32(108),
        nMax = cms.int32(7500),
        nMin = cms.int32(0),
        name = cms.string('h'),
        nbins = cms.double(250),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(160),
        type = cms.int32(1)
    ), 
        cms.PSet(
            etaMax = cms.double(1.392),
            etaMin = cms.double(-1.392),
            etaNBins = cms.int32(32),
            nMax = cms.int32(250),
            nMin = cms.int32(0),
            name = cms.string('h0Barrel'),
            nbins = cms.double(250),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(72),
            type = cms.int32(5)
        ), 
        cms.PSet(
            etaMax = cms.double(-1.392),
            etaMin = cms.double(-3.0),
            etaNBins = cms.int32(12),
            nMax = cms.int32(250),
            nMin = cms.int32(0),
            name = cms.string('h0Endcap'),
            nbins = cms.double(250),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(5)
        ), 
        cms.PSet(
            etaMax = cms.double(1.479),
            etaMin = cms.double(-1.479),
            etaNBins = cms.int32(170),
            nMax = cms.int32(2500),
            nMin = cms.int32(0),
            name = cms.string('gammaBarrel'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(360),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(-1.479),
            etaMin = cms.double(-3.0),
            etaNBins = cms.int32(20),
            nMax = cms.int32(750),
            nMin = cms.int32(0),
            name = cms.string('gammaEndcap'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(30),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(-3.0),
            etaMin = cms.double(-5.0),
            etaNBins = cms.int32(20),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('gammaForward'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(30),
            type = cms.int32(4)
        ), 
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(-2.7),
            etaNBins = cms.int32(27),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('e'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(40),
            type = cms.int32(2)
        ), 
        cms.PSet(
            etaMax = cms.double(2.7),
            etaMin = cms.double(-2.7),
            etaNBins = cms.int32(27),
            nMax = cms.int32(50),
            nMin = cms.int32(0),
            name = cms.string('mu'),
            nbins = cms.double(50),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(40),
            type = cms.int32(3)
        ), 
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            etaNBins = cms.int32(11),
            nMax = cms.int32(1250),
            nMin = cms.int32(0),
            name = cms.string('hHF'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(6)
        ), 
        cms.PSet(
            etaMax = cms.double(-2.901376),
            etaMin = cms.double(-5.2),
            etaNBins = cms.int32(11),
            nMax = cms.int32(1250),
            nMin = cms.int32(0),
            name = cms.string('egammaHF'),
            nbins = cms.double(125),
            phiMax = cms.double(3.14159265359),
            phiMin = cms.double(-3.14159265359),
            phiNBins = cms.int32(18),
            type = cms.int32(7)
        )),
    METType = cms.untracked.string('pf'),
    TriggerResultsLabel = cms.InputTag("TriggerResults","","HLT"),
    fillCandidateMaps = cms.bool(False),
    fillMetHighLevel = cms.bool(False),
    hcalMin = cms.double(1.0),
    l1algoname = cms.string('L1Tech_BPTX_plus_AND_minus.v0'),
    muonsrc = cms.InputTag("muons"),
    onlyCleaned = cms.untracked.bool(True),
    pVBin = cms.int32(100),
    pVMax = cms.double(100.0),
    pVMin = cms.double(0.0),
    ptMinCand = cms.double(1.0),
    ptThreshold = cms.double(30),
    runcosmics = cms.untracked.bool(False),
    srcPFlow = cms.InputTag("particleFlow"),
    triggerSelectedSubFolders = cms.VPSet(cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(True),
        dbLabel = cms.string('JetMETDQMTrigger'),
        errorReplyHlt = cms.bool(False),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('HLT_PFJet400_v*'),
        label = cms.string('highPtJet')
    ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(True),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_PFJet80_v*'),
            label = cms.string('lowPtJet')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_ZeroBias_v*'),
            label = cms.string('zeroBias')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_MET400_v*'),
            label = cms.string('highMET')
        ), 
        cms.PSet(
            andOr = cms.bool(False),
            andOrHlt = cms.bool(True),
            dbLabel = cms.string('JetMETDQMTrigger'),
            errorReplyHlt = cms.bool(False),
            hltInputTag = cms.InputTag("TriggerResults","","HLT"),
            hltPaths = cms.vstring('HLT_IsoMu24_eta2p1_v*', 
                'HLT_IsoMu24_v*'),
            label = cms.string('singleMu')
        )),
    verbose = cms.int32(0)
)


process.photonAnalysis = cms.EDAnalyzer("PhotonAnalyzer",
    ComponentName = cms.string('photonAnalysis'),
    OutputFileName = cms.string('DQMOfflinePhotonsAfterFirstStep.root'),
    OutputMEsInRootFile = cms.bool(False),
    Verbosity = cms.untracked.int32(0),
    analyzerName = cms.string('gedPhotonAnalyzer'),
    barrelRecHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    chi2Bin = cms.int32(100),
    chi2Max = cms.double(20.0),
    chi2Min = cms.double(0.0),
    cutStep = cms.double(20.0),
    dEtaTracksBin = cms.int32(100),
    dEtaTracksMax = cms.double(0.2),
    dEtaTracksMin = cms.double(-0.2),
    dPhiTracksBin = cms.int32(100),
    dPhiTracksMax = cms.double(0.5),
    dPhiTracksMin = cms.double(-0.5),
    eBin = cms.int32(500),
    eMax = cms.double(500.0),
    eMin = cms.double(0.0),
    eOverPBin = cms.int32(100),
    eOverPMax = cms.double(5.0),
    eOverPMin = cms.double(0.0),
    endcapRecHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etBin = cms.int32(500),
    etMax = cms.double(500.0),
    etMin = cms.double(0.0),
    etaBin = cms.int32(200),
    etaMax = cms.double(2.5),
    etaMin = cms.double(-2.5),
    excludeBkgHistos = cms.bool(True),
    hOverEBin = cms.int32(200),
    hOverEMax = cms.double(0.5),
    hOverEMin = cms.double(0),
    invMassEtCut = cms.double(20.0),
    isHeavyIon = cms.untracked.bool(True),
    isolationStrength = cms.int32(0),
    maxPhoEta = cms.double(2.5),
    minPhoEtCut = cms.double(20.0),
    minimalSetOfHistos = cms.bool(True),
    numberBin = cms.int32(10),
    numberMax = cms.double(10),
    numberMin = cms.double(0),
    numberOfSteps = cms.int32(1),
    phiBin = cms.int32(200),
    phiMax = cms.double(3.14),
    phiMin = cms.double(-3.14),
    phoProducer = cms.InputTag("gedPhotonsTmp"),
    photonIDLoose = cms.InputTag("PhotonIDProd","PhotonCutBasedIDLoose"),
    photonIDTight = cms.InputTag("PhotonIDProd","PhotonCutBasedIDTight"),
    prescaleFactor = cms.untracked.int32(1),
    r9Bin = cms.int32(120),
    r9Max = cms.double(1.2),
    r9Min = cms.double(0.0),
    rBin = cms.int32(400),
    rMax = cms.double(80),
    rMin = cms.double(0),
    sigmaIetaBin = cms.int32(200),
    sigmaIetaMax = cms.double(0.05),
    sigmaIetaMin = cms.double(0.0),
    standAlone = cms.bool(False),
    sumBin = cms.int32(230),
    sumMax = cms.double(20.0),
    sumMin = cms.double(-3.0),
    triggerEvent = cms.InputTag("hltTriggerSummaryAOD"),
    useBinning = cms.bool(False),
    useTriggerFiltering = cms.bool(False),
    xBin = cms.int32(300),
    xMax = cms.double(60),
    xMin = cms.double(-60),
    yBin = cms.int32(300),
    yMax = cms.double(60),
    yMin = cms.double(-60),
    zBin = cms.int32(400),
    zMax = cms.double(200),
    zMin = cms.double(-200)
)


process.piZeroAnalysis = cms.EDAnalyzer("PiZeroAnalyzer",
    Name = cms.untracked.string('piZeroAnalysis'),
    OutputFileName = cms.string('DQMOfflinePiZero.root'),
    OutputMEsInRootFile = cms.bool(False),
    ParameterLogWeighted = cms.bool(True),
    ParameterT0_barl = cms.double(5.7),
    ParameterW0 = cms.double(4.2),
    ParameterX0 = cms.double(0.89),
    Verbosity = cms.untracked.int32(0),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    clusEtaSize = cms.int32(3),
    clusPhiSize = cms.int32(3),
    clusSeedThr = cms.double(0.5),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    posCalcParameters = cms.PSet(
        LogWeighted = cms.bool(True),
        T0_barl = cms.double(5.7),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    seleMinvMaxPi0 = cms.double(0.5),
    seleMinvMinPi0 = cms.double(0.0),
    selePi0BeltDR = cms.double(0.2),
    selePi0BeltDeta = cms.double(0.05),
    selePi0Iso = cms.double(0.5),
    selePtGammaOne = cms.double(0.9),
    selePtGammaTwo = cms.double(0.9),
    selePtPi0 = cms.double(2.5),
    seleS4S9GammaOne = cms.double(0.85),
    seleS4S9GammaTwo = cms.double(0.85),
    seleXtalMinEnergy = cms.double(0.0),
    standAlone = cms.bool(False)
)


process.pixelTracksMonitoringHLT = cms.EDAnalyzer("TrackingMonitor",
**dict(
    [
        ("AlgoName" , cms.string('GenTk') ),
        ("BSFolderName" , cms.string('Tracking/ParametersVsBeamSpot') ),
        ("BXlumiSetup" , cms.PSet(
        BXlumiBin = cms.int32(400),
        BXlumiMax = cms.double(6000),
        BXlumiMin = cms.double(2000),
        lumi = cms.InputTag("lumiProducer"),
        lumiScale = cms.double(6.37)
    ) ),
        ("Chi2Bin" , cms.int32(50) ),
        ("Chi2Max" , cms.double(199.5) ),
        ("Chi2Min" , cms.double(-0.5) ),
        ("Chi2NDFBin" , cms.int32(50) ),
        ("Chi2NDFMax" , cms.double(49.5) ),
        ("Chi2NDFMin" , cms.double(-0.5) ),
        ("Chi2ProbBin" , cms.int32(100) ),
        ("Chi2ProbMax" , cms.double(1.0) ),
        ("Chi2ProbMin" , cms.double(0.0) ),
        ("ClusterLabels" , cms.vstring('Tot', 
        'Strip', 
        'Pix') ),
        ("DxyBin" , cms.int32(100) ),
        ("DxyMax" , cms.double(0.5) ),
        ("DxyMin" , cms.double(-0.5) ),
        ("EtaBin" , cms.int32(26) ),
        ("EtaMax" , cms.double(2.5) ),
        ("EtaMin" , cms.double(-2.5) ),
        ("FolderName" , cms.string('HLT/Tracking/pixelTracks') ),
        ("GoodPVtxBin" , cms.int32(60) ),
        ("GoodPVtxMax" , cms.double(60.0) ),
        ("GoodPVtxMin" , cms.double(0.0) ),
        ("LSBin" , cms.int32(2000) ),
        ("LSMax" , cms.double(2000.0) ),
        ("LSMin" , cms.double(0) ),
        ("LongDCABins" , cms.int32(100) ),
        ("LongDCAMax" , cms.double(8.0) ),
        ("LongDCAMin" , cms.double(-8.0) ),
        ("MeanHitBin" , cms.int32(30) ),
        ("MeanHitMax" , cms.double(29.5) ),
        ("MeanHitMin" , cms.double(-0.5) ),
        ("MeanLayBin" , cms.int32(25) ),
        ("MeanLayMax" , cms.double(24.5) ),
        ("MeanLayMin" , cms.double(-0.5) ),
        ("MeasurementState" , cms.string('ImpactPoint') ),
        ("NClusPxBin" , cms.int32(200) ),
        ("NClusPxMax" , cms.double(19999.5) ),
        ("NClusPxMin" , cms.double(-0.5) ),
        ("NClusStrBin" , cms.int32(500) ),
        ("NClusStrMax" , cms.double(99999.5) ),
        ("NClusStrMin" , cms.double(-0.5) ),
        ("NTrk2DBin" , cms.int32(50) ),
        ("NTrk2DMax" , cms.double(1999.5) ),
        ("NTrk2DMin" , cms.double(-0.5) ),
        ("OutputFileName" , cms.string('MonitorTrack.root') ),
        ("OutputMEsInRootFile" , cms.bool(False) ),
        ("PVFolderName" , cms.string('Tracking/PrimaryVertices') ),
        ("PXBLayBin" , cms.int32(6) ),
        ("PXBLayMax" , cms.double(5.5) ),
        ("PXBLayMin" , cms.double(-0.5) ),
        ("PXFLayBin" , cms.int32(6) ),
        ("PXFLayMax" , cms.double(5.5) ),
        ("PXFLayMin" , cms.double(-0.5) ),
        ("PhiBin" , cms.int32(32) ),
        ("PhiMax" , cms.double(3.141592654) ),
        ("PhiMin" , cms.double(-3.141592654) ),
        ("Quality" , cms.string('') ),
        ("RecHitBin" , cms.int32(40) ),
        ("RecHitMax" , cms.double(39.5) ),
        ("RecHitMin" , cms.double(-0.5) ),
        ("RecLayBin" , cms.int32(25) ),
        ("RecLayMax" , cms.double(24.5) ),
        ("RecLayMin" , cms.double(-0.5) ),
        ("RecLostBin" , cms.int32(10) ),
        ("RecLostMax" , cms.double(9.5) ),
        ("RecLostMin" , cms.double(-0.5) ),
        ("SeedDxyBin" , cms.int32(100) ),
        ("SeedDxyMax" , cms.double(0.5) ),
        ("SeedDxyMin" , cms.double(-0.5) ),
        ("SeedDzBin" , cms.int32(120) ),
        ("SeedDzMax" , cms.double(30.0) ),
        ("SeedDzMin" , cms.double(-30.0) ),
        ("SeedHitBin" , cms.int32(6) ),
        ("SeedHitMax" , cms.double(5.5) ),
        ("SeedHitMin" , cms.double(-0.5) ),
        ("SeedProducer" , cms.InputTag("initialStepSeeds") ),
        ("TCDxyBin" , cms.int32(100) ),
        ("TCDxyMax" , cms.double(100.0) ),
        ("TCDxyMin" , cms.double(-100.0) ),
        ("TCDzBin" , cms.int32(100) ),
        ("TCDzMax" , cms.double(400.0) ),
        ("TCDzMin" , cms.double(-400.0) ),
        ("TCHitBin" , cms.int32(40) ),
        ("TCHitMax" , cms.double(39.5) ),
        ("TCHitMin" , cms.double(-0.5) ),
        ("TCProducer" , cms.InputTag("initialStepTrackCandidates") ),
        ("TCSizeBin" , cms.int32(100) ),
        ("TCSizeMax" , cms.double(499.5) ),
        ("TCSizeMin" , cms.double(-0.5) ),
        ("TECLayBin" , cms.int32(15) ),
        ("TECLayMax" , cms.double(14.5) ),
        ("TECLayMin" , cms.double(-0.5) ),
        ("TIBLayBin" , cms.int32(6) ),
        ("TIBLayMax" , cms.double(5.5) ),
        ("TIBLayMin" , cms.double(-0.5) ),
        ("TIDLayBin" , cms.int32(6) ),
        ("TIDLayMax" , cms.double(5.5) ),
        ("TIDLayMin" , cms.double(-0.5) ),
        ("TOBLayBin" , cms.int32(10) ),
        ("TOBLayMax" , cms.double(9.5) ),
        ("TOBLayMin" , cms.double(-0.5) ),
        ("TTRHBuilder" , cms.string('WithTrackAngle') ),
        ("ThetaBin" , cms.int32(32) ),
        ("ThetaMax" , cms.double(3.2) ),
        ("ThetaMin" , cms.double(0.0) ),
        ("TkSeedSizeBin" , cms.int32(100) ),
        ("TkSeedSizeMax" , cms.double(499.5) ),
        ("TkSeedSizeMin" , cms.double(-0.5) ),
        ("TkSizeBin" , cms.int32(200) ),
        ("TkSizeMax" , cms.double(999.5) ),
        ("TkSizeMin" , cms.double(-0.5) ),
        ("TrackPBin" , cms.int32(100) ),
        ("TrackPMax" , cms.double(100) ),
        ("TrackPMin" , cms.double(0) ),
        ("TrackProducer" , cms.InputTag("hltPixelTracks") ),
        ("TrackPtBin" , cms.int32(100) ),
        ("TrackPtMax" , cms.double(100) ),
        ("TrackPtMin" , cms.double(0.1) ),
        ("TrackPxBin" , cms.int32(50) ),
        ("TrackPxMax" , cms.double(50.0) ),
        ("TrackPxMin" , cms.double(-50.0) ),
        ("TrackPyBin" , cms.int32(50) ),
        ("TrackPyMax" , cms.double(50.0) ),
        ("TrackPyMin" , cms.double(-50.0) ),
        ("TrackPzBin" , cms.int32(50) ),
        ("TrackPzMax" , cms.double(50.0) ),
        ("TrackPzMin" , cms.double(-50.0) ),
        ("TrackQBin" , cms.int32(8) ),
        ("TrackQMax" , cms.double(2.5) ),
        ("TrackQMin" , cms.double(-2.5) ),
        ("TransDCABins" , cms.int32(100) ),
        ("TransDCAMax" , cms.double(8.0) ),
        ("TransDCAMin" , cms.double(-8.0) ),
        ("VXBin" , cms.int32(100) ),
        ("VXMax" , cms.double(0.5) ),
        ("VXMin" , cms.double(-0.5) ),
        ("VYBin" , cms.int32(100) ),
        ("VYMax" , cms.double(0.5) ),
        ("VYMin" , cms.double(-0.5) ),
        ("VZBin" , cms.int32(100) ),
        ("VZBinProf" , cms.int32(100) ),
        ("VZMax" , cms.double(30.0) ),
        ("VZMaxProf" , cms.double(0.2) ),
        ("VZMin" , cms.double(-30.0) ),
        ("VZMinProf" , cms.double(-0.2) ),
        ("X0Bin" , cms.int32(100) ),
        ("X0Max" , cms.double(0.5) ),
        ("X0Min" , cms.double(-0.5) ),
        ("Y0Bin" , cms.int32(100) ),
        ("Y0Max" , cms.double(0.5) ),
        ("Y0Min" , cms.double(-0.5) ),
        ("Z0Bin" , cms.int32(120) ),
        ("Z0Max" , cms.double(60.0) ),
        ("Z0Min" , cms.double(-60.0) ),
        ("allTrackProducer" , cms.InputTag("hltPixelTracks") ),
        ("beamSpot" , cms.InputTag("offlineBeamSpot") ),
        ("denCut" , cms.string(' pt >= 1 ') ),
        ("doAllPlots" , cms.bool(False) ),
        ("doAllTrackCandHistos" , cms.bool(False) ),
        ("doBeamSpotPlots" , cms.bool(True) ),
        ("doDCAPlots" , cms.bool(False) ),
        ("doDCAwrt000Plots" , cms.bool(False) ),
        ("doDCAwrtPVPlots" , cms.bool(False) ),
        ("doGeneralPropertiesPlots" , cms.bool(True) ),
        ("doGoodTrackLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doGoodTrackPlots" , cms.bool(True) ),
        ("doGoodTrackRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doHIPlots" , cms.bool(False) ),
        ("doHitPropertiesPlots" , cms.bool(True) ),
        ("doLayersVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doLumiAnalysis" , cms.bool(False) ),
        ("doMeasurementStatePlots" , cms.bool(True) ),
        ("doPUmonitoring" , cms.bool(False) ),
        ("doPlotsVsBXlumi" , cms.bool(False) ),
        ("doPlotsVsGoodPVtx" , cms.bool(True) ),
        ("doPrimaryVertexPlots" , cms.bool(False) ),
        ("doProfilesVsLS" , cms.bool(False) ),
        ("doRecHitVsPhiVsEtaPerTrack" , cms.bool(True) ),
        ("doRecHitsPerTrackProfile" , cms.bool(True) ),
        ("doSIPPlots" , cms.bool(False) ),
        ("doSeedDxyHisto" , cms.bool(False) ),
        ("doSeedDzHisto" , cms.bool(False) ),
        ("doSeedETAHisto" , cms.bool(False) ),
        ("doSeedLumiAnalysis" , cms.bool(False) ),
        ("doSeedNRecHitsHisto" , cms.bool(False) ),
        ("doSeedNVsEtaProf" , cms.bool(False) ),
        ("doSeedNVsPhiProf" , cms.bool(False) ),
        ("doSeedNumberHisto" , cms.bool(False) ),
        ("doSeedPHIHisto" , cms.bool(False) ),
        ("doSeedPHIVsETAHisto" , cms.bool(False) ),
        ("doSeedPTHisto" , cms.bool(False) ),
        ("doSeedParameterHistos" , cms.bool(False) ),
        ("doSeedQHisto" , cms.bool(False) ),
        ("doSeedThetaHisto" , cms.bool(False) ),
        ("doSeedVsClusterHisto" , cms.bool(False) ),
        ("doTestPlots" , cms.bool(False) ),
        ("doThetaPlots" , cms.bool(False) ),
        ("doTrackCandHistos" , cms.bool(False) ),
        ("doTrackPxPyPlots" , cms.bool(False) ),
    ] +
    [
        ("doTrackerSpecific" , cms.bool(True) ),
        ("etaErrBin" , cms.int32(50) ),
        ("etaErrMax" , cms.double(0.1) ),
        ("etaErrMin" , cms.double(0.0) ),
        ("numCut" , cms.string(" pt >= 1 & quality(\'highPurity\') ") ),
        ("pErrBin" , cms.int32(50) ),
        ("pErrMax" , cms.double(1.0) ),
        ("pErrMin" , cms.double(0.0) ),
        ("phiErrBin" , cms.int32(50) ),
        ("phiErrMax" , cms.double(0.1) ),
        ("phiErrMin" , cms.double(0.0) ),
        ("pixelCluster" , cms.InputTag("siPixelClusters") ),
        ("primaryVertex" , cms.InputTag("offlinePrimaryVertices") ),
        ("primaryVertexInputTags" , cms.VInputTag(cms.InputTag("offlinePrimaryVertices"), cms.InputTag("pixelVertices")) ),
        ("ptErrBin" , cms.int32(50) ),
        ("ptErrMax" , cms.double(1.0) ),
        ("ptErrMin" , cms.double(0.0) ),
        ("pvLabels" , cms.vstring('offline', 
        'pixel') ),
        ("pxErrBin" , cms.int32(50) ),
        ("pxErrMax" , cms.double(1.0) ),
        ("pxErrMin" , cms.double(0.0) ),
        ("pyErrBin" , cms.int32(50) ),
        ("pyErrMax" , cms.double(1.0) ),
        ("pyErrMin" , cms.double(0.0) ),
        ("pzErrBin" , cms.int32(50) ),
        ("pzErrMax" , cms.double(1.0) ),
        ("pzErrMin" , cms.double(0.0) ),
        ("qualityString" , cms.string('highPurity') ),
        ("selPrimaryVertexInputTags" , cms.VInputTag(cms.InputTag("goodOfflinePrimaryVertices"), cms.InputTag("")) ),
        ("stripCluster" , cms.InputTag("siStripClusters") ),
        ("subdetectorBin" , cms.int32(25) ),
        ("subdetectors" , cms.vstring('TIB', 
        'TOB', 
        'TID', 
        'TEC', 
        'PixBarrel', 
        'PixEndcap') ),
        ]
    )
)


process.qcdPhotonsCosmicDQM = cms.EDAnalyzer("QcdPhotonsDQM",
    barrelRecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    endcapRecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    jetCollection = cms.InputTag("ak4PFJets"),
    minJetPt = cms.double(5.0),
    minPhotonEt = cms.double(25.0),
    photonCollection = cms.InputTag("gedPhotons"),
    plotJetMaxEta = cms.double(5.0),
    plotPhotonMaxEt = cms.double(200.0),
    plotPhotonMaxEta = cms.double(5.0),
    plotTheseTriggersToo = cms.vstring('HLT_Photon20', 
        'HLT_Photon25', 
        'HLT_Photon30', 
        'HLT_Photon50', 
        'HLT_DoublePhoton'),
    requirePhotonFound = cms.bool(True),
    trigTag = cms.untracked.InputTag("TriggerResults","","HLT"),
    triggerPathToPass = cms.string('HLT_Photon'),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.qcdPhotonsDQM = cms.EDAnalyzer("QcdPhotonsDQM",
    barrelRecHitTag = cms.InputTag("reducedEcalRecHitsEB"),
    endcapRecHitTag = cms.InputTag("reducedEcalRecHitsEE"),
    jetCollection = cms.InputTag("ak4PFJets"),
    minJetPt = cms.double(5.0),
    minPhotonEt = cms.double(25.0),
    photonCollection = cms.InputTag("gedPhotons"),
    plotJetMaxEta = cms.double(5.0),
    plotPhotonMaxEt = cms.double(200.0),
    plotPhotonMaxEta = cms.double(5.0),
    plotTheseTriggersToo = cms.vstring('HLT_Photon20', 
        'HLT_Photon25', 
        'HLT_Photon30', 
        'HLT_Photon50', 
        'HLT_DoublePhoton'),
    requirePhotonFound = cms.bool(True),
    trigTag = cms.untracked.InputTag("TriggerResults","","HLT"),
    triggerPathToPass = cms.string('HLT_Photon'),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.qualityStatistics = cms.EDAnalyzer("SiStripQualityStatistics",
    TkMapFileName = cms.untracked.string(''),
    dataLabel = cms.untracked.string('unbiased')
)


process.rpcDcsInfo = cms.EDAnalyzer("RPCDcsInfo",
    ScalersRawToDigiLabel = cms.InputTag("scalersRawToDigi"),
    dcsInfoFolder = cms.untracked.string('DCSInfo'),
    subSystemFolder = cms.untracked.string('RPC')
)


process.rpcEfficiency = cms.EDAnalyzer("RPCEfficiency",
    DuplicationCorrection = cms.untracked.int32(1),
    EffRootFileName = cms.untracked.string('/tmp/cimmino/RPCEfficiencyFIRST.root'),
    EffSaveRootFile = cms.untracked.bool(False),
    EffSaveRootFileEventsInterval = cms.untracked.int32(100),
    MaxD = cms.untracked.double(80.0),
    MaxDrb4 = cms.untracked.double(150.0),
    MinCosAng = cms.untracked.double(0.99),
    RecHitLabel = cms.InputTag("rpcRecHits"),
    cscSegments = cms.InputTag("cscSegments"),
    debug = cms.untracked.bool(False),
    dt4DSegments = cms.InputTag("dt4DSegments"),
    inclcsc = cms.untracked.bool(True),
    incldt = cms.untracked.bool(True),
    incldtMB4 = cms.untracked.bool(True),
    inves = cms.untracked.bool(True),
    rangestrips = cms.untracked.double(1.0),
    rangestripsRB4 = cms.untracked.double(4.0)
)


process.rpcEventInfo = cms.EDAnalyzer("DQMEventInfo",
    subSystemFolder = cms.untracked.string('RPC')
)


process.rpcFEDIntegrity = cms.EDAnalyzer("RPCFEDIntegrity",
    NumberOfFED = cms.untracked.int32(3),
    RPCPrefixDir = cms.untracked.string('RPC/FEDIntegrity'),
    RPCRawCountsInputTag = cms.untracked.InputTag("muonRPCDigis")
)


process.rpcMonitorLinkSynchro = cms.EDAnalyzer("RPCMonitorLinkSynchro",
    dumpDelays = cms.untracked.bool(False),
    rpcRawSynchroProdItemTag = cms.InputTag("rpcunpacker"),
    useFirstHitOnly = cms.untracked.bool(False)
)


process.rpcMonitorRaw = cms.EDAnalyzer("RPCMonitorRaw",
    rpcRawDataCountsTag = cms.InputTag("rpcunpacker"),
    watchedErrors = cms.untracked.vint32(8, 9)
)


process.rpcdigidqm = cms.EDAnalyzer("RPCMonitorDigi",
    GlobalFolder = cms.untracked.string('SummaryHistograms'),
    MuonEtaCut = cms.untracked.double(1.9),
    MuonFolder = cms.untracked.string('Muon'),
    MuonLabel = cms.InputTag("muons"),
    MuonPtCut = cms.untracked.double(3.0),
    NoiseFolder = cms.untracked.string('AllHits'),
    RPCFolder = cms.untracked.string('RPC'),
    RecHitLabel = cms.InputTag("rpcRecHits"),
    RootFileName = cms.untracked.string('RPCMonitorDigi.root'),
    SaveRootFile = cms.untracked.bool(False),
    ScalersRawToDigiLabel = cms.InputTag("scalersRawToDigi"),
    UseMuon = cms.untracked.bool(True),
    UseRollInfo = cms.untracked.bool(False)
)


process.rpcrechitprobability = cms.EDAnalyzer("RPCRecHitProbability",
    GlobalFolder = cms.untracked.string('SummaryHistograms/RecHits'),
    MuonEtaCut = cms.untracked.double(1.9),
    MuonFolder = cms.untracked.string('Muon'),
    MuonLabel = cms.InputTag("muons"),
    MuonPtCut = cms.untracked.double(3.0),
    RPCFolder = cms.untracked.string('RPC'),
    RootFileName = cms.untracked.string('RPCRecHitProbabilityDQM.root'),
    SaveRootFile = cms.untracked.bool(False),
    ScalersRawToDigiLabel = cms.InputTag("scalersRawToDigi")
)


process.siStripFEDCheck = cms.EDAnalyzer("SiStripFEDCheckPlugin",
    CheckChannelLengths = cms.untracked.bool(True),
    CheckChannelPacketCodes = cms.untracked.bool(True),
    CheckChannelStatus = cms.untracked.bool(True),
    CheckFELengths = cms.untracked.bool(True),
    DirName = cms.untracked.string('SiStrip/FEDIntegrity/'),
    DoPayloadChecks = cms.untracked.bool(True),
    HistogramUpdateFrequency = cms.untracked.uint32(0),
    LSBin = cms.int32(5000),
    LSMax = cms.double(5000.5),
    LSMin = cms.double(0.5),
    PrintDebugMessages = cms.untracked.bool(False),
    RawDataTag = cms.InputTag("source"),
    WriteDQMStore = cms.untracked.bool(False),
    doPLOTfedFatalErrors = cms.bool(True),
    doPLOTfedNonFatalErrors = cms.bool(True),
    doPLOTfedsPresent = cms.bool(True),
    doPLOTnFEDinVsLS = cms.bool(False),
    doPLOTnFEDinWdataVsLS = cms.bool(False)
)


process.siStripFEDMonitor = cms.EDAnalyzer("SiStripFEDMonitorPlugin",
    APVAddressErrorBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    APVErrorBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    AnyDAQProblemsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    AnyFEDErrorsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    AnyFEProblemsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    ApveAddressHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    BadAPVStatusBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadActiveChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    BadChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    BadDAQCRCsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadDAQPacketHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadFEDCRCsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadIDsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadMajorityAddressesDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    BadMajorityAddressesHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    BadMajorityInPartitionHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    CorruptBuffersHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    DataMissingHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    DataPresentHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    ErrorFractionByLumiBlockHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FEMissingDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FEMissingHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FEOverflowsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FEOverflowsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FETimeDiffTECBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FETimeDiffTECFHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FETimeDiffTIBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FETimeDiffTOBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FETimeDiffvsDBXHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FeMajAddressHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FeMajFracTECBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FeMajFracTECFHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FeMajFracTIBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FeMajFracTOBHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FedEventSizeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FedIdVsApvIdHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    FedMaxEventSizevsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    FillAllDetailedHistograms = cms.untracked.bool(False),
    FillWithEventNumber = cms.untracked.bool(False),
    FullDebugMode = cms.untracked.bool(False),
    HistogramFolderName = cms.untracked.string('ReadoutView'),
    InvalidBuffersHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    MedianAPV0HistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False),
        Max = cms.untracked.double(1024),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(256)
    ),
    MedianAPV1HistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False),
        Max = cms.untracked.double(1024),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(256)
    ),
    OOSBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    PrintDebugMessages = cms.untracked.uint32(0),
    RawDataTag = cms.untracked.InputTag("rawDataRepacker"),
    TimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False),
        Max = cms.untracked.double(3600),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(600)
    ),
    TkHistoMapHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    TopFolderName = cms.untracked.string('SiStrip'),
    UnlockedBitsDetailedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nAPVAddressErrorHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nAPVAddressErrorvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    nAPVErrorHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nAPVErrorvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    nAPVStatusBitHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nAPVStatusBitvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nBadActiveChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nBadChannelStatusBitsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nFEDCorruptBuffersHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDCorruptBuffersvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nFEDDAQProblemsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDErrorsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(440.5),
        Min = cms.untracked.double(-0.5),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDErrorsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    nFEDsWithFEBadMajorityAddressesHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDsWithFEOverflowsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDsWithFEProblemsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nFEDsWithFEProblemsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(False)
    ),
    nFEDsWithMissingFEsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(441),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(441)
    ),
    nOutOfSyncHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nOutOfSyncvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    ),
    nTotalBadActiveChannelsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nTotalBadActiveChannelsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(3600),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(600)
    ),
    nTotalBadChannelsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nTotalBadChannelsvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(3600),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(600)
    ),
    nUnconnectedChannelsHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(8000),
        Min = cms.untracked.double(6000),
        NBins = cms.untracked.uint32(250)
    ),
    nUnlockedHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True),
        Max = cms.untracked.double(500),
        Min = cms.untracked.double(0),
        NBins = cms.untracked.uint32(250)
    ),
    nUnlockedvsTimeHistogramConfig = cms.untracked.PSet(
        Enabled = cms.untracked.bool(True)
    )
)


process.singleTopElectronMediumDQM = cms.EDAnalyzer("SingleTopTChannelLeptonDQM",
    preselection = cms.PSet(

    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('presel'),
        select = cms.string('!isFake && ndof >= 4 && abs(z)<24. && position.Rho <= 2.0'),
        src = cms.InputTag("offlinePrimaryVertices")
    ), 
        cms.PSet(
            label = cms.string('elecs/pf:step0'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string("pt>30 & abs(eta)<2.5 & abs(gsfElectronRef.gsfTrack.d0)<0.02 && gsfElectronRef.gsfTrack.hitPattern().numberOfHits(\'MISSING_INNER_HITS\') <= 0 && (abs(gsfElectronRef.superCluster.eta) <= 1.4442 || abs(gsfElectronRef.superCluster.eta) >= 1.5660) && (gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.1"),
            src = cms.InputTag("pfIsolatedElectronsEI")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('pt>30 & abs(eta)<4.5 & numberOfDaughters>1 & ((abs(eta)>2.4) || ( chargedHadronEnergyFraction > 0 & chargedMultiplicity>0 & chargedEmEnergyFraction<0.99)) & neutralEmEnergyFraction < 0.99 & neutralHadronEnergyFraction < 0.99'),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            max = cms.int32(2),
            min = cms.int32(2),
            select = cms.string('pt>30 & abs(eta)<4.5 & numberOfDaughters>1 & ((abs(eta)>2.4) || ( chargedHadronEnergyFraction > 0 & chargedMultiplicity>0 & chargedEmEnergyFraction<0.99)) & neutralEmEnergyFraction < 0.99 & neutralHadronEnergyFraction < 0.99'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/SingleTopElectronMediumDQM/'),
        elecExtras = cms.PSet(
            select = cms.string('pt>25')
        ),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                combinedSecondaryVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.898)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("simpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("trackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.41)
                )
            ),
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>15 & abs(eta)<2.5')
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            elecs_gsf = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMetEI"),
            muons = cms.InputTag("pfIsolatedMuonsEI"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.singleTopMuonMediumDQM = cms.EDAnalyzer("SingleTopTChannelLeptonDQM",
    preselection = cms.PSet(

    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('presel'),
        select = cms.string('!isFake && ndof >= 4 && abs(z)<24. && position.Rho <= 2.0 '),
        src = cms.InputTag("offlinePrimaryVertices")
    ), 
        cms.PSet(
            label = cms.string('muons/pf:step0'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('muonRef.pt>20 & abs(muonRef.eta)<2.1 & muonRef.isNonnull & muonRef.innerTrack.isNonnull & muonRef.isGlobalMuon & muonRef.isTrackerMuon & muonRef.innerTrack.numberOfValidHits>10 & muonRef.globalTrack.hitPattern.numberOfValidMuonHits>0 & muonRef.globalTrack.normalizedChi2<10 & muonRef.innerTrack.hitPattern.pixelLayersWithMeasurement>=1 &  muonRef.numberOfMatches>1 & abs(muonRef.innerTrack.dxy)<0.02 & (muonRef.pfIsolationR04.sumChargedHadronPt + muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt)/muonRef.pt < 0.15'),
            src = cms.InputTag("pfIsolatedMuonsEI")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string(' pt>30 & abs(eta)<4.5 & numberOfDaughters>1 & ((abs(eta)>2.4) || ( chargedHadronEnergyFraction > 0 & chargedMultiplicity>0 & chargedEmEnergyFraction<0.99)) & neutralEmEnergyFraction < 0.99 & neutralHadronEnergyFraction < 0.99'),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            max = cms.int32(2),
            min = cms.int32(2),
            select = cms.string(' pt>30 & abs(eta)<4.5 & numberOfDaughters>1 & ((abs(eta)>2.4) || ( chargedHadronEnergyFraction > 0 & chargedMultiplicity>0 & chargedEmEnergyFraction<0.99)) & neutralEmEnergyFraction < 0.99 & neutralHadronEnergyFraction < 0.99'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/SingleTopMuonMediumDQM/'),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                combinedSecondaryVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.898)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("simpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("trackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.41)
                )
            ),
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>15 & abs(eta)<2.5')
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            select = cms.string('abs(muonRef.eta)<2.1')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            elecs_gsf = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMetEI"),
            muons = cms.InputTag("pfIsolatedMuonsEI"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.singleTopTChannelLeptonDQM = cms.EDAnalyzer("SingleTopTChannelLeptonDQM",
    preselection = cms.PSet(

    ),
    selection = cms.VPSet(cms.PSet(
        jetID = cms.PSet(
            label = cms.InputTag("ak4JetID"),
            select = cms.string('fHPD < 0.98 & n90Hits>1 & restrictedEMF<1')
        ),
        label = cms.string('jets/calo:step0'),
        min = cms.int32(2),
        select = cms.string('pt>20 & abs(eta)<2.1 & 0.05<emEnergyFraction'),
        src = cms.InputTag("ak4CaloJets")
    )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/SingleTopDQM/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            select = cms.string('pt>15 & abs(eta)<2.5 & abs(gsfElectronRef.gsfTrack.d0)<1 & abs(gsfElectronRef.gsfTrack.dz)<20')
        ),
        jetExtras = cms.PSet(
            jetCorrector = cms.string('ak4CaloL2L3'),
            select = cms.string('pt>15 & abs(eta)<2.5 & emEnergyFraction>0.01')
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            select = cms.string('pt>10 & abs(eta)<2.1 & isGlobalMuon & abs(globalTrack.d0)<1 & abs(globalTrack.dz)<20')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMetEI"),
            muons = cms.InputTag("pfIsolatedMuonsEI"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        ),
        triggerExtras = cms.PSet(
            paths = cms.vstring('HLT_Mu3:HLT_QuadJet15U', 
                'HLT_Mu5:HLT_QuadJet15U', 
                'HLT_Mu7:HLT_QuadJet15U', 
                'HLT_Mu9:HLT_QuadJet15U'),
            src = cms.InputTag("TriggerResults","","HLT")
        )
    )
)


process.staMuonSegmentAnalyzer = cms.EDAnalyzer("SegmentTrackAnalyzer",
    MuTrackCollection = cms.InputTag("standAloneMuons"),
    SegmentsTrackAssociatorParameters = cms.PSet(
        SelectedSegments = cms.untracked.InputTag("SelectedSegments"),
        segmentsCSC = cms.untracked.InputTag("cscSegments"),
        segmentsDt = cms.untracked.InputTag("dt4DSegments")
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    etaBin = cms.int32(100),
    etaMax = cms.double(3.0),
    etaMin = cms.double(-3.0),
    phiBin = cms.int32(100),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(200),
    ptMax = cms.double(200.0),
    ptMin = cms.double(0.0)
)


process.stdPhotonAnalysis = cms.EDAnalyzer("PhotonAnalyzer",
    ComponentName = cms.string('stdPhotonAnalysis'),
    OutputFileName = cms.string('DQMOfflinePhotonsAfterFirstStep.root'),
    OutputMEsInRootFile = cms.bool(False),
    Verbosity = cms.untracked.int32(0),
    analyzerName = cms.string('stdPhotonAnalyzer'),
    barrelRecHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    chi2Bin = cms.int32(100),
    chi2Max = cms.double(20.0),
    chi2Min = cms.double(0.0),
    cutStep = cms.double(20.0),
    dEtaTracksBin = cms.int32(100),
    dEtaTracksMax = cms.double(0.2),
    dEtaTracksMin = cms.double(-0.2),
    dPhiTracksBin = cms.int32(100),
    dPhiTracksMax = cms.double(0.5),
    dPhiTracksMin = cms.double(-0.5),
    eBin = cms.int32(500),
    eMax = cms.double(500.0),
    eMin = cms.double(0.0),
    eOverPBin = cms.int32(100),
    eOverPMax = cms.double(5.0),
    eOverPMin = cms.double(0.0),
    endcapRecHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etBin = cms.int32(500),
    etMax = cms.double(500.0),
    etMin = cms.double(0.0),
    etaBin = cms.int32(200),
    etaMax = cms.double(2.5),
    etaMin = cms.double(-2.5),
    excludeBkgHistos = cms.bool(True),
    hOverEBin = cms.int32(200),
    hOverEMax = cms.double(0.5),
    hOverEMin = cms.double(0),
    invMassEtCut = cms.double(20.0),
    isHeavyIon = cms.untracked.bool(True),
    isolationStrength = cms.int32(0),
    maxPhoEta = cms.double(2.5),
    minPhoEtCut = cms.double(20.0),
    minimalSetOfHistos = cms.bool(True),
    numberBin = cms.int32(10),
    numberMax = cms.double(10),
    numberMin = cms.double(0),
    numberOfSteps = cms.int32(1),
    phiBin = cms.int32(200),
    phiMax = cms.double(3.14),
    phiMin = cms.double(-3.14),
    phoProducer = cms.InputTag("photons"),
    photonIDLoose = cms.InputTag("PhotonIDProd","PhotonCutBasedIDLoose"),
    photonIDTight = cms.InputTag("PhotonIDProd","PhotonCutBasedIDTight"),
    prescaleFactor = cms.untracked.int32(1),
    r9Bin = cms.int32(120),
    r9Max = cms.double(1.2),
    r9Min = cms.double(0.0),
    rBin = cms.int32(400),
    rMax = cms.double(80),
    rMin = cms.double(0),
    sigmaIetaBin = cms.int32(200),
    sigmaIetaMax = cms.double(0.05),
    sigmaIetaMin = cms.double(0.0),
    standAlone = cms.bool(False),
    sumBin = cms.int32(230),
    sumMax = cms.double(20.0),
    sumMin = cms.double(-3.0),
    triggerEvent = cms.InputTag("hltTriggerSummaryAOD"),
    useBinning = cms.bool(False),
    useTriggerFiltering = cms.bool(False),
    xBin = cms.int32(300),
    xMax = cms.double(60),
    xMin = cms.double(-60),
    yBin = cms.int32(300),
    yMax = cms.double(60),
    yMin = cms.double(-60),
    zBin = cms.int32(400),
    zMax = cms.double(200),
    zMin = cms.double(-200)
)


process.susyDQM = cms.EDAnalyzer("RecoSusyDQM",
    RAL_elec_iso_cut = cms.double(0.5),
    RAL_elec_pt_cut = cms.double(7.0),
    RAL_jet_eta_cut = cms.double(3.0),
    RAL_jet_max_emf_cut = cms.double(0.95),
    RAL_jet_min_emf_cut = cms.double(0.05),
    RAL_jet_pt_cut = cms.double(30.0),
    RAL_jet_sum_pt_cut = cms.double(100.0),
    RAL_met_cut = cms.double(50.0),
    RAL_muon_iso_cut = cms.double(0.1),
    RAL_muon_pt_cut = cms.double(7.0),
    elec_d0_cut = cms.double(0.2),
    elec_eta_cut = cms.double(2.5),
    elec_mva_cut = cms.double(0.1),
    electronCollection = cms.InputTag("gedGsfElectrons"),
    jetCollection = cms.InputTag("ak4CaloJets"),
    metCollection = cms.InputTag("caloMet"),
    moduleName = cms.untracked.string('Physics/Susy'),
    muonCollection = cms.InputTag("muons"),
    muon_d0_cut = cms.double(0.2),
    muon_eta_cut = cms.double(2.4),
    muon_nChi2_cut = cms.double(10),
    muon_nHits_cut = cms.double(11),
    vertexCollection = cms.InputTag("offlinePrimaryVertices")
)


process.tightAnalyzer = cms.EDAnalyzer("HLTMuonOfflineAnalyzer",
    binParams = cms.untracked.PSet(
        NVertex = cms.untracked.vdouble(20, 1, 50),
        charge = cms.untracked.vdouble(2, -2.0, 2.0),
        d0 = cms.untracked.vdouble(10, -0.5, 0.5),
        deltaR = cms.untracked.vdouble(20, 0.0, 0.05),
        eta = cms.untracked.vdouble(20, -2.4, 2.4),
        etaCoarse = cms.untracked.vdouble(-2.4, -2.1, -1.6, -1.2, -0.8, 
            0.0, 0.8, 1.2, 1.6, 2.1, 
            2.4),
        jpsiMass = cms.untracked.vdouble(60, 0.0, 6.0),
        phi = cms.untracked.vdouble(20, -3.14, 3.14),
        phiCoarse = cms.untracked.vdouble(10, -3.14, 3.14),
        pt = cms.untracked.vdouble(0.0, 2.0, 4.0, 6.0, 8.0, 
            10.0, 20.0, 30.0, 40.0, 100.0, 
            200.0, 400.0),
        ptCoarse = cms.untracked.vdouble(10.0, 20.0, 40.0, 60.0, 80.0, 
            100.0, 200.0),
        resolutionEta = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionPhi = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionRel = cms.untracked.vdouble(20, -0.15, 0.15),
        z0 = cms.untracked.vdouble(10, -15.0, 15.0),
        zMass = cms.untracked.vdouble(50, 65.0, 115.0)
    ),
    destination = cms.untracked.string('HLT/Muon/DistributionsTight'),
    hltPathsToCheck = cms.vstring('HLT_Mu45_eta2p1_v1', 
        'HLT_Mu50_v', 
        'HLT_IsoMu24_v', 
        'HLT_IsoTkMu24_v', 
        'HLT_Mu17_Mu8_DZ_v', 
        'HLT_Mu17_TkMu8_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v', 
        'HLT_IsoMu20_eta2p1_v', 
        'HLT_IsoTkMu20_eta2p1_v', 
        'HLT_IsoMu24_eta2p1_v', 
        'HLT_IsoTkMu24_eta2p1_v', 
        'HLT_Mu24_eta2p1_v', 
        'HLT_TkMu24_v', 
        'HLT_IsoMu27_v', 
        'HLT_IsoTkMu27_v', 
        'HLT_Mu27_v', 
        'HLT_TkMu27_v', 
        'HLT_IsoMu20_v', 
        'HLT_Mu20_v', 
        'HLT_TkMu20_v', 
        'HLT_IsoTkMu20_v', 
        'HLT_IsoMu22_v', 
        'HLT_IsoTkMu22_v', 
        'HLT_IsoMu18_v', 
        'HLT_IsoTkMu18_v', 
        'HLT_OldIsoMu18_v', 
        'HLT_OldIsoTkMu18_v', 
        'HLT_L1SingleMu16_v', 
        'HLT_L2Mu10_v', 
        'HLT_HIL1DoubleMu0', 
        'HLT_HIL1DoubleMu0BPTX', 
        'HLT_HIL2Mu3', 
        'HLT_HIL2Mu3BPTX', 
        'HLT_HIL2Mu7', 
        'HLT_HIL2Mu15', 
        'HLT_HIL2Mu3_NHitQ', 
        'HLT_HIL2DoubleMu0', 
        'HLT_HIL2DoubleMu0BPTX', 
        'HLT_HIL2DoubleMu0_NHitQ', 
        'HLT_HIL2DoubleMu3', 
        'HLT_HIL3Mu3', 
        'HLT_HIL3Mu3BPTX', 
        'HLT_HIL3DoubleMuOpen'),
    hltProcessName = cms.string('HLT'),
    inputTags = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        offlinePVs = cms.InputTag("hiSelectedVertex"),
        recoMuon = cms.InputTag("muons"),
        triggerResults = cms.InputTag("TriggerResults"),
        triggerSummary = cms.InputTag("hltTriggerSummaryAOD")
    ),
    plotCuts = cms.PSet(
        L1DeltaR = cms.untracked.double(0.3),
        L2DeltaR = cms.untracked.double(0.3),
        L3DeltaR = cms.untracked.double(0.05),
        maxEta = cms.untracked.double(2.1),
        minPtFactor = cms.untracked.double(1.2)
    ),
    probeParams = cms.PSet(
        d0Cut = cms.untracked.double(2.0),
        hltCuts = cms.untracked.string('abs(eta) < 2.0'),
        recoCuts = cms.untracked.string('isGlobalMuon && abs(eta) < 2.0'),
        z0Cut = cms.untracked.double(25.0)
    ),
    requiredTriggers = cms.untracked.vstring(),
    targetParams = cms.PSet(
        d0Cut = cms.untracked.double(0.2),
        hltCuts = cms.untracked.string('abs(eta) < 2.4'),
        recoCuts = cms.untracked.string('isGlobalMuon && isPFMuon && isTrackerMuon && abs(eta) < 2.4 && innerTrack.hitPattern.numberOfValidPixelHits > 0 && innerTrack.hitPattern.trackerLayersWithMeasurement > 5 && (pfIsolationR04().sumChargedHadronPt + max(pfIsolationR04().sumNeutralHadronEt + pfIsolationR04().sumPhotonEt - pfIsolationR04().sumPUPt/2,0.0))/pt < 0.12 && globalTrack.hitPattern.numberOfValidMuonHits > 0 && globalTrack.normalizedChi2 < 10 && numberOfMatches > 1'),
        z0Cut = cms.untracked.double(0.5)
    )
)


process.topDiLeptonHLTOfflineDQM = cms.EDAnalyzer("TopDiLeptonHLTOfflineDQM",
    preselection = cms.PSet(
        trigger = cms.PSet(
            select = cms.vstring('HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v', 
                'HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v', 
                'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
                'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v', 
                'HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v', 
                'HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        ),
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. && abs(y)<1. && abs(z)<20. && tracksSize>3 && !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('Hlt:step0'),
        max = cms.int32(0),
        min = cms.int32(0),
        select = cms.string(''),
        src = cms.InputTag("")
    ), 
        cms.PSet(
            label = cms.string('jets/pf:step1'),
            min = cms.int32(2),
            select = cms.string('pt>30. & abs(eta)<2.5'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('HLT/TopHLTOffline/Top/DiLeptonic/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(dr03TkSumPt+dr03EcalRecHitSumEt+dr03HcalTowerSumEt)/pt<0.15'),
            select = cms.string('pt>20 & abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            select = cms.string('pt>30. & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(pfIsolationR04.sumChargedHadronPt+pfIsolationR04.sumPhotonEt+pfIsolationR04.sumNeutralHadronEt)/pt<0.2'),
            select = cms.string('pt>20 & abs(eta)<2.4 & isPFMuon & (isGlobalMuon || isTrackerMuon)')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons")
        ),
        triggerExtras = cms.PSet(
            pathsDIELEC = cms.vstring('HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v', 
                'HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v'),
            pathsDIMUON = cms.vstring('HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
                'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v'),
            pathsELECMU = cms.vstring('HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v', 
                'HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        )
    )
)


process.topDiLeptonOfflineDQM = cms.EDAnalyzer("TopDiLeptonOfflineDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. && abs(y)<1. && abs(z)<20. && tracksSize>3 && !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('muons:step0'),
        max = cms.int32(2),
        min = cms.int32(2),
        select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && (muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2 && muonRef.pt > 20. && abs(muonRef.eta)<2.4'),
        src = cms.InputTag("pfIsolatedMuonsEI")
    ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            min = cms.int32(2),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopDiLeptonDQM/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            select = cms.string('pt>20. && abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30. & abs(eta)<2.4 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(76.0),
            upperEdge = cms.double(106.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2'),
            select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && muonRef.pt > 10. && abs(muonRef.eta)<2.4')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI")
        )
    )
)


process.topSingleElectronHLTOfflineDQM = cms.EDAnalyzer("TopSingleLeptonHLTOfflineDQM",
    preselection = cms.PSet(
        trigger = cms.PSet(
            select = cms.vstring('HLT_Ele23_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele23_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v', 
                'HLT_Ele27_WPLoose_Gsf_WHbbBoost_v', 
                'HLT_Ele27_WPLoose_Gsf_v', 
                'HLT_Ele27_WPLoose_Gsf_CentralPFJet30_BTagCSV07_vHLT_Ele27_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_TriCentralPFJet30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_TriCentralPFJet30_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        ),
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('Hlt:step0'),
        max = cms.int32(0),
        min = cms.int32(0),
        select = cms.string(''),
        src = cms.InputTag("")
    ), 
        cms.PSet(
            label = cms.string('elecs:step1'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('pt>30 & abs(eta)<2.5 & (dr03TkSumPt+dr04EcalRecHitSumEt+dr04HcalTowerSumEt)/pt<0.1'),
            src = cms.InputTag("gedGsfElectrons")
        ), 
        cms.PSet(
            label = cms.string('jets/pf:step2'),
            min = cms.int32(4),
            select = cms.string('pt>20 & abs(eta)<2.5'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('HLT/TopHLTOffline/Top/SemiElectronic/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(dr03TkSumPt+dr04EcalRecHitSumEt+dr04HcalTowerSumEt)/pt<0.1'),
            select = cms.string('pt>30 & abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.679)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("jetProbabilityBJetTags"),
                    workingPoint = cms.double(0.275)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.41)
                )
            ),
            select = cms.string('pt>20 & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        ),
        triggerExtras = cms.PSet(
            paths = cms.vstring('HLT_Ele23_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele23_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v', 
                'HLT_Ele27_WPLoose_Gsf_WHbbBoost_v', 
                'HLT_Ele27_WPLoose_Gsf_v', 
                'HLT_Ele27_WPLoose_Gsf_CentralPFJet30_BTagCSV07_vHLT_Ele27_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_TriCentralPFJet30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_TriCentralPFJet30_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        )
    )
)


process.topSingleElectronLooseDQM = cms.EDAnalyzer("TopSingleLeptonDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('elecs:step0'),
        min = cms.int32(1),
        select = cms.string('pt>20 & abs(eta)<2.5 && (gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
        src = cms.InputTag("pfIsolatedElectronsEI")
    ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            min = cms.int32(1),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step3'),
            min = cms.int32(3),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step4'),
            min = cms.int32(4),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopSingleElectronLooseDQM/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            select = cms.string('pt>20 & abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                cvsVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.898)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("simpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("trackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.0)
                )
            ),
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30 & abs(eta)<2.5 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        ),
        triggerExtras = cms.PSet(
            paths = cms.vstring('HLT_Ele15_LW_L1R:HLT_QuadJetU15'),
            src = cms.InputTag("TriggerResults","","HLT")
        )
    )
)


process.topSingleElectronLooseDQM_PU = cms.EDAnalyzer("TopSingleLeptonDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        electronId = cms.PSet(
            pattern = cms.int32(1),
            src = cms.InputTag("simpleEleId70cIso")
        ),
        label = cms.string('elecs:step0'),
        min = cms.int32(1),
        select = cms.string('pt>30 & abs(eta)<2.5'),
        src = cms.InputTag("gedGsfElectrons")
    ), 
        cms.PSet(
            label = cms.string('pvs:step1'),
            max = cms.int32(10),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step2'),
            max = cms.int32(8),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step3'),
            max = cms.int32(6),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step4'),
            max = cms.int32(4),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step5'),
            max = cms.int32(2),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopSingleElectronLooseDQM_PU/'),
        elecExtras = cms.PSet(
            electronId = cms.PSet(
                pattern = cms.int32(1),
                src = cms.InputTag("simpleEleId70cIso")
            ),
            isolation = cms.string('(dr03TkSumPt+dr03EcalRecHitSumEt+dr03HcalTowerSumEt)/pt<0.1'),
            select = cms.string('pt>15 & abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                cvsVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.898)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("simpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("trackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.0)
                )
            ),
            jetCorrector = cms.string('ak5PFL2L3'),
            select = cms.string('pt>30 & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak5PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.topSingleElectronMediumDQM = cms.EDAnalyzer("TopSingleLeptonDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('elecs:step0'),
        max = cms.int32(1),
        min = cms.int32(1),
        select = cms.string("pt>30 & abs(eta)<2.5 & abs(gsfElectronRef.gsfTrack.d0)<0.02 & gsfElectronRef.gsfTrack.hitPattern().numberOfHits(\'MISSING_INNER_HITS\') <= 0 & (abs(gsfElectronRef.superCluster.eta) <= 1.4442 || abs(gsfElectronRef.superCluster.eta) >= 1.5660) & (gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.1"),
        src = cms.InputTag("pfIsolatedElectronsEI")
    ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            min = cms.int32(1),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step3'),
            min = cms.int32(3),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step4'),
            min = cms.int32(4),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopSingleElectronMediumDQM/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(gsfElectronRef.pfIsolationVariables.sumChargedHadronPt + max(0., gsfElectronRef.pfIsolationVariables.sumNeutralHadronEt + gsfElectronRef.pfIsolationVariables.sumPhotonEt - 0.5 * gsfElectronRef.pfIsolationVariables.sumPUPt) ) / gsfElectronRef.pt < 0.15'),
            select = cms.string('pt>20 & abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                cvsVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.898)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("simpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("trackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.0)
                )
            ),
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30 & abs(eta)<2.5 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.topSingleElectronMediumDQM_PU = cms.EDAnalyzer("TopSingleLeptonDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        electronId = cms.PSet(
            pattern = cms.int32(1),
            src = cms.InputTag("simpleEleId70cIso")
        ),
        label = cms.string('elecs:step0'),
        max = cms.int32(1),
        min = cms.int32(1),
        select = cms.string('pt>25 & abs(eta)<2.5 & (dr03TkSumPt+dr03EcalRecHitSumEt+dr03HcalTowerSumEt)/pt<0.1'),
        src = cms.InputTag("gedGsfElectrons")
    ), 
        cms.PSet(
            label = cms.string('pvs:step1'),
            max = cms.int32(10),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step2'),
            max = cms.int32(8),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step3'),
            max = cms.int32(6),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step4'),
            max = cms.int32(4),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step5'),
            max = cms.int32(2),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopSingleElectronMediumDQM_PU/'),
        elecExtras = cms.PSet(
            electronId = cms.PSet(
                pattern = cms.int32(1),
                src = cms.InputTag("simpleEleId70cIso")
            ),
            isolation = cms.string('(dr03TkSumPt+dr03EcalRecHitSumEt+dr03HcalTowerSumEt)/pt<0.1'),
            select = cms.string('pt>25 & abs(eta)<2.5 & (dr03TkSumPt+dr03EcalRecHitSumEt+dr03HcalTowerSumEt)/pt<0.1')
        ),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                cvsVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.898)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("simpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("trackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.0)
                )
            ),
            jetCorrector = cms.string('ak5PFL2L3'),
            select = cms.string('pt>30 & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak5PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.topSingleLeptonDQM = cms.EDAnalyzer("TopSingleLeptonDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('jets/pf:step0'),
        min = cms.int32(2),
        select = cms.string('pt>20 & abs(eta)<2.1 '),
        src = cms.InputTag("ak5PFJetsCHS")
    )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopSingleLeptonDQM/'),
        elecExtras = cms.PSet(
            electronId = cms.PSet(
                pattern = cms.int32(1),
                src = cms.InputTag("eidRobustLoose")
            ),
            isolation = cms.string('(dr03TkSumPt+dr04EcalRecHitSumEt+dr04HcalTowerSumEt)/pt<0.1'),
            select = cms.string('pt>15 & abs(eta)<2.5 & abs(gsfTrack.d0)<1 & abs(gsfTrack.dz)<20')
        ),
        jetExtras = cms.PSet(
            jetCorrector = cms.string('ak5PFL2L3'),
            select = cms.string('pt>30 & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(isolationR03.sumPt+isolationR03.emEt+isolationR03.hadEt)/pt<0.1'),
            select = cms.string('pt>10 & abs(eta)<2.1 & isGlobalMuon & abs(globalTrack.d0)<1 & abs(globalTrack.dz)<20')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak5PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.topSingleLeptonHLTOfflineDQM = cms.EDAnalyzer("TopSingleLeptonHLTOfflineDQM",
    preselection = cms.PSet(
        trigger = cms.PSet(
            select = cms.vstring('HLT_Ele23_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele23_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v', 
                'HLT_Ele27_WPLoose_Gsf_WHbbBoost_v', 
                'HLT_Ele27_WPLoose_Gsf_v', 
                'HLT_Ele27_WPLoose_Gsf_CentralPFJet30_BTagCSV07_vHLT_Ele27_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_TriCentralPFJet30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_v', 
                'HLT_Ele27_eta2p1_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_TriCentralPFJet30_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_TriCentralPFJet50_40_30_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_v', 
                'HLT_Ele32_eta2p1_WPLoose_Gsf_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu18_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu18_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu22_v', 
                'HLT_IsoMu18_v', 
                'HLT_IsoMu22_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu22_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu20_eta2p1_TriCentralPFJet30_v', 
                'HLT_IsoMu20_eta2p1_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu20_eta2p1_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu20_eta2p1_v', 
                'HLT_IsoMu24_eta2p1_TriCentralPFJet30_v', 
                'HLT_IsoMu24_eta2p1_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu24_eta2p1_CentralPFJet30_BTagCSV07_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        ),
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('Hlt:step0'),
        max = cms.int32(0),
        min = cms.int32(0),
        select = cms.string(''),
        src = cms.InputTag("")
    ), 
        cms.PSet(
            label = cms.string('jets/pf:step1'),
            min = cms.int32(4),
            select = cms.string('pt>20 & abs(eta)<2.5'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('HLT/TopHLTOffline/Top/SemiLeptonic/'),
        elecExtras = cms.PSet(
            isolation = cms.string('(dr03TkSumPt+dr04EcalRecHitSumEt+dr04HcalTowerSumEt)/pt<0.1'),
            select = cms.string('pt>30 & abs(eta)<2.5')
        ),
        jetExtras = cms.PSet(
            select = cms.string('pt>20 & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(pfIsolationR04.sumChargedHadronPt+pfIsolationR04.sumPhotonEt+pfIsolationR04.sumNeutralHadronEt)/pt<0.2'),
            select = cms.string('pt>26 & abs(eta)<2.1 & isPFMuon & isGlobalMuon & globalTrack.normalizedChi2<10 & innerTrack.hitPattern.trackerLayersWithMeasurement>5 & innerTrack.hitPattern.numberOfValidPixelHits>0 & numberOfMatches>1')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.topSingleMuonHLTOfflineDQM = cms.EDAnalyzer("TopSingleLeptonHLTOfflineDQM",
    preselection = cms.PSet(
        trigger = cms.PSet(
            select = cms.vstring('HLT_IsoMu18_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu18_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu22_v', 
                'HLT_IsoMu18_v', 
                'HLT_IsoMu22_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu22_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu20_eta2p1_TriCentralPFJet30_v', 
                'HLT_IsoMu20_eta2p1_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu20_eta2p1_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu20_eta2p1_v', 
                'HLT_IsoMu24_eta2p1_TriCentralPFJet30_v', 
                'HLT_IsoMu24_eta2p1_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu24_eta2p1_CentralPFJet30_BTagCSV07_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        ),
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('Hlt:step0'),
        max = cms.int32(0),
        min = cms.int32(0),
        select = cms.string(''),
        src = cms.InputTag("")
    ), 
        cms.PSet(
            label = cms.string('muons:step1'),
            max = cms.int32(1),
            min = cms.int32(1),
            select = cms.string('pt>26 & abs(eta)<2.1 & isPFMuon & isGlobalMuon & globalTrack.normalizedChi2<10 & innerTrack.hitPattern.trackerLayersWithMeasurement>5 & innerTrack.hitPattern.numberOfValidPixelHits>0 & numberOfMatches>1 & (pfIsolationR04.sumChargedHadronPt+pfIsolationR04.sumPhotonEt+pfIsolationR04.sumNeutralHadronEt)/pt<0.12'),
            src = cms.InputTag("muons")
        ), 
        cms.PSet(
            label = cms.string('jets/pf:step2'),
            min = cms.int32(4),
            select = cms.string('pt>20 & abs(eta)<2.5'),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('HLT/TopHLTOffline/Top/SemiMuonic/'),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.679)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("jetProbabilityBJetTags"),
                    workingPoint = cms.double(0.275)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.41)
                )
            ),
            select = cms.string('pt>20 & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(pfIsolationR04.sumChargedHadronPt+pfIsolationR04.sumPhotonEt+pfIsolationR04.sumNeutralHadronEt)/pt<0.2'),
            select = cms.string('pt>26 & abs(eta)<2.1 & isPFMuon & isGlobalMuon & globalTrack.normalizedChi2<10 & innerTrack.hitPattern.trackerLayersWithMeasurement>5 & innerTrack.hitPattern.numberOfValidPixelHits>0 & numberOfMatches>1')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        ),
        triggerExtras = cms.PSet(
            paths = cms.vstring('HLT_IsoMu18_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu18_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu22_v', 
                'HLT_IsoMu18_v', 
                'HLT_IsoMu22_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu22_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu20_eta2p1_TriCentralPFJet30_v', 
                'HLT_IsoMu20_eta2p1_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu20_eta2p1_CentralPFJet30_BTagCSV07_v', 
                'HLT_IsoMu20_eta2p1_v', 
                'HLT_IsoMu24_eta2p1_TriCentralPFJet30_v', 
                'HLT_IsoMu24_eta2p1_TriCentralPFJet50_40_30_v', 
                'HLT_IsoMu24_eta2p1_CentralPFJet30_BTagCSV07_v'),
            src = cms.InputTag("TriggerResults","","HLT")
        )
    )
)


process.topSingleMuonLooseDQM = cms.EDAnalyzer("TopSingleLeptonDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('muons:step0'),
        min = cms.int32(1),
        select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2 && pt>10 & abs(eta)<2.4'),
        src = cms.InputTag("pfIsolatedMuonsEI")
    ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            min = cms.int32(1),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step3'),
            min = cms.int32(3),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step4'),
            min = cms.int32(4),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopSingleMuonLooseDQM/'),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                cvsVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.898)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("simpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("trackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.0)
                )
            ),
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30 & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2'),
            select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && pt > 10 & abs(eta)<2.4')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        ),
        triggerExtras = cms.PSet(
            paths = cms.vstring('HLT_Mu3:HLT_QuadJet15U', 
                'HLT_Mu5:HLT_QuadJet15U', 
                'HLT_Mu7:HLT_QuadJet15U', 
                'HLT_Mu9:HLT_QuadJet15U', 
                'HLT_Mu11:HLT_QuadJet15U'),
            src = cms.InputTag("TriggerResults","","HLT")
        )
    )
)


process.topSingleMuonLooseDQM_PU = cms.EDAnalyzer("TopSingleLeptonDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('muons:step0'),
        min = cms.int32(1),
        select = cms.string('pt>10 & abs(eta)<2.1 & isGlobalMuon & innerTrack.numberOfValidHits>10 & globalTrack.normalizedChi2>-1 & globalTrack.normalizedChi2<10'),
        src = cms.InputTag("muons")
    ), 
        cms.PSet(
            label = cms.string('pvs:step1'),
            max = cms.int32(10),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step2'),
            max = cms.int32(8),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step3'),
            max = cms.int32(6),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step4'),
            max = cms.int32(4),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step5'),
            max = cms.int32(2),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopSingleMuonLooseDQM_PU/'),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                cvsVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.898)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("simpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("trackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.0)
                )
            ),
            jetCorrector = cms.string('ak5PFL2L3'),
            select = cms.string('pt>30 & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(isolationR03.sumPt+isolationR03.emEt+isolationR03.hadEt)/pt<0.1'),
            select = cms.string('pt > 10 & abs(eta)<2.1 & isGlobalMuon & innerTrack.numberOfValidHits>10 & globalTrack.normalizedChi2>-1 & globalTrack.normalizedChi2<10')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak5PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.topSingleMuonMediumDQM = cms.EDAnalyzer("TopSingleLeptonDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('muons:step0'),
        max = cms.int32(1),
        min = cms.int32(1),
        select = cms.string('muonRef.isNonnull && muonRef.isGlobalMuon && muonRef.isPFMuon && muonRef.globalTrack.normalizedChi2 < 10. && muonRef.globalTrack.hitPattern.numberOfValidMuonHits > 0 && muonRef.numberOfMatchedStations > 1 && muonRef.innerTrack.hitPattern.numberOfValidPixelHits > 0 && muonRef.innerTrack.hitPattern.trackerLayersWithMeasurement > 8&&(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.12 && pt>20 & abs(eta)<2.1'),
        src = cms.InputTag("pfIsolatedMuonsEI")
    ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step1'),
            min = cms.int32(1),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step2'),
            min = cms.int32(2),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step3'),
            min = cms.int32(3),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        ), 
        cms.PSet(
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            label = cms.string('jets/pf:step4'),
            min = cms.int32(4),
            select = cms.string('pt>30 & abs(eta)<2.5 '),
            src = cms.InputTag("ak4PFJetsCHS")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopSingleMuonMediumDQM/'),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                cvsVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.898)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("simpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("trackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.0)
                )
            ),
            jetCorrector = cms.string('topDQMak5PFCHSL2L3'),
            select = cms.string('pt>30 & abs(eta)<2.5 ')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(muonRef.pfIsolationR04.sumChargedHadronPt + max(0., muonRef.pfIsolationR04.sumNeutralHadronEt + muonRef.pfIsolationR04.sumPhotonEt - 0.5 * muonRef.pfIsolationR04.sumPUPt) ) / muonRef.pt < 0.2'),
            select = cms.string('muonRef.isNonnull && (muonRef.isGlobalMuon || muonRef.isTrackerMuon) && muonRef.isPFMuon && pt>20 & abs(eta)<2.1')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("pfIsolatedElectronsEI"),
            jets = cms.InputTag("ak4PFJetsCHS"),
            mets = cms.VInputTag("caloMet", "tcMet", "pfMet"),
            muons = cms.InputTag("pfIsolatedMuonsEI"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.topSingleMuonMediumDQM_PU = cms.EDAnalyzer("TopSingleLeptonDQM",
    preselection = cms.PSet(
        vertex = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )
    ),
    selection = cms.VPSet(cms.PSet(
        label = cms.string('muons:step0'),
        max = cms.int32(1),
        min = cms.int32(1),
        select = cms.string('pt>20 & abs(eta)<2.1 & isGlobalMuon & innerTrack.numberOfValidHits>10 & globalTrack.normalizedChi2>-1 & globalTrack.normalizedChi2<10 & (isolationR03.sumPt+isolationR03.emEt+isolationR03.hadEt)/pt<0.1'),
        src = cms.InputTag("muons")
    ), 
        cms.PSet(
            label = cms.string('pvs:step1'),
            max = cms.int32(10),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step2'),
            max = cms.int32(8),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step3'),
            max = cms.int32(6),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step4'),
            max = cms.int32(4),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        ), 
        cms.PSet(
            label = cms.string('pvs:step5'),
            max = cms.int32(2),
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake'),
            src = cms.InputTag("offlinePrimaryVertices")
        )),
    setup = cms.PSet(
        directory = cms.string('Physics/Top/TopSingleMuonMediumDQM_PU/'),
        jetExtras = cms.PSet(
            jetBTaggers = cms.PSet(
                cvsVertex = cms.PSet(
                    label = cms.InputTag("combinedSecondaryVertexBJetTags"),
                    workingPoint = cms.double(0.898)
                ),
                secondaryVertex = cms.PSet(
                    label = cms.InputTag("simpleSecondaryVertexHighEffBJetTags"),
                    workingPoint = cms.double(2.05)
                ),
                trackCountingEff = cms.PSet(
                    label = cms.InputTag("trackCountingHighEffBJetTags"),
                    workingPoint = cms.double(1.25)
                ),
                trackCountingPur = cms.PSet(
                    label = cms.InputTag("trackCountingHighPurBJetTags"),
                    workingPoint = cms.double(3.0)
                )
            ),
            jetCorrector = cms.string('ak5PFL2L3'),
            select = cms.string('pt>30 & abs(eta)<2.5')
        ),
        massExtras = cms.PSet(
            lowerEdge = cms.double(70.0),
            upperEdge = cms.double(110.0)
        ),
        monitoring = cms.PSet(
            verbosity = cms.string('DEBUG')
        ),
        muonExtras = cms.PSet(
            isolation = cms.string('(isolationR03.sumPt+isolationR03.emEt+isolationR03.hadEt)/pt<0.1'),
            select = cms.string('pt>20 & abs(eta)<2.1 & isGlobalMuon & innerTrack.numberOfValidHits>10 & globalTrack.normalizedChi2>-1 & globalTrack.normalizedChi2<10 & (isolationR03.sumPt+isolationR03.emEt+isolationR03.hadEt)/pt<0.1')
        ),
        pvExtras = cms.PSet(
            select = cms.string('abs(x)<1. & abs(y)<1. & abs(z)<20. & tracksSize>3 & !isFake')
        ),
        sources = cms.PSet(
            elecs = cms.InputTag("gedGsfElectrons"),
            jets = cms.InputTag("ak5PFJetsCHS"),
            mets = cms.VInputTag("met", "tcMet", "pfMet"),
            muons = cms.InputTag("muons"),
            pvs = cms.InputTag("offlinePrimaryVertices")
        )
    )
)


process.trackerAnalyzer = cms.EDAnalyzer("HLTMuonOfflineAnalyzer",
    binParams = cms.untracked.PSet(
        NVertex = cms.untracked.vdouble(20, 1, 50),
        charge = cms.untracked.vdouble(2, -2.0, 2.0),
        d0 = cms.untracked.vdouble(10, -0.5, 0.5),
        deltaR = cms.untracked.vdouble(20, 0.0, 0.05),
        eta = cms.untracked.vdouble(20, -2.4, 2.4),
        etaCoarse = cms.untracked.vdouble(-2.4, -2.1, -1.6, -1.2, -0.8, 
            0.0, 0.8, 1.2, 1.6, 2.1, 
            2.4),
        jpsiMass = cms.untracked.vdouble(60, 0.0, 6.0),
        phi = cms.untracked.vdouble(20, -3.14, 3.14),
        phiCoarse = cms.untracked.vdouble(10, -3.14, 3.14),
        pt = cms.untracked.vdouble(0.0, 2.0, 4.0, 6.0, 8.0, 
            10.0, 20.0, 30.0, 40.0, 100.0, 
            200.0, 400.0),
        ptCoarse = cms.untracked.vdouble(10.0, 20.0, 40.0, 60.0, 80.0, 
            100.0, 200.0),
        resolutionEta = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionPhi = cms.untracked.vdouble(20, -0.01, 0.01),
        resolutionRel = cms.untracked.vdouble(20, -0.15, 0.15),
        z0 = cms.untracked.vdouble(10, -15.0, 15.0),
        zMass = cms.untracked.vdouble(50, 65.0, 115.0)
    ),
    destination = cms.untracked.string('HLT/Muon/DistributionsTracker'),
    hltPathsToCheck = cms.vstring('HLT_Mu45_eta2p1_v1', 
        'HLT_Mu50_v', 
        'HLT_IsoMu24_v', 
        'HLT_IsoTkMu24_v', 
        'HLT_Mu17_Mu8_DZ_v', 
        'HLT_Mu17_TkMu8_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_v', 
        'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_v', 
        'HLT_Mu17_TrkIsoVVL_TkMu8_TrkIsoVVL_DZ_v', 
        'HLT_IsoMu20_eta2p1_v', 
        'HLT_IsoTkMu20_eta2p1_v', 
        'HLT_IsoMu24_eta2p1_v', 
        'HLT_IsoTkMu24_eta2p1_v', 
        'HLT_Mu24_eta2p1_v', 
        'HLT_TkMu24_v', 
        'HLT_IsoMu27_v', 
        'HLT_IsoTkMu27_v', 
        'HLT_Mu27_v', 
        'HLT_TkMu27_v', 
        'HLT_IsoMu20_v', 
        'HLT_Mu20_v', 
        'HLT_TkMu20_v', 
        'HLT_IsoTkMu20_v', 
        'HLT_IsoMu22_v', 
        'HLT_IsoTkMu22_v', 
        'HLT_IsoMu18_v', 
        'HLT_IsoTkMu18_v', 
        'HLT_OldIsoMu18_v', 
        'HLT_OldIsoTkMu18_v', 
        'HLT_L1SingleMu16_v', 
        'HLT_L2Mu10_v', 
        'HLT_HIL1DoubleMu0', 
        'HLT_HIL1DoubleMu0BPTX', 
        'HLT_HIL2Mu3', 
        'HLT_HIL2Mu3BPTX', 
        'HLT_HIL2Mu7', 
        'HLT_HIL2Mu15', 
        'HLT_HIL2Mu3_NHitQ', 
        'HLT_HIL2DoubleMu0', 
        'HLT_HIL2DoubleMu0BPTX', 
        'HLT_HIL2DoubleMu0_NHitQ', 
        'HLT_HIL2DoubleMu3', 
        'HLT_HIL3Mu3', 
        'HLT_HIL3Mu3BPTX', 
        'HLT_HIL3DoubleMuOpen'),
    hltProcessName = cms.string('HLT'),
    inputTags = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        offlinePVs = cms.InputTag("hiSelectedVertex"),
        recoMuon = cms.InputTag("muons"),
        triggerResults = cms.InputTag("TriggerResults"),
        triggerSummary = cms.InputTag("hltTriggerSummaryAOD")
    ),
    plotCuts = cms.PSet(
        L1DeltaR = cms.untracked.double(0.3),
        L2DeltaR = cms.untracked.double(0.3),
        L3DeltaR = cms.untracked.double(0.05),
        maxEta = cms.untracked.double(2.1),
        minPtFactor = cms.untracked.double(1.2)
    ),
    probeParams = cms.PSet(
        d0Cut = cms.untracked.double(2.0),
        hltCuts = cms.untracked.string('abs(eta) < 2.0'),
        recoCuts = cms.untracked.string('isGlobalMuon && abs(eta) < 2.0'),
        z0Cut = cms.untracked.double(25.0)
    ),
    requiredTriggers = cms.untracked.vstring(),
    targetParams = cms.PSet(
        d0Cut = cms.untracked.double(2.0),
        hltCuts = cms.untracked.string('abs(eta) < 2.4'),
        recoCuts = cms.untracked.string('isTrackerMuon && abs(eta) < 2.4'),
        z0Cut = cms.untracked.double(25.0)
    )
)


process.zdcMonitor = cms.EDAnalyzer("ZDCMonitorModule",
    AllowedCalibTypes = cms.untracked.vint32(0, 1, 2, 3, 4, 
        5, 6, 7),
    BadCells = cms.untracked.vstring(),
    FEDRawDataCollection = cms.untracked.InputTag("rawDataRepacker"),
    Nlumiblocks = cms.untracked.int32(1000),
    Online = cms.untracked.bool(False),
    ZDCMonitor = cms.untracked.bool(True),
    ZDCMonitor_checkNevents = cms.untracked.int32(1000),
    ZDCMonitor_deadthresholdrate = cms.untracked.double(0.0),
    checkNevents = cms.untracked.int32(1000),
    checkZDC = cms.untracked.bool(True),
    debug = cms.untracked.int32(0),
    diagnosticPrescaleEvt = cms.untracked.int32(-1),
    diagnosticPrescaleLS = cms.untracked.int32(-1),
    digiLabel = cms.InputTag("hcalDigis"),
    gtLabel = cms.InputTag("l1GtUnpack"),
    pedestalsInFC = cms.untracked.bool(True),
    showTiming = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/ZDCMonitor'),
    zdcMonitorTask = cms.PSet(
        AllowedCalibTypes = cms.untracked.vint32(0),
        NLumiBlocks = cms.untracked.int32(4000),
        TaskFolder = cms.untracked.string('ZDCMonitor_Hcal/'),
        ZDC_AcceptableChannelErrorRates = cms.untracked.vdouble(0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1),
        ZDC_ChannelWeighting = cms.untracked.vdouble(0.1, 0.1, 0.1, 0.1, 0.1, 
            0.125, 0.125, 0.125, 0.125, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.125, 
            0.125, 0.125, 0.125),
        ZDC_ColdADCThreshold = cms.untracked.int32(20),
        ZDC_OfflineColdThreshold = cms.untracked.int32(250),
        ZDC_OfflineDeadThreshold = cms.untracked.int32(250),
        ZDC_OnlineColdThreshold = cms.untracked.int32(250),
        ZDC_OnlineDeadThreshold = cms.untracked.int32(250),
        debug = cms.untracked.int32(0),
        digiLabel = cms.InputTag("hcalDigis"),
        enableCleanup = cms.untracked.bool(False),
        makeDiagnostics = cms.untracked.bool(False),
        mergeRuns = cms.untracked.bool(False),
        online = cms.untracked.bool(False),
        rechitLabel = cms.InputTag("zdcreco"),
        skipOutOfOrderLS = cms.untracked.bool(False),
        subSystemFolder = cms.untracked.string('Hcal/')
    ),
    zdcRecHitLabel = cms.InputTag("zdcreco")
)


process.zmumugammaAnalysis = cms.EDAnalyzer("ZToMuMuGammaAnalyzer",
    ComponentName = cms.string('zmumugammaAnalysis'),
    OutputFileName = cms.string('DQMOfflinePhotonsAfterFirstStep.root'),
    Verbosity = cms.untracked.int32(0),
    analyzerName = cms.string('zmumugammaGedValidation'),
    barrelRecHitProducer = cms.InputTag("reducedEcalRecHitsEB"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    chi2Bin = cms.int32(100),
    chi2Max = cms.double(20.0),
    chi2Min = cms.double(0.0),
    dEtaTracksBin = cms.int32(100),
    dEtaTracksMax = cms.double(0.2),
    dEtaTracksMin = cms.double(-0.2),
    dPhiTracksBin = cms.int32(100),
    dPhiTracksMax = cms.double(0.5),
    dPhiTracksMin = cms.double(-0.5),
    eBin = cms.int32(150),
    eMax = cms.double(150.0),
    eMin = cms.double(0.0),
    eOverPBin = cms.int32(100),
    eOverPMax = cms.double(5.0),
    eOverPMin = cms.double(0.0),
    endcapRecHitProducer = cms.InputTag("reducedEcalRecHitsEE"),
    etBin = cms.int32(150),
    etMax = cms.double(150.0),
    etMin = cms.double(0.0),
    etaBin = cms.int32(200),
    etaMax = cms.double(2.5),
    etaMin = cms.double(-2.5),
    farMuonEcalIso = cms.double(1.0),
    farMuonMinPt = cms.double(15.0),
    farMuonTrackIso = cms.double(3.0),
    hOverEBin = cms.int32(200),
    hOverEMax = cms.double(0.5),
    hOverEMin = cms.double(0),
    isHeavyIon = cms.untracked.bool(False),
    makeProfiles = cms.bool(True),
    maxMumuGammaInvMass = cms.double(105.0),
    maxMumuInvMass = cms.double(120.0),
    minMumuGammaInvMass = cms.double(75.0),
    minMumuInvMass = cms.double(60.0),
    minPixStripHits = cms.int32(10),
    muonMatches = cms.int32(2),
    muonMaxChi2 = cms.double(10.0),
    muonMaxDxy = cms.double(0.2),
    muonMinPt = cms.double(20.0),
    muonProducer = cms.InputTag("muons"),
    muonTightEta = cms.double(2.1),
    muonTrackIso = cms.double(3.0),
    nearMuonDr = cms.double(1.0),
    nearMuonHcalIso = cms.double(1.0),
    numberBin = cms.int32(9),
    numberMax = cms.double(10),
    numberMin = cms.double(1),
    particleBasedIso = cms.InputTag("particleBasedIsolation","gedPhotons"),
    pfCandidates = cms.InputTag("particleFlow"),
    phiBin = cms.int32(200),
    phiMax = cms.double(3.14),
    phiMin = cms.double(-3.14),
    phoProducer = cms.InputTag("gedPhotons"),
    photonMaxEta = cms.double(2.5),
    photonMinEt = cms.double(15.0),
    photonTrackIso = cms.double(0.9),
    prescaleFactor = cms.untracked.int32(1),
    r9Bin = cms.int32(110),
    r9Max = cms.double(1.1),
    r9Min = cms.double(0.0),
    rBin = cms.int32(400),
    rMax = cms.double(80),
    rMin = cms.double(0),
    sigmaIetaBin = cms.int32(200),
    sigmaIetaMax = cms.double(0.05),
    sigmaIetaMin = cms.double(0.0),
    splitHistosEBEE = cms.bool(True),
    standAlone = cms.bool(False),
    sumBin = cms.int32(230),
    sumMax = cms.double(20.0),
    sumMin = cms.double(-3.0),
    triggerEvent = cms.InputTag("hltTriggerSummaryAOD"),
    use2DHistos = cms.bool(False),
    useTriggerFiltering = cms.bool(False),
    validMuonHits = cms.int32(1),
    validPixHits = cms.int32(1),
    xBin = cms.int32(300),
    xMax = cms.double(60),
    xMin = cms.double(-60),
    yBin = cms.int32(300),
    yMax = cms.double(60),
    yMin = cms.double(-60),
    zBin = cms.int32(400),
    zMax = cms.double(200),
    zMin = cms.double(-200)
)


process.zmumugammaOldAnalysis = cms.EDAnalyzer("ZToMuMuGammaAnalyzer",
    ComponentName = cms.string('zmumugammaOldAnalysis'),
    OutputFileName = cms.string('DQMOfflinePhotonsAfterFirstStep.root'),
    Verbosity = cms.untracked.int32(0),
    analyzerName = cms.string('zmumugammaOldValidation'),
    barrelRecHitProducer = cms.InputTag("reducedEcalRecHitsEB"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    chi2Bin = cms.int32(100),
    chi2Max = cms.double(20.0),
    chi2Min = cms.double(0.0),
    dEtaTracksBin = cms.int32(100),
    dEtaTracksMax = cms.double(0.2),
    dEtaTracksMin = cms.double(-0.2),
    dPhiTracksBin = cms.int32(100),
    dPhiTracksMax = cms.double(0.5),
    dPhiTracksMin = cms.double(-0.5),
    eBin = cms.int32(150),
    eMax = cms.double(150.0),
    eMin = cms.double(0.0),
    eOverPBin = cms.int32(100),
    eOverPMax = cms.double(5.0),
    eOverPMin = cms.double(0.0),
    endcapRecHitProducer = cms.InputTag("reducedEcalRecHitsEE"),
    etBin = cms.int32(150),
    etMax = cms.double(150.0),
    etMin = cms.double(0.0),
    etaBin = cms.int32(200),
    etaMax = cms.double(2.5),
    etaMin = cms.double(-2.5),
    farMuonEcalIso = cms.double(1.0),
    farMuonMinPt = cms.double(15.0),
    farMuonTrackIso = cms.double(3.0),
    hOverEBin = cms.int32(200),
    hOverEMax = cms.double(0.5),
    hOverEMin = cms.double(0),
    isHeavyIon = cms.untracked.bool(False),
    makeProfiles = cms.bool(True),
    maxMumuGammaInvMass = cms.double(105.0),
    maxMumuInvMass = cms.double(120.0),
    minMumuGammaInvMass = cms.double(75.0),
    minMumuInvMass = cms.double(60.0),
    minPixStripHits = cms.int32(10),
    muonMatches = cms.int32(2),
    muonMaxChi2 = cms.double(10.0),
    muonMaxDxy = cms.double(0.2),
    muonMinPt = cms.double(20.0),
    muonProducer = cms.InputTag("muons"),
    muonTightEta = cms.double(2.1),
    muonTrackIso = cms.double(3.0),
    nearMuonDr = cms.double(1.0),
    nearMuonHcalIso = cms.double(1.0),
    numberBin = cms.int32(9),
    numberMax = cms.double(10),
    numberMin = cms.double(1),
    particleBasedIso = cms.InputTag("particleBasedIsolation","gedPhotons"),
    pfCandidates = cms.InputTag("particleFlow"),
    phiBin = cms.int32(200),
    phiMax = cms.double(3.14),
    phiMin = cms.double(-3.14),
    phoProducer = cms.InputTag("photons"),
    photonMaxEta = cms.double(2.5),
    photonMinEt = cms.double(15.0),
    photonTrackIso = cms.double(0.9),
    prescaleFactor = cms.untracked.int32(1),
    r9Bin = cms.int32(110),
    r9Max = cms.double(1.1),
    r9Min = cms.double(0.0),
    rBin = cms.int32(400),
    rMax = cms.double(80),
    rMin = cms.double(0),
    sigmaIetaBin = cms.int32(200),
    sigmaIetaMax = cms.double(0.05),
    sigmaIetaMin = cms.double(0.0),
    splitHistosEBEE = cms.bool(True),
    standAlone = cms.bool(False),
    sumBin = cms.int32(230),
    sumMax = cms.double(20.0),
    sumMin = cms.double(-3.0),
    triggerEvent = cms.InputTag("hltTriggerSummaryAOD"),
    use2DHistos = cms.bool(False),
    useTriggerFiltering = cms.bool(False),
    validMuonHits = cms.int32(1),
    validPixHits = cms.int32(1),
    xBin = cms.int32(300),
    xMax = cms.double(60),
    xMin = cms.double(-60),
    yBin = cms.int32(300),
    yMax = cms.double(60),
    yMin = cms.double(-60),
    zBin = cms.int32(400),
    zMax = cms.double(200),
    zMin = cms.double(-200)
)


process.write_ALCARECO = cms.OutputModule("PoolOutputModule",
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBias', 
            'pathALCARECOTkAlMinBiasHI')
    ),
    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('ALCARECO'),
        filterName = cms.untracked.string('StreamALCACombined')
    ),
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    fileName = cms.untracked.string('output_inALCARECO.root'),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep edmTriggerResults_*_*_*', 
        'drop *_MEtoEDMConverter_*_*', 
        'keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_ALCARECOTkAlMinBiasHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*', 
        'keep *_offlineBeamSpot_*_*'),
    splitLevel = cms.untracked.int32(0)
)


process.write_FEVT = cms.OutputModule("PoolOutputModule",
    dataset = cms.untracked.PSet(
        dataTier = cms.untracked.string('FEVT'),
        filterName = cms.untracked.string('')
    ),
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    fileName = cms.untracked.string(options.outputFile),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)


process.regionalCosmicTracksSeq = cms.Sequence(process.regionalCosmicTrackerSeedingLayers+process.regionalCosmicTrackerSeeds+process.regionalCosmicCkfTrackCandidates+process.regionalCosmicTracks)


process.ALCARECOTkAlMinBiasHIDQM = cms.Sequence(process.ALCARECOTkAlMinBiasHITrackingDQM+process.ALCARECOTkAlMinBiasHITkAlDQM)


process.cosmicsMuonIdSequence = cms.Sequence(process.cosmicsVetoSeeds+process.cosmicsVetoTrackCandidates+process.cosmicsVetoTracksRaw+process.cosmicsVetoTracks+process.cosmicsVeto)


process.seqALCARECOHcalCalDijets = cms.Sequence(process.dijetsHLT+process.DiJetsProd)


process.l1TriggerClients = cms.Sequence(process.l1tGctClient+process.l1tDttfClient+process.l1tCsctfClient+process.l1tRpctfClient+process.l1tGmtClient+process.l1tOccupancyClient+process.l1tEventInfoClient)


process.seqALCARECOMuAlBeamHalo = cms.Sequence(process.ALCARECOMuAlBeamHaloHLT+process.ALCARECOMuAlBeamHaloDCSFilter+process.ALCARECOMuAlBeamHalo)


process.seqALCARECOSiStripPCLHistos = cms.Sequence(process.MEtoEDMConvertSiStrip)


process.ALCARECOTkAlCosmicsCTF0TDQM = cms.Sequence(process.ALCARECOTkAlCosmicsCTF0TTrackingDQM+process.ALCARECOTkAlCosmicsCTF0TTkAlDQM)


process.hiRegitMuonInitialStep = cms.Sequence(process.hiRegitMuInitialStepSeedLayers+process.hiRegitMuInitialStepSeeds+process.hiRegitMuInitialStepTrackCandidates+process.hiRegitMuInitialStepTracks+process.hiRegitMuInitialStepSelector)


process.ak4CaloL2L3L6CorrectorChain = cms.Sequence(process.ak4CaloL2RelativeCorrector+process.ak4CaloL3AbsoluteCorrector+process.ak4CaloL6SLBCorrector+process.ak4CaloL2L3L6Corrector)


process.seqL1TriggerObjHTMQualityTests = cms.Sequence(process.l1TriggerObjHTMQualityTests)


process.seqALCARECOHcalCalHO = cms.Sequence(process.ALCARECOHcalCalHOHLT+process.hoCalibProducer)


process.seqL1EmulatorObjCenJetQualityTests = cms.Sequence(process.l1EmulatorObjCenJetQualityTests)


process.dtSources = cms.Sequence(process.dtDataIntegrityUnpacker+process.DTDataIntegrityTask+process.dtDCSByLumiMonitor+process.dtRunConditionVar+process.dtSegmentAnalysisMonitor+process.dtResolutionAnalysisMonitor+process.dtEfficiencyMonitor+process.dtTriggerEfficiencyMonitor+process.dqmInfoDT)


process.ak4L1JPTOffsetCorrectorChain = cms.Sequence(process.ak4CaloL1OffsetCorrector+process.ak4L1JPTOffsetCorrector)


process.endOfProcess_withComparison = cms.Sequence(process.MEtoEDMConverter+process.MEtoMEComparitor)


process.dtlocalreco = cms.Sequence(process.dt1DRecHits+process.dt4DSegments+process.dt1DCosmicRecHits+process.dt4DCosmicSegments)


process.seqL1EmulatorObjETMQualityTests = cms.Sequence(process.l1EmulatorObjETMQualityTests)


process.ALCARECODTCalibSynchDQM = cms.Sequence(process.dtPreCalibrationTaskAlca+process.dtAlcaResolutionMonitor+process.dtTriggerSynchMonitor)


process.HLTTauDQMOfflineCertification = cms.Sequence(process.hltTauOfflineCertification)


process.ALCARECOTkAlCosmicsCTFDQM = cms.Sequence(process.ALCARECOTkAlCosmicsCTFTrackingDQM+process.ALCARECOTkAlCosmicsCTFTkAlDQM)


process.muonSeededStepExtra = cms.Sequence(process.muonSeededTracksInOutSelector+process.muonSeededTracksOutInSelector)


process.cosmictracksP5Top = cms.Sequence(process.cosmicseedfinderP5Top+process.cosmicCandidateFinderP5Top+process.cosmictrackfinderP5Top)


process.muonQualityTests = cms.Sequence(process.muonSourcesQualityTests+process.muTrackResidualsTest+process.effPlotter_Loose+process.effPlotter_Medium+process.effPlotter_Tight+process.muRecoTest+process.muonClientsQualityTests+process.muonComp2RefQualityTests+process.muonComp2RefKolmoQualityTests+process.muonTestSummary)


process.pixeltrackerlocalreco = cms.Sequence(process.siPixelClustersPreSplitting+process.siPixelRecHitsPreSplitting)


process.seqALCARECOTkAlZMuMu = cms.Sequence(process.ALCARECOTkAlZMuMuHLT+process.ALCARECOTkAlZMuMuDCSFilter+process.ALCARECOTkAlZMuMuGoodMuons+process.ALCARECOTkAlZMuMuRelCombIsoMuons+process.ALCARECOTkAlZMuMu)


process.deCsc = cms.Sequence(process.valCscTriggerPrimitiveDigis)


process.photonSequence = cms.Sequence(process.photonCore+process.photons)


process.alcaBeamSpot = cms.Sequence(process.alcaBeamSpotProducer)


process.PixelPairStep = cms.Sequence(process.pixelPairStepClusters+process.pixelPairStepSeedLayers+process.pixelPairStepSeeds+process.pixelPairStepTrackCandidates+process.pixelPairStepTracks+process.pixelPairStepSelector)


process.seqL1TriggerCsctpgQualityTests = cms.Sequence(process.l1TriggerCsctpgQualityTests)


process.bestHiVertex = cms.Sequence(process.hiBestAdaptiveVertex+process.hiSelectedVertex)


process.seqALCARECOEcalCalEtaCalib = cms.Sequence(process.ecaletaCalibHLT+process.ecalEtaCorrected)


process.seqL1EmulatorCsctpgQualityTests = cms.Sequence(process.l1EmulatorCsctpgQualityTests)


process.ak4PFCHSL2L3CorrectorChain = cms.Sequence(process.ak4PFCHSL2RelativeCorrector+process.ak4PFCHSL3AbsoluteCorrector+process.ak4PFCHSL2L3Corrector)


process.ALCARECOTkAlCosmicsRegional0TDQM = cms.Sequence(process.ALCARECOTkAlCosmicsRegional0TTrackingDQM+process.ALCARECOTkAlCosmicsRegional0TTkAlDQM)


process.trackingMonitorHLT = cms.Sequence(process.pixelTracksMonitoringHLT+process.iter0HPTracksMonitoringHLT+process.iterHLTTracksMonitoringHLT)


process.particleFlowTrackWithDisplacedVertex = cms.Sequence(process.pfTrack+process.pfConversions+process.pfV0+process.particleFlowDisplacedVertexCandidate+process.particleFlowDisplacedVertex+process.pfDisplacedTrackerVertex+process.pfTrackElec)


process.ak4PFCHSL1FastL2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFCHSL1FastjetCorrector+process.ak4PFCHSL2RelativeCorrector+process.ak4PFCHSL3AbsoluteCorrector+process.ak4PFCHSResidualCorrector+process.ak4PFCHSL1FastL2L3ResidualCorrector)


process.seqALCARECOTkAlBeamHalo = cms.Sequence(process.ALCARECOTkAlBeamHaloDCSFilter+process.ALCARECOTkAlBeamHalo)


process.pfSortByTypeSequence = cms.Sequence(process.pfAllNeutralHadrons+process.pfAllChargedHadrons+process.pfAllPhotons+process.pfAllChargedParticles+process.pfPileUpAllChargedParticles+process.pfAllNeutralHadronsAndPhotons)


process.hiTracksWithQuality = cms.Sequence(process.hiInitialStepSelector)


process.seqALCARECOPromptCalibProd = cms.Sequence(process.ALCARECOTkAlMinBiasFilterForBS+process.ALCARECOHltFilterForBS+process.alcaBeamSpotProducer)


process.dtlocalreco_with_2DSegments = cms.Sequence(process.dt1DRecHits+process.dt2DSegments+process.dt4DSegments+process.dt1DCosmicRecHits+process.dt2DCosmicSegments+process.dt4DCosmicSegments)


process.particleFlowTrackWithV0 = cms.Sequence(process.pfTrack+process.pfTrackElec+process.pfV0)


process.hiRegitMuonPixelPairStep = cms.Sequence(process.hiRegitMuPixelPairStepClusters+process.hiRegitMuPixelPairStepSeedLayers+process.hiRegitMuPixelPairStepSeeds+process.hiRegitMuPixelPairStepTrackCandidates+process.hiRegitMuPixelPairStepTracks+process.hiRegitMuPixelPairStepSelector)


process.CastorFullReco = cms.Sequence(process.CastorTowerReco+process.ak5CastorJets+process.ak5CastorJetID+process.ak7CastorJets+process.ak7CastorJetID)


process.ak4JPTL1FastL2L3ResidualCorrectorChain = cms.Sequence(process.ak4JPTL1FastjetCorrector+process.ak4JPTL2RelativeCorrector+process.ak4JPTL3AbsoluteCorrector+process.ak4JPTResidualCorrector+process.ak4JPTL1FastL2L3ResidualCorrector)


process.ctfTracksCombinedSeeds = cms.Sequence(process.MixedLayerPairs+process.globalSeedsFromPairsWithVertices+process.PixelLayerTriplets+process.globalSeedsFromTriplets+process.globalCombinedSeeds+process.ckfTrackCandidatesCombinedSeeds+process.ctfCombinedSeeds)


process.electronGsfTrackingHi = cms.Sequence(process.ecalDrivenElectronSeeds+process.electronCkfTrackCandidates+process.electronGsfTracks)


process.muonRecoHighLevelPbPb = cms.Sequence(process.muons)


process.seqALCARECODtCalibHI = cms.Sequence(process.ALCARECODtCalibHIHLTFilter+process.dt4DSegmentsNoWire)


process.endOfProcess = cms.Sequence(process.MEtoEDMConverter)


process.gedGsfElectronSequenceTmp = cms.Sequence(process.gedGsfElectronCores+process.gedGsfElectronsTmp)


process.seqL1EmulatorHcalQualityTests = cms.Sequence(process.l1EmulatorHcalQualityTests)


process.ecal_dqm_source_offline = cms.Sequence(process.dqmInfoEcal+process.ecalMonitorTask+process.ecalFEDMonitor+process.ecalzmasstask)


process.ak4CaloL1L2L3CorrectorChain = cms.Sequence(process.ak4CaloL1OffsetCorrector+process.ak4CaloL2RelativeCorrector+process.ak4CaloL3AbsoluteCorrector+process.ak4CaloL1L2L3Corrector)


process.trackingMonitorHLTall = cms.Sequence(process.pixelTracksMonitoringHLT+process.iter0TracksMonitoringHLT+process.iter2HPTracksMonitoringHLT+process.iter1TracksMonitoringHLT+process.iter1HPTracksMonitoringHLT+process.iter2TracksMonitoringHLT+process.iter2HPTracksMonitoringHLT+process.iterHLTTracksMonitoringHLT)


process.muonSelectionTypeSequence = cms.Sequence(process.muidTrackerMuonArbitrated+process.muidAllArbitrated+process.muidGlobalMuonPromptTight+process.muidTMLastStationLoose+process.muidTMLastStationTight+process.muidTM2DCompatibilityLoose+process.muidTM2DCompatibilityTight+process.muidTMOneStationLoose+process.muidTMOneStationTight+process.muidTMLastStationOptimizedLowPtLoose+process.muidTMLastStationOptimizedLowPtTight+process.muidGMTkChiCompatibility+process.muidGMStaChiCompatibility+process.muidGMTkKinkTight+process.muidTMLastStationAngLoose+process.muidTMLastStationAngTight+process.muidTMOneStationAngLoose+process.muidTMOneStationAngTight+process.muidRPCMuLoose)


process.HLTTauDQMOfflineQuality = cms.Sequence(process.hltTauOfflineQualityTests)


process.ak4JPTL2L3CorrectorChain = cms.Sequence(process.ak4L1JPTOffsetCorrectorChain+process.ak4JPTL2RelativeCorrector+process.ak4JPTL3AbsoluteCorrector+process.ak4JPTL2L3Corrector)


process.pfNoPileUpSequence = cms.Sequence(process.pfPileUp+process.pfNoPileUp)


process.seqALCARECOTkAlCosmicsCTF0T = cms.Sequence(process.ALCARECOTkAlCosmicsCTF0T)


process.seqALCARECOSiStripCalMinBias = cms.Sequence(process.ALCARECOSiStripCalMinBiasHLT+process.HLTPixelActivityFilterForSiStripCalMinBias+process.DCSStatusForSiStripCalMinBias+process.ALCARECOSiStripCalMinBias)


process.seqL1EmulatorObjMuQualityTests = cms.Sequence(process.l1EmulatorObjMuQualityTests)


process.trackerlocalrecoBottom = cms.Sequence(process.siPixelClustersBottom+process.siPixelRecHitsBottom+process.siStripClustersBottom+process.siStripMatchedRecHitsBottom+process.topBottomClusterInfoProducerBottom)


process.seqALCARECOTkAlCosmicsCosmicTF = cms.Sequence(process.ALCARECOTkAlCosmicsCosmicTF)


process.hiRegitMuonSeededStepExtra = cms.Sequence(process.hiRegitMuonSeededTracksInOutSelector+process.hiRegitMuonSeededTracksOutInSelector)


process.seqL1EmulatorObjHfRingEtSumsQualityTests = cms.Sequence(process.l1EmulatorObjHfRingEtSumsQualityTests)


process.MixedTripletStep = cms.Sequence(process.chargeCut2069Clusters+process.mixedTripletStepClusters+process.mixedTripletStepSeedLayersA+process.mixedTripletStepSeedsA+process.mixedTripletStepSeedLayersB+process.mixedTripletStepSeedsB+process.mixedTripletStepSeeds+process.mixedTripletStepTrackCandidates+process.mixedTripletStepTracks+process.mixedTripletStepSelector+process.mixedTripletStep)


process.ALCARECOTkAlCosmicsRegionalDQM = cms.Sequence(process.ALCARECOTkAlCosmicsRegionalTrackingDQM+process.ALCARECOTkAlCosmicsRegionalTkAlDQM)


process.l1ExtraDqmSeq = cms.Sequence(process.dqmGctDigis+process.dqmGtDigis+process.dqmL1ExtraParticles+process.l1ExtraDQM)


process.hcalMonitorTasksOnlineSequence = cms.Sequence(process.hcalDigiMonitor+process.hcalHotCellMonitor+process.hcalDeadCellMonitor+process.hcalRecHitMonitor+process.hcalBeamMonitor+process.hcalRawDataMonitor+process.hcalTrigPrimMonitor+process.hcalCoarsePedestalMonitor+process.hcalDetDiagNoiseMonitor+process.hcalDetDiagTimingMonitor+process.hcalNZSMonitor)


process.hiRegitMuonSeededStepCore = cms.Sequence(process.hiRegitMuonSeededSeedsInOut+process.hiRegitMuonSeededTrackCandidatesInOut+process.hiRegitMuonSeededTracksInOut+process.hiRegitMuonSeededSeedsOutIn+process.hiRegitMuonSeededTrackCandidatesOutIn+process.hiRegitMuonSeededTracksOutIn)


process.gedElectronPFIsolationDepositsSequence = cms.Sequence(process.gedElPFIsoDepositCharged+process.gedElPFIsoDepositChargedAll+process.gedElPFIsoDepositGamma+process.gedElPFIsoDepositNeutral+process.gedElPFIsoDepositPU)


process.RawToDigi_noTk = cms.Sequence(process.csctfDigis+process.dttfDigis+process.gctDigis+process.gtDigis+process.gtEvmDigis+process.ecalDigis+process.ecalPreshowerDigis+process.hcalDigis+process.muonCSCDigis+process.muonDTDigis+process.muonRPCDigis+process.castorDigis+process.scalersRawToDigi+process.tcdsDigis)


process.siPixelOfflineDQM_phase1_source = cms.Sequence(process.SiPixelRawDataErrorSource_phase1+process.SiPixelDigiSource_phase1+process.SiPixelRecHitSource_phase1+process.SiPixelClusterSource_phase1+process.SiPixelTrackResidualSource_phase1+process.SiPixelHitEfficiencySource_phase1+process.dqmInfo)


process.ctftracksP5Bottom = cms.Sequence(process.combinatorialcosmicseedingtripletsP5Bottom+process.combinatorialcosmicseedingpairsTOBP5Bottom+process.combinatorialcosmicseedingpairsTECposP5Bottom+process.combinatorialcosmicseedingpairsTECnegP5Bottom+process.combinatorialcosmicseedfinderP5Bottom+process.simpleCosmicBONSeedingLayersBottom+process.simpleCosmicBONSeedsBottom+process.combinedP5SeedsForCTFBottom+process.ckfTrackCandidatesP5Bottom+process.ctfWithMaterialTracksP5Bottom)


process.L1Reco = cms.Sequence(process.l1extraParticles+process.l1GtTriggerMenuLite+process.conditionsInEdm+process.l1L1GtObjectMap)


process.siPixelOfflineDQM_cosmics_source = cms.Sequence(process.SiPixelHLTSource+process.SiPixelRawDataErrorSource+process.SiPixelDigiSource+process.SiPixelRecHitSource+process.SiPixelClusterSource+process.SiPixelTrackResidualSource_Cosmics+process.dqmInfo)


process.hiMixedTripletStep = cms.Sequence(process.hiMixedTripletClusters+process.hiMixedTripletSeedLayersA+process.hiMixedTripletSeedsA+process.hiMixedTripletSeedLayersB+process.hiMixedTripletSeedsB+process.hiMixedTripletSeeds+process.hiMixedTripletTrackCandidates+process.hiMixedTripletGlobalPrimTracks+process.hiMixedTripletStepSelector)


process.gedPhotonSequence = cms.Sequence(process.gedPhotons)


process.seqL1TriggerGtQualityTests = cms.Sequence(process.l1TriggerGtQualityTests)


process.ak4PFCHSL1L2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFCHSL1OffsetCorrector+process.ak4PFCHSL2RelativeCorrector+process.ak4PFCHSL3AbsoluteCorrector+process.ak4PFCHSResidualCorrector+process.ak4PFCHSL1L2L3ResidualCorrector)


process.hltMuonOfflineAnalyzers = cms.Sequence(process.globalAnalyzer+process.trackerAnalyzer+process.tightAnalyzer+process.looseAnalyzer)


process.seqL1TriggerRctQualityTests = cms.Sequence(process.l1TriggerRctQualityTests)


process.ak4PFL2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFL2RelativeCorrector+process.ak4PFL3AbsoluteCorrector+process.ak4PFResidualCorrector+process.ak4PFL2L3ResidualCorrector)


process.doAlldEdXEstimatorsCTF = cms.Sequence(process.dedxTruncated40CTF+process.dedxHitInfoCTF+process.dedxHarmonic2CTF)


process.ALCARECOTkAlCosmicsCosmicTFDQM = cms.Sequence(process.ALCARECOTkAlCosmicsCosmicTFTrackingDQM+process.ALCARECOTkAlCosmicsCosmicTFTkAlDQM)


process.rpcefficiency = cms.Sequence(process.rpcEfficiency)


process.seqALCARECOMuAlGlobalCosmicsInCollisions = cms.Sequence(process.ALCARECOMuAlGlobalCosmicsInCollisionsHLT+process.ALCARECOMuAlGlobalCosmicsInCollisionsDCSFilter+process.ALCARECOMuAlGlobalCosmicsInCollisions)


process.particleBasedIsolationSequence = cms.Sequence(process.particleBasedIsolation)


process.hotlineDQMSequence = cms.Sequence(process.hotlineDQM_HT+process.hotlineDQM_HT_Tight+process.hotlineDQM_Photon+process.hotlineDQM_Photon_Tight+process.hotlineDQM_Muon+process.hotlineDQM_Muon_Tight+process.hotlineDQM_MET+process.hotlineDQM_MET_Tight+process.hotlineDQM_PFMET+process.hotlineDQM_PFMET_Tight)


process.seqALCARECOSiStripCalZeroBias = cms.Sequence(process.ALCARECOSiStripCalZeroBiasHLT+process.HLTPixelActivityFilterForSiStripCalZeroBias+process.DCSStatusForSiStripCalZeroBias+process.calZeroBiasClusters+process.APVPhases+process.consecutiveHEs)


process.hiDetachedTripletStep = cms.Sequence(process.hiDetachedTripletStepClusters+process.hiDetachedTripletStepSeedLayers+process.hiDetachedTripletStepPixelTracks+process.hiDetachedTripletStepSeeds+process.hiDetachedTripletStepTrackCandidates+process.hiDetachedTripletStepTracks+process.hiDetachedTripletStepSelector+process.hiDetachedTripletStepQual)


process.seqALCARECOTkAlMuonIsolatedHI = cms.Sequence(process.ALCARECOTkAlMuonIsolatedHIHLT+process.ALCARECOTkAlMuonIsolatedHIDCSFilter+process.ALCARECOTkAlMuonIsolatedHIGoodMuons+process.ALCARECOTkAlMuonIsolatedHIRelCombIsoMuons+process.ALCARECOTkAlMuonIsolatedHI)


process.ak4PFCHSL1FastL2L3CorrectorChain = cms.Sequence(process.ak4PFCHSL1FastjetCorrector+process.ak4PFCHSL2RelativeCorrector+process.ak4PFCHSL3AbsoluteCorrector+process.ak4PFCHSL1FastL2L3Corrector)


process.hcalMonitorTasksTestSequence = cms.Sequence(process.hcalDigiMonitor+process.hcalHotCellMonitor+process.hcalDeadCellMonitor+process.hcalRecHitMonitor+process.hcalBeamMonitor+process.hcalRawDataMonitor+process.hcalTrigPrimMonitor+process.hcalNZSMonitor+process.hcalLSbyLSMonitor)


process.seqALCARECOTkAlMinBias = cms.Sequence(process.ALCARECOTkAlMinBiasHLT+~process.ALCARECOTkAlMinBiasNOTHLT+process.ALCARECOTkAlMinBiasDCSFilter+process.ALCARECOTkAlMinBias)


process.caloTowersRec = cms.Sequence(process.towerMaker+process.towerMakerWithHO)


process.TrackMonDQMTier0_hi = cms.Sequence(process.TrackMon_hi)


process.seqL1TriggerObjIsoEGQualityTests = cms.Sequence(process.l1TriggerObjIsoEGQualityTests)


process.seqL1TriggerObjTauJetQualityTests = cms.Sequence(process.l1TriggerObjTauJetQualityTests)


process.seqALCARECOPromptCalibProdSiPixelAli = cms.Sequence(process.ALCARECOTkAlMinBiasFilterForSiPixelAli+process.lsNumberFilter+process.offlineBeamSpot+process.SiPixelAliHighPuritySelector+process.SiPixelAliTrackRefitter0+process.SiPixelAliTrackerTrackHitFilter+process.SiPixelAliTrackFitter+process.SiPixelAliTrackSelector+process.SiPixelAliTrackRefitter1+process.SiPixelAliMilleAlignmentProducer+process.SiPixelAliMillePedeFileConverter)


process.pfClusteringPS = cms.Sequence(process.particleFlowRecHitPS+process.particleFlowClusterPS)


process.l1TriggerStage1Clients = cms.Sequence(process.l1tStage1Layer2Client+process.l1tDttfClient+process.l1tCsctfClient+process.l1tRpctfClient+process.l1tGmtClient+process.l1tOccupancyClient+process.l1tTestsSummary+process.l1tEventInfoClient)


process.generalTracksSequence = cms.Sequence(process.duplicateTrackCandidates+process.mergedDuplicateTracks+process.duplicateTrackSelector+process.generalTracks)


process.ak4PFCHSL2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFCHSL2RelativeCorrector+process.ak4PFCHSL3AbsoluteCorrector+process.ak4PFCHSResidualCorrector+process.ak4PFCHSL2L3ResidualCorrector)


process.seqL1EmulatorObjTauJetQualityTests = cms.Sequence(process.l1EmulatorObjTauJetQualityTests)


process.pfClusteringHBHEHF = cms.Sequence(process.particleFlowRecHitHBHE+process.particleFlowRecHitHF+process.particleFlowClusterHBHE+process.particleFlowClusterHF+process.particleFlowClusterHCAL)


process.deStage1Gt = cms.Sequence(process.valStage1GtDigis)


process.seqL1EmulatorRpcQualityTests = cms.Sequence(process.l1EmulatorRpcQualityTests)


process.ALCARECOTkAlMinBiasDQM = cms.Sequence(process.ALCARECOTkAlMinBiasTrackingDQM+process.ALCARECOTkAlMinBiasTkAlDQM)


process.electronSeeds = cms.Sequence(process.trackerDrivenElectronSeeds+process.ecalDrivenElectronSeeds+process.electronMergedSeeds)


process.HILowLumiHLTOfflineSourceSequence = cms.Sequence(process.HILowLumiHLTOfflineSource)


process.seqL1TriggerObjForJetQualityTests = cms.Sequence(process.l1TriggerObjForJetQualityTests)


process.seqALCARECOHcalCalGammaJet = cms.Sequence(process.gammajetHLT+process.GammaJetProd)


process.seqL1EmulatorDttfQualityTests = cms.Sequence(process.l1EmulatorDttfQualityTests)


process.muIsoDeposits_ParamGlobalMuonsOld = cms.Sequence(process.muParamGlobalIsoDepositGsTk+process.muParamGlobalIsoDepositCalEcal+process.muParamGlobalIsoDepositCalHcal)


process.METDQMAnalyzerSequence = cms.Sequence(process.caloMetDQMAnalyzer+process.pfMetDQMAnalyzer+process.pfMetT1DQMAnalyzer)


process.deCsctfTracks = cms.Sequence(process.valCsctfTrackDigis)


process.ALCARECOTkAlJpsiMuMuHIDQM = cms.Sequence(process.ALCARECOTkAlJpsiMuMuHITrackingDQM+process.ALCARECOTkAlJpsiMuMuHITkAlDQM)


process.cosmictracksP5 = cms.Sequence(process.cosmicseedfinderP5+process.cosmicCandidateFinderP5+process.cosmictrackfinderCosmics+process.cosmictrackfinderP5+process.cosmicTrackSplitter+process.splittedTracksP5)


process.gsfEcalDrivenElectronSequence = cms.Sequence(process.ecalDrivenGsfElectronCores+process.ecalDrivenGsfElectrons)


process.DetachedTripletStep = cms.Sequence(process.detachedTripletStepClusters+process.detachedTripletStepSeedLayers+process.detachedTripletStepSeeds+process.detachedTripletStepTrackCandidates+process.detachedTripletStepTracks+process.detachedTripletStepSelector+process.detachedTripletStep)


process.seqL1TriggerObjGtExternalQualityTests = cms.Sequence(process.l1TriggerObjGtExternalQualityTests)


process.seqL1EmulatorObjHfBitCountsQualityTests = cms.Sequence(process.l1EmulatorObjHfBitCountsQualityTests)


process.pfClusteringHO = cms.Sequence(process.particleFlowRecHitHO+process.particleFlowClusterHO)


process.standAloneMuonSeeds = cms.Sequence(process.ancientMuonSeed)


process.seqL1TriggerObjETTQualityTests = cms.Sequence(process.l1TriggerObjETTQualityTests)


process.SiStripDQMTier0_hi = cms.Sequence(process.APVPhases+process.consecutiveHEs+process.siStripFEDCheck+process.siStripFEDMonitor+process.SiStripMonitorDigi+process.SiStripMonitorCluster+process.SiStripMonitorTrack_hi+process.MonitorTrackResiduals_hi)


process.ak4CaloL1FastL2L3ResidualCorrectorChain = cms.Sequence(process.ak4CaloL1FastjetCorrector+process.ak4CaloL2RelativeCorrector+process.ak4CaloL3AbsoluteCorrector+process.ak4CaloResidualCorrector+process.ak4CaloL1FastL2L3ResidualCorrector)


process.rpcTier0Source = cms.Sequence(process.rpcdigidqm+process.rpcrechitprobability+process.rpcDcsInfo+process.rpcefficiency+process.rpcEventInfo+process.rpcFEDIntegrity)


process.muonTrackAnalyzers = cms.Sequence(process.MonitorTrackSTAMuons+process.MonitorTrackGLBMuons)


process.seqALCARECOHcalCalIsoTrk = cms.Sequence(process.isoHLT+process.IsoProd+process.TkAlIsoProd)


process.hiRegitMuonPixelLessStep = cms.Sequence(process.hiRegitMuPixelLessStepClusters+process.hiRegitMuPixelLessStepSeedLayers+process.hiRegitMuPixelLessStepSeeds+process.hiRegitMuPixelLessStepTrackCandidates+process.hiRegitMuPixelLessStepTracks+process.hiRegitMuPixelLessStepSelector)


process.combinatorialcosmicseedinglayersP5 = cms.Sequence(process.combinatorialcosmicseedingtripletsP5+process.combinatorialcosmicseedingpairsTOBP5+process.combinatorialcosmicseedingpairsTECposP5+process.combinatorialcosmicseedingpairsTECnegP5)


process.l1tStage1Layer2Seq = cms.Sequence(process.l1tStage1Layer2)


process.preshowerClusteringSequence = cms.Sequence(process.correctedEndcapSuperClustersWithPreshower+process.preshowerClusterShape)


process.ValL1MuTriggerPrimitives = cms.Sequence(process.valCscTriggerPrimitiveDigis+process.valDtTriggerPrimitiveDigis)


process.ak4JPTL2L3ResidualCorrectorChain = cms.Sequence(process.ak4L1JPTOffsetCorrectorChain+process.ak4JPTL2RelativeCorrector+process.ak4JPTL3AbsoluteCorrector+process.ak4JPTResidualCorrector+process.ak4JPTL2L3ResidualCorrector)


process.seqL1TriggerHcalQualityTests = cms.Sequence(process.l1TriggerHcalQualityTests)


process.photonPFIsolationDepositsSequence = cms.Sequence(process.phPFIsoDepositCharged+process.phPFIsoDepositChargedAll+process.phPFIsoDepositGamma+process.phPFIsoDepositNeutral+process.phPFIsoDepositPU)


process.METDQMAnalyzerSequenceMiniAOD = cms.Sequence(process.pfMetDQMAnalyzerMiniAOD)


process.RawToDigi_woGCT = cms.Sequence(process.csctfDigis+process.dttfDigis+process.gtDigis+process.gtEvmDigis+process.siPixelDigis+process.siStripDigis+process.ecalDigis+process.ecalPreshowerDigis+process.hcalDigis+process.muonCSCDigis+process.muonDTDigis+process.muonRPCDigis+process.castorDigis+process.scalersRawToDigi+process.tcdsDigis)


process.dqmPhysicsHI = cms.Sequence(process.bphysicsOniaDQMHI+process.CentralityDQM)


process.seqALCARECOTkAlCosmicsCosmicTF0T = cms.Sequence(process.ALCARECOTkAlCosmicsCosmicTF0T)


process.seqALCARECOTkAlCosmicsCTF = cms.Sequence(process.ALCARECOTkAlCosmicsCTF)


process.L1Reco_L1Extra = cms.Sequence(process.l1extraParticles)


process.ctfTracksPixelLess = cms.Sequence(process.pixelLessLayerPairs4PixelLessTracking+process.globalPixelLessSeeds+process.ckfTrackCandidatesPixelLess+process.ctfPixelLess)


process.seqALCARECOMuAlOverlaps = cms.Sequence(process.ALCARECOMuAlOverlapsHLT+process.ALCARECOMuAlOverlapsDCSFilter+process.ALCARECOMuAlOverlapsMuonSelector+process.ALCARECOMuAlOverlaps)


process.ak4PFCHSL1L2L3CorrectorChain = cms.Sequence(process.ak4PFCHSL1OffsetCorrector+process.ak4PFCHSL2RelativeCorrector+process.ak4PFCHSL3AbsoluteCorrector+process.ak4PFCHSL1L2L3Corrector)


process.seqALCARECOTkAlCosmicsInCollisions = cms.Sequence(process.ALCARECOTkAlCosmicsInCollisionsHLT+process.ALCARECOTkAlCosmicsInCollisionsDCSFilter+process.ALCARECOTkAlCosmicsInCollisions)


process.ALCARECOTkAlUpsilonMuMuDQM = cms.Sequence(process.ALCARECOTkAlUpsilonMuMuTrackingDQM+process.ALCARECOTkAlUpsilonMuMuTkAlDQM)


process.pfGsfElectronMVASelectionSequence = cms.Sequence(process.electronsWithPresel+process.mvaElectrons)


process.seqALCARECOPromptCalibProdSiStrip = cms.Sequence()


process.deDt = cms.Sequence(process.valDtTriggerPrimitiveDigis)


process.seqL1TriggerDttpgQualityTests = cms.Sequence(process.l1TriggerDttpgQualityTests)


process.seqMultiplicityFilter = cms.Sequence(~process.LargeSiStripClusterEvents)


process.remuIsoDeposits_muons = cms.Sequence(process.remuIsoDepositTk+process.remuIsoDepositCalByAssociatorTowers+process.remuIsoDepositJets)


process.dqmPhysicsCosmics = cms.Sequence(process.bphysicsOniaDQM+process.ewkMuDQM+process.ewkElecDQM+process.ewkMuLumiMonitorDQM+process.qcdPhotonsCosmicDQM+process.topSingleMuonMediumDQM+process.topSingleElectronMediumDQM+process.singleTopMuonMediumDQM+process.singleTopElectronMediumDQM+process.DiMuonDQM+process.DiElectronDQM+process.ElecMuonDQM+process.susyDQM+process.HiggsDQM+process.ExoticaDQM+process.B2GDQM)


process.SiStripDQMTier0MinBias = cms.Sequence(process.APVPhases+process.consecutiveHEs+process.siStripFEDCheck+process.siStripFEDMonitor+process.SiStripMonitorDigi+process.SiStripMonitorClusterBPTX+process.SiStripMonitorTrackMB+process.MonitorTrackResiduals+process.dqmInfoSiStrip)


process.electronEDIsolationValuesSequence = cms.Sequence(process.elEDIsoValueCharged03+process.elEDIsoValueChargedAll03+process.elEDIsoValueGamma03+process.elEDIsoValueNeutral03+process.elEDIsoValuePU03+process.elEDIsoValueCharged04+process.elEDIsoValueChargedAll04+process.elEDIsoValueGamma04+process.elEDIsoValueNeutral04+process.elEDIsoValuePU04)


process.muIsoDeposits_muons = cms.Sequence(process.muIsoDepositTk+process.muIsoDepositCalByAssociatorTowers+process.muIsoDepositJets)


process.ak4PFL1FastL2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFL1FastjetCorrector+process.ak4PFL2RelativeCorrector+process.ak4PFL3AbsoluteCorrector+process.ak4PFResidualCorrector+process.ak4PFL1FastL2L3ResidualCorrector)


process.l1ExtraStage1DqmSeq = cms.Sequence(process.dqmGtDigis+process.dqmL1ExtraParticlesStage1+process.l1ExtraDQMStage1)


process.ALCARECOTkAlMuonIsolatedHIDQM = cms.Sequence(process.ALCARECOTkAlMuonIsolatedHITrackingDQM+process.ALCARECOTkAlMuonIsolatedHITkAlDQM)


process.seqL1EmulatorObjGtExternalQualityTests = cms.Sequence(process.l1EmulatorObjGtExternalQualityTests)


process.susyAnalyzer = cms.Sequence(process.susyDQM)


process.InitialStep = cms.Sequence(process.initialStepSeedLayers+process.initialStepSeeds+process.initialStepTrackCandidates+process.initialStepTracks+process.firstStepPrimaryVertices+process.initialStepSelector+process.initialStep)


process.seqL1EmulatorObjTechTrigQualityTests = cms.Sequence(process.l1EmulatorObjTechTrigQualityTests)


process.muonAnalyzer_noHLT = cms.Sequence(process.muonEnergyDepositAnalyzer+process.muonSeedsAnalyzer+process.muonRecoAnalyzer+process.glbMuonSegmentAnalyzer+process.staMuonSegmentAnalyzer+process.muonKinVsEtaAnalyzer+process.diMuonHistos+process.LooseMuonEfficiencyAnalyzer+process.MediumMuonEfficiencyAnalyzer+process.TightMuonEfficiencyAnalyzer+process.muonPFsequence)


process.seqALCARECOTkAlZMuMuHI = cms.Sequence(process.ALCARECOTkAlZMuMuHIHLT+process.ALCARECOTkAlZMuMuHIDCSFilter+process.ALCARECOTkAlZMuMuHIGoodMuons+process.ALCARECOTkAlZMuMuHIRelCombIsoMuons+process.ALCARECOTkAlZMuMuHI)


process.displacedTracksSequence = cms.Sequence(process.duplicateDisplacedTrackCandidates+process.mergedDuplicateDisplacedTracks+process.duplicateDisplacedTrackSelector+process.displacedTracks)


process.ak4JPTL1L2L3CorrectorChain = cms.Sequence(process.ak4L1JPTOffsetCorrectorChain+process.ak4JPTL2RelativeCorrector+process.ak4JPTL3AbsoluteCorrector+process.ak4JPTL1L2L3Corrector)


process.jetDQMAnalyzerSequenceHI = cms.Sequence(process.jetDQMAnalyzerIC5CaloHIUncleaned+process.jetDQMMatchAkPu3CaloAkVs3Calo+process.jetDQMMatchAkPu3PFAkVs3PF+process.jetDQMMatchAkPu3CaloAkPu3PF+process.jetDQMMatchAkVs3CaloAkVs3PF+process.jetDQMMatchAkPu4CaloAkVs4Calo+process.jetDQMMatchAkPu4PFAkVs4PF+process.jetDQMMatchAkPu4CaloAkPu4PF+process.jetDQMMatchAkVs4CaloAkVs4PF+process.jetDQMMatchAkPu5CaloAkVs5Calo+process.jetDQMMatchAkPu5PFAkVs5PF+process.jetDQMMatchAkPu5CaloAkPu5PF+process.jetDQMMatchAkVs5CaloAkVs5PF+process.jetDQMAnalyzerAkPU3Calo+process.jetDQMAnalyzerAkPU4Calo+process.jetDQMAnalyzerAkPU5Calo+process.jetDQMAnalyzerAkPU3PF+process.jetDQMAnalyzerAkPU4PF+process.jetDQMAnalyzerAkPU5PF+process.jetDQMAnalyzerAkVs3Calo+process.jetDQMAnalyzerAkVs4Calo+process.jetDQMAnalyzerAkVs5Calo+process.jetDQMAnalyzerAkVs3PF+process.jetDQMAnalyzerAkVs4PF+process.jetDQMAnalyzerAkVs5PF)


process.seqL1TriggerObjMuQualityTests = cms.Sequence(process.l1TriggerObjMuQualityTests)


process.HLTTauDQMOffline = cms.Sequence(process.TauRefProducer+process.hltTauOfflineMonitor_PFTaus+process.hltTauOfflineMonitor_Inclusive)


process.seqALCARECOTkAlCosmicsCosmicTFHLT = cms.Sequence(process.ALCARECOTkAlCosmicsHLT+process.seqALCARECOTkAlCosmicsCosmicTF)


process.ctftracksP5Top = cms.Sequence(process.combinatorialcosmicseedingtripletsP5Top+process.combinatorialcosmicseedingpairsTOBP5Top+process.combinatorialcosmicseedingpairsTECposP5Top+process.combinatorialcosmicseedingpairsTECnegP5Top+process.combinatorialcosmicseedfinderP5Top+process.simpleCosmicBONSeedingLayersTop+process.simpleCosmicBONSeedsTop+process.combinedP5SeedsForCTFTop+process.ckfTrackCandidatesP5Top+process.ctfWithMaterialTracksP5Top)


process.ak4CaloL2L3ResidualCorrectorChain = cms.Sequence(process.ak4CaloL2RelativeCorrector+process.ak4CaloL3AbsoluteCorrector+process.ak4CaloResidualCorrector+process.ak4CaloL2L3ResidualCorrector)


process.ak4PFL2L3CorrectorChain = cms.Sequence(process.ak4PFL2RelativeCorrector+process.ak4PFL3AbsoluteCorrector+process.ak4PFL2L3Corrector)


process.HLTTauPostSeq = cms.Sequence(process.HLTTauPostAnalysis_Inclusive+process.HLTTauPostAnalysis_Inclusive2+process.HLTTauPostAnalysis_PFTaus+process.HLTTauPostAnalysis_PFTaus2)


process.seqALCARECOMuAlZMuMu = cms.Sequence(process.ALCARECOMuAlZMuMuHLT+process.ALCARECOMuAlZMuMuDCSFilter+process.ALCARECOMuAlZMuMu)


process.pfNoPileUpJMESequence = cms.Sequence(process.goodOfflinePrimaryVertices+process.pfPileUpJME+process.pfNoPileUpJME)


process.islandClusteringSequence = cms.Sequence(process.islandBasicClusters+process.islandSuperClusters+process.correctedIslandBarrelSuperClusters+process.correctedIslandEndcapSuperClusters)


process.hcalLocalRecoSequence = cms.Sequence(process.hbhereco+process.hfreco+process.horeco+process.zdcreco)


process.seqL1TriggerGctQualityTests = cms.Sequence(process.l1TriggerGctQualityTests)


process.seqALCARECORpcCalHLT = cms.Sequence(process.ALCARECORpcCalHLTFilter)


process.ALCARECOMuAlGlobalCosmicsInCollisionsDQM = cms.Sequence(process.ALCARECOMuAlGlobalCosmicsInCollisionsTrackingDQM)


process.PixelLessStep = cms.Sequence(process.pixelLessStepClusters+process.pixelLessStepSeedLayers+process.pixelLessStepSeeds+process.pixelLessStepTrackCandidates+process.pixelLessStepTracks+process.pixelLessStepSelector+process.pixelLessStep)


process.csclocalreco = cms.Sequence(process.csc2DRecHits+process.cscSegments)


process.seqL1TriggerObjNoIsoEGQualityTests = cms.Sequence(process.l1TriggerObjNoIsoEGQualityTests)


process.hcalLocalRecoSequenceNZS = cms.Sequence(process.hbherecoMB+process.hfrecoMB+process.horecoMB)


process.ecalRecHitSequence = cms.Sequence(process.ecalRecHit+process.ecalCompactTrigPrim+process.ecalTPSkim+process.ecalPreshowerRecHit)


process.hiElectronSequence = cms.Sequence(process.electronGsfTrackingHi+process.pfTrack+process.pfTrackElec+process.gsfEcalDrivenElectronSequence)


process.alcaBeamMonitor = cms.Sequence(process.scalerBeamSpot+process.AlcaBeamMonitor)


process.ALCARECOMuAlOverlapsDQM = cms.Sequence(process.ALCARECOMuAlOverlapsTrackingDQM)


process.ALCARECOTkAlLASDQM = cms.Sequence(process.ALCARECOTkAlLASDigiDQM)


process.cscSources = cms.Sequence(process.dqmCSCClient)


process.particleFlowLinks = cms.Sequence(process.particleFlow+process.particleFlowPtrs+process.particleBasedIsolationSequence)


process.particleFlowTrackWithNuclear = cms.Sequence(process.pfTrack+process.pfTrackElec+process.pfNuclear)


process.seqL1EmulatorObjHTTQualityTests = cms.Sequence(process.l1EmulatorObjHTTQualityTests)


process.seqALCARECOTkAlCosmicsCosmicTF0THLT = cms.Sequence(process.ALCARECOTkAlCosmics0THLT+process.seqALCARECOTkAlCosmicsCosmicTF0T)


process.muIsoDeposits_ParamGlobalMuons = cms.Sequence(process.muParamGlobalIsoDepositTk+process.muParamGlobalIsoDepositCalByAssociatorTowers+process.muParamGlobalIsoDepositJets)


process.l1tGctSeq = cms.Sequence(process.l1tGct)


process.seqL1EmulatorRctQualityTests = cms.Sequence(process.l1EmulatorRctQualityTests)


process.electronAnalyzerSequence = cms.Sequence(process.mergedSuperClusters+process.dqmElectronGeneralAnalysis+process.dqmElectronAnalysisAllElectrons+process.dqmElectronAnalysisSelectionEt+process.dqmElectronAnalysisSelectionEtIso+process.dqmElectronTagProbeAnalysis)


process.SiStripDQMTier0 = cms.Sequence(process.APVPhases+process.consecutiveHEs+process.siStripFEDCheck+process.siStripFEDMonitor+process.SiStripMonitorDigi+process.SiStripMonitorClusterBPTX+process.SiStripMonitorTrackCommon+process.MonitorTrackResiduals+process.dqmInfoSiStrip)


process.es_dqm_source_offline = cms.Sequence(process.ecalPreshowerRawDataTask+process.ecalPreshowerFEDIntegrityTask+process.ecalPreshowerIntegrityTask+process.ecalPreshowerOccupancyTask+process.ecalPreshowerTrendTask)


process.l1TdeRCTSeq = cms.Sequence(process.l1TdeRCT+process.l1TdeRCTfromRCT)


process.muonSeededStepExtraDisplaced = cms.Sequence(process.muonSeededTracksInOutSelector+process.muonSeededTracksOutInDisplacedSelector)


process.ecalUncalibRecHitSequence = cms.Sequence(process.ecalMultiFitUncalibRecHit+process.ecalDetIdToBeRecovered)


process.ALCARECOTkAlCosmicsCosmicTF0TDQM = cms.Sequence(process.ALCARECOTkAlCosmicsCosmicTF0TTrackingDQM+process.ALCARECOTkAlCosmicsCosmicTF0TTkAlDQM)


process.hiPhotonCleaningSequence = cms.Sequence(process.hiSpikeCleanedSC+process.cleanPhotonCore+process.cleanPhotons)


process.pfClusteringECAL = cms.Sequence(process.particleFlowRecHitECAL+process.particleFlowClusterECALUncorrected+process.particleFlowClusterECAL)


process.topHLTriggerOfflineDQM = cms.Sequence(process.DiMuonHLTOfflineDQM+process.DiElectronHLTOfflineDQM+process.ElecMuonHLTOfflineDQM+process.topSingleMuonHLTOfflineDQM+process.topSingleElectronHLTOfflineDQM+process.SingleTopSingleMuonHLTOfflineDQM+process.SingleTopSingleElectronHLTOfflineDQM)


process.deGct = cms.Sequence(process.valGctDigis)


process.siPixelOfflineDQM_source_woTrack = cms.Sequence(process.SiPixelHLTSource+process.SiPixelRawDataErrorSource+process.SiPixelDigiSource+process.SiPixelRecHitSource+process.SiPixelClusterSource+process.dqmInfo)


process.striptrackerlocalreco = cms.Sequence(process.siStripZeroSuppression+process.siStripClusters+process.siStripMatchedRecHits)


process.trackerlocalrecoTop = cms.Sequence(process.siPixelClustersTop+process.siPixelRecHitsTop+process.siStripClustersTop+process.siStripMatchedRecHitsTop+process.topBottomClusterInfoProducerTop)


process.deRpc = cms.Sequence(process.valRpcTriggerDigis)


process.ak4JPTL1FastL2L3CorrectorChain = cms.Sequence(process.ak4JPTL1FastjetCorrector+process.ak4JPTL2RelativeCorrector+process.ak4JPTL3AbsoluteCorrector+process.ak4JPTL1FastL2L3Corrector)


process.hiMergedConformalPixelTracking = cms.Sequence(process.hiConformalPixelTracks+process.hiPixelOnlyStepSelector+process.hiHighPtStepSelector+process.hiGeneralAndPixelTracks)


process.SiStripDQMTier0Common = cms.Sequence(process.APVPhases+process.consecutiveHEs+process.siStripFEDCheck+process.siStripFEDMonitor+process.SiStripMonitorDigi+process.SiStripMonitorClusterBPTX+process.SiStripMonitorTrackCommon+process.dqmInfoSiStrip)


process.ALCARECOMuAlZMuMuDQM = cms.Sequence(process.ALCARECOMuAlZMuMuTrackingDQM+process.ALCARECOMuAlZMuMuMuAlDQM)


process.muonlocalreco = cms.Sequence(process.dtlocalreco+process.csclocalreco+process.rpcRecHits)


process.hiRegitMuonDetachedTripletStep = cms.Sequence(process.hiRegitMuDetachedTripletStepClusters+process.hiRegitMuDetachedTripletStepSeedLayers+process.hiRegitMuDetachedTripletStepSeeds+process.hiRegitMuDetachedTripletStepTrackCandidates+process.hiRegitMuDetachedTripletStepTracks+process.hiRegitMuDetachedTripletStepSelector)


process.hcalMonitorTasksCalibrationSequence = cms.Sequence(process.hcalRecHitMonitor+process.hcalRawDataMonitor+process.hcalDetDiagPedestalMonitor+process.hcalDetDiagLaserMonitor+process.hcalDetDiagNoiseMonitor+process.hcalDetDiagTimingMonitor)


process.hiPhotonSequence = cms.Sequence(process.photonSequence+process.photonIsolationHIProducer)


process.seqL1EmulatorGtQualityTests = cms.Sequence(process.l1EmulatorGtQualityTests)


process.seqL1EmulatorGctQualityTests = cms.Sequence(process.l1EmulatorGctQualityTests)


process.multi5x5PreshowerClusteringSequence = cms.Sequence(process.correctedMulti5x5SuperClustersWithPreshower+process.multi5x5PreshowerClusterShape+process.uncleanedOnlyMulti5x5SuperClustersWithPreshower+process.uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower)


process.l1tMonitorClientEndPathSeq = cms.Sequence(process.l1tsClient)


process.ak4PFL1FastL2L3L6CorrectorChain = cms.Sequence(process.ak4PFL1FastjetCorrector+process.ak4PFL2RelativeCorrector+process.ak4PFL3AbsoluteCorrector+process.ak4PFL6SLBCorrector+process.ak4PFL1FastL2L3L6Corrector)


process.muonSeededStepCore = cms.Sequence(process.muonSeededSeedsInOut+process.muonSeededTrackCandidatesInOut+process.muonSeededTracksInOut+process.muonSeededSeedsOutIn+process.muonSeededTrackCandidatesOutIn+process.muonSeededTracksOutIn)


process.ALCARECOMuAlBeamHaloDQM = cms.Sequence(process.ALCARECOMuAlBeamHaloTrackingDQM)


process.seqALCARECOTkAlJpsiMuMu = cms.Sequence(process.ALCARECOTkAlJpsiMuMuHLT+process.ALCARECOTkAlJpsiMuMuDCSFilter+process.ALCARECOTkAlJpsiMuMuGoodMuons+process.ALCARECOTkAlJpsiMuMu)


process.seqALCARECOTkAlCosmicsCTF0THLT = cms.Sequence(process.ALCARECOTkAlCosmics0THLT+process.seqALCARECOTkAlCosmicsCTF0T)


process.remuonIdProducerSequence = cms.Sequence(process.reglbTrackQual+process.remuons+process.recalomuons+process.remuonEcalDetIds+process.remuonShowerInformation)


process.l1EmulatorEventInfoClient = cms.Sequence(process.l1temuEventInfoClient)


process.dqmPhysics = cms.Sequence(process.bphysicsOniaDQM+process.ewkMuDQM+process.ewkElecDQM+process.ewkMuLumiMonitorDQM+process.qcdPhotonsDQM+process.topSingleMuonMediumDQM+process.topSingleElectronMediumDQM+process.singleTopMuonMediumDQM+process.singleTopElectronMediumDQM+process.DiMuonDQM+process.DiElectronDQM+process.ElecMuonDQM+process.susyDQM+process.HiggsDQM+process.ExoticaDQM+process.B2GDQM)


process.seqL1TriggerEcalQualityTests = cms.Sequence(process.l1TriggerEcalQualityTests)


process.jetDQMAnalyzerSequenceCosmics = cms.Sequence(process.jetDQMAnalyzerAk4CaloUncleaned)


process.electronEDIsolationDepositsSequence = cms.Sequence(process.elEDIsoDepositCharged+process.elEDIsoDepositChargedAll+process.elEDIsoDepositGamma+process.elEDIsoDepositNeutral+process.elEDIsoDepositPU)


process.METDQMAnalyzerSequenceCosmics = cms.Sequence(process.caloMetDQMAnalyzer)


process.muIsoDQM_seq = cms.Sequence(process.MuIsoDQM_trk+process.MuIsoDQM_sta+process.MuIsoDQM_glb)


process.seqL1EmulatorObjNoIsoEGQualityTests = cms.Sequence(process.l1EmulatorObjNoIsoEGQualityTests)


process.siPixelOfflineDQM_source = cms.Sequence(process.SiPixelHLTSource+process.SiPixelRawDataErrorSource+process.SiPixelDigiSource+process.SiPixelRecHitSource+process.SiPixelClusterSource+process.SiPixelTrackResidualSource+process.SiPixelHitEfficiencySource+process.dqmInfo)


process.doAlldEdXEstimatorsCosmicTF = cms.Sequence(process.dedxTruncated40CosmicTF+process.dedxHitInfoCosmicTF+process.dedxHarmonic2CosmicTF)


process.seqL1TriggerObjHfBitCountsQualityTests = cms.Sequence(process.l1TriggerObjHfBitCountsQualityTests)


process.electronGsfTracking = cms.Sequence(process.electronSeeds+process.electronCkfTrackCandidates+process.electronGsfTracks)


process.ALCARECOTkAlZMuMuHIDQM = cms.Sequence(process.ALCARECOTkAlZMuMuHITrackingDQM+process.ALCARECOTkAlZMuMuHITkAlDQM)


process.standalonemuontracking = cms.Sequence(process.standAloneMuonSeeds+process.standAloneMuons+process.refittedStandAloneMuons+process.displacedMuonSeeds+process.displacedStandAloneMuons)


process.deDttf = cms.Sequence(process.valDttfDigis)


process.hiRecoAllJets = cms.Sequence(process.caloTowersRec+process.caloTowers+process.iterativeConePu5CaloJets+process.ak1CaloJets+process.ak2CaloJets+process.ak3CaloJets+process.ak4CaloJets+process.ak5CaloJets+process.ak6CaloJets+process.ak7CaloJets+process.akPu1CaloJets+process.akPu2CaloJets+process.akPu3CaloJets+process.akPu4CaloJets+process.akPu5CaloJets+process.akPu6CaloJets+process.akPu7CaloJets+process.ktPu4CaloJets+process.ktPu6CaloJets+process.voronoiBackgroundCalo+process.akVs1CaloJets+process.akVs2CaloJets+process.akVs3CaloJets+process.akVs4CaloJets+process.akVs5CaloJets+process.akVs6CaloJets+process.akVs7CaloJets)


process.seqALCARECOMuAlCalIsolatedMu = cms.Sequence(process.ALCARECOMuAlCalIsolatedMuHLT+process.ALCARECOMuAlCalIsolatedMu)


process.gsfElectronSequence = cms.Sequence(process.ecalDrivenGsfElectronCores+process.ecalDrivenGsfElectrons+process.gsfElectronCores+process.gsfElectrons)


process.seqALCARECOEcalCalPi0Calib = cms.Sequence(process.ecalpi0CalibHLT+process.ecalPi0Corrected)


process.deGmt = cms.Sequence(process.valGmtDigis)


process.muontracking_with_SET = cms.Sequence(process.SETMuonSeed+process.standAloneSETMuons+process.globalSETMuons)


process.ak4PFL1FastL2L3CorrectorChain = cms.Sequence(process.ak4PFL1FastjetCorrector+process.ak4PFL2RelativeCorrector+process.ak4PFL3AbsoluteCorrector+process.ak4PFL1FastL2L3Corrector)


process.hiPixelVertices = cms.Sequence(process.hiPixelClusterVertex+process.PixelLayerTriplets+process.hiPixel3ProtoTracks+process.hiPixelMedianVertex+process.hiSelectedProtoTracks+process.hiPixelAdaptiveVertex+process.bestHiVertex)


process.ALCARECOTkAlBeamHaloDQM = cms.Sequence(process.ALCARECOTkAlBeamHaloTrackingDQM)


process.muonSeededStepDebugDisplaced = cms.Sequence(process.muonSeededSeedsOutInDisplacedAsTracks+process.muonSeededTrackCandidatesOutInDisplacedAsTracks+process.muonSeededSeedsInOutAsTracks+process.muonSeededTrackCandidatesInOutAsTracks)


process.ak4PFL1L2L3ResidualCorrectorChain = cms.Sequence(process.ak4PFL1OffsetCorrector+process.ak4PFL2RelativeCorrector+process.ak4PFL3AbsoluteCorrector+process.ak4PFResidualCorrector+process.ak4PFL1L2L3ResidualCorrector)


process.muIsolation_muons = cms.Sequence(process.muIsoDeposits_muons)


process.l1tRctSeq = cms.Sequence(process.l1tRct+process.l1tRctfromRCT+process.l1tPUM)


process.ak4CaloL1L2L3ResidualCorrectorChain = cms.Sequence(process.ak4CaloL1OffsetCorrector+process.ak4CaloL2RelativeCorrector+process.ak4CaloL3AbsoluteCorrector+process.ak4CaloResidualCorrector+process.ak4CaloL1L2L3ResidualCorrector)


process.seqL1EmulatorObjForJetQualityTests = cms.Sequence(process.l1EmulatorObjForJetQualityTests)


process.gedPhotonSequenceTmp = cms.Sequence(process.gedPhotonCore+process.gedPhotonsTmp)


process.particleFlowSuperClusteringSequence = cms.Sequence(process.particleFlowSuperClusterECAL)


process.electronPFIsolationValuesSequence = cms.Sequence(process.elPFIsoValueCharged03+process.elPFIsoValueChargedAll03+process.elPFIsoValueGamma03+process.elPFIsoValueNeutral03+process.elPFIsoValuePU03+process.elPFIsoValueCharged04+process.elPFIsoValueChargedAll04+process.elPFIsoValueGamma04+process.elPFIsoValueNeutral04+process.elPFIsoValuePU04)


process.jetDQMAnalyzerSequence = cms.Sequence(process.jetDQMAnalyzerAk4CaloCleaned+process.jetDQMAnalyzerAk4PFUncleaned+process.jetDQMAnalyzerAk4PFCleaned+process.jetDQMAnalyzerAk4PFCHSCleaned)


process.fsqHLTOfflineSourceSequence = cms.Sequence(process.ak4PFL1FastL2L3CorrectorChain+process.fsqHLTOfflineSource)


process.HLTTauDQMOfflineHarvesting = cms.Sequence(process.HLTTauPostSeq)


process.seqALCARECOMuAlGlobalCosmics = cms.Sequence(process.ALCARECOMuAlGlobalCosmicsHLT+process.ALCARECOMuAlGlobalCosmicsDCSFilter+process.ALCARECOMuAlGlobalCosmics)


process.l1ExpertDataVsEmulator = cms.Sequence(process.l1TdeGCT+process.l1TdeCSCTF+process.l1GtHwValidation+process.l1TdeRCTRun1)


process.seqALCARECOMuAlBeamHaloOverlaps = cms.Sequence(process.ALCARECOMuAlBeamHaloOverlapsHLT+process.ALCARECOMuAlBeamHaloOverlapsDCSFilter+process.ALCARECOMuAlBeamHaloOverlapsEnergyCut+process.ALCARECOMuAlBeamHaloOverlaps)


process.siPixelOfflineDQM_heavyions_source = cms.Sequence(process.SiPixelHLTSource+process.SiPixelRawDataErrorSource+process.SiPixelDigiSource+process.SiPixelRecHitSource+process.SiPixelClusterSource+process.SiPixelTrackResidualSource_HeavyIons+process.SiPixelHitEfficiencySource_HeavyIons+process.dqmInfo)


process.ak4PFL1L2L3CorrectorChain = cms.Sequence(process.ak4PFL1OffsetCorrector+process.ak4PFL2RelativeCorrector+process.ak4PFL3AbsoluteCorrector+process.ak4PFL1L2L3Corrector)


process.sistripMonitorHLTsequence = cms.Sequence(process.HLTSiStripMonitorCluster+process.hltTrackRefitterForSiStripMonitorTrack+process.HLTSiStripMonitorTrack)


process.ecalLocalRecoSequence = cms.Sequence(process.ecalUncalibRecHitSequence+process.ecalRecHitSequence)


process.pfTrackingGlobalReco = cms.Sequence(process.particleFlowTrackWithDisplacedVertex)


process.ALCARECOTkAlZMuMuDQM = cms.Sequence(process.ALCARECOTkAlZMuMuTrackingDQM+process.ALCARECOTkAlZMuMuTkAlDQM)


process.deHcal = cms.Sequence(process.valHcalTriggerPrimitiveDigis)


process.seqALCARECOTkAlCosmicsRegional = cms.Sequence(process.ALCARECOTkAlCosmicsRegional)


process.particleFlowTrack = cms.Sequence(process.pfTrack+process.pfTrackElec)


process.hiPrimSeeds = cms.Sequence(process.PixelLayerTriplets+process.hiPixel3PrimTracks+process.hiPixelTrackSeeds)


process.ALCARECOMuAlGlobalCosmicsDQM = cms.Sequence(process.ALCARECOMuAlGlobalCosmicsTrackingDQM)


process.doAlldEdXEstimatorsCTFP5LHC = cms.Sequence(process.dedxTruncated40CTFP5LHC+process.dedxHitInfoCTFP5LHC+process.dedxHarmonic2CTFP5LHC)


process.l1ExpertDataVsEmulatorStage1 = cms.Sequence(process.caloStage1Digis+process.caloStage1LegacyFormatDigis+process.l1TdeStage1Layer2+process.l1TdeCSCTF+process.l1Stage1GtHwValidation+process.l1TdeRCTSeq)


process.seqALCARECOTkAlUpsilonMuMuHI = cms.Sequence(process.ALCARECOTkAlUpsilonMuMuHIHLT+process.ALCARECOTkAlUpsilonMuMuHIDCSFilter+process.ALCARECOTkAlUpsilonMuMuHIGoodMuons+process.ALCARECOTkAlUpsilonMuMuHIRelCombIsoMuons+process.ALCARECOTkAlUpsilonMuMuHI)


process.seqL1EmulatorObjIsoEGQualityTests = cms.Sequence(process.l1EmulatorObjIsoEGQualityTests)


process.deEcal = cms.Sequence(process.valEcalTriggerPrimitiveDigis)


process.seqL1EmulatorGmtQualityTests = cms.Sequence(process.l1EmulatorGmtQualityTests)


process.seqL1TriggerObjCenJetQualityTests = cms.Sequence(process.l1TriggerObjCenJetQualityTests)


process.seqL1EmulatorObjETTQualityTests = cms.Sequence(process.l1EmulatorObjETTQualityTests)


process.jetMETDQMOfflineSource = cms.Sequence(process.HBHENoiseFilterResultProducer+process.jetDQMAnalyzerSequenceHI)


process.hiRecoJets = cms.Sequence(process.caloTowersRec+process.caloTowers+process.iterativeConePu5CaloJets+process.akPu3CaloJets+process.akPu4CaloJets+process.akPu5CaloJets+process.voronoiBackgroundCalo+process.akVs2CaloJets+process.akVs3CaloJets+process.akVs4CaloJets+process.akVs5CaloJets)


process.l1tMonitorStage1Online = cms.Sequence(process.bxTiming+process.l1tDttf+process.l1tCsctf+process.l1tRpctf+process.l1tGmt+process.l1tGt+process.rctDigis+process.caloStage1Digis+process.caloStage1LegacyFormatDigis+process.l1ExtraStage1DqmSeq+process.l1tStage1Layer2Seq+process.l1tRctSeq)


process.seqAPVCycleFilter = cms.Sequence(~process.PotentialTIBTECHugeEvents+~process.PotentialTIBTECFrameHeaderEventsFPeak+~process.PotentialTIBTECFrameHeaderEventsAdditionalPeak)


process.egammaDQMOffline = cms.Sequence(process.photonAnalysis+process.stdPhotonAnalysis+process.piZeroAnalysis+process.electronAnalyzerSequence)


process.remuIsolation_muons = cms.Sequence(process.remuIsoDeposits_muons)


process.seqL1TriggerObjHfRingEtSumsQualityTests = cms.Sequence(process.l1TriggerObjHfRingEtSumsQualityTests)


process.l1tMonitorOnline = cms.Sequence(process.l1tDttf+process.l1tCsctf+process.l1tRpctf+process.l1tGmt+process.l1tGt+process.l1ExtraDqmSeq+process.l1tRctRun1+process.l1tGctSeq)


process.pfNoPileUpIsoSequence = cms.Sequence(process.pfPileUpIso+process.pfNoPileUpIso)


process.seqALCARECOTkAlCosmicsRegional0T = cms.Sequence(process.ALCARECOTkAlCosmicsRegional0T)


process.seqL1EmulatorObjHTMQualityTests = cms.Sequence(process.l1EmulatorObjHTMQualityTests)


process.seqALCARECOTkAlUpsilonMuMu = cms.Sequence(process.ALCARECOTkAlUpsilonMuMuHLT+process.ALCARECOTkAlUpsilonMuMuDCSFilter+process.ALCARECOTkAlUpsilonMuMuGoodMuons+process.ALCARECOTkAlUpsilonMuMuRelCombIsoMuons+process.ALCARECOTkAlUpsilonMuMu)


process.seqALCARECOHcalCalNoise = cms.Sequence(process.noiseHLT+process.prescaler+process.HcalNoiseProd)


process.ALCARECOTkAlCosmicsInCollisionsDQM = cms.Sequence(process.ALCARECOTkAlCosmicsInCollisionsTrackingDQM+process.ALCARECOTkAlCosmicsInCollisionsTkAlDQM)


process.muonSeededStepCoreDisplaced = cms.Sequence(process.muonSeededSeedsInOut+process.muonSeededTrackCandidatesInOut+process.muonSeededTracksInOut+process.muonSeededSeedsOutInDisplaced+process.muonSeededTrackCandidatesOutInDisplaced+process.muonSeededTracksOutInDisplaced)


process.ak4PFL2L3L6CorrectorChain = cms.Sequence(process.ak4PFL2RelativeCorrector+process.ak4PFL3AbsoluteCorrector+process.ak4PFL6SLBCorrector+process.ak4PFL2L3L6Corrector)


process.hiRecoPFJets = cms.Sequence(process.PFTowers+process.akPu3PFJets+process.akPu4PFJets+process.akPu5PFJets+process.voronoiBackgroundPF+process.akVs3PFJets+process.akVs4PFJets+process.akVs5PFJets)


process.deGt = cms.Sequence(process.valGtDigis)


process.seqALCARECOPromptCalibProdSiStripGains = cms.Sequence(process.ALCARECOCalMinBiasFilterForSiStripGains+process.ALCARECOCalibrationTracks+process.offlineBeamSpot+process.ALCARECOCalibrationTracksRefit+process.ALCARECOSiStripCalib+process.MEtoEDMConvertSiStripGains)


process.gedElectronPFIsolationValuesSequence = cms.Sequence(process.gedElPFIsoValueCharged03+process.gedElPFIsoValueChargedAll03+process.gedElPFIsoValueGamma03+process.gedElPFIsoValueNeutral03+process.gedElPFIsoValuePU03)


process.ALCARECOSiStripCalZeroBiasDQM = cms.Sequence(process.seqAPVCycleFilter+process.SiStripCalZeroBiasMonitorCluster)


process.ALCARECOTkAlJpsiMuMuDQM = cms.Sequence(process.ALCARECOTkAlJpsiMuMuTrackingDQM+process.ALCARECOTkAlJpsiMuMuTkAlDQM)


process.l1EmulatorMonitor = cms.Sequence(process.l1demon+process.l1ExpertDataVsEmulator)


process.seqALCARECOHcalCalMinBias = cms.Sequence(process.hcalminbiasHLT+process.hcalDigiAlCaMB+process.gtDigisAlCaMB+process.hbherecoNoise+process.hfrecoNoise+process.hfrecoMBspecial+process.horecoNoise)


process.seqL1TriggerDttfQualityTests = cms.Sequence(process.l1TriggerDttfQualityTests)


process.ValL1TechnicalTriggers = cms.Sequence(process.valRpcTechTrigDigis+process.valHcalTechTrigDigis)


process.hcalMonitorTasksOfflineSequence = cms.Sequence(process.hcalDigiMonitor+process.hcalHotCellMonitor+process.hcalDeadCellMonitor+process.hcalRecHitMonitor+process.hcalBeamMonitor+process.hcalRawDataMonitor+process.hcalDetDiagNoiseMonitor+process.hcalLSbyLSMonitor+process.hcalNoiseMonitor)


process.seqALCARECOSiPixelLorentzAngle = cms.Sequence(process.ALCARECOSiPixelLorentzAngleHLTFilter)


process.remuIsolation = cms.Sequence(process.remuIsolation_muons)


process.ak4CaloL1FastL2L3CorrectorChain = cms.Sequence(process.ak4CaloL1FastjetCorrector+process.ak4CaloL2RelativeCorrector+process.ak4CaloL3AbsoluteCorrector+process.ak4CaloL1FastL2L3Corrector)


process.multi5x5ClusteringSequence = cms.Sequence(process.multi5x5BasicClustersCleaned+process.multi5x5SuperClustersCleaned+process.multi5x5BasicClustersUncleaned+process.multi5x5SuperClustersUncleaned+process.multi5x5SuperClusters+process.multi5x5SuperClustersWithPreshower)


process.seqL1TriggerCsctfQualityTests = cms.Sequence(process.l1TriggerCsctfQualityTests)


process.l1TriggerOnline = cms.Sequence(process.l1tMonitorOnline+process.dqmEnvL1T)


process.muonAnalyzer = cms.Sequence(process.muonEnergyDepositAnalyzer+process.muonSeedsAnalyzer+process.muonRecoAnalyzer+process.glbMuonSegmentAnalyzer+process.staMuonSegmentAnalyzer+process.muonKinVsEtaAnalyzer+process.diMuonHistos+process.LooseMuonEfficiencyAnalyzer+process.MediumMuonEfficiencyAnalyzer+process.TightMuonEfficiencyAnalyzer+process.muonPFsequence+process.muonRecoOneHLT)


process.ak4TrackL2L3CorrectorChain = cms.Sequence(process.ak4TrackL2RelativeCorrector+process.ak4TrackL3AbsoluteCorrector+process.ak4TrackL2L3Corrector)


process.muIsolation_ParamGlobalMuonsOld = cms.Sequence(process.muIsoDeposits_ParamGlobalMuonsOld)


process.ALCARECOMuAlCalIsolatedMuDQM = cms.Sequence(process.ALCARECOMuAlCalIsolatedMuTrackingDQM+process.ALCARECOMuAlCalIsolatedMuMuAlDQM)


process.seqALCARECOTkAlMuonIsolated = cms.Sequence(process.ALCARECOTkAlMuonIsolatedHLT+process.ALCARECOTkAlMuonIsolatedDCSFilter+process.ALCARECOTkAlMuonIsolatedGoodMuons+process.ALCARECOTkAlMuonIsolatedRelCombIsoMuons+process.ALCARECOTkAlMuonIsolated)


process.doAlldEdXEstimators = cms.Sequence(process.dedxTruncated40+process.dedxHarmonic2+process.dedxHitInfo)


process.ALCARECODTCalibSynchCosmicsDQM = cms.Sequence(process.dtPreCalibrationTaskAlcaCosmics+process.dtAlcaResolutionMonitorCosmics)


process.ALCARECOTkAlUpsilonMuMuHIDQM = cms.Sequence(process.ALCARECOTkAlUpsilonMuMuHITrackingDQM+process.ALCARECOTkAlUpsilonMuMuHITkAlDQM)


process.hiLowPtTripletStep = cms.Sequence(process.hiLowPtTripletStepClusters+process.hiLowPtTripletStepSeedLayers+process.hiLowPtTripletStepPixelTracks+process.hiLowPtTripletStepSeeds+process.hiLowPtTripletStepTrackCandidates+process.hiLowPtTripletStepTracks+process.hiLowPtTripletStepSelector+process.hiLowPtTripletStepQual)


process.seqL1EmulatorCsctfQualityTests = cms.Sequence(process.l1EmulatorCsctfQualityTests)


process.METDQMAnalyzerSequenceHI = cms.Sequence(process.caloMetDQMAnalyzer+process.pfMetDQMAnalyzer)


process.particleFlowCluster = cms.Sequence(process.pfClusteringPS+process.pfClusteringECAL+process.pfClusteringHBHEHF+process.pfClusteringHO)


process.muonIdProducerSequence = cms.Sequence(process.glbTrackQual+process.muons1stStep+process.calomuons+process.muonEcalDetIds+process.muonShowerInformation)


process.deCsctf = cms.Sequence(process.valCsctfDigis)


process.ALCARECOTrackFilterRefit = cms.Sequence(process.ALCARECOCalibrationTracks+process.offlineBeamSpot+process.ALCARECOCalibrationTracksRefit)


process.deRct = cms.Sequence(process.valRctDigis)


process.seqL1EmulatorEcalQualityTests = cms.Sequence(process.l1EmulatorEcalQualityTests)


process.hiRegitMuonMixedTripletStep = cms.Sequence(process.hiRegitMuMixedTripletStepClusters+process.hiRegitMuMixedTripletStepSeedLayersA+process.hiRegitMuMixedTripletStepSeedsA+process.hiRegitMuMixedTripletStepSeedLayersB+process.hiRegitMuMixedTripletStepSeedsB+process.hiRegitMuMixedTripletStepSeeds+process.hiRegitMuMixedTripletStepTrackCandidates+process.hiRegitMuMixedTripletStepTracks+process.hiRegitMuMixedTripletStepSelector)


process.ctfTracksNoOverlaps = cms.Sequence(process.ckfTrackCandidatesNoOverlaps+process.ctfNoOverlaps)


process.seqL1TriggerObjETMQualityTests = cms.Sequence(process.l1TriggerObjETMQualityTests)


process.muonSeededStepDebug = cms.Sequence(process.muonSeededSeedsOutInAsTracks+process.muonSeededTrackCandidatesOutInAsTracks+process.muonSeededSeedsInOutAsTracks+process.muonSeededTrackCandidatesInOutAsTracks)


process.seqALCARECOTkAlMinBiasHI = cms.Sequence(process.ALCARECOTkAlMinBiasHIHLT+process.ALCARECOTkAlMinBiasHIDCSFilter+process.ALCARECOTkAlMinBiasHI)


process.ak4CaloL2L3CorrectorChain = cms.Sequence(process.ak4CaloL2RelativeCorrector+process.ak4CaloL3AbsoluteCorrector+process.ak4CaloL2L3Corrector)


process.seqL1TriggerObjTechTrigQualityTests = cms.Sequence(process.l1TriggerObjTechTrigQualityTests)


process.ak4JPTL1L2L3ResidualCorrectorChain = cms.Sequence(process.ak4L1JPTOffsetCorrectorChain+process.ak4JPTL2RelativeCorrector+process.ak4JPTL3AbsoluteCorrector+process.ak4JPTResidualCorrector+process.ak4JPTL1L2L3ResidualCorrector)


process.electronPFIsolationDepositsSequence = cms.Sequence(process.elPFIsoDepositCharged+process.elPFIsoDepositChargedAll+process.elPFIsoDepositGamma+process.elPFIsoDepositNeutral+process.elPFIsoDepositPU)


process.seqL1TriggerObjHTTQualityTests = cms.Sequence(process.l1TriggerObjHTTQualityTests)


process.deStage1Layer2 = cms.Sequence(process.simRctUpgradeFormatDigis+process.simCaloStage1Digis+process.valCaloStage1LegacyFormatDigis)


process.seqL1TriggerRpcQualityTests = cms.Sequence(process.l1TriggerRpcQualityTests)


process.L1Reco_L1Extra_L1GtRecord = cms.Sequence(process.l1extraParticles+process.l1GtRecord)


process.hiPixelPairStep = cms.Sequence(process.hiPixelPairClusters+process.hiPixelPairSeedLayers+process.hiPixelPairSeeds+process.hiPixelPairTrackCandidates+process.hiPixelPairGlobalPrimTracks+process.hiPixelPairStepSelector)


process.ALCARECOTkAlMuonIsolatedDQM = cms.Sequence(process.ALCARECOTkAlMuonIsolatedTrackingDQM+process.ALCARECOTkAlMuonIsolatedTkAlDQM)


process.l1tMonitorEndPathSeq = cms.Sequence(process.l1s+process.l1tscalers)


process.L1RawToDigiSeq = cms.Sequence(process.gctDigis+process.caloStage1Digis+process.caloStage1LegacyFormatDigis)


process.seqALCARECOHcalCalHOCosmics = cms.Sequence(process.ALCARECOHcalCalHOCosmicHLT+process.hoCalibCosmicsProducer)


process.seqALCARECOTkAlJpsiMuMuHI = cms.Sequence(process.ALCARECOTkAlJpsiMuMuHIHLT+process.ALCARECOTkAlJpsiMuMuHIDCSFilter+process.ALCARECOTkAlJpsiMuMuHIGoodMuons+process.ALCARECOTkAlJpsiMuMuHI)


process.hiCaloJetsForTrk = cms.Sequence(process.hiCaloTowerForTrk+process.akPu4CaloJetsForTrk+process.akPu4CaloJetsCorrected+process.akPu4CaloJetsSelected)


process.hybridClusteringSequence = cms.Sequence(process.cleanedHybridSuperClusters+process.uncleanedHybridSuperClusters+process.hybridSuperClusters+process.correctedHybridSuperClusters+process.uncleanedOnlyCorrectedHybridSuperClusters)


process.ak4CaloL1FastL2L3L6CorrectorChain = cms.Sequence(process.ak4CaloL1FastjetCorrector+process.ak4CaloL2RelativeCorrector+process.ak4CaloL3AbsoluteCorrector+process.ak4CaloL6SLBCorrector+process.ak4CaloL1FastL2L3L6Corrector)


process.ALCARECOSiStripCalMinBiasDQM = cms.Sequence(process.ALCARECOSiStripCalMinBiasTrackingDQM+process.ALCARECOSiStripCalMinBiasTrackerDQM)


process.jetDQMAnalyzerSequenceMiniAOD = cms.Sequence(process.jetDQMAnalyzerAk4PFCHSUncleanedMiniAOD+process.jetDQMAnalyzerAk4PFCHSCleanedMiniAOD)


process.cosmictracksP5Bottom = cms.Sequence(process.cosmicseedfinderP5Bottom+process.cosmicCandidateFinderP5Bottom+process.cosmictrackfinderP5Bottom)


process.ALCARECOMuAlBeamHaloOverlapsDQM = cms.Sequence(process.ALCARECOMuAlBeamHaloOverlapsTrackingDQM)


process.bestHiVertexPreSplitting = cms.Sequence(process.hiBestAdaptiveVertexPreSplitting+process.hiSelectedVertexPreSplitting)


process.OfflineHLTMonitoring = cms.Sequence(process.dqmInfoHLTMon+process.sistripMonitorHLTsequence+process.BTVHLTOfflineSource+process.trackingMonitorHLT)


process.cosmicMuonQualityTests = cms.Sequence(process.ClientTrackEfficiencyTkTracks+process.ClientTrackEfficiencySTACosmicMuons+process.muonSourcesQualityTests+process.muTrackResidualsTest+process.muRecoTest+process.muonClientsQualityTests+process.muonComp2RefQualityTests+process.muonComp2RefKolmoQualityTests+process.muonCosmicTestSummary)


process.ValL1MuTrackFinders = cms.Sequence(process.valCsctfTrackDigis+process.valCsctfDigis+process.valDttfDigis)


process.seqL1TriggerGmtQualityTests = cms.Sequence(process.l1TriggerGmtQualityTests)


process.seqALCARECOTkAlLAS = cms.Sequence(process.ALCARECOTkAlLASsiStripDigis+process.ALCARECOTkAlLASEventFilter+process.ALCARECOTkAlLAST0Producer)


process.l1TriggerSystemQualityTests = cms.Sequence(process.seqL1TriggerEcalQualityTests+process.seqL1TriggerHcalQualityTests+process.seqL1TriggerRctQualityTests+process.seqL1TriggerGctQualityTests+process.seqL1TriggerDttfQualityTests+process.seqL1TriggerDttpgQualityTests+process.seqL1TriggerCsctfQualityTests+process.seqL1TriggerCsctpgQualityTests+process.seqL1TriggerRpcQualityTests+process.seqL1TriggerGmtQualityTests+process.seqL1TriggerGtQualityTests)


process.seqALCARECOTkAlCosmicsRegionalHLT = cms.Sequence(process.ALCARECOTkAlCosmicsHLT+process.seqALCARECOTkAlCosmicsRegional)


process.muIsolation_ParamGlobalMuons = cms.Sequence(process.muIsoDeposits_ParamGlobalMuons)


process.l1TriggerObjectQualityTests = cms.Sequence(process.seqL1TriggerObjTechTrigQualityTests+process.seqL1TriggerObjGtExternalQualityTests+process.seqL1TriggerObjHfRingEtSumsQualityTests+process.seqL1TriggerObjHfBitCountsQualityTests+process.seqL1TriggerObjHTMQualityTests+process.seqL1TriggerObjHTTQualityTests+process.seqL1TriggerObjETMQualityTests+process.seqL1TriggerObjETTQualityTests+process.seqL1TriggerObjTauJetQualityTests+process.seqL1TriggerObjForJetQualityTests+process.seqL1TriggerObjCenJetQualityTests+process.seqL1TriggerObjIsoEGQualityTests+process.seqL1TriggerObjNoIsoEGQualityTests+process.seqL1TriggerObjMuQualityTests)


process.L1HardwareValidation = cms.Sequence(process.deEcal+process.deHcal+process.deRct+process.deGct+process.deDt+process.deCsc+process.deCsctfTracks+process.deDttf+process.deCsctf+process.deRpc+process.deGmt+process.deGt+process.l1compare)


process.RawToDigi = cms.Sequence(process.csctfDigis+process.dttfDigis+process.L1RawToDigiSeq+process.gtDigis+process.siPixelDigis+process.siStripDigis+process.ecalDigis+process.ecalPreshowerDigis+process.hcalDigis+process.muonCSCDigis+process.muonDTDigis+process.muonRPCDigis+process.castorDigis+process.scalersRawToDigi+process.tcdsDigis)


process.ValL1Emulator = cms.Sequence(process.valEcalTriggerPrimitiveDigis+process.valHcalTriggerPrimitiveDigis+process.valHcalTTPDigis+process.valRctDigis+process.valGctDigis+process.ValL1MuTriggerPrimitives+process.ValL1MuTrackFinders+process.valRpcTriggerDigis+process.valGmtDigis+process.ValL1TechnicalTriggers+process.valGtDigis)


process.L1HardwareValidationforStage1 = cms.Sequence(process.deEcal+process.deHcal+process.deRct+process.deStage1Layer2+process.deDt+process.deCsc+process.deCsctfTracks+process.deDttf+process.deCsctf+process.deRpc+process.deGmt+process.deStage1Gt+process.l1compareforstage1)


process.hiRegitMuonSeededStep = cms.Sequence(process.hiEarlyGeneralTracks+process.hiEarlyMuons+process.hiRegitMuonSeededStepCore+process.hiRegitMuonSeededStepExtra)


process.hiPixelVerticesPreSplitting = cms.Sequence(process.hiPixelClusterVertexPreSplitting+process.PixelLayerTripletsPreSplitting+process.hiPixel3ProtoTracksPreSplitting+process.hiPixelMedianVertexPreSplitting+process.hiSelectedProtoTracksPreSplitting+process.hiPixelAdaptiveVertexPreSplitting+process.bestHiVertexPreSplitting)


process.doAllCosmicdEdXEstimators = cms.Sequence(process.doAlldEdXEstimatorsCTF+process.doAlldEdXEstimatorsCosmicTF+process.doAlldEdXEstimatorsCTFP5LHC)


process.muonMonitors = cms.Sequence(process.muonTrackAnalyzers+process.dtSegmentsMonitor+process.cscMonitor+process.muonAnalyzer+process.muonIdDQM+process.dqmInfoMuons+process.muIsoDQM_seq)


process.hiRegitMuTracking = cms.Sequence(process.hiRegitMuonInitialStep+process.hiRegitMuonPixelPairStep+process.hiRegitMuonMixedTripletStep+process.hiRegitMuonPixelLessStep+process.hiRegitMuonDetachedTripletStep+process.hiRegitMuonSeededStep)


process.hiParticleFlowLocalReco = cms.Sequence(process.particleFlowCluster)


process.hiEcalClusteringSequence = cms.Sequence(process.islandClusteringSequence+process.hybridClusteringSequence+process.multi5x5ClusteringSequence+process.multi5x5PreshowerClusteringSequence+process.preshowerClusteringSequence+process.particleFlowSuperClusteringSequence)


process.trackerlocalreco = cms.Sequence(process.pixeltrackerlocalreco+process.striptrackerlocalreco+process.clusterSummaryProducer)


process.seqALCARECOTkAlCosmicsRegional0THLT = cms.Sequence(process.ALCARECOTkAlCosmics0THLT+process.seqALCARECOTkAlCosmicsRegional0T)


process.ctftracksP5 = cms.Sequence(process.combinatorialcosmicseedinglayersP5+process.combinatorialcosmicseedfinderP5+process.simpleCosmicBONSeedingLayers+process.simpleCosmicBONSeeds+process.combinedP5SeedsForCTF+process.ckfTrackCandidatesP5+process.ctfWithMaterialTracksCosmics+process.ctfWithMaterialTracksP5+process.ckfTrackCandidatesP5LHCNavigation+process.ctfWithMaterialTracksP5LHCNavigation)


process.hiEcalClusters = cms.Sequence(process.hiEcalClusteringSequence)


process.particleFlowEGammaFull = cms.Sequence(process.particleFlowEGamma+process.gedGsfElectronSequenceTmp+process.gedPhotonSequenceTmp)


process.hiParticleFlowReco = cms.Sequence(process.pfGsfElectronMVASelectionSequence+process.particleFlowBlock+process.particleFlowEGammaFull+process.photonIsolationHIProducerGED+process.particleFlowTmp+process.hiRecoPFJets)


process.l1EmulatorSystemQualityTests = cms.Sequence(process.seqL1EmulatorEcalQualityTests+process.seqL1EmulatorHcalQualityTests+process.seqL1EmulatorRctQualityTests+process.seqL1EmulatorGctQualityTests+process.seqL1EmulatorDttfQualityTests+process.seqL1EmulatorCsctfQualityTests+process.seqL1EmulatorCsctpgQualityTests+process.seqL1EmulatorRpcQualityTests+process.seqL1EmulatorGmtQualityTests+process.seqL1EmulatorGtQualityTests)


process.l1EmulatorMonitorStage1 = cms.Sequence(process.caloStage1Digis+process.caloStage1LegacyFormatDigis+process.l1demonstage1+process.l1ExpertDataVsEmulatorStage1)


process.seqALCARECOTkAlCosmicsCTFHLT = cms.Sequence(process.ALCARECOTkAlCosmicsHLT+process.seqALCARECOTkAlCosmicsCTF)


process.hiEgammaSequence = cms.Sequence(process.hiPhotonSequence)


process.hiJetCoreRegionalStep = cms.Sequence(process.hiCaloJetsForTrk+process.hiJetsForCoreTracking+process.hiFirstStepGoodPrimaryVertices+process.hiJetCoreRegionalStepSeedLayers+process.hiJetCoreRegionalStepSeeds+process.hiJetCoreRegionalStepTrackCandidates+process.hiJetCoreRegionalStepTracks+process.hiJetCoreRegionalStepSelector)


process.l1TriggerOffline = cms.Sequence(process.l1TriggerOnline+process.dqmEnvL1TriggerReco)


process.hiBasicTracking = cms.Sequence(process.hiPixelVertices+process.hiPrimSeeds+process.hiPrimTrackCandidates+process.hiGlobalPrimTracks+process.hiTracksWithQuality)


process.hiRegitMuTrackingAndSta = cms.Sequence(process.standalonemuontracking+process.hiRegitMuTracking)


process.muonFullOfflineDQM = cms.Sequence(process.hltMuonOfflineAnalyzers)


process.muontracking = cms.Sequence(process.standAloneMuonSeeds+process.standAloneMuons+process.hiRegitMuTracking+process.reglobalMuons)


process.seqFilters = cms.Sequence(process.seqAPVCycleFilter+process.seqMultiplicityFilter)


process.pfParticleSelectionSequence = cms.Sequence(process.pfNoPileUpIsoSequence+process.pfNoPileUpSequence+process.pfSortByTypeSequence)


process.muonlocalreco_with_2DSegments = cms.Sequence(process.dtlocalreco_with_2DSegments+process.csclocalreco+process.rpcRecHits)


process.hcalOfflineDQMSource = cms.Sequence(process.hcalMonitor+process.zdcMonitor+process.hcalMonitorTasksOfflineSequence+process.dqmInfoHcal)


process.muonReco = cms.Sequence(process.trackerlocalreco+process.MeasurementTrackerEventPreSplitting+process.siPixelClusterShapeCachePreSplitting+process.muonlocalreco)


process.tracksP5 = cms.Sequence(process.cosmictracksP5+process.ctftracksP5+process.doAllCosmicdEdXEstimators)


process.l1EmulatorObjectQualityTests = cms.Sequence(process.seqL1EmulatorObjTechTrigQualityTests+process.seqL1EmulatorObjGtExternalQualityTests+process.seqL1EmulatorObjHfRingEtSumsQualityTests+process.seqL1EmulatorObjHfBitCountsQualityTests+process.seqL1EmulatorObjHTMQualityTests+process.seqL1EmulatorObjHTTQualityTests+process.seqL1EmulatorObjETMQualityTests+process.seqL1EmulatorObjETTQualityTests+process.seqL1EmulatorObjTauJetQualityTests+process.seqL1EmulatorObjForJetQualityTests+process.seqL1EmulatorObjCenJetQualityTests+process.seqL1EmulatorObjIsoEGQualityTests+process.seqL1EmulatorObjNoIsoEGQualityTests+process.seqL1EmulatorObjMuQualityTests)


process.l1TriggerQualityTests = cms.Sequence(process.l1TriggerSystemQualityTests+process.l1TriggerObjectQualityTests+process.l1TriggerRateQualityTests+process.l1TriggerSyncQualityTests+process.l1TriggerOccupancyQualityTests)


process.muonSeededStep = cms.Sequence(process.earlyMuons+process.muonSeededStepCore+process.muonSeededStepExtra)


process.l1HwValEmulatorMonitor = cms.Sequence(process.L1HardwareValidation+process.l1EmulatorMonitor)


process.tracksP5_wodEdX = cms.Sequence(process.cosmictracksP5+process.ctftracksP5)


process.tracksP5Top = cms.Sequence(process.ctftracksP5Top+process.cosmictracksP5Top)


process.jetMETHLTOfflineAnalyzer = cms.Sequence(process.ak4CaloL1FastL2L3CorrectorChain+process.ak4PFL1FastL2L3CorrectorChain+process.ak4CaloL1FastL2L3ResidualCorrectorChain+process.ak4PFL1FastL2L3ResidualCorrectorChain+process.jetMETHLTOfflineSource)


process.muonSeededStepDisplaced = cms.Sequence(process.earlyDisplacedMuons+process.muonSeededStepCoreDisplaced+process.muonSeededStepExtraDisplaced)


process.tracksP5Bottom = cms.Sequence(process.ctftracksP5Bottom+process.cosmictracksP5Bottom)


process.caloReco = cms.Sequence(process.ecalLocalRecoSequence+process.hcalLocalRecoSequence)


process.muIsolation = cms.Sequence(process.muIsolation_muons)


process.l1EmulatorQualityTests = cms.Sequence(process.l1EmulatorSystemQualityTests+process.l1EmulatorObjectQualityTests)


process.hiInitialJetCoreClusterSplitting = cms.Sequence(process.hiPixelVerticesPreSplitting+process.hiCaloTowerForTrkPreSplitting+process.hiAkPu4CaloJetsForTrkPreSplitting+process.hiAkPu4CaloJetsCorrectedPreSplitting+process.hiAkPu4CaloJetsSelectedPreSplitting+process.hiJetsForCoreTrackingPreSplitting+process.siPixelClusters+process.siPixelRecHits+process.MeasurementTrackerEvent+process.siPixelClusterShapeCache)


process.particleFlowClusterWithoutHO = cms.Sequence(process.pfClusteringPS+process.pfClusteringECAL+process.pfClusteringHBHEHF)


process.localReco = cms.Sequence(process.bunchSpacingProducer+process.offlineBeamSpot+process.muonReco+process.caloReco+process.castorreco)


process.caloRecoNZS = cms.Sequence(process.caloReco+process.hcalLocalRecoSequenceNZS)


process.muonreco_with_SET = cms.Sequence(process.muontracking_with_SET)


process.muontracking_re = cms.Sequence(process.hiRegitMuTracking+process.reglobalMuons)


process.pfBasedElectronIsoSequence = cms.Sequence(process.pfParticleSelectionSequence+process.electronPFIsolationDepositsSequence+process.electronPFIsolationValuesSequence)


process.l1tMonitorClient = cms.Sequence(process.l1TriggerQualityTests+process.l1TriggerClients)


process.l1Stage1HwValEmulatorMonitor = cms.Sequence(process.rctDigis+process.caloStage1Digis+process.caloStage1LegacyFormatDigis+process.L1HardwareValidationforStage1+process.l1EmulatorMonitorStage1)


process.muonreco_plus_isolation_PbPb = cms.Sequence(process.globalMuons+process.tevMuons+process.glbTrackQual+process.hiMuons1stStep+process.calomuons+process.muonEcalDetIds+process.muonShowerInformation+process.muIsolation)


process.l1tMonitorStage1Client = cms.Sequence(process.l1TriggerQualityTests+process.l1TriggerStage1Clients)


process.gedElectronPFIsoSequence = cms.Sequence(process.pfParticleSelectionSequence+process.gedElectronPFIsolationDepositsSequence+process.gedElectronPFIsolationValuesSequence+process.gedGsfElectrons)


process.localReco_HcalNZS = cms.Sequence(process.bunchSpacingProducer+process.offlineBeamSpot+process.muonReco+process.caloRecoNZS)


process.triggerOfflineDQMSource = cms.Sequence(process.hltResults+process.egHLTOffDQMSource+process.muonFullOfflineDQM+process.HLTTauDQMOffline+process.fsqHLTOfflineSource+process.HILowLumiHLTOfflineSourceSequence+process.hltInclusiveVBFSource+process.higPhotonJetHLTOfflineSource+process.dqmEnvHLT+process.topHLTriggerOfflineDQM+process.hotlineDQMSequence)


process.pfBasedElectronPhotonIsoSequence = cms.Sequence(process.pfParticleSelectionSequence+process.pfSelectedElectrons+process.pfSelectedPhotons+process.photonPFIsolationDepositsSequence+process.phPFIsoValueCharged03PFId+process.phPFIsoValueChargedAll03PFId+process.phPFIsoValueGamma03PFId+process.phPFIsoValueNeutral03PFId+process.phPFIsoValuePU03PFId+process.phPFIsoValueCharged04PFId+process.phPFIsoValueChargedAll04PFId+process.phPFIsoValueGamma04PFId+process.phPFIsoValueNeutral04PFId+process.phPFIsoValuePU04PFId)


process.offlineHLTSource = cms.Sequence(process.hltResults+process.egHLTOffDQMSource+process.muonFullOfflineDQM+process.HLTTauDQMOffline+process.jetMETHLTOfflineAnalyzer+process.fsqHLTOfflineSourceSequence+process.HILowLumiHLTOfflineSourceSequence+process.hltInclusiveVBFSource+process.higPhotonJetHLTOfflineSource+process.dqmEnvHLT+process.topHLTriggerOfflineDQM+process.hotlineDQMSequence)


process.muonRecoPbPb = cms.Sequence(process.muonreco_plus_isolation_PbPb)


process.iterDisplcedTracking = cms.Sequence(process.muonSeededStepDisplaced+process.preDuplicateMergingDisplacedTracks+process.displacedTracksSequence)


process.DQMOfflineHeavyIonsPrePOG = cms.Sequence(process.muonMonitors+process.TrackMonDQMTier0_hi+process.jetMETDQMOfflineSource+process.egammaDQMOffline+process.triggerOfflineDQMSource+process.alcaBeamMonitor+process.dqmPhysicsHI)


process.hiTracking_noRegitMu_wSplitting = cms.Sequence(process.hiInitialJetCoreClusterSplitting+process.hiBasicTracking+process.hiDetachedTripletStep+process.hiLowPtTripletStep+process.hiPixelPairStep)


process.l1TriggerEmulatorOnline = cms.Sequence(process.l1HwValEmulatorMonitor+process.dqmEnvL1TEMU)


process.muonMonitorsAndQualityTests = cms.Sequence(process.muonMonitors+process.muonQualityTests)


process.hiTracking_noRegitMu = cms.Sequence(process.hiBasicTracking+process.hiDetachedTripletStep+process.hiLowPtTripletStep+process.hiPixelPairStep)


process.l1EmulatorMonitorClient = cms.Sequence(process.l1EmulatorQualityTests+process.l1EmulatorEventInfoClient)


process.hiTracking = cms.Sequence(process.hiTracking_noRegitMu+process.hiRegitMuTrackingAndSta+process.hiGeneralTracks)


process.l1TriggerEmulatorOffline = cms.Sequence(process.l1TriggerEmulatorOnline)


process.reMuonTrackRecoPbPb = cms.Sequence(process.muontracking_re)


process.muontracking_with_TeVRefinement_re = cms.Sequence(process.muontracking_re+process.retevMuons)


process.hiTracking_wSplitting = cms.Sequence(process.hiTracking_noRegitMu_wSplitting+process.hiJetCoreRegionalStep+process.hiRegitMuTrackingAndSta+process.hiGeneralTracks)


process.muonreco_re = cms.Sequence(process.muontracking_re+process.remuonIdProducerSequence)


process.trackerCosmics_TopBot = cms.Sequence(process.trackerlocalrecoTop+process.tracksP5Top+process.trackerlocalrecoBottom+process.tracksP5Bottom)


process.edBasedElectronIsoSequence = cms.Sequence(process.pfParticleSelectionSequence+process.electronEDIsolationDepositsSequence+process.electronEDIsolationValuesSequence)


process.hiTracking_wConformalPixel = cms.Sequence(process.hiTracking+process.hiMergedConformalPixelTracking)


process.globalRecoPbPb = cms.Sequence(process.hiTracking_wSplitting+process.hiParticleFlowLocalReco+process.hiEcalClusters+process.hiRecoJets+process.muonRecoPbPb+process.hiElectronSequence+process.hiEgammaSequence+process.hiParticleFlowReco+process.hiCentrality+process.centralityBin+process.hiClusterCompatibility+process.hiEvtPlane+process.hcalnoise+process.muonRecoHighLevelPbPb)


process.reconstructionHeavyIons_HcalNZS = cms.Sequence(process.bunchSpacingProducer+process.offlineBeamSpot+process.muonReco+process.caloRecoNZS+process.globalRecoPbPb)


process.pfPhotonTranslatorSequence = cms.Sequence(process.pfBasedElectronPhotonIsoSequence+process.pfPhotonTranslator+process.pfPhotonInterestingEcalDetIdEB+process.pfPhotonInterestingEcalDetIdEE)


process.displacedGlobalMuonTracking = cms.Sequence(process.iterDisplcedTracking+process.displacedGlobalMuons)


process.muonrecowith_TeVRefinemen_re = cms.Sequence(process.muontracking_with_TeVRefinement_re+process.remuonIdProducerSequence)


process.electronIsoSequence = cms.Sequence(process.edBasedElectronIsoSequence+process.pfBasedElectronIsoSequence)


process.globalmuontracking = cms.Sequence(process.globalMuons+process.tevMuons+process.displacedGlobalMuonTracking)


process.pfElectronTranslatorSequence = cms.Sequence(process.pfBasedElectronPhotonIsoSequence+process.pfElectronTranslator+process.pfElectronInterestingEcalDetIdEB+process.pfElectronInterestingEcalDetIdEE)


process.gsfElectronMergingSequence = cms.Sequence(process.electronIsoSequence+process.gsfElectronCores+process.gsfElectrons)


process.particleFlowEGammaFinal = cms.Sequence(process.gedPhotonSequence+process.gedElectronPFIsoSequence)


process.globalRecoPbPb_wConformalPixel = cms.Sequence(process.hiTracking_wConformalPixel+process.hiParticleFlowLocalReco+process.hiEcalClusters+process.hiRecoJets+process.muonRecoPbPb+process.hiElectronSequence+process.hiEgammaSequence+process.hiParticleFlowReco+process.hiCentrality+process.centralityBin+process.hiClusterCompatibility+process.hiEvtPlane+process.hcalnoise+process.muonRecoHighLevelPbPb)


process.reconstruct_PbPb = cms.Sequence(process.localReco+process.globalRecoPbPb+process.CastorFullReco)


process.muonGlobalReco = cms.Sequence(process.globalmuontracking+process.muonIdProducerSequence+process.muonSelectionTypeSequence+process.muIsolation+process.muonreco_with_SET)


process.l1TriggerDqmOfflineClient = cms.Sequence(process.l1tMonitorClient+process.l1EmulatorMonitorClient)


process.DQMOfflineHeavyIonsPOG = cms.Sequence(process.DQMOfflineHeavyIonsPrePOG+process.DQMMessageLogger)


process.l1TriggerDqmOffline = cms.Sequence(process.l1TriggerOffline+process.l1tRate_Offline+process.l1tSync_Offline+process.l1TriggerEmulatorOffline)


process.muonreco_plus_isolation_re = cms.Sequence(process.muonrecowith_TeVRefinemen_re+process.remuIsolation)


process.regionalMuonRecoPbPb = cms.Sequence(process.muonreco_plus_isolation_re)


process.DQMOfflineHeavyIonsPreDPG = cms.Sequence(process.dqmDcsInfo+process.l1TriggerDqmOffline+process.ecal_dqm_source_offline+process.hcalOfflineDQMSource+process.SiStripDQMTier0_hi+process.siPixelOfflineDQM_heavyions_source+process.dtSources+process.rpcTier0Source+process.cscSources+process.es_dqm_source_offline)


process.reconstructionHeavyIons = cms.Sequence(process.reconstruct_PbPb)


process.DQMOfflineHeavyIons = cms.Sequence(process.DQMOfflineHeavyIonsPreDPG+process.DQMOfflineHeavyIonsPrePOG+process.DQMMessageLogger)


process.reconstructionHeavyIons_withRegitMu = cms.Sequence(process.bunchSpacingProducer+process.offlineBeamSpot+process.muonReco+process.caloReco+process.castorreco+process.globalRecoPbPb+process.CastorFullReco+process.regionalMuonRecoPbPb)


process.particleFlowReco = cms.Sequence(process.particleFlowTrackWithDisplacedVertex+process.pfGsfElectronMVASelectionSequence+process.particleFlowBlock+process.particleFlowEGammaFull+process.particleFlowTmp+process.particleFlowTmpPtrs+process.particleFlowEGammaFinal+process.pfParticleSelectionSequence)


process.muonreco = cms.Sequence((process.standalonemuontracking+process.globalmuontracking)+process.muonIdProducerSequence)


process.DQMOfflineHeavyIonsDPG = cms.Sequence(process.DQMOfflineHeavyIonsPreDPG+process.DQMMessageLogger)


process.muonreco_plus_isolation = cms.Sequence(process.muonreco+process.muIsolation)


process.muonreco_plus_isolation_plus_SET = cms.Sequence(process.muonreco_plus_isolation+process.muonreco_with_SET)


process.muonrecoComplete = cms.Sequence(process.muonreco_plus_isolation_plus_SET+process.muonSelectionTypeSequence)


process.raw2digi_step = cms.Path(process.RawToDigi)


process.L1Reco_step = cms.Path(process.L1Reco)


process.reconstruction_step = cms.Path(process.reconstructionHeavyIons)


process.pathALCARECOHcalCalHOCosmics = cms.Path(process.seqALCARECOHcalCalHOCosmics)


process.pathALCARECOPromptCalibProdSiStripGains = cms.Path(process.seqALCARECOPromptCalibProdSiStripGains)


process.pathALCARECOTkAlCosmicsCTF0T = cms.Path(process.seqALCARECOTkAlCosmicsCTF0T+process.ALCARECOTkAlCosmicsCTF0TDQM)


process.pathALCARECOTkAlMuonIsolatedHI = cms.Path(process.seqALCARECOTkAlMuonIsolatedHI+process.ALCARECOTkAlMuonIsolatedHIDQM)


process.pathALCARECOMuAlBeamHalo = cms.Path(process.seqALCARECOMuAlBeamHalo+process.ALCARECOMuAlBeamHaloDQM)


process.pathALCARECOPromptCalibProdSiStrip = cms.Path(process.seqALCARECOPromptCalibProdSiStrip)


process.pathALCARECOTkAlCosmicsCTF = cms.Path(process.seqALCARECOTkAlCosmicsCTF+process.ALCARECOTkAlCosmicsCTFDQM)


process.pathALCARECOTkAlMinBiasHI = cms.Path(process.seqALCARECOTkAlMinBiasHI+process.ALCARECOTkAlMinBiasHIDQM)


process.pathALCARECOMuAlGlobalCosmicsInCollisions = cms.Path(process.seqALCARECOMuAlGlobalCosmicsInCollisions+process.ALCARECOMuAlGlobalCosmicsInCollisionsDQM)


process.pathALCARECOHcalCalHO = cms.Path(process.seqALCARECOHcalCalHO+process.ALCARECOHcalCalHODQM)


process.pathALCARECOTkAlCosmicsCTFHLT = cms.Path(process.seqALCARECOTkAlCosmicsCTFHLT+process.ALCARECOTkAlCosmicsCTFDQM)


process.pathALCARECOTkAlCosmicsCosmicTFHLT = cms.Path(process.seqALCARECOTkAlCosmicsCosmicTFHLT+process.ALCARECOTkAlCosmicsCosmicTFDQM)


process.pathALCARECOTkAlCosmicsRegionalHLT = cms.Path(process.seqALCARECOTkAlCosmicsRegionalHLT+process.ALCARECOTkAlCosmicsRegionalDQM)


process.pathALCARECOHcalCalMinBias = cms.Path(process.seqALCARECOHcalCalMinBias+process.ALCARECOHcalCalPhisymDQM)


process.pathALCARECOTkAlCosmicsRegional = cms.Path(process.seqALCARECOTkAlCosmicsRegional+process.ALCARECOTkAlCosmicsRegionalDQM)


process.pathALCARECOHcalCalDijets = cms.Path(process.seqALCARECOHcalCalDijets+process.ALCARECOHcalCalDiJetsDQM)


process.pathALCARECOMuAlZMuMu = cms.Path(process.seqALCARECOMuAlZMuMu+process.ALCARECOMuAlZMuMuDQM)


process.pathALCARECOEcalCalPi0Calib = cms.Path(process.seqALCARECOEcalCalPi0Calib+process.ALCARECOEcalCalPi0CalibDQM)


process.pathALCARECOTkAlBeamHalo = cms.Path(process.seqALCARECOTkAlBeamHalo+process.ALCARECOTkAlBeamHaloDQM)


process.pathALCARECOTkAlCosmicsRegional0T = cms.Path(process.seqALCARECOTkAlCosmicsRegional0T+process.ALCARECOTkAlCosmicsRegional0TDQM)


process.pathALCARECOSiPixelLorentzAngle = cms.Path(process.seqALCARECOSiPixelLorentzAngle)


process.pathALCARECOPromptCalibProd = cms.Path(process.seqALCARECOPromptCalibProd)


process.pathALCARECODtCalibHI = cms.Path(process.seqALCARECODtCalibHI+process.ALCARECODTCalibSynchDQM)


process.pathALCARECOTkAlCosmicsCosmicTF0T = cms.Path(process.seqALCARECOTkAlCosmicsCosmicTF0T+process.ALCARECOTkAlCosmicsCosmicTF0TDQM)


process.pathALCARECOTkAlCosmicsCTF0THLT = cms.Path(process.seqALCARECOTkAlCosmicsCTF0THLT+process.ALCARECOTkAlCosmicsCTF0TDQM)


process.pathALCARECOMuAlCalIsolatedMu = cms.Path(process.seqALCARECOMuAlCalIsolatedMu+process.ALCARECOMuAlCalIsolatedMuDQM+process.ALCARECODTCalibrationDQM)


process.pathALCARECOSiStripCalZeroBias = cms.Path(process.seqALCARECOSiStripCalZeroBias+process.ALCARECOSiStripCalZeroBiasDQM)


process.pathALCARECOEcalCalEtaCalib = cms.Path(process.seqALCARECOEcalCalEtaCalib+process.ALCARECOEcalCalEtaCalibDQM)


process.pathALCARECOHcalCalIsoTrk = cms.Path(process.seqALCARECOHcalCalIsoTrk+process.ALCARECOHcalCalIsoTrackDQM)


process.pathALCARECOSiStripCalMinBias = cms.Path(process.seqALCARECOSiStripCalMinBias+process.ALCARECOSiStripCalMinBiasDQM)


process.pathALCARECODQM = cms.Path(process.MEtoEDMConverter)


process.pathALCARECOTkAlCosmicsRegional0THLT = cms.Path(process.seqALCARECOTkAlCosmicsRegional0THLT+process.ALCARECOTkAlCosmicsRegional0TDQM)


process.pathALCARECOTkAlLAS = cms.Path(process.seqALCARECOTkAlLAS+process.ALCARECOTkAlLASDQM)


process.pathALCARECOTkAlJpsiMuMuHI = cms.Path(process.seqALCARECOTkAlJpsiMuMuHI+process.ALCARECOTkAlJpsiMuMuHIDQM)


process.pathALCARECORpcCalHLT = cms.Path(process.seqALCARECORpcCalHLT)


process.pathALCARECOHcalCalGammaJet = cms.Path(process.seqALCARECOHcalCalGammaJet)


process.pathALCARECOMuAlBeamHaloOverlaps = cms.Path(process.seqALCARECOMuAlBeamHaloOverlaps+process.ALCARECOMuAlBeamHaloOverlapsDQM)


process.pathALCARECOTkAlCosmicsCosmicTF0THLT = cms.Path(process.seqALCARECOTkAlCosmicsCosmicTF0THLT+process.ALCARECOTkAlCosmicsCosmicTF0TDQM)


process.pathALCARECOTkAlCosmicsInCollisions = cms.Path(process.seqALCARECOTkAlCosmicsInCollisions+process.ALCARECOTkAlCosmicsInCollisionsDQM)


process.pathALCARECOTkAlUpsilonMuMuHI = cms.Path(process.seqALCARECOTkAlUpsilonMuMuHI+process.ALCARECOTkAlUpsilonMuMuHIDQM)


process.pathALCARECOHcalCalNoise = cms.Path(process.seqALCARECOHcalCalNoise)


process.pathALCARECOTkAlZMuMuHI = cms.Path(process.seqALCARECOTkAlZMuMuHI+process.ALCARECOTkAlZMuMuHIDQM)


process.pathALCARECOMuAlOverlaps = cms.Path(process.seqALCARECOMuAlOverlaps+process.ALCARECOMuAlOverlapsDQM)


process.pathALCARECOTkAlCosmicsCosmicTF = cms.Path(process.seqALCARECOTkAlCosmicsCosmicTF+process.ALCARECOTkAlCosmicsCosmicTFDQM)


process.pathALCARECOMuAlGlobalCosmics = cms.Path(process.seqALCARECOMuAlGlobalCosmics+process.ALCARECOMuAlGlobalCosmicsDQM)


process.pathALCARECOSiStripPCLHistos = cms.Path(process.seqALCARECOSiStripPCLHistos)


process.pathALCARECOPromptCalibProdSiPixelAli = cms.Path(process.seqALCARECOPromptCalibProdSiPixelAli)


process.dqmoffline_step = cms.Path(process.DQMOfflineHeavyIons)


process.endjob_step = cms.EndPath(process.endOfProcess)


process.write_FEVT_step = cms.EndPath(process.write_FEVT)


process.write_ALCARECO_step = cms.EndPath(process.write_ALCARECO)


process.DBService = cms.Service("DBService")


process.DQMStore = cms.Service("DQMStore")


process.FastTimerService = cms.Service("FastTimerService",
    dqmLumiSectionsRange = cms.untracked.uint32(2500),
    dqmModuleTimeRange = cms.untracked.double(100.0),
    dqmModuleTimeResolution = cms.untracked.double(0.5),
    dqmPath = cms.untracked.string('DQM/TimerService'),
    dqmPathTimeRange = cms.untracked.double(10000.0),
    dqmPathTimeResolution = cms.untracked.double(10.0),
    dqmTimeRange = cms.untracked.double(10000.0),
    dqmTimeResolution = cms.untracked.double(10.0),
    enableDQM = cms.untracked.bool(True),
    enableDQMSummary = cms.untracked.bool(True),
    enableDQMbyLumiSection = cms.untracked.bool(True),
    enableDQMbyModule = cms.untracked.bool(False),
    enableDQMbyModuleType = cms.untracked.bool(False),
    enableDQMbyPathActive = cms.untracked.bool(True),
    enableDQMbyPathCounters = cms.untracked.bool(True),
    enableDQMbyPathDetails = cms.untracked.bool(True),
    enableDQMbyPathExclusive = cms.untracked.bool(False),
    enableDQMbyPathOverhead = cms.untracked.bool(False),
    enableDQMbyPathTotal = cms.untracked.bool(True),
    enableDQMbyProcesses = cms.untracked.bool(False),
    enableTimingExclusive = cms.untracked.bool(False),
    enableTimingModules = cms.untracked.bool(False),
    enableTimingPaths = cms.untracked.bool(True),
    enableTimingSummary = cms.untracked.bool(True),
    skipFirstPath = cms.untracked.bool(False),
    useRealTimeClock = cms.untracked.bool(False)
)


process.MessageLogger = cms.Service("MessageLogger",
    FrameworkJobReport = cms.untracked.PSet(
        FwkJob = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        optionalPSet = cms.untracked.bool(True)
    ),
    categories = cms.untracked.vstring('FwkJob', 
        'FwkReport', 
        'FwkSummary', 
        'Root_NoDictionary'),
    cerr = cms.untracked.PSet(
        FwkJob = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        FwkReport = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True),
            reportEvery = cms.untracked.int32(1)
        ),
        FwkSummary = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000),
            optionalPSet = cms.untracked.bool(True),
            reportEvery = cms.untracked.int32(1)
        ),
        INFO = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        Root_NoDictionary = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000)
        ),
        noTimeStamps = cms.untracked.bool(False),
        optionalPSet = cms.untracked.bool(True),
        threshold = cms.untracked.string('INFO')
    ),
    cerr_stats = cms.untracked.PSet(
        optionalPSet = cms.untracked.bool(True),
        output = cms.untracked.string('cerr'),
        threshold = cms.untracked.string('WARNING')
    ),
    cout = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    debugModules = cms.untracked.vstring(),
    debugs = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    default = cms.untracked.PSet(

    ),
    destinations = cms.untracked.vstring('warnings', 
        'errors', 
        'infos', 
        'debugs', 
        'cout', 
        'cerr'),
    errors = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    fwkJobReports = cms.untracked.vstring('FrameworkJobReport'),
    infos = cms.untracked.PSet(
        Root_NoDictionary = cms.untracked.PSet(
            limit = cms.untracked.int32(0),
            optionalPSet = cms.untracked.bool(True)
        ),
        optionalPSet = cms.untracked.bool(True),
        placeholder = cms.untracked.bool(True)
    ),
    statistics = cms.untracked.vstring('cerr_stats'),
    suppressDebug = cms.untracked.vstring(),
    suppressInfo = cms.untracked.vstring(),
    suppressWarning = cms.untracked.vstring('particleFlowDisplacedVertexCandidate'),
    warnings = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    )
)


process.RandomNumberGeneratorService = cms.Service("RandomNumberGeneratorService",
    LHCTransport = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    MuonSimHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(987346)
    ),
    VtxSmeared = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(98765432)
    ),
    ecalPreshowerRecHit = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(6541321)
    ),
    ecalRecHit = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(654321)
    ),
    externalLHEProducer = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(234567)
    ),
    famosPileUp = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    famosSimHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(13579)
    ),
    g4SimHits = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(11)
    ),
    generator = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    hbhereco = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hfreco = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    hiSignal = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(123456789)
    ),
    hiSignalG4SimHits = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(11)
    ),
    hiSignalLHCTransport = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(88776655)
    ),
    horeco = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(541321)
    ),
    l1ParamMuons = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(6453209)
    ),
    mix = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixData = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(12345)
    ),
    mixGenPU = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixRecoTracks = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    mixSimCaloHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(918273)
    ),
    paramMuons = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(54525)
    ),
    saveFileName = cms.untracked.string(''),
    siTrackerGaussianSmearingRecHits = cms.PSet(
        engineName = cms.untracked.string('TRandom3'),
        initialSeed = cms.untracked.uint32(24680)
    ),
    simBeamSpotFilter = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(87654321)
    ),
    simMuonCSCDigis = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(11223344)
    ),
    simMuonDTDigis = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simMuonRPCDigis = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(1234567)
    ),
    simSiStripDigiSimLink = cms.PSet(
        engineName = cms.untracked.string('HepJamesRandom'),
        initialSeed = cms.untracked.uint32(1234567)
    )
)


process.SiStripDetInfoFileReader = cms.Service("SiStripDetInfoFileReader")


process.SimpleMemoryCheck = cms.Service("SimpleMemoryCheck",
    jobReportOutputOnly = cms.untracked.bool(True)
)


process.Timing = cms.Service("Timing",
    summaryOnly = cms.untracked.bool(True)
)


process.TkDetMap = cms.Service("TkDetMap")


process.AnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum')
)


process.AnalyticalPropagatorParabolicMF = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorParabolicMf'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf')
)


process.AnyDirectionAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnyDirectionAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('anyDirection')
)


process.CSCChannelMapperESProducer = cms.ESProducer("CSCChannelMapperESProducer",
    AlgoName = cms.string('CSCChannelMapperPostls1')
)


process.CSCGeometryESModule = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    debugV = cms.untracked.bool(False),
    useCentreTIOffsets = cms.bool(False),
    useDDD = cms.bool(False),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.CSCIndexerESProducer = cms.ESProducer("CSCIndexerESProducer",
    AlgoName = cms.string('CSCIndexerPostls1')
)


process.CaloGeometryBuilder = cms.ESProducer("CaloGeometryBuilder",
    SelectedCalos = cms.vstring('HCAL', 
        'ZDC', 
        'CASTOR', 
        'EcalBarrel', 
        'EcalEndcap', 
        'EcalPreshower', 
        'TOWER')
)


process.CaloTPGTranscoder = cms.ESProducer("CaloTPGTranscoderULUTs",
    LUTfactor = cms.vint32(1, 2, 5, 0),
    RCTLSB = cms.double(0.25),
    ZS = cms.vint32(4, 2, 1, 0),
    hcalLUT1 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/outputLUTtranscoder_physics.dat'),
    hcalLUT2 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/TPGcalcDecompress2.txt'),
    ietaLowerBound = cms.vint32(1, 18, 27, 29),
    ietaUpperBound = cms.vint32(17, 26, 28, 32),
    nominal_gain = cms.double(0.177),
    read_Ascii_Compression_LUTs = cms.bool(False),
    read_Ascii_RCT_LUTs = cms.bool(False)
)


process.CaloTopologyBuilder = cms.ESProducer("CaloTopologyBuilder")


process.CaloTowerConstituentsMapBuilder = cms.ESProducer("CaloTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/CaloTopology/data/CaloTowerEEGeometric.map.gz')
)


process.CaloTowerGeometryFromDBEP = cms.ESProducer("CaloTowerGeometryFromDBEP",
    applyAlignment = cms.bool(False),
    hcalTopologyConstants = cms.PSet(
        maxDepthHB = cms.int32(2),
        maxDepthHE = cms.int32(3),
        mode = cms.string('HcalTopologyMode::LHC')
    )
)


process.CastorDbProducer = cms.ESProducer("CastorDbProducer")


process.CastorGeometryFromDBEP = cms.ESProducer("CastorGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.Chi2EstimatorForMuRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForMuRefit'),
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0)
)


process.Chi2EstimatorForMuonTrackLoader = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForMuonTrackLoader'),
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0)
)


process.Chi2EstimatorForRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2EstimatorForRefit'),
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0)
)


process.Chi2MeasurementEstimator = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.CloseComponentsMerger5D = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger5D'),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D'),
    MaxComponents = cms.int32(12)
)


process.CloseComponentsMerger_forPreId = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger_forPreId'),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D'),
    MaxComponents = cms.int32(4)
)


process.ClusterShapeHitFilterESProducer = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('ClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/pixelShape.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    )
)


process.DTGeometryESModule = cms.ESProducer("DTGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    fromDDD = cms.bool(False)
)


process.DummyDetLayerGeometry = cms.ESProducer("DetLayerGeometryESProducer",
    ComponentName = cms.string('DummyDetLayerGeometry')
)


process.EcalBarrelGeometryFromDBEP = cms.ESProducer("EcalBarrelGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalElectronicsMappingBuilder = cms.ESProducer("EcalElectronicsMappingBuilder")


process.EcalEndcapGeometryFromDBEP = cms.ESProducer("EcalEndcapGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalLaserCorrectionService = cms.ESProducer("EcalLaserCorrectionService")


process.EcalPreshowerGeometryFromDBEP = cms.ESProducer("EcalPreshowerGeometryFromDBEP",
    applyAlignment = cms.bool(True)
)


process.EcalTrigTowerConstituentsMapBuilder = cms.ESProducer("EcalTrigTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/EcalMapping/data/EndCap_TTMap.txt')
)


process.ElectronChi2 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('ElectronChi2'),
    MaxChi2 = cms.double(2000.0),
    nSigma = cms.double(3.0)
)


process.ElectronMaterialEffects = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerCorrection = cms.int32(2),
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC6_O5.par'),
    ComponentName = cms.string('ElectronMaterialEffects'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    Mass = cms.double(0.000511),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator')
)


process.ElectronMaterialEffects_forPreId = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerCorrection = cms.int32(2),
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC3_O5.par'),
    ComponentName = cms.string('ElectronMaterialEffects_forPreId'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    Mass = cms.double(0.000511),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator')
)


process.EstimatorForSTA = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('Chi2STA'),
    MaxChi2 = cms.double(1000.0),
    nSigma = cms.double(3.0)
)


process.FittingSmootherRKP5 = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('FittingSmootherRKP5'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(4),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother')
)


process.FlexibleKFFittingSmoother = cms.ESProducer("FlexibleKFFittingSmootherESProducer",
    ComponentName = cms.string('FlexibleKFFittingSmoother'),
    looperFitter = cms.string('LooperFittingSmoother'),
    standardFitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK')
)


process.GlbMuKFFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('GlbMuKFFitter'),
    Estimator = cms.string('Chi2EstimatorForMuRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.GlobalDetLayerGeometry = cms.ESProducer("GlobalDetLayerGeometryESProducer",
    ComponentName = cms.string('GlobalDetLayerGeometry')
)


process.GlobalTrackingGeometryESProducer = cms.ESProducer("GlobalTrackingGeometryESProducer")


process.GsfElectronFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('GsfElectronFittingSmoother'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('GsfTrajectoryFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('GsfTrajectorySmoother')
)


process.GsfTrajectoryFitter = cms.ESProducer("GsfTrajectoryFitterESProducer",
    ComponentName = cms.string('GsfTrajectoryFitter'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects'),
    Merger = cms.string('CloseComponentsMerger5D'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.GsfTrajectoryFitter_forPreId = cms.ESProducer("GsfTrajectoryFitterESProducer",
    ComponentName = cms.string('GsfTrajectoryFitter_forPreId'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId'),
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.GsfTrajectorySmoother = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ComponentName = cms.string('GsfTrajectorySmoother'),
    ErrorRescaling = cms.double(100.0),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects'),
    Merger = cms.string('CloseComponentsMerger5D'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.GsfTrajectorySmoother_forPreId = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ComponentName = cms.string('GsfTrajectorySmoother_forPreId'),
    ErrorRescaling = cms.double(100.0),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId'),
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.HcalAlignmentEP = cms.ESProducer("HcalAlignmentEP")


process.HcalGeometryFromDBEP = cms.ESProducer("HcalGeometryFromDBEP",
    applyAlignment = cms.bool(True),
    hcalTopologyConstants = cms.PSet(
        maxDepthHB = cms.int32(2),
        maxDepthHE = cms.int32(3),
        mode = cms.string('HcalTopologyMode::LHC')
    )
)


process.HcalTPGCoderULUT = cms.ESProducer("HcalTPGCoderULUT",
    FGLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/HBHE_FG_LUT.dat'),
    LUTGenerationMode = cms.bool(False),
    MaskBit = cms.int32(32768),
    RCalibFile = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/RecHit-TPG-calib.dat'),
    hcalTopologyConstants = cms.PSet(
        maxDepthHB = cms.int32(2),
        maxDepthHE = cms.int32(3),
        mode = cms.string('HcalTopologyMode::LHC')
    ),
    inputLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/inputLUTcoder_physics.dat'),
    read_Ascii_LUTs = cms.bool(False),
    read_FG_LUTs = cms.bool(False),
    read_XML_LUTs = cms.bool(False)
)


process.HcalTrigTowerGeometryESProducer = cms.ESProducer("HcalTrigTowerGeometryESProducer")


process.KFFitterForRefitInsideOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.KFFitterForRefitOutsideIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.KFFittingSmootheForSTA = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFitterSmootherSTA'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('KFFitterSTA'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmootherSTA')
)


process.KFFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmoother'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('KFFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('KFSmoother')
)


process.KFFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother')
)


process.KFSmootherForMuonTrackLoader = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForMuonTrackLoader'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.KFSmootherForMuonTrackLoaderL3 = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForMuonTrackLoaderL3'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Propagator = cms.string('SmartPropagatorAnyOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.KFSmootherForRefitInsideOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFSmootherForRefitOutsideIn = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFSwitching1DUpdatorESProducer = cms.ESProducer("KFSwitching1DUpdatorESProducer",
    ComponentName = cms.string('KFSwitching1DUpdator'),
    doEndCap = cms.bool(False)
)


process.KFTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForSTA = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('KFFitterSTA'),
    Estimator = cms.string('Chi2STA'),
    Propagator = cms.string('SteppingHelixPropagatorAny'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.KFTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFTrajectorySmootherForSTA = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('KFSmootherSTA'),
    Estimator = cms.string('Chi2STA'),
    Propagator = cms.string('SteppingHelixPropagatorOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.KFUpdatorESProducer = cms.ESProducer("KFUpdatorESProducer",
    ComponentName = cms.string('KFUpdator')
)


process.KullbackLeiblerDistance5D = cms.ESProducer("DistanceBetweenComponentsESProducer5D",
    ComponentName = cms.string('KullbackLeiblerDistance5D'),
    DistanceMeasure = cms.string('KullbackLeibler')
)


process.L1DTConfigFromDB = cms.ESProducer("DTConfigDBProducer",
    DTTPGMap = cms.untracked.PSet(
    **dict(
        [
            ("wh0st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh0st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se4" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("wh1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se4" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("wh1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se4" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("wh1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se3" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("whm1st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se3" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("whm1st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se3" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("whm1st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
        ] +
        [
            ("whm2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ]
        )
    ),
    DTTPGParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SectCollParameters = cms.PSet(
            Debug = cms.untracked.bool(False),
            SCCSP1 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCCSP4 = cms.int32(0),
            SCCSP5 = cms.int32(0),
            SCECF1 = cms.bool(False),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCECF4 = cms.bool(False)
        ),
        TUParameters = cms.PSet(
            BtiParameters = cms.PSet(
                AC1 = cms.int32(0),
                AC2 = cms.int32(3),
                ACH = cms.int32(1),
                ACL = cms.int32(2),
                CH = cms.int32(41),
                CL = cms.int32(22),
                DEAD = cms.int32(31),
                Debug = cms.untracked.int32(0),
                KACCTHETA = cms.int32(1),
                KMAX = cms.int32(64),
                LH = cms.int32(21),
                LL = cms.int32(2),
                LTS = cms.int32(3),
                PTMS0 = cms.int32(0),
                PTMS1 = cms.int32(0),
                PTMS10 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS12 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS15 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS20 = cms.int32(1),
                PTMS21 = cms.int32(1),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                PTMS3 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS31 = cms.int32(0),
                PTMS4 = cms.int32(1),
                PTMS5 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS8 = cms.int32(1),
                PTMS9 = cms.int32(1),
                RE43 = cms.int32(2),
                RH = cms.int32(61),
                RL = cms.int32(42),
                RON = cms.bool(True),
                SET = cms.int32(7),
                ST43 = cms.int32(42),
                WEN0 = cms.int32(1),
                WEN1 = cms.int32(1),
                WEN2 = cms.int32(1),
                WEN3 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                WEN6 = cms.int32(1),
                WEN7 = cms.int32(1),
                WEN8 = cms.int32(1),
                XON = cms.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            LutParameters = cms.PSet(
                BTIC = cms.untracked.int32(0),
                D = cms.untracked.double(0),
                Debug = cms.untracked.bool(False),
                WHEEL = cms.untracked.int32(-1),
                XCN = cms.untracked.double(0)
            ),
            TSPhiParameters = cms.PSet(
                Debug = cms.untracked.bool(False),
                TSMCCE1 = cms.bool(True),
                TSMCCE2 = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSMHSP = cms.int32(1),
                TSMHTE1 = cms.bool(True),
                TSMHTE2 = cms.bool(False),
                TSMHTEC = cms.bool(False),
                TSMMSK1 = cms.int32(312),
                TSMMSK2 = cms.int32(312),
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSMNOEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSSCCEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSGS1 = cms.int32(1),
                TSSGS2 = cms.int32(1),
                TSSHTE1 = cms.bool(True),
                TSSHTE2 = cms.bool(False),
                TSSHTEC = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSSMSK2 = cms.int32(312),
                TSSNOE1 = cms.bool(True),
                TSSNOE2 = cms.bool(False),
                TSSNOEC = cms.bool(False),
                TSTREN0 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN10 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN18 = cms.bool(True),
                TSTREN19 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN9 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            TracoParameters = cms.PSet(
                BTIC = cms.int32(32),
                DD = cms.int32(18),
                Debug = cms.untracked.int32(0),
                FHISM = cms.int32(0),
                FHTMSK = cms.int32(0),
                FHTPRF = cms.int32(1),
                FLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                FSLMSK = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                LTF = cms.int32(0),
                LTS = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                REUSEI = cms.int32(1),
                REUSEO = cms.int32(1),
                SHISM = cms.int32(0),
                SHTMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SLTMSK = cms.int32(1),
                SPRGCOMP = cms.int32(2),
                SSLMSK = cms.int32(0),
                TRGENB0 = cms.int32(1),
                TRGENB1 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB2 = cms.int32(1),
                TRGENB3 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                TRGENB9 = cms.int32(1)
            )
        )
    ),
    TracoLutsFromDB = cms.bool(True),
    UseBtiAcceptParam = cms.bool(True),
    UseT0 = cms.bool(False),
    bxOffset = cms.int32(19),
    cfgConfig = cms.bool(False),
    debug = cms.bool(False),
    debugBti = cms.int32(0),
    debugDB = cms.bool(False),
    debugLUTs = cms.bool(False),
    debugPed = cms.bool(False),
    debugSC = cms.bool(False),
    debugTSP = cms.bool(False),
    debugTST = cms.bool(False),
    debugTU = cms.bool(False),
    debugTraco = cms.int32(0),
    finePhase = cms.double(25.0)
)


process.LooperFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('LooperFittingSmoother'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('LooperFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('LooperSmoother')
)


process.LooperTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('LooperFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.LooperTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('LooperSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3)
)


process.MRHChi2MeasurementEstimator = cms.ESProducer("MRHChi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('MRHChi2'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.MRHFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('MRHFittingSmoother'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('MRHFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('MRHSmoother')
)


process.MRHTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('MRHFitter'),
    Estimator = cms.string('MRHChi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.MRHTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('MRHSmoother'),
    Estimator = cms.string('MRHChi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.MaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterial'),
    Mass = cms.double(0.139),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.MaterialPropagatorParabolicMF = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialParabolicMf'),
    Mass = cms.double(0.139),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.MeasurementTracker = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string(''),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(True),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(True),
    UseStripModuleQualityDB = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    )
)


process.MeasurementTrackerBottom = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string('MeasurementTrackerBottom'),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(True),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(True),
    UseStripModuleQualityDB = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    ),
    pixelClusterProducer = cms.string('siPixelClustersBottom'),
    stripClusterProducer = cms.string('siStripClustersBottom')
)


process.MeasurementTrackerTop = cms.ESProducer("MeasurementTrackerESProducer",
    ComponentName = cms.string('MeasurementTrackerTop'),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    MaskBadAPVFibers = cms.bool(True),
    PixelCPE = cms.string('PixelCPEGeneric'),
    SiStripQualityLabel = cms.string(''),
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    UsePixelModuleQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    UseStripAPVFiberQualityDB = cms.bool(True),
    UseStripModuleQualityDB = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    badStripCuts = cms.PSet(
        TEC = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TIB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TID = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        ),
        TOB = cms.PSet(
            maxBad = cms.uint32(4),
            maxConsecutiveBad = cms.uint32(2)
        )
    ),
    pixelClusterProducer = cms.string('siPixelClustersTop'),
    stripClusterProducer = cms.string('siStripClustersTop')
)


process.MuonDetLayerGeometryESProducer = cms.ESProducer("MuonDetLayerGeometryESProducer")


process.MuonTransientTrackingRecHitBuilderESProducer = cms.ESProducer("MuonTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('MuonRecHitBuilder')
)


process.OppositeAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorOpposite'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.OppositeAnalyticalPropagatorParabolicMF = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('AnalyticalPropagatorParabolicMfOpposite'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf')
)


process.OppositeMaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialOpposite'),
    Mass = cms.double(0.139),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.OppositeMaterialPropagatorParabolicMF = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialParabolicMfOpposite'),
    Mass = cms.double(0.139),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string('ParabolicMf'),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.ParabolicParametrizedMagneticFieldProducer = cms.ESProducer("AutoParametrizedMagneticFieldProducer",
    label = cms.untracked.string('ParabolicMf'),
    valueOverride = cms.int32(-1),
    version = cms.string('Parabolic')
)


process.PixelCPEGenericESProducer = cms.ESProducer("PixelCPEGenericESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('PixelCPEGeneric'),
    DoCosmics = cms.bool(False),
    EdgeClusterErrorX = cms.double(50.0),
    EdgeClusterErrorY = cms.double(85.0),
    IrradiationBiasCorrection = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    MagneticFieldRecord = cms.ESInputTag(""),
    PixelErrorParametrization = cms.string('NOTcmsim'),
    TruncatePixelCharge = cms.bool(True),
    UseErrorsFromTemplates = cms.bool(True),
    eff_charge_cut_highX = cms.double(1.0),
    eff_charge_cut_highY = cms.double(1.0),
    eff_charge_cut_lowX = cms.double(0.0),
    eff_charge_cut_lowY = cms.double(0.0),
    inflate_all_errors_no_trk_angle = cms.bool(False),
    inflate_errors = cms.bool(False),
    size_cutX = cms.double(3.0),
    size_cutY = cms.double(3.0),
    useLAAlignmentOffsets = cms.bool(False),
    useLAWidthFromDB = cms.bool(True)
)


process.PropagatorWithMaterialForLoopers = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialForLoopers'),
    Mass = cms.double(0.1396),
    MaxDPhi = cms.double(4.0),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1),
    useOldAnalPropLogic = cms.bool(False),
    useRungeKutta = cms.bool(False)
)


process.PropagatorWithMaterialForLoopersOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('PropagatorWithMaterialForLoopersOpposite'),
    Mass = cms.double(0.1396),
    MaxDPhi = cms.double(4.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1),
    useOldAnalPropLogic = cms.bool(False),
    useRungeKutta = cms.bool(False)
)


process.RK1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RK1DFittingSmoother'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('RK1DFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RK1DSmoother')
)


process.RK1DTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('RK1DFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFSwitching1DUpdator'),
    minHits = cms.int32(3)
)


process.RK1DTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('RK1DSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFSwitching1DUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.RKFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKFittingSmoother'),
    EstimateCut = cms.double(-1.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(5),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother')
)


process.RKOutliers1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKOutliers1DFittingSmoother'),
    EstimateCut = cms.double(20.0),
    Fitter = cms.string('RK1DFitter'),
    LogPixelProbabilityCut = cms.double(-16.0),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RK1DSmoother')
)


process.RKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    ComponentName = cms.string('RKFitter'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    minHits = cms.int32(3)
)


process.RKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    ComponentName = cms.string('RKSmoother'),
    Estimator = cms.string('Chi2'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Updator = cms.string('KFUpdator'),
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3)
)


process.RPCConeBuilder = cms.ESProducer("RPCConeBuilder",
    towerBeg = cms.int32(0),
    towerEnd = cms.int32(16)
)


process.RPCGeometryESModule = cms.ESProducer("RPCGeometryESModule",
    compatibiltyWith11 = cms.untracked.bool(True),
    useDDD = cms.untracked.bool(False)
)


process.RungeKuttaTrackerPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('RungeKuttaTrackerPropagator'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.RungeKuttaTrackerPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    Mass = cms.double(0.105),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(True)
)


process.SiStripRecHitMatcherESProducer = cms.ESProducer("SiStripRecHitMatcherESProducer",
    ComponentName = cms.string('StandardMatcher'),
    NSigmaInside = cms.double(3.0),
    PreFilter = cms.bool(False)
)


process.SmartPropagator = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagator'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.SmartPropagatorAny = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAny'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterial')
)


process.SmartPropagatorAnyOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite')
)


process.SmartPropagatorAnyRK = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyRK'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator')
)


process.SmartPropagatorAnyRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorAnyRKOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite')
)


process.SmartPropagatorOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite')
)


process.SmartPropagatorRK = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorRK'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator')
)


process.SmartPropagatorRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    ComponentName = cms.string('SmartPropagatorRKOpposite'),
    Epsilon = cms.double(5.0),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite')
)


process.SteppingHelixPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlong'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlongNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAny'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorAnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAnyNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorL2Along = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Along'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2AlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2AlongNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('alongMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2Any = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Any'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2AnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2AnyNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('anyDirection'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2Opposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2Opposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorL2OppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorL2OppositeNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(True)
)


process.SteppingHelixPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOpposite'),
    NoErrorPropagation = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.SteppingHelixPropagatorOppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    ApplyRadX0Correction = cms.bool(True),
    AssumeNoMaterial = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOppositeNoError'),
    NoErrorPropagation = cms.bool(True),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SetVBFPointer = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    debug = cms.bool(False),
    endcapShiftInZNeg = cms.double(0.0),
    endcapShiftInZPos = cms.double(0.0),
    returnTangentPlane = cms.bool(True),
    sendLogWarning = cms.bool(False),
    useEndcapShiftsInZ = cms.bool(False),
    useInTeslaFromMagField = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    useMagVolumes = cms.bool(True),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False)
)


process.StraightLinePropagator = cms.ESProducer("StraightLinePropagatorESProducer",
    ComponentName = cms.string('StraightLinePropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.StripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('SimpleStripCPE'),
    ComponentType = cms.string('SimpleStripCPE'),
    parameters = cms.PSet(

    )
)


process.StripCPEfromTrackAngleESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('StripCPEfromTrackAngle'),
    ComponentType = cms.string('StripCPEfromTrackAngle'),
    parameters = cms.PSet(
        mLC_P0 = cms.double(-0.326),
        mLC_P1 = cms.double(0.618),
        mLC_P2 = cms.double(0.3),
        mTEC_P0 = cms.double(-1.885),
        mTEC_P1 = cms.double(0.471),
        mTIB_P0 = cms.double(-0.742),
        mTIB_P1 = cms.double(0.202),
        mTID_P0 = cms.double(-1.427),
        mTID_P1 = cms.double(0.433),
        mTOB_P0 = cms.double(-1.026),
        mTOB_P1 = cms.double(0.253),
        maxChgOneMIP = cms.double(6000.0),
        useLegacyError = cms.bool(False)
    )
)


process.TTRHBuilderAngleAndTemplate = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithAngleAndTemplate'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPETemplateReco'),
    StripCPE = cms.string('StripCPEfromTrackAngle')
)


process.TrackerRecoGeometryESProducer = cms.ESProducer("TrackerRecoGeometryESProducer")


process.TransientTrackBuilderESProducer = cms.ESProducer("TransientTrackBuilderESProducer",
    ComponentName = cms.string('TransientTrackBuilder')
)


process.VolumeBasedMagneticFieldESProducer = cms.ESProducer("VolumeBasedMagneticFieldESProducerFromDB",
    debugBuilder = cms.untracked.bool(False),
    label = cms.untracked.string(''),
    valueOverride = cms.int32(-1)
)


process.ZdcGeometryFromDBEP = cms.ESProducer("ZdcGeometryFromDBEP",
    applyAlignment = cms.bool(False)
)


process.ak10PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK10PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak10PFCHSL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak10PFCHSL1Fastjet', 
        'ak10PFCHSL2Relative', 
        'ak10PFCHSL3Absolute', 
        'ak10PFCHSResidual')
)


process.ak10PFCHSL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak10PFCHSL1Offset', 
        'ak10PFCHSL2Relative', 
        'ak10PFCHSL3Absolute', 
        'ak10PFCHSResidual')
)


process.ak10PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK10PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak10PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak10PFCHSL2Relative', 
        'ak10PFCHSL3Absolute')
)


process.ak10PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak10PFCHSL2Relative', 
        'ak10PFCHSL3Absolute', 
        'ak10PFCHSResidual')
)


process.ak10PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK10PFchs'),
    level = cms.string('L2Relative')
)


process.ak10PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK10PFchs'),
    level = cms.string('L3Absolute')
)


process.ak10PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK10PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak10PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK10PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak10PFL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak10PFL1Fastjet', 
        'ak10PFL2Relative', 
        'ak10PFL3Absolute', 
        'ak10PFResidual')
)


process.ak10PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak10PFL1Offset', 
        'ak10PFL2Relative', 
        'ak10PFL3Absolute', 
        'ak10PFResidual')
)


process.ak10PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK10PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak10PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak10PFL2Relative', 
        'ak10PFL3Absolute')
)


process.ak10PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak10PFL2Relative', 
        'ak10PFL3Absolute', 
        'ak10PFResidual')
)


process.ak10PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK10PF'),
    level = cms.string('L2Relative')
)


process.ak10PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK10PF'),
    level = cms.string('L3Absolute')
)


process.ak10PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK10PF'),
    level = cms.string('L2L3Residual')
)


process.ak1PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK1PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak1PFCHSL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak1PFCHSL1Fastjet', 
        'ak1PFCHSL2Relative', 
        'ak1PFCHSL3Absolute', 
        'ak1PFCHSResidual')
)


process.ak1PFCHSL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak1PFCHSL1Offset', 
        'ak1PFCHSL2Relative', 
        'ak1PFCHSL3Absolute', 
        'ak1PFCHSResidual')
)


process.ak1PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK1PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak1PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak1PFCHSL2Relative', 
        'ak1PFCHSL3Absolute')
)


process.ak1PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak1PFCHSL2Relative', 
        'ak1PFCHSL3Absolute', 
        'ak1PFCHSResidual')
)


process.ak1PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK1PFchs'),
    level = cms.string('L2Relative')
)


process.ak1PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK1PFchs'),
    level = cms.string('L3Absolute')
)


process.ak1PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK1PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak1PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK1PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak1PFL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak1PFL1Fastjet', 
        'ak1PFL2Relative', 
        'ak1PFL3Absolute', 
        'ak1PFResidual')
)


process.ak1PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak1PFL1Offset', 
        'ak1PFL2Relative', 
        'ak1PFL3Absolute', 
        'ak1PFResidual')
)


process.ak1PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK1PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak1PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak1PFL2Relative', 
        'ak1PFL3Absolute')
)


process.ak1PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak1PFL2Relative', 
        'ak1PFL3Absolute', 
        'ak1PFResidual')
)


process.ak1PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK1PF'),
    level = cms.string('L2Relative')
)


process.ak1PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK1PF'),
    level = cms.string('L3Absolute')
)


process.ak1PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK1PF'),
    level = cms.string('L2L3Residual')
)


process.ak2PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK2PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak2PFCHSL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak2PFCHSL1Fastjet', 
        'ak2PFCHSL2Relative', 
        'ak2PFCHSL3Absolute', 
        'ak2PFCHSResidual')
)


process.ak2PFCHSL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak2PFCHSL1Offset', 
        'ak2PFCHSL2Relative', 
        'ak2PFCHSL3Absolute', 
        'ak2PFCHSResidual')
)


process.ak2PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK2PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak2PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak2PFCHSL2Relative', 
        'ak2PFCHSL3Absolute')
)


process.ak2PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak2PFCHSL2Relative', 
        'ak2PFCHSL3Absolute', 
        'ak2PFCHSResidual')
)


process.ak2PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK2PFchs'),
    level = cms.string('L2Relative')
)


process.ak2PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK2PFchs'),
    level = cms.string('L3Absolute')
)


process.ak2PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK2PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak2PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK2PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak2PFL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak2PFL1Fastjet', 
        'ak2PFL2Relative', 
        'ak2PFL3Absolute', 
        'ak2PFResidual')
)


process.ak2PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak2PFL1Offset', 
        'ak2PFL2Relative', 
        'ak2PFL3Absolute', 
        'ak2PFResidual')
)


process.ak2PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK2PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak2PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak2PFL2Relative', 
        'ak2PFL3Absolute')
)


process.ak2PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak2PFL2Relative', 
        'ak2PFL3Absolute', 
        'ak2PFResidual')
)


process.ak2PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK2PF'),
    level = cms.string('L2Relative')
)


process.ak2PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK2PF'),
    level = cms.string('L3Absolute')
)


process.ak2PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK2PF'),
    level = cms.string('L2L3Residual')
)


process.ak3PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK3PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak3PFCHSL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak3PFCHSL1Fastjet', 
        'ak3PFCHSL2Relative', 
        'ak3PFCHSL3Absolute', 
        'ak3PFCHSResidual')
)


process.ak3PFCHSL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak3PFCHSL1Offset', 
        'ak3PFCHSL2Relative', 
        'ak3PFCHSL3Absolute', 
        'ak3PFCHSResidual')
)


process.ak3PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK3PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak3PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak3PFCHSL2Relative', 
        'ak3PFCHSL3Absolute')
)


process.ak3PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak3PFCHSL2Relative', 
        'ak3PFCHSL3Absolute', 
        'ak3PFCHSResidual')
)


process.ak3PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK3PFchs'),
    level = cms.string('L2Relative')
)


process.ak3PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK3PFchs'),
    level = cms.string('L3Absolute')
)


process.ak3PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK3PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak3PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK3PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak3PFL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak3PFL1Fastjet', 
        'ak3PFL2Relative', 
        'ak3PFL3Absolute', 
        'ak3PFResidual')
)


process.ak3PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak3PFL1Offset', 
        'ak3PFL2Relative', 
        'ak3PFL3Absolute', 
        'ak3PFResidual')
)


process.ak3PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK3PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak3PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak3PFL2Relative', 
        'ak3PFL3Absolute')
)


process.ak3PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak3PFL2Relative', 
        'ak3PFL3Absolute', 
        'ak3PFResidual')
)


process.ak3PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK3PF'),
    level = cms.string('L2Relative')
)


process.ak3PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK3PF'),
    level = cms.string('L3Absolute')
)


process.ak3PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK3PF'),
    level = cms.string('L2L3Residual')
)


process.ak4CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Fastjet', 
        'ak4CaloL2Relative', 
        'ak4CaloL3Absolute')
)


process.ak4CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Fastjet', 
        'ak4CaloL2Relative', 
        'ak4CaloL3Absolute', 
        'ak4CaloL6SLB')
)


process.ak4CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Fastjet', 
        'ak4CaloL2Relative', 
        'ak4CaloL3Absolute', 
        'ak4CaloResidual')
)


process.ak4CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.ak4CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Offset', 
        'ak4CaloL2Relative', 
        'ak4CaloL3Absolute')
)


process.ak4CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Offset', 
        'ak4CaloL2Relative', 
        'ak4CaloL3Absolute', 
        'ak4CaloResidual')
)


process.ak4CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak4CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL2Relative', 
        'ak4CaloL3Absolute')
)


process.ak4CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL2Relative', 
        'ak4CaloL3Absolute', 
        'ak4CaloL6SLB')
)


process.ak4CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL2Relative', 
        'ak4CaloL3Absolute', 
        'ak4CaloResidual')
)


process.ak4CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2Relative')
)


process.ak4CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L3Absolute')
)


process.ak4CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ak4CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak4CaloJetsSoftMuonTagInfos")
)


process.ak4CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L2L3Residual')
)


process.ak4JPTL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4JPTL1Fastjet', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute')
)


process.ak4JPTL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4JPTL1Fastjet', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute', 
        'ak4JPTResidual')
)


process.ak4JPTL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK5Calo'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.ak4JPTL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4L1JPTOffset', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute')
)


process.ak4JPTL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4L1JPTOffset', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute', 
        'ak4JPTResidual')
)


process.ak4JPTL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak4JPTL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4L1JPTOffset', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute')
)


process.ak4JPTL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4L1JPTOffset', 
        'ak4JPTL2Relative', 
        'ak4JPTL3Absolute', 
        'ak4JPTResidual')
)


process.ak4JPTL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L2Relative')
)


process.ak4JPTL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L3Absolute')
)


process.ak4JPTResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L2L3Residual')
)


process.ak4L1JPTOffset = cms.ESProducer("L1JPTOffsetCorrectionESProducer",
    algorithm = cms.string('AK5JPT'),
    level = cms.string('L1JPTOffset'),
    offsetService = cms.string('ak4CaloL1Offset')
)


process.ak4PFCHSL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL1Fastjet', 
        'ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute')
)


process.ak4PFCHSL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL1Fastjet', 
        'ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute', 
        'ak4PFCHSResidual')
)


process.ak4PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFCHSL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL1Offset', 
        'ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute')
)


process.ak4PFCHSL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL1Offset', 
        'ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute', 
        'ak4PFCHSResidual')
)


process.ak4PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak4PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute')
)


process.ak4PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL2Relative', 
        'ak4PFCHSL3Absolute', 
        'ak4PFCHSResidual')
)


process.ak4PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.ak4PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.ak4PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak4PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'ak4PFL2Relative', 
        'ak4PFL3Absolute')
)


process.ak4PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'ak4PFL2Relative', 
        'ak4PFL3Absolute', 
        'ak4PFL6SLB')
)


process.ak4PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'ak4PFL2Relative', 
        'ak4PFL3Absolute', 
        'ak4PFResidual')
)


process.ak4PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak4PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Offset', 
        'ak4PFL2Relative', 
        'ak4PFL3Absolute')
)


process.ak4PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Offset', 
        'ak4PFL2Relative', 
        'ak4PFL3Absolute', 
        'ak4PFResidual')
)


process.ak4PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak4PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL2Relative', 
        'ak4PFL3Absolute')
)


process.ak4PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL2Relative', 
        'ak4PFL3Absolute', 
        'ak4PFL6SLB')
)


process.ak4PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL2Relative', 
        'ak4PFL3Absolute', 
        'ak4PFResidual')
)


process.ak4PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L2Relative')
)


process.ak4PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L3Absolute')
)


process.ak4PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ak4PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak4PFJetsSoftMuonTagInfos")
)


process.ak4PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PF'),
    level = cms.string('L2L3Residual')
)


process.ak4TrackL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Fastjet', 
        'ak4TrackL2Relative', 
        'ak4TrackL3Absolute')
)


process.ak4TrackL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4TrackL2Relative', 
        'ak4TrackL3Absolute')
)


process.ak4TrackL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5TRK'),
    level = cms.string('L2Relative')
)


process.ak4TrackL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5TRK'),
    level = cms.string('L3Absolute')
)


process.ak5PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK5PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak5PFCHSL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFCHSL1Fastjet', 
        'ak5PFCHSL2Relative', 
        'ak5PFCHSL3Absolute', 
        'ak5PFCHSResidual')
)


process.ak5PFCHSL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFCHSL1Offset', 
        'ak5PFCHSL2Relative', 
        'ak5PFCHSL3Absolute', 
        'ak5PFCHSResidual')
)


process.ak5PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK5PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak5PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFCHSL2Relative', 
        'ak5PFCHSL3Absolute')
)


process.ak5PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFCHSL2Relative', 
        'ak5PFCHSL3Absolute', 
        'ak5PFCHSResidual')
)


process.ak5PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PFchs'),
    level = cms.string('L2Relative')
)


process.ak5PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PFchs'),
    level = cms.string('L3Absolute')
)


process.ak5PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak5PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak5PFL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Fastjet', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFResidual')
)


process.ak5PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL1Offset', 
        'ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFResidual')
)


process.ak5PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak5PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL2Relative', 
        'ak5PFL3Absolute')
)


process.ak5PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak5PFL2Relative', 
        'ak5PFL3Absolute', 
        'ak5PFResidual')
)


process.ak5PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2Relative')
)


process.ak5PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L3Absolute')
)


process.ak5PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK5PF'),
    level = cms.string('L2L3Residual')
)


process.ak6PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK6PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak6PFCHSL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak6PFCHSL1Fastjet', 
        'ak6PFCHSL2Relative', 
        'ak6PFCHSL3Absolute', 
        'ak6PFCHSResidual')
)


process.ak6PFCHSL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak6PFCHSL1Offset', 
        'ak6PFCHSL2Relative', 
        'ak6PFCHSL3Absolute', 
        'ak6PFCHSResidual')
)


process.ak6PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK6PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak6PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak6PFCHSL2Relative', 
        'ak6PFCHSL3Absolute')
)


process.ak6PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak6PFCHSL2Relative', 
        'ak6PFCHSL3Absolute', 
        'ak6PFCHSResidual')
)


process.ak6PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK6PFchs'),
    level = cms.string('L2Relative')
)


process.ak6PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK6PFchs'),
    level = cms.string('L3Absolute')
)


process.ak6PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK6PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak6PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK6PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak6PFL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak6PFL1Fastjet', 
        'ak6PFL2Relative', 
        'ak6PFL3Absolute', 
        'ak6PFResidual')
)


process.ak6PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak6PFL1Offset', 
        'ak6PFL2Relative', 
        'ak6PFL3Absolute', 
        'ak6PFResidual')
)


process.ak6PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK6PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak6PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak6PFL2Relative', 
        'ak6PFL3Absolute')
)


process.ak6PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak6PFL2Relative', 
        'ak6PFL3Absolute', 
        'ak6PFResidual')
)


process.ak6PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK6PF'),
    level = cms.string('L2Relative')
)


process.ak6PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK6PF'),
    level = cms.string('L3Absolute')
)


process.ak6PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK6PF'),
    level = cms.string('L2L3Residual')
)


process.ak7CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Fastjet', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute')
)


process.ak7CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Offset', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloL6SLB')
)


process.ak7CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Fastjet', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloResidual')
)


process.ak7CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.ak7CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Offset', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute')
)


process.ak7CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL1Offset', 
        'ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloResidual')
)


process.ak7CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak7CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL2Relative', 
        'ak7CaloL3Absolute')
)


process.ak7CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloL6SLB')
)


process.ak7CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7CaloL2Relative', 
        'ak7CaloL3Absolute', 
        'ak7CaloResidual')
)


process.ak7CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L2Relative')
)


process.ak7CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L3Absolute')
)


process.ak7CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ak7CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak7CaloJetsSoftMuonTagInfos")
)


process.ak7CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7Calo'),
    level = cms.string('L2L3Residual')
)


process.ak7JPTL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7JPTL1Fastjet', 
        'ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute', 
        'ak7JPTResidual')
)


process.ak7JPTL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK7JPT'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.ak7JPTL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7JPTL1Offset', 
        'ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute')
)


process.ak7JPTL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7JPTL1Offset', 
        'ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute', 
        'ak7JPTResidual')
)


process.ak7JPTL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK7JPT'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak7JPTL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7L1JPTOffset', 
        'ak7JPTL2Relative', 
        'ak7JPTL3Absolute')
)


process.ak7L1JPTOffset = cms.ESProducer("L1JPTOffsetCorrectionESProducer",
    algorithm = cms.string('AK7JPT'),
    level = cms.string('L1JPTOffset'),
    offsetService = cms.string('ak4CaloL1Offset')
)


process.ak7PFCHSL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFCHSL1Fastjet', 
        'ak7PFCHSL2Relative', 
        'ak7PFCHSL3Absolute')
)


process.ak7PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK7PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak7PFCHSL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFCHSL1Fastjet', 
        'ak7PFCHSL2Relative', 
        'ak7PFCHSL3Absolute', 
        'ak7PFCHSResidual')
)


process.ak7PFCHSL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFCHSL1Offset', 
        'ak7PFCHSL2Relative', 
        'ak7PFCHSL3Absolute', 
        'ak7PFCHSResidual')
)


process.ak7PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK7PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak7PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFCHSL2Relative', 
        'ak7PFCHSL3Absolute')
)


process.ak7PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFCHSL2Relative', 
        'ak7PFCHSL3Absolute', 
        'ak7PFCHSResidual')
)


process.ak7PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PFchs'),
    level = cms.string('L2Relative')
)


process.ak7PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PFchs'),
    level = cms.string('L3Absolute')
)


process.ak7PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak7PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute')
)


process.ak7PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFL6SLB')
)


process.ak7PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak7PFL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL1Fastjet', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFResidual')
)


process.ak7PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL1Offset', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute')
)


process.ak7PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL1Offset', 
        'ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFResidual')
)


process.ak7PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak7PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL2Relative', 
        'ak7PFL3Absolute')
)


process.ak7PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFL6SLB')
)


process.ak7PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak7PFL2Relative', 
        'ak7PFL3Absolute', 
        'ak7PFResidual')
)


process.ak7PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L2Relative')
)


process.ak7PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L3Absolute')
)


process.ak7PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ak7PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ak7PFJetsSoftMuonTagInfos")
)


process.ak7PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK7PF'),
    level = cms.string('L2L3Residual')
)


process.ak8PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK8PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak8PFCHSL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak8PFCHSL1Fastjet', 
        'ak8PFCHSL2Relative', 
        'ak8PFCHSL3Absolute', 
        'ak8PFCHSResidual')
)


process.ak8PFCHSL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak8PFCHSL1Offset', 
        'ak8PFCHSL2Relative', 
        'ak8PFCHSL3Absolute', 
        'ak8PFCHSResidual')
)


process.ak8PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK8PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak8PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak8PFCHSL2Relative', 
        'ak8PFCHSL3Absolute')
)


process.ak8PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak8PFCHSL2Relative', 
        'ak8PFCHSL3Absolute', 
        'ak8PFCHSResidual')
)


process.ak8PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK8PFchs'),
    level = cms.string('L2Relative')
)


process.ak8PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK8PFchs'),
    level = cms.string('L3Absolute')
)


process.ak8PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK8PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak8PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK8PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak8PFL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak8PFL1Fastjet', 
        'ak8PFL2Relative', 
        'ak8PFL3Absolute', 
        'ak8PFResidual')
)


process.ak8PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak8PFL1Offset', 
        'ak8PFL2Relative', 
        'ak8PFL3Absolute', 
        'ak8PFResidual')
)


process.ak8PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK8PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak8PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak8PFL2Relative', 
        'ak8PFL3Absolute')
)


process.ak8PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak8PFL2Relative', 
        'ak8PFL3Absolute', 
        'ak8PFResidual')
)


process.ak8PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK8PF'),
    level = cms.string('L2Relative')
)


process.ak8PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK8PF'),
    level = cms.string('L3Absolute')
)


process.ak8PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK8PF'),
    level = cms.string('L2L3Residual')
)


process.ak9PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK9PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak9PFCHSL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak9PFCHSL1Fastjet', 
        'ak9PFCHSL2Relative', 
        'ak9PFCHSL3Absolute', 
        'ak9PFCHSResidual')
)


process.ak9PFCHSL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak9PFCHSL1Offset', 
        'ak9PFCHSL2Relative', 
        'ak9PFCHSL3Absolute', 
        'ak9PFCHSResidual')
)


process.ak9PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK9PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak9PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak9PFCHSL2Relative', 
        'ak9PFCHSL3Absolute')
)


process.ak9PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak9PFCHSL2Relative', 
        'ak9PFCHSL3Absolute', 
        'ak9PFCHSResidual')
)


process.ak9PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK9PFchs'),
    level = cms.string('L2Relative')
)


process.ak9PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK9PFchs'),
    level = cms.string('L3Absolute')
)


process.ak9PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK9PFchs'),
    level = cms.string('L2L3Residual')
)


process.ak9PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK9PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ak9PFL1FastjetL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak9PFL1Fastjet', 
        'ak9PFL2Relative', 
        'ak9PFL3Absolute', 
        'ak9PFResidual')
)


process.ak9PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak9PFL1Offset', 
        'ak9PFL2Relative', 
        'ak9PFL3Absolute', 
        'ak9PFResidual')
)


process.ak9PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK9PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ak9PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak9PFL2Relative', 
        'ak9PFL3Absolute')
)


process.ak9PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak9PFL2Relative', 
        'ak9PFL3Absolute', 
        'ak9PFResidual')
)


process.ak9PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK9PF'),
    level = cms.string('L2Relative')
)


process.ak9PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK9PF'),
    level = cms.string('L3Absolute')
)


process.ak9PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK9PF'),
    level = cms.string('L2L3Residual')
)


process.beamHaloNavigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('BeamHaloNavigationSchool'),
    SimpleMagneticField = cms.string('')
)


process.bwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('bwdAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.bwdGsfElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('bwdGsfElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.caloDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('CaloDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.caloStage1Params = cms.ESProducer("L1TCaloParamsESProducer",
    centralityLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/centralityLUT_5020TeV_stage1.txt'),
    centralityNodeVersion = cms.int32(1),
    centralityRegionMask = cms.int32(0),
    egCalibrationLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egCalibrationLUT.txt'),
    egCompressShapesLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egCompressShapesLUT.txt'),
    egEtaCut = cms.int32(0),
    egHcalThreshold = cms.double(1.0),
    egIsoAreaNrTowersEta = cms.uint32(2),
    egIsoAreaNrTowersPhi = cms.uint32(4),
    egIsoLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egIsoLUT_stage1_isolEB0.30_isolEE0.50_combined.txt'),
    egIsoMaxEtaAbsForIsoSum = cms.uint32(27),
    egIsoMaxEtaAbsForTowerSum = cms.uint32(4),
    egIsoPUEstTowerGranularity = cms.uint32(1),
    egIsoVetoNrTowersPhi = cms.uint32(3),
    egLsb = cms.double(1.0),
    egMaxHOverE = cms.double(0.15),
    egMaxHOverELUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egMaxHOverELUT.txt'),
    egMaxHcalEt = cms.double(0.0),
    egMaxPtHOverE = cms.double(128.0),
    egMaxPtHOverEIsolation = cms.int32(40),
    egMaxPtJetIsolation = cms.int32(63),
    egMinPtHOverEIsolation = cms.int32(1),
    egMinPtJetIsolation = cms.int32(25),
    egNeighbourThreshold = cms.double(1.0),
    egPUSParams = cms.vdouble(),
    egPUSType = cms.string('None'),
    egSeedThreshold = cms.double(0.0),
    egShapeIdLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egShapeIdLUT.txt'),
    egTrimmingLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/egTrimmingLUT_corners.txt'),
    etSumEtThreshold = cms.vdouble(0.0, 7.0),
    etSumEtaMax = cms.vint32(17, 17),
    etSumEtaMin = cms.vint32(4, 4),
    etSumLsb = cms.double(0.5),
    isoTauEtaMax = cms.int32(16),
    isoTauEtaMin = cms.int32(5),
    jetCalibrationLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/jetCalibrationLUT_symmetric_0is0.txt'),
    jetCalibrationParams = cms.vdouble(1.27997, 10.0382, 1.45051, 6.49017, 1.52978, 
        7.53412, 1.61689, 10.1012, 1.29395, 18.7129, 
        1.22278, 23.6606, 1.25293, 24.4677, 1.22861, 
        25.2746, 1.21071, 23.4553, 1.16955, 22.6286, 
        1.1838, 20.9017, 1.18977, 21.1769, 1.21333, 
        22.1565, 1.23575, 23.0727, 1.27147, 24.363, 
        1.22103, 24.9567, 1.22637, 24.2517, 1.30175, 
        18.7771, 1.61674, 10.2858, 1.53865, 7.30213, 
        1.42139, 6.72587, 1.26112, 10.0601),
    jetCalibrationType = cms.string('Stage1JEC'),
    jetLsb = cms.double(0.5),
    jetNeighbourThreshold = cms.double(0.0),
    jetPUSParams = cms.vdouble(),
    jetPUSType = cms.string('None'),
    jetRegionMask = cms.int32(0),
    jetSeedThreshold = cms.double(5.0),
    minimumBiasThresholds = cms.vint32(0, 0, 0, 0),
    q2LUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/q2LUT_stage1.txt'),
    regionLsb = cms.double(0.5),
    regionPUSParams = cms.vdouble( (0.0, 0.0, 0.0, 0.0, 0.444444, 
        0.55117, 0.770085, 0.958352, 1.21479, 1.486655, 
        1.801059, 2.146229, 2.522583, 2.944799, 3.429136, 
        3.984393, 4.67341, 6.388889, 0.0, 0.0, 
        0.0, 0.0, 0.319444, 0.548246, 0.810256, 
        0.97769, 1.229211, 1.510501, 1.82686, 2.178931, 
        2.56252, 2.99361, 3.489558, 4.060866, 4.757649, 
        5.527778, 0.0, 0.0, 0.0, 0.0, 
        0.513889, 0.618421, 0.801496, 1.010128, 1.248957, 
        1.524992, 1.843374, 2.196967, 2.585665, 3.024237, 
        3.525665, 4.104405, 4.837409, 5.277778, 0.0, 
        0.0, 0.0, 0.0, 0.138889, 0.178363, 
        0.328846, 0.438023, 0.537074, 0.655743, 0.818238, 
        0.997956, 1.198403, 1.428185, 1.693293, 1.998691, 
        2.428744, 2.861111, 0.0, 0.0, 0.0, 
        0.0, 0.222222, 0.355263, 0.568803, 0.681711, 
        0.776114, 0.999194, 1.286749, 1.69019, 2.228222, 
        2.944096, 3.893814, 5.151409, 7.084399, 8.5, 
        0.0, 0.0, 0.0, 0.0, 0.347222, 
        0.260234, 0.282479, 0.305702, 0.330235, 0.386729, 
        0.472834, 0.574252, 0.713821, 0.883901, 1.117625, 
        1.419786, 1.88753, 2.583333, 0.0, 0.0, 
        0.0, 0.0, 0.333333, 0.181287, 0.294444, 
        0.3115, 0.324732, 0.380449, 0.447851, 0.537887, 
        0.643667, 0.770106, 0.932555, 1.137137, 1.425775, 
        1.138889, 0.0, 0.0, 0.0, 0.0, 
        0.069444, 0.144737, 0.329701, 0.345149, 0.361473, 
        0.428805, 0.500501, 0.595122, 0.709161, 0.84907, 
        1.01901, 1.234842, 1.563255, 3.944444, 0.0, 
        0.0, 0.0, 0.0, 0.083333, 0.195906, 
        0.232692, 0.309886, 0.383756, 0.439078, 0.515435, 
        0.615713, 0.735333, 0.879855, 1.06285, 1.299136, 
        1.575533, 1.861111, 0.0, 0.0, 0.0, 
        0.0, 0.222222, 0.181287, 0.245085, 0.393035, 
        0.42242, 0.496332, 0.583994, 0.694272, 0.829494, 
        0.990583, 1.194619, 1.450821, 1.804499, 2.361111, 
        0.0, 0.0, 0.0, 0.0, 0.388889, 
        0.435673, 0.398077, 0.391201, 0.46479, 0.536569, 
        0.632543, 0.749761, 0.889213, 1.05999, 1.267241, 
        1.540288, 1.857136, 2.194444, 0.0, 0.0, 
        0.0, 0.0, 0.125, 0.576023, 0.420513, 
        0.396154, 0.485091, 0.546055, 0.641076, 0.754781, 
        0.897755, 1.070265, 1.27816, 1.532439, 1.927529, 
        1.805556, 0.0, 0.0, 0.0, 0.0, 
        0.694444, 0.23538, 0.311111, 0.368633, 0.424446, 
        0.499583, 0.595857, 0.712276, 0.844093, 1.011457, 
        1.21695, 1.47243, 1.853009, 1.722222, 0.0, 
        0.0, 0.0, 0.0, 0.166667, 0.336257, 
        0.301923, 0.313005, 0.387602, 0.441673, 0.524899, 
        0.625752, 0.744597, 0.88857, 1.073132, 1.318219, 
        1.614533, 1.333333, 0.0, 0.0, 0.0, 
        0.0, 0.111111, 0.368421, 0.269231, 0.302253, 
        0.38031, 0.436402, 0.508579, 0.607197, 0.718574, 
        0.857328, 1.03398, 1.245847, 1.534823, 1.972222, 
        0.0, 0.0, 0.0, 0.0, 0.027778, 
        0.22807, 0.195085, 0.278585, 0.322639, 0.374968, 
        0.446104, 0.529719, 0.631725, 0.758136, 0.916622, 
        1.111448, 1.417572, 2.277778, 0.0, 0.0, 
        0.0, 0.0, 0.041667, 0.157895, 0.186752, 
        0.254513, 0.320827, 0.378098, 0.46327, 0.5709, 
        0.696241, 0.871445, 1.09761, 1.396127, 1.857488, 
        2.75, 0.0, 0.0, 0.0, 0.0, 
        0.138889, 0.612573, 0.624573, 0.634669, 0.790229, 
        0.989867, 1.282201, 1.672201, 2.20561, 2.922829, 
        3.850628, 5.10429, 6.823571, 10.972222, 0.0, 
        0.0, 0.0, 0.0, 0.194444, 0.345029, 
        0.353846, 0.411016, 0.509851, 0.661643, 0.81475, 
        0.995329, 1.199998, 1.431079, 1.694189, 2.000995, 
        2.378925, 3.111111, 0.0, 0.0, 0.0, 
        0.0, 0.541667, 0.573099, 0.766453, 0.977836, 
        1.239705, 1.530437, 1.840524, 2.197025, 2.585155, 
        3.027299, 3.525292, 4.11254, 4.873339, 5.972222, 
        0.0, 0.0, 0.0, 0.0, 0.486111, 
        0.513158, 0.721581, 0.976956, 1.22595, 1.510261, 
        1.824951, 2.17936, 2.561912, 2.995865, 3.485821, 
        4.053826, 4.729921, 5.805556, 0.0, 0.0, 
        0.0, 0.0, 0.319444, 0.564327, 0.694872, 
        0.950903, 1.201596, 1.488093, 1.801121, 2.145727, 
        2.52369, 2.94616, 3.422785, 3.963287, 4.633907, 
        5.972222 ) ),
    regionPUSType = cms.string('PUM0'),
    regionPUSVersion = cms.int32(0),
    tauCalibrationLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauL1Calib_LUT.txt'),
    tauCalibrationLUTFileEta = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauCalibrationLUTEta.txt'),
    tauEtToHFRingEtLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauHwEtToHFRingScale_LUT.txt'),
    tauIsoAreaNrTowersEta = cms.uint32(2),
    tauIsoAreaNrTowersPhi = cms.uint32(4),
    tauIsoLUTFile = cms.FileInPath('L1Trigger/L1TCalorimeter/data/tauIsoLUT_stage1_isolA0.10_isolB100.00_ch_switchToIsoBPt192.00_j8t8.txt'),
    tauIsoVetoNrTowersPhi = cms.uint32(2),
    tauLsb = cms.double(0.5),
    tauMaxJetIsolationA = cms.double(0.1),
    tauMaxJetIsolationB = cms.double(100.0),
    tauMaxPtTauVeto = cms.double(64.0),
    tauMinPtJetIsolationB = cms.double(192.0),
    tauNeighbourThreshold = cms.double(0.0),
    tauPUSParams = cms.vdouble(1, 4, 27),
    tauPUSType = cms.string('None'),
    tauRegionMask = cms.int32(0),
    tauSeedThreshold = cms.double(7.0),
    towerEncoding = cms.bool(False),
    towerLsbE = cms.double(0.5),
    towerLsbH = cms.double(0.5),
    towerLsbSum = cms.double(0.5),
    towerNBitsE = cms.int32(8),
    towerNBitsH = cms.int32(8),
    towerNBitsRatio = cms.int32(3),
    towerNBitsSum = cms.int32(9)
)


process.cosmicsNavigationSchoolESProducer = cms.ESProducer("SkippingLayerCosmicNavigationSchoolESProducer",
    ComponentName = cms.string('CosmicNavigationSchool'),
    allSelf = cms.bool(True),
    noPXB = cms.bool(False),
    noPXF = cms.bool(False),
    noTEC = cms.bool(False),
    noTIB = cms.bool(False),
    noTID = cms.bool(False),
    noTOB = cms.bool(False),
    selfSearch = cms.bool(True)
)


process.detachedTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('detachedTripletStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.detachedTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('detachedTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.13)
)


process.ecalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('EcalDetIdAssociator'),
    etaBinSize = cms.double(0.02),
    nEta = cms.int32(300),
    nPhi = cms.int32(360)
)


process.ecalSeverityLevel = cms.ESProducer("EcalSeverityLevelESProducer",
    dbstatusMask = cms.PSet(
        kBad = cms.vstring('kNonRespondingIsolated', 
            'kDeadVFE', 
            'kDeadFE', 
            'kNoDataNoTP'),
        kGood = cms.vstring('kOk'),
        kProblematic = cms.vstring('kDAC', 
            'kNoLaser', 
            'kNoisy', 
            'kNNoisy', 
            'kNNNoisy', 
            'kNNNNoisy', 
            'kNNNNNoisy', 
            'kFixedG6', 
            'kFixedG1', 
            'kFixedG0'),
        kRecovered = cms.vstring(),
        kTime = cms.vstring(),
        kWeird = cms.vstring()
    ),
    flagMask = cms.PSet(
        kBad = cms.vstring('kFaultyHardware', 
            'kDead', 
            'kKilled'),
        kGood = cms.vstring('kGood'),
        kProblematic = cms.vstring('kPoorReco', 
            'kPoorCalib', 
            'kNoisy', 
            'kSaturated'),
        kRecovered = cms.vstring('kLeadingEdgeRecovered', 
            'kTowerRecovered'),
        kTime = cms.vstring('kOutOfTime'),
        kWeird = cms.vstring('kWeird', 
            'kDiWeird')
    ),
    timeThresh = cms.double(2.0)
)


process.electronTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('electronTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(0.0),
    ValidHitBonus = cms.double(1000.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.19)
)


process.fakeForIdealAlignment = cms.ESProducer("FakeAlignmentProducer",
    appendToDataLabel = cms.string('fakeForIdeal')
)


process.fwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    ComponentName = cms.string('fwdAnalyticalPropagator'),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum')
)


process.fwdGsfElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('fwdGsfElectronPropagator'),
    Mass = cms.double(0.000511),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(-1.0),
    useRungeKutta = cms.bool(False)
)


process.hcalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HcalDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.hcalOOTPileupESProducer = cms.ESProducer("OOTPileupDBCompatibilityESProducer")


process.hcalRecAlgos = cms.ESProducer("HcalRecAlgoESProducer",
    DropChannelStatusBits = cms.vstring('HcalCellMask', 
        'HcalCellOff', 
        'HcalCellDead'),
    RecoveredRecHitBits = cms.vstring('TimingAddedBit', 
        'TimingSubtractedBit'),
    SeverityLevels = cms.VPSet(cms.PSet(
        ChannelStatus = cms.vstring(''),
        Level = cms.int32(0),
        RecHitFlags = cms.vstring('')
    ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellCaloTowerProb'),
            Level = cms.int32(1),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellExcludeFromHBHENoiseSummary'),
            Level = cms.int32(5),
            RecHitFlags = cms.vstring('HSCP_R1R2', 
                'HSCP_FracLeader', 
                'HSCP_OuterEnergy', 
                'HSCP_ExpFit', 
                'ADCSaturationBit', 
                'HBHEIsolatedNoise', 
                'AddedSimHcalNoise')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(8),
            RecHitFlags = cms.vstring('HBHEHpdHitMultiplicity', 
                'HBHEPulseShape', 
                'HOBit', 
                'HFDigiTime', 
                'HFInTimeWindow', 
                'ZDCBit', 
                'CalibrationBit', 
                'TimingErrorBit', 
                'HBHEFlatNoise', 
                'HBHESpikeNoise', 
                'HBHETriangleNoise', 
                'HBHETS4TS5Noise', 
                'HBHENegativeNoise')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(11),
            RecHitFlags = cms.vstring('HFLongShort', 
                'HFPET', 
                'HFS8S1Ratio')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellCaloTowerMask'),
            Level = cms.int32(12),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellHot'),
            Level = cms.int32(15),
            RecHitFlags = cms.vstring('')
        ), 
        cms.PSet(
            ChannelStatus = cms.vstring('HcalCellOff', 
                'HcalCellDead'),
            Level = cms.int32(20),
            RecHitFlags = cms.vstring('')
        ))
)


process.hcalTopologyIdeal = cms.ESProducer("HcalTopologyIdealEP",
    Exclude = cms.untracked.string(''),
    appendToDataLabel = cms.string(''),
    hcalTopologyConstants = cms.PSet(
        maxDepthHB = cms.int32(2),
        maxDepthHE = cms.int32(3),
        mode = cms.string('HcalTopologyMode::LHC')
    )
)


process.hcal_db_producer = cms.ESProducer("HcalDbProducer",
    dump = cms.untracked.vstring(''),
    file = cms.untracked.string('')
)


process.hiDetachedTripletStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hiDetachedTripletStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    nSigma = cms.double(3.0)
)


process.hiJetCoreRegionalStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hiJetCoreRegionalStepChi2Est'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.hiLowPtTripletStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hiLowPtTripletStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    nSigma = cms.double(3.0)
)


process.hiMixedTripletChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hiMixedTripletChi2Est'),
    MaxChi2 = cms.double(16.0),
    nSigma = cms.double(3.0)
)


process.hiMixedTripletPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('hiMixedTripletPropagator'),
    Mass = cms.double(0.139),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(1.0),
    useRungeKutta = cms.bool(False)
)


process.hiMixedTripletPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('hiMixedTripletPropagatorOpposite'),
    Mass = cms.double(0.139),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(1.0),
    useRungeKutta = cms.bool(False)
)


process.hiPixelPairChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hiPixelPairChi2Est'),
    MaxChi2 = cms.double(9.0),
    minGoodStripCharge = cms.double(2069),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.hitCollectorForOutInMuonSeeds = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('hitCollectorForOutInMuonSeeds'),
    MaxChi2 = cms.double(100.0),
    nSigma = cms.double(4.0)
)


process.hltESPPixelCPEGeneric = cms.ESProducer("PixelCPEGenericESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('hltESPPixelCPEGeneric'),
    DoCosmics = cms.bool(False),
    EdgeClusterErrorX = cms.double(50.0),
    EdgeClusterErrorY = cms.double(85.0),
    IrradiationBiasCorrection = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    PixelErrorParametrization = cms.string('NOTcmsim'),
    TanLorentzAnglePerTesla = cms.double(0.106),
    TruncatePixelCharge = cms.bool(True),
    UseErrorsFromTemplates = cms.bool(True),
    eff_charge_cut_highX = cms.double(1.0),
    eff_charge_cut_highY = cms.double(1.0),
    eff_charge_cut_lowX = cms.double(0.0),
    eff_charge_cut_lowY = cms.double(0.0),
    inflate_all_errors_no_trk_angle = cms.bool(False),
    inflate_errors = cms.bool(False),
    size_cutX = cms.double(3.0),
    size_cutY = cms.double(3.0)
)


process.hltESPPixelCPETemplateReco = cms.ESProducer("PixelCPETemplateRecoESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('hltESPPixelCPETemplateReco'),
    DoCosmics = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    UseClusterSplitter = cms.bool(False),
    speed = cms.int32(-2)
)


process.hltESPStripCPEfromTrackAngle = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('hltESPStripCPEfromTrackAngle'),
    ComponentType = cms.string('StripCPEfromTrackAngle'),
    parameters = cms.PSet(
        mLC_P0 = cms.double(-0.326),
        mLC_P1 = cms.double(0.618),
        mLC_P2 = cms.double(0.3),
        mTEC_P0 = cms.double(-1.885),
        mTEC_P1 = cms.double(0.471),
        mTIB_P0 = cms.double(-0.742),
        mTIB_P1 = cms.double(0.202),
        mTID_P0 = cms.double(-1.427),
        mTID_P1 = cms.double(0.433),
        mTOB_P0 = cms.double(-1.026),
        mTOB_P1 = cms.double(0.253),
        useLegacyError = cms.bool(True)
    )
)


process.hltESPTTRHBWithTrackAngle = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('hltESPTTRHBWithTrackAngle'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('hltESPPixelCPEGeneric'),
    StripCPE = cms.string('hltESPStripCPEfromTrackAngle')
)


process.hltESPTTRHBuilderAngleAndTemplate = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('hltESPTTRHBuilderAngleAndTemplate'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('hltESPPixelCPETemplateReco'),
    StripCPE = cms.string('hltESPStripCPEfromTrackAngle')
)


process.hoDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HODetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(30),
    nPhi = cms.int32(72)
)


process.ic5CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Fastjet', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute')
)


process.ic5CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Offset', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloL6SLB')
)


process.ic5CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Fastjet', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloResidual')
)


process.ic5CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.ic5CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Offset', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute')
)


process.ic5CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL1Offset', 
        'ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloResidual')
)


process.ic5CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ic5CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL2Relative', 
        'ic5CaloL3Absolute')
)


process.ic5CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloL6SLB')
)


process.ic5CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5CaloL2Relative', 
        'ic5CaloL3Absolute', 
        'ic5CaloResidual')
)


process.ic5CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L2Relative')
)


process.ic5CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L3Absolute')
)


process.ic5CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ic5CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ic5CaloJetsSoftMuonTagInfos")
)


process.ic5CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5Calo'),
    level = cms.string('L2L3Residual')
)


process.ic5PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute')
)


process.ic5PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFL6SLB')
)


process.ic5PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL1Fastjet', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFResidual')
)


process.ic5PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('IC5PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.ic5PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL1Offset', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute')
)


process.ic5PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL1Offset', 
        'ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFResidual')
)


process.ic5PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('IC5PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.ic5PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL2Relative', 
        'ic5PFL3Absolute')
)


process.ic5PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFL6SLB')
)


process.ic5PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ic5PFL2Relative', 
        'ic5PFL3Absolute', 
        'ic5PFResidual')
)


process.ic5PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5PF'),
    level = cms.string('L2Relative')
)


process.ic5PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5PF'),
    level = cms.string('L3Absolute')
)


process.ic5PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("ic5PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("ic5PFJetsSoftMuonTagInfos")
)


process.ic5PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('IC5PF'),
    level = cms.string('L2L3Residual')
)


process.idealForDigiCSCGeometry = cms.ESProducer("CSCGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    debugV = cms.untracked.bool(False),
    useCentreTIOffsets = cms.bool(False),
    useDDD = cms.bool(False),
    useGangedStripsInME1a = cms.bool(False),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True)
)


process.idealForDigiDTGeometry = cms.ESProducer("DTGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(False)
)


process.idealForDigiTrackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string('fakeForIdeal'),
    appendToDataLabel = cms.string('idealForDigi'),
    applyAlignment = cms.bool(False),
    fromDDD = cms.bool(False)
)


process.initialStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('initialStepChi2Est'),
    MaxChi2 = cms.double(30.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutLoose')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.kt4CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Fastjet', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute')
)


process.kt4CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Offset', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloL6SLB')
)


process.kt4CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Fastjet', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloResidual')
)


process.kt4CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.kt4CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Offset', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute')
)


process.kt4CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL1Offset', 
        'kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloResidual')
)


process.kt4CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.kt4CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL2Relative', 
        'kt4CaloL3Absolute')
)


process.kt4CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloL6SLB')
)


process.kt4CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4CaloL2Relative', 
        'kt4CaloL3Absolute', 
        'kt4CaloResidual')
)


process.kt4CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L2Relative')
)


process.kt4CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L3Absolute')
)


process.kt4CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("kt4CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt4CaloJetsSoftMuonTagInfos")
)


process.kt4CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4Calo'),
    level = cms.string('L2L3Residual')
)


process.kt4PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute')
)


process.kt4PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFL6SLB')
)


process.kt4PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL1Fastjet', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFResidual')
)


process.kt4PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('KT4PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.kt4PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL1Offset', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute')
)


process.kt4PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL1Offset', 
        'kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFResidual')
)


process.kt4PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('KT4PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.kt4PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL2Relative', 
        'kt4PFL3Absolute')
)


process.kt4PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFL6SLB')
)


process.kt4PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt4PFL2Relative', 
        'kt4PFL3Absolute', 
        'kt4PFResidual')
)


process.kt4PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4PF'),
    level = cms.string('L2Relative')
)


process.kt4PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4PF'),
    level = cms.string('L3Absolute')
)


process.kt4PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("kt4PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt4PFJetsSoftMuonTagInfos")
)


process.kt4PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT4PF'),
    level = cms.string('L2L3Residual')
)


process.kt6CaloL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4CaloL1Fastjet', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute')
)


process.kt6CaloL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Offset', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloL6SLB')
)


process.kt6CaloL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Fastjet', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloResidual')
)


process.kt6CaloL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAllCalo")
)


process.kt6CaloL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Offset', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute')
)


process.kt6CaloL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL1Offset', 
        'kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloResidual')
)


process.kt6CaloL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.kt6CaloL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL2Relative', 
        'kt6CaloL3Absolute')
)


process.kt6CaloL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloL6SLB')
)


process.kt6CaloL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6CaloL2Relative', 
        'kt6CaloL3Absolute', 
        'kt6CaloResidual')
)


process.kt6CaloL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L2Relative')
)


process.kt6CaloL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L3Absolute')
)


process.kt6CaloL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(True),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("kt6CaloJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt6CaloJetsSoftMuonTagInfos")
)


process.kt6CaloResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6Calo'),
    level = cms.string('L2L3Residual')
)


process.kt6PFL1FastL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute')
)


process.kt6PFL1FastL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('ak4PFL1Fastjet', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFL6SLB')
)


process.kt6PFL1FastL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL1Fastjet', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFResidual')
)


process.kt6PFL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('KT6PF'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.kt6PFL1L2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL1Offset', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute')
)


process.kt6PFL1L2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL1Offset', 
        'kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFResidual')
)


process.kt6PFL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('KT6PF'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.kt6PFL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL2Relative', 
        'kt6PFL3Absolute')
)


process.kt6PFL2L3L6 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFL6SLB')
)


process.kt6PFL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('kt6PFL2Relative', 
        'kt6PFL3Absolute', 
        'kt6PFResidual')
)


process.kt6PFL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6PF'),
    level = cms.string('L2Relative')
)


process.kt6PFL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6PF'),
    level = cms.string('L3Absolute')
)


process.kt6PFL6SLB = cms.ESProducer("L6SLBCorrectionESProducer",
    addMuonToJet = cms.bool(False),
    algorithm = cms.string(''),
    level = cms.string('L6SLB'),
    srcBTagInfoElectron = cms.InputTag("kt6PFJetsSoftElectronTagInfos"),
    srcBTagInfoMuon = cms.InputTag("kt6PFJetsSoftMuonTagInfos")
)


process.kt6PFResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('KT6PF'),
    level = cms.string('L2L3Residual')
)


process.mixedTripletStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('mixedTripletStepChi2Est'),
    MaxChi2 = cms.double(16.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.mixedTripletStepClusterShapeHitFilter = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('mixedTripletStepClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/pixelShape.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    )
)


process.mixedTripletStepPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('mixedTripletStepPropagator'),
    Mass = cms.double(0.139),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('alongMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(0.1),
    useRungeKutta = cms.bool(False)
)


process.mixedTripletStepPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    ComponentName = cms.string('mixedTripletStepPropagatorOpposite'),
    Mass = cms.double(0.139),
    MaxDPhi = cms.double(1.6),
    PropagationDirection = cms.string('oppositeToMomentum'),
    SimpleMagneticField = cms.string(''),
    ptMin = cms.double(0.1),
    useRungeKutta = cms.bool(False)
)


process.mixedTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('mixedTripletStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.11)
)


process.muonDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('MuonDetIdAssociator'),
    etaBinSize = cms.double(0.125),
    includeBadChambers = cms.bool(False),
    nEta = cms.int32(48),
    nPhi = cms.int32(48)
)


process.muonSeededFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    EstimateCut = cms.double(50.0),
    Fitter = cms.string('RKFitter'),
    LogPixelProbabilityCut = cms.double(-14.0),
    MinNumberOfHits = cms.int32(3),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True),
    Smoother = cms.string('RKSmoother')
)


process.muonSeededMeasurementEstimatorForInOut = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('muonSeededMeasurementEstimatorForInOut'),
    MaxChi2 = cms.double(400.0),
    nSigma = cms.double(4.0)
)


process.muonSeededMeasurementEstimatorForOutIn = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('muonSeededMeasurementEstimatorForOutIn'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.muonSeededMeasurementEstimatorForOutInDisplaced = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    ComponentName = cms.string('muonSeededMeasurementEstimatorForOutInDisplaced'),
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0)
)


process.muonSeededTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(1.0),
    ValidHitBonus = cms.double(1000.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.1)
)


process.myTTRHBuilderWithoutAngle4MixedPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedPairs'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4MixedTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4PixelPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.myTTRHBuilderWithoutAngle4PixelTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('Fake')
)


process.navigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('SimpleNavigationSchool'),
    SimpleMagneticField = cms.string('')
)


process.pixelLessStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('pixelLessStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(-1.0)
)


process.pixelLessStepClusterShapeHitFilter = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('pixelLessStepClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/pixelShape.par'),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    doStripShapeCut = cms.bool(False)
)


process.pixelLessStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('pixelLessStepTrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.11)
)


process.pixelPairStepChi2Est = cms.ESProducer("Chi2ChargeMeasurementEstimatorESProducer",
    ComponentName = cms.string('pixelPairStepChi2Est'),
    MaxChi2 = cms.double(9.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutTight')
    ),
    nSigma = cms.double(3.0),
    pTChargeCutThreshold = cms.double(15.0)
)


process.preshowerDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('PreshowerDetIdAssociator'),
    etaBinSize = cms.double(0.1),
    nEta = cms.int32(60),
    nPhi = cms.int32(30)
)


process.siPixelQualityESProducer = cms.ESProducer("SiPixelQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiPixelQualityFromDbRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiPixelDetVOffRcd'),
            tag = cms.string('')
        ))
)


process.siPixelTemplateDBObjectESProducer = cms.ESProducer("SiPixelTemplateDBObjectESProducer")


process.siStripBackPlaneCorrectionDepESProducer = cms.ESProducer("SiStripBackPlaneCorrectionDepESProducer",
    BackPlaneCorrectionDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    BackPlaneCorrectionPeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripBackPlaneCorrectionRcd')
    ),
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    )
)


process.siStripGainESProducer = cms.ESProducer("SiStripGainESProducer",
    APVGain = cms.VPSet(cms.PSet(
        Label = cms.untracked.string(''),
        NormalizationFactor = cms.untracked.double(1.0),
        Record = cms.string('SiStripApvGainRcd')
    ), 
        cms.PSet(
            Label = cms.untracked.string(''),
            NormalizationFactor = cms.untracked.double(1.0),
            Record = cms.string('SiStripApvGain2Rcd')
        )),
    AutomaticNormalization = cms.bool(False),
    appendToDataLabel = cms.string(''),
    printDebug = cms.untracked.bool(False)
)


process.siStripLorentzAngleDepESProducer = cms.ESProducer("SiStripLorentzAngleDepESProducer",
    LatencyRecord = cms.PSet(
        label = cms.untracked.string(''),
        record = cms.string('SiStripLatencyRcd')
    ),
    LorentzAngleDeconvMode = cms.PSet(
        label = cms.untracked.string('deconvolution'),
        record = cms.string('SiStripLorentzAngleRcd')
    ),
    LorentzAnglePeakMode = cms.PSet(
        label = cms.untracked.string('peak'),
        record = cms.string('SiStripLorentzAngleRcd')
    )
)


process.siStripQualityESProducer = cms.ESProducer("SiStripQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiStripDetVOffRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiStripDetCablingRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('RunInfoRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadFiberRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadModuleRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadStripRcd'),
            tag = cms.string('')
        )),
    PrintDebugOutput = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    appendToDataLabel = cms.string('')
)


process.siStripQualityESProducerUnbiased = cms.ESProducer("SiStripQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiStripDetCablingRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        )),
    PrintDebugOutput = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    appendToDataLabel = cms.string('unbiased')
)


process.sistripconn = cms.ESProducer("SiStripConnectivity")


process.stripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentName = cms.string('stripCPE'),
    ComponentType = cms.string('SimpleStripCPE'),
    parameters = cms.PSet(

    )
)


process.templates = cms.ESProducer("PixelCPETemplateRecoESProducer",
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    ComponentName = cms.string('PixelCPETemplateReco'),
    DoCosmics = cms.bool(False),
    DoLorentz = cms.bool(True),
    LoadTemplatesFromDB = cms.bool(True),
    UseClusterSplitter = cms.bool(False),
    speed = cms.int32(-2)
)


process.topDQMak5PFCHSL1Fastjet = cms.ESProducer("L1FastjetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1FastJet'),
    srcRho = cms.InputTag("fixedGridRhoFastjetAll")
)


process.topDQMak5PFCHSL1Offset = cms.ESProducer("L1OffsetCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L1Offset'),
    minVtxNdof = cms.int32(4),
    vertexCollection = cms.string('offlinePrimaryVertices')
)


process.topDQMak5PFCHSL2L3 = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('topDQMak5PFCHSL2Relative', 
        'topDQMak5PFCHSL3Absolute')
)


process.topDQMak5PFCHSL2L3Residual = cms.ESProducer("JetCorrectionESChain",
    correctors = cms.vstring('topDQMak5PFCHSL2Relative', 
        'topDQMak5PFCHSL3Absolute', 
        'topDQMak5PFCHSResidual')
)


process.topDQMak5PFCHSL2Relative = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2Relative')
)


process.topDQMak5PFCHSL3Absolute = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L3Absolute')
)


process.topDQMak5PFCHSResidual = cms.ESProducer("LXXXCorrectionESProducer",
    algorithm = cms.string('AK4PFchs'),
    level = cms.string('L2L3Residual')
)


process.trackerGeometryDB = cms.ESProducer("TrackerDigiGeometryESModule",
    alignmentsLabel = cms.string(''),
    appendToDataLabel = cms.string(''),
    applyAlignment = cms.bool(True),
    fromDDD = cms.bool(False)
)


process.trackerNumberingGeometryDB = cms.ESProducer("TrackerGeometricDetESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(False)
)


process.trackerTopology = cms.ESProducer("TrackerTopologyEP",
    appendToDataLabel = cms.string('')
)


process.trajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHits'),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    ValidHitBonus = cms.double(5.0),
    allowSharedFirstHit = cms.bool(True),
    fractionShared = cms.double(0.19)
)


process.trajectoryCleanerBySharedSeeds = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedSeeds'),
    ComponentType = cms.string('TrajectoryCleanerBySharedSeeds')
)


process.ttrhbwor = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithoutRefit'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('Fake'),
    PixelCPE = cms.string('Fake'),
    StripCPE = cms.string('Fake')
)


process.ttrhbwr = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('WithTrackAngle'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    Matcher = cms.string('StandardMatcher'),
    PixelCPE = cms.string('PixelCPEGeneric'),
    StripCPE = cms.string('StripCPEfromTrackAngle')
)


process.CSCChannelMapperESSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCChannelMapperRecord')
)


process.CSCIndexerESSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCIndexerRecord')
)


process.GlobalTag = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        enableConnectionSharing = cms.untracked.bool(True),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0)
    ),
    connect = cms.string('frontier://PromptProd/CMS_CONDITIONS'),
    globaltag = cms.string('75X_dataRun2_ExpressHI_v2'),
    toGet = cms.VPSet()
)


process.HepPDTESSource = cms.ESSource("HepPDTESSource",
    pdtFileName = cms.FileInPath('SimGeneral/HepPDTESSource/data/pythiaparticle.tbl')
)


process.caloParamsSource = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1TCaloParamsRcd')
)


process.eegeom = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalMappingRcd')
)


process.es_hardcode = cms.ESSource("HcalHardcodeCalibrations",
    GainWidthsForTrigPrims = cms.bool(False),
    HERecalibration = cms.bool(False),
    HEreCalibCutoff = cms.double(20.0),
    HFRecalibration = cms.bool(False),
    HcalReLabel = cms.PSet(
        RelabelHits = cms.untracked.bool(False),
        RelabelRules = cms.untracked.PSet(
            CorrectPhi = cms.untracked.bool(False),
            Eta1 = cms.untracked.vint32(1, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            Eta16 = cms.untracked.vint32(1, 1, 2, 2, 2, 
                2, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            Eta17 = cms.untracked.vint32(1, 1, 2, 2, 3, 
                3, 3, 4, 4, 4, 
                4, 4, 5, 5, 5, 
                5, 5, 5, 5)
        )
    ),
    hcalTopologyConstants = cms.PSet(
        maxDepthHB = cms.int32(2),
        maxDepthHE = cms.int32(3),
        mode = cms.string('HcalTopologyMode::LHC')
    ),
    iLumi = cms.double(-1.0),
    toGet = cms.untracked.vstring('GainWidths')
)


process.essourceEcalSev = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalSeverityLevelAlgoRcd')
)


process.essourceSev = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('HcalSeverityLevelComputerRcd')
)


process.rpcconesrc = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1RPCConeBuilderRcd')
)


process.tpparams12 = cms.ESSource("EmptyESSource",
    firstValid = cms.vuint32(1),
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalTPGPhysicsConstRcd')
)


process.prefer("es_hardcode")

process.ALCARECOEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep edmTriggerResults_*_*_*', 
        'drop *_MEtoEDMConverter_*_*', 
        'keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_ALCARECOTkAlMinBiasHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*', 
        'keep *_offlineBeamSpot_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.AODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'drop doubles_*Jets_rhos_*', 
        'drop doubles_*Jets_sigmas_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *GlobalHaloData_*_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'drop *_gedPhotons_valMapPFEgammaCandToPhoton_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'drop *_pfElectronTranslator_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'drop L1GlobalTriggerObjectMapRecord_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep recoTracks_hiGeneralTracks_*_*', 
        'keep recoTracks_hiGeneralAndPixelTracks_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep CaloTowersSorted_towerMaker_*_*', 
        'drop recoCandidatesOwned_caloTowers_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoGsfElectrons_gedGsfElectronsTmp_*_*', 
        'keep recoSuperClusters_correctedIslandBarrelSuperClusters_*_*', 
        'keep recoSuperClusters_correctedIslandEndcapSuperClusters_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep HFRecHitsSorted_hfreco_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*' ) )
)

process.AODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'drop doubles_*Jets_rhos_*', 
        'drop doubles_*Jets_sigmas_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *GlobalHaloData_*_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'drop *_gedPhotons_valMapPFEgammaCandToPhoton_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'drop *_pfElectronTranslator_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'drop L1GlobalTriggerObjectMapRecord_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep recoTracks_hiGeneralTracks_*_*', 
        'keep recoTracks_hiGeneralAndPixelTracks_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep CaloTowersSorted_towerMaker_*_*', 
        'drop recoCandidatesOwned_caloTowers_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoGsfElectrons_gedGsfElectronsTmp_*_*', 
        'keep recoSuperClusters_correctedIslandBarrelSuperClusters_*_*', 
        'keep recoSuperClusters_correctedIslandEndcapSuperClusters_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep HFRecHitsSorted_hfreco_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*', 
        'keep *_heavyIon_*_*' ) )
)

process.AnomalousCellParameters = cms.PSet(
    maxBadEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxRecoveredHcalCells = cms.uint32(9999999)
)

process.BeamSpotAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BeamSpotRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_offlineBeamSpot_*_*')
)

process.BrokenLinesBzeroTrajectoryFactory = cms.PSet(
    MaterialEffects = cms.string('BrokenLinesCoarse'),
    MomentumEstimate = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(True),
    UseProjectedHits = cms.bool(True)
)

process.BrokenLinesTrajectoryFactory = cms.PSet(
    MaterialEffects = cms.string('BrokenLinesCoarse'),
    MomentumEstimateFieldOff = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseBzeroIfFieldOff = cms.bool(True),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(True),
    UseProjectedHits = cms.bool(True)
)

process.BtiParametersBlock = cms.PSet(
    BtiParameters = cms.PSet(
        AC1 = cms.int32(0),
        AC2 = cms.int32(3),
        ACH = cms.int32(1),
        ACL = cms.int32(2),
        CH = cms.int32(41),
        CL = cms.int32(22),
        DEAD = cms.int32(31),
        Debug = cms.untracked.int32(0),
        KACCTHETA = cms.int32(1),
        KMAX = cms.int32(64),
        LH = cms.int32(21),
        LL = cms.int32(2),
        LTS = cms.int32(3),
        PTMS0 = cms.int32(0),
        PTMS1 = cms.int32(0),
        PTMS10 = cms.int32(1),
        PTMS11 = cms.int32(1),
        PTMS12 = cms.int32(1),
        PTMS13 = cms.int32(1),
        PTMS14 = cms.int32(1),
        PTMS15 = cms.int32(1),
        PTMS16 = cms.int32(1),
        PTMS17 = cms.int32(1),
        PTMS18 = cms.int32(1),
        PTMS19 = cms.int32(1),
        PTMS2 = cms.int32(0),
        PTMS20 = cms.int32(1),
        PTMS21 = cms.int32(1),
        PTMS22 = cms.int32(1),
        PTMS23 = cms.int32(1),
        PTMS24 = cms.int32(1),
        PTMS25 = cms.int32(1),
        PTMS26 = cms.int32(1),
        PTMS27 = cms.int32(1),
        PTMS28 = cms.int32(1),
        PTMS29 = cms.int32(1),
        PTMS3 = cms.int32(0),
        PTMS30 = cms.int32(0),
        PTMS31 = cms.int32(0),
        PTMS4 = cms.int32(1),
        PTMS5 = cms.int32(1),
        PTMS6 = cms.int32(1),
        PTMS7 = cms.int32(1),
        PTMS8 = cms.int32(1),
        PTMS9 = cms.int32(1),
        RE43 = cms.int32(2),
        RH = cms.int32(61),
        RL = cms.int32(42),
        RON = cms.bool(True),
        SET = cms.int32(7),
        ST43 = cms.int32(42),
        WEN0 = cms.int32(1),
        WEN1 = cms.int32(1),
        WEN2 = cms.int32(1),
        WEN3 = cms.int32(1),
        WEN4 = cms.int32(1),
        WEN5 = cms.int32(1),
        WEN6 = cms.int32(1),
        WEN7 = cms.int32(1),
        WEN8 = cms.int32(1),
        XON = cms.bool(False)
    )
)

process.BwdBzeroReferenceTrajectoryFactory = cms.PSet(
    MaterialEffects = cms.string('Combined'),
    MomentumEstimate = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.BwdReferenceTrajectoryFactory = cms.PSet(
    MaterialEffects = cms.string('Combined'),
    MomentumEstimateFieldOff = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('oppositeToMomentum'),
    TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseBzeroIfFieldOff = cms.bool(True),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.BzeroReferenceTrajectoryFactory = cms.PSet(
    MaterialEffects = cms.string('Combined'),
    MomentumEstimate = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.CSCCommonTrigger = cms.PSet(
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3)
)

process.CSCSegAlgoDF = cms.PSet(
    algo_name = cms.string('CSCSegAlgoDF'),
    algo_psets = cms.VPSet(cms.PSet(
        CSCSegmentDebug = cms.untracked.bool(False),
        Pruning = cms.untracked.bool(False),
        chi2Max = cms.double(5000.0),
        dPhiFineMax = cms.double(0.025),
        dRPhiFineMax = cms.double(8.0),
        dXclusBoxMax = cms.double(8.0),
        dYclusBoxMax = cms.double(8.0),
        maxDPhi = cms.double(999.0),
        maxDTheta = cms.double(999.0),
        maxRatioResidualPrune = cms.double(3.0),
        minHitsForPreClustering = cms.int32(10),
        minHitsPerSegment = cms.int32(3),
        minLayersApart = cms.int32(2),
        nHitsPerClusterIsShower = cms.int32(20),
        preClustering = cms.untracked.bool(False),
        tanPhiMax = cms.double(0.5),
        tanThetaMax = cms.double(1.2)
    ), 
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(12.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(12.0),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(10),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.8),
            tanThetaMax = cms.double(2.0)
        ), 
        cms.PSet(
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(8.0),
            dYclusBoxMax = cms.double(8.0),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3.0),
            minHitsForPreClustering = cms.int32(30),
            minHitsPerSegment = cms.int32(3),
            minLayersApart = cms.int32(2),
            nHitsPerClusterIsShower = cms.int32(20),
            preClustering = cms.untracked.bool(False),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
        2, 1, 2, 1, 2)
)

process.CSCSegAlgoSK = cms.PSet(
    algo_name = cms.string('CSCSegAlgoSK'),
    algo_psets = cms.VPSet(cms.PSet(
        chi2Max = cms.double(99999.0),
        dPhiFineMax = cms.double(0.025),
        dPhiMax = cms.double(0.003),
        dRPhiFineMax = cms.double(8.0),
        dRPhiMax = cms.double(8.0),
        minLayersApart = cms.int32(2),
        verboseInfo = cms.untracked.bool(True),
        wideSeg = cms.double(3.0)
    ), 
        cms.PSet(
            chi2Max = cms.double(99999.0),
            dPhiFineMax = cms.double(0.025),
            dPhiMax = cms.double(0.025),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(8.0),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True),
            wideSeg = cms.double(3.0)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1)
)

process.CSCSegAlgoST = cms.PSet(
    algo_name = cms.string('CSCSegAlgoST'),
    algo_psets = cms.VPSet(cms.PSet(
        BPMinImprovement = cms.double(10000.0),
        BrutePruning = cms.bool(True),
        CSCDebug = cms.untracked.bool(False),
        CorrectTheErrors = cms.bool(True),
        Covariance = cms.double(0.0),
        ForceCovariance = cms.bool(False),
        ForceCovarianceAll = cms.bool(False),
        NormChi2Cut2D = cms.double(20.0),
        NormChi2Cut3D = cms.double(10.0),
        Pruning = cms.bool(True),
        SeedBig = cms.double(0.0015),
        SeedSmall = cms.double(0.0002),
        curvePenalty = cms.double(2.0),
        curvePenaltyThreshold = cms.double(0.85),
        dPhiFineMax = cms.double(0.025),
        dRPhiFineMax = cms.double(8.0),
        dXclusBoxMax = cms.double(4.0),
        dYclusBoxMax = cms.double(8.0),
        hitDropLimit4Hits = cms.double(0.6),
        hitDropLimit5Hits = cms.double(0.8),
        hitDropLimit6Hits = cms.double(0.3333),
        maxDPhi = cms.double(999.0),
        maxDTheta = cms.double(999.0),
        maxRatioResidualPrune = cms.double(3),
        maxRecHitsInCluster = cms.int32(20),
        minHitsPerSegment = cms.int32(3),
        onlyBestSegment = cms.bool(False),
        preClustering = cms.bool(True),
        preClusteringUseChaining = cms.bool(True),
        prePrun = cms.bool(True),
        prePrunLimit = cms.double(3.17),
        tanPhiMax = cms.double(0.5),
        tanThetaMax = cms.double(1.2),
        useShowering = cms.bool(False),
        yweightPenalty = cms.double(1.5),
        yweightPenaltyThreshold = cms.double(1.0)
    ), 
        cms.PSet(
            BPMinImprovement = cms.double(10000.0),
            BrutePruning = cms.bool(True),
            CSCDebug = cms.untracked.bool(False),
            CorrectTheErrors = cms.bool(True),
            Covariance = cms.double(0.0),
            ForceCovariance = cms.bool(False),
            ForceCovarianceAll = cms.bool(False),
            NormChi2Cut2D = cms.double(20.0),
            NormChi2Cut3D = cms.double(10.0),
            Pruning = cms.bool(True),
            SeedBig = cms.double(0.0015),
            SeedSmall = cms.double(0.0002),
            curvePenalty = cms.double(2.0),
            curvePenaltyThreshold = cms.double(0.85),
            dPhiFineMax = cms.double(0.025),
            dRPhiFineMax = cms.double(8.0),
            dXclusBoxMax = cms.double(4.0),
            dYclusBoxMax = cms.double(8.0),
            hitDropLimit4Hits = cms.double(0.6),
            hitDropLimit5Hits = cms.double(0.8),
            hitDropLimit6Hits = cms.double(0.3333),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            maxRatioResidualPrune = cms.double(3),
            maxRecHitsInCluster = cms.int32(24),
            minHitsPerSegment = cms.int32(3),
            onlyBestSegment = cms.bool(False),
            preClustering = cms.bool(True),
            preClusteringUseChaining = cms.bool(True),
            prePrun = cms.bool(True),
            prePrunLimit = cms.double(3.17),
            tanPhiMax = cms.double(0.5),
            tanThetaMax = cms.double(1.2),
            useShowering = cms.bool(False),
            yweightPenalty = cms.double(1.5),
            yweightPenaltyThreshold = cms.double(1.0)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1)
)

process.CSCSegAlgoTC = cms.PSet(
    algo_name = cms.string('CSCSegAlgoTC'),
    algo_psets = cms.VPSet(cms.PSet(
        SegmentSorting = cms.int32(1),
        chi2Max = cms.double(6000.0),
        chi2ndfProbMin = cms.double(0.0001),
        dPhiFineMax = cms.double(0.02),
        dPhiMax = cms.double(0.003),
        dRPhiFineMax = cms.double(6.0),
        dRPhiMax = cms.double(1.2),
        minLayersApart = cms.int32(2),
        verboseInfo = cms.untracked.bool(True)
    ), 
        cms.PSet(
            SegmentSorting = cms.int32(1),
            chi2Max = cms.double(6000.0),
            chi2ndfProbMin = cms.double(0.0001),
            dPhiFineMax = cms.double(0.013),
            dPhiMax = cms.double(0.00198),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(0.6),
            minLayersApart = cms.int32(2),
            verboseInfo = cms.untracked.bool(True)
        )),
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1)
)

process.CSCTimingExtractorBlock = cms.PSet(
    CSCTimingParameters = cms.PSet(
        CSCStripError = cms.double(7.0),
        CSCStripTimeOffset = cms.double(0.0),
        CSCWireError = cms.double(8.6),
        CSCWireTimeOffset = cms.double(0.0),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        PruneCut = cms.double(9.0),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        ),
        UseStripTime = cms.bool(True),
        UseWireTime = cms.bool(True),
        debug = cms.bool(False)
    )
)

process.ChargeSignificanceTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ChargeSignificanceTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0)
)

process.CkfBaseTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(6),
    nSigmaMinPt = cms.double(5.0)
)

process.CkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(False),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator')
)

process.ClusterFilterBlock = cms.PSet(
    ComponentName = cms.string('ClusterShapeTrackFilter'),
    clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
    ptMin = cms.double(1.5)
)

process.CombIsoCuts = cms.PSet(
    IsCombinedIso = cms.untracked.bool(True),
    IsRelativeIso = cms.untracked.bool(True),
    IsoCut03 = cms.untracked.double(0.15),
    ptThreshold = cms.untracked.double(0.0)
)

process.CombinedFwdBwdBzeroTrajectoryFactory = cms.PSet(
    BwdBzero = cms.PSet(
        MaterialEffects = cms.string('Combined'),
        MomentumEstimate = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('oppositeToMomentum'),
        TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    FwdBzero = cms.PSet(
        MaterialEffects = cms.string('Combined'),
        MomentumEstimate = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('CombinedTrajectoryFactory'),
    TrajectoryFactoryNames = cms.vstring('BzeroReferenceTrajectoryFactory,FwdBzero', 
        'BzeroReferenceTrajectoryFactory,BwdBzero'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    useAllFactories = cms.bool(True)
)

process.CombinedFwdBwdDualBzeroTrajectoryFactory = cms.PSet(
    BwdBzero = cms.PSet(
        MaterialEffects = cms.string('Combined'),
        MomentumEstimate = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('oppositeToMomentum'),
        TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    DualBzero = cms.PSet(
        MaterialEffects = cms.string('Combined'),
        MomentumEstimate = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('DualBzeroTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    FwdBzero = cms.PSet(
        MaterialEffects = cms.string('Combined'),
        MomentumEstimate = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('BzeroReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('CombinedTrajectoryFactory'),
    TrajectoryFactoryNames = cms.vstring('BzeroReferenceTrajectoryFactory,FwdBzero', 
        'BzeroReferenceTrajectoryFactory,BwdBzero', 
        'DualBzeroTrajectoryFactory,DualBzero'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    useAllFactories = cms.bool(True)
)

process.CombinedFwdBwdDualTrajectoryFactory = cms.PSet(
    Bwd = cms.PSet(
        MaterialEffects = cms.string('Combined'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('oppositeToMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    Dual = cms.PSet(
        MaterialEffects = cms.string('Combined'),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('DualTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    Fwd = cms.PSet(
        MaterialEffects = cms.string('Combined'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('CombinedTrajectoryFactory'),
    TrajectoryFactoryNames = cms.vstring('ReferenceTrajectoryFactory,Fwd', 
        'ReferenceTrajectoryFactory,Bwd', 
        'DualTrajectoryFactory,Dual'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    useAllFactories = cms.bool(True)
)

process.CombinedFwdBwdTrajectoryFactory = cms.PSet(
    Bwd = cms.PSet(
        MaterialEffects = cms.string('Combined'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('oppositeToMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    Fwd = cms.PSet(
        MaterialEffects = cms.string('Combined'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('CombinedTrajectoryFactory'),
    TrajectoryFactoryNames = cms.vstring('ReferenceTrajectoryFactory,Fwd', 
        'ReferenceTrajectoryFactory,Bwd'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    useAllFactories = cms.bool(True)
)

process.CombinedTrajectoryFactory = cms.PSet(
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    Reference = cms.PSet(
        MaterialEffects = cms.string('Combined'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True)
    ),
    TrajectoryFactoryName = cms.string('CombinedTrajectoryFactory'),
    TrajectoryFactoryNames = cms.vstring('TwoBodyDecayTrajectoryFactory,TwoBody', 
        'ReferenceTrajectoryFactory,Reference'),
    TwoBody = cms.PSet(
        Chi2Cut = cms.double(10000.0),
        ConstructTsosWithErrors = cms.bool(False),
        EstimatorParameters = cms.PSet(
            MaxIterationDifference = cms.untracked.double(0.01),
            MaxIterations = cms.untracked.int32(100),
            RobustificationConstant = cms.untracked.double(1.0),
            UseInvariantMass = cms.untracked.bool(True)
        ),
        MaterialEffects = cms.string('Combined'),
        NSigmaCut = cms.double(100.0),
        ParticleProperties = cms.PSet(
            PrimaryMass = cms.double(91.1876),
            PrimaryWidth = cms.double(2.4952),
            SecondaryMass = cms.double(0.105658)
        ),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('TwoBodyDecayTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(False),
        UseProjectedHits = cms.bool(True),
        UseRefittedState = cms.bool(True)
    ),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    useAllFactories = cms.bool(False)
)

process.CommonEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_logErrorHarvester_*_*')
)

process.CompositeTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet()
)

process.CondDBSetup = cms.PSet(
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        enableConnectionSharing = cms.untracked.bool(True),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0)
    )
)

process.CosmicSeedCreator = cms.PSet(
    ComponentName = cms.string('CosmicSeedCreator'),
    MinOneOverPtError = cms.double(1.0),
    OriginTransverseErrorMultiplier = cms.double(1.0),
    SeedMomentumForBOFF = cms.double(5.0),
    TTRHBuilder = cms.string('WithTrackAngle'),
    forceKinematicWithRegionDirection = cms.bool(False),
    magneticField = cms.string('ParabolicMf'),
    maxseeds = cms.int32(10000),
    propagator = cms.string('PropagatorWithMaterialParabolicMf')
)

process.DATAMIXEREventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep CSCDetIdCSCALCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCALCTDigi_*', 
        'keep CSCDetIdCSCCLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCLCTDigi_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_muonCSCDigis_MuonCSCComparatorDigi_*', 
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_csctfDigis_*_*', 
        'keep CSCDetIdCSCCorrelatedLCTDigiMuonDigiCollection_muonCSCDigis_MuonCSCCorrelatedLCTDigi_*', 
        'keep CSCDetIdCSCRPCDigiMuonDigiCollection_muonCSCDigis_MuonCSCRPCDigi_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_muonCSCDigis_MuonCSCStripDigi_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_muonCSCDigis_MuonCSCWireDigi_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_muonDTDigis_*_*', 
        'keep PixelDigiedmDetSetVector_siPixelDigis_*_*', 
        'keep SiStripDigiedmDetSetVector_siStripDigis_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_muonRPCDigis_*_*', 
        'keep HBHEDataFramesSorted_hcalDigis_*_*', 
        'keep HFDataFramesSorted_hcalDigis_*_*', 
        'keep HODataFramesSorted_hcalDigis_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep CastorDataFramesSorted_castorDigis_*_*', 
        'keep EBDigiCollection_ecalDigis_*_*', 
        'keep EEDigiCollection_ecalDigis_*_*', 
        'keep ESDigiCollection_ecalPreshowerDigis_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.DF_ME1234_1 = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(8.0),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(10),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2)
)

process.DF_ME1234_2 = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(12.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(12.0),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(10),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.8),
    tanThetaMax = cms.double(2.0)
)

process.DF_ME1A = cms.PSet(
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    chi2Max = cms.double(5000.0),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(8.0),
    dYclusBoxMax = cms.double(8.0),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3.0),
    minHitsForPreClustering = cms.int32(30),
    minHitsPerSegment = cms.int32(3),
    minLayersApart = cms.int32(2),
    nHitsPerClusterIsShower = cms.int32(20),
    preClustering = cms.untracked.bool(False),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2)
)

process.DQMEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_MEtoEDMConverter_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.DTLinearDriftAlgo_CosmicData = cms.PSet(
    recAlgo = cms.string('DTLinearDriftAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        )
    )
)

process.DTLinearDriftFromDBAlgo = cms.PSet(
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(True),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(True),
            doWirePropCorrection = cms.bool(True),
            tTrigLabel = cms.string(''),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(True)
    )
)

process.DTLinearDriftFromDBAlgo_CosmicData = cms.PSet(
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        debug = cms.untracked.bool(False),
        doVdriftCorr = cms.bool(False),
        maxTime = cms.double(420.0),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        tTrigModeConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doT0Correction = cms.bool(True),
            doTOFCorrection = cms.bool(False),
            doWirePropCorrection = cms.bool(False),
            tTrigLabel = cms.string('cosmics'),
            tofCorrType = cms.int32(0),
            vPropWire = cms.double(24.4),
            wirePropCorrType = cms.int32(0)
        ),
        useUncertDB = cms.bool(False)
    )
)

process.DTMeantimerPatternReco2DAlgo_LinearDriftFromDB = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(1.0),
        AlphaMaxTheta = cms.double(0.9),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco')
)

process.DTMeantimerPatternReco2DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        AlphaMaxPhi = cms.double(100.0),
        AlphaMaxTheta = cms.double(100.0),
        MaxAllowedHits = cms.uint32(50),
        MaxChi2 = cms.double(4.0),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nSharedHitsMax = cms.int32(2),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        ),
        segmCleanerMode = cms.int32(2)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco')
)

process.DTMeantimerPatternReco4DAlgo_LinearDriftFromDB = cms.PSet(
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(1.0),
            AlphaMaxTheta = cms.double(0.9),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(True),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(True),
                    doWirePropCorrection = cms.bool(True),
                    tTrigLabel = cms.string(''),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(True)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(True),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(True),
                doWirePropCorrection = cms.bool(True),
                tTrigLabel = cms.string(''),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(True)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D')
)

process.DTMeantimerPatternReco4DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco4DAlgoConfig = cms.PSet(
        AllDTRecHits = cms.bool(True),
        Reco2DAlgoConfig = cms.PSet(
            AlphaMaxPhi = cms.double(100.0),
            AlphaMaxTheta = cms.double(100.0),
            MaxAllowedHits = cms.uint32(50),
            MaxChi2 = cms.double(4.0),
            debug = cms.untracked.bool(False),
            hit_afterT0_resolution = cms.double(0.03),
            intime_cut = cms.double(-1.0),
            nSharedHitsMax = cms.int32(2),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            performT0_vdriftSegCorrection = cms.bool(False),
            perform_delta_rejecting = cms.bool(False),
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doVdriftCorr = cms.bool(False),
                maxTime = cms.double(420.0),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                tTrigModeConfig = cms.PSet(
                    debug = cms.untracked.bool(False),
                    doT0Correction = cms.bool(True),
                    doTOFCorrection = cms.bool(False),
                    doWirePropCorrection = cms.bool(False),
                    tTrigLabel = cms.string('cosmics'),
                    tofCorrType = cms.int32(0),
                    vPropWire = cms.double(24.4),
                    wirePropCorrType = cms.int32(0)
                ),
                useUncertDB = cms.bool(False)
            ),
            segmCleanerMode = cms.int32(2)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        debug = cms.untracked.bool(False),
        hit_afterT0_resolution = cms.double(0.03),
        intime_cut = cms.double(-1.0),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        performT0_vdriftSegCorrection = cms.bool(False),
        perform_delta_rejecting = cms.bool(False),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            debug = cms.untracked.bool(False),
            doVdriftCorr = cms.bool(False),
            maxTime = cms.double(420.0),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            tTrigModeConfig = cms.PSet(
                debug = cms.untracked.bool(False),
                doT0Correction = cms.bool(True),
                doTOFCorrection = cms.bool(False),
                doWirePropCorrection = cms.bool(False),
                tTrigLabel = cms.string('cosmics'),
                tofCorrType = cms.int32(0),
                vPropWire = cms.double(24.4),
                wirePropCorrType = cms.int32(0)
            ),
            useUncertDB = cms.bool(False)
        )
    ),
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D')
)

process.DTTPGMapBlock = cms.PSet(
    DTTPGMap = cms.untracked.PSet(
    **dict(
        [
            ("wh0st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh0st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh0st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh0st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh0st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh0st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh0st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh0st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh0st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se4" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("wh1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se4" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("wh1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se4" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("wh1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("wh2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("wh2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("wh2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("wh2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("wh2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("wh2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("wh2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("wh2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se3" , cms.untracked.vint32(50, 48, 50, 13) ),
            ("whm1st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm1st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se3" , cms.untracked.vint32(60, 48, 60, 15) ),
            ("whm1st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm1st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se3" , cms.untracked.vint32(72, 48, 72, 18) ),
            ("whm1st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm1st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm1st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm1st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm1st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm1st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm1st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
        ] +
        [
            ("whm2st1se1" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se10" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se11" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se12" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se2" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se3" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se4" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se5" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se6" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se7" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se8" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st1se9" , cms.untracked.vint32(50, 58, 50, 13) ),
            ("whm2st2se1" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se10" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se11" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se12" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se2" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se3" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se4" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se5" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se6" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se7" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se8" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st2se9" , cms.untracked.vint32(60, 58, 60, 15) ),
            ("whm2st3se1" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se10" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se11" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se12" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se2" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se3" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se4" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se5" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se6" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se7" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se8" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st3se9" , cms.untracked.vint32(72, 58, 72, 18) ),
            ("whm2st4se1" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se10" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se11" , cms.untracked.vint32(48, 0, 48, 12) ),
            ("whm2st4se12" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se13" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se14" , cms.untracked.vint32(60, 0, 60, 15) ),
            ("whm2st4se2" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se3" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se4" , cms.untracked.vint32(72, 0, 72, 18) ),
            ("whm2st4se5" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se6" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se7" , cms.untracked.vint32(96, 0, 96, 24) ),
            ("whm2st4se8" , cms.untracked.vint32(92, 0, 92, 23) ),
            ("whm2st4se9" , cms.untracked.vint32(48, 0, 48, 12) ),
            ]
        )
    )
)

process.DTTPGParametersBlock = cms.PSet(
    DTTPGParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SectCollParameters = cms.PSet(
            Debug = cms.untracked.bool(False),
            SCCSP1 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCCSP4 = cms.int32(0),
            SCCSP5 = cms.int32(0),
            SCECF1 = cms.bool(False),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCECF4 = cms.bool(False)
        ),
        TUParameters = cms.PSet(
            BtiParameters = cms.PSet(
                AC1 = cms.int32(0),
                AC2 = cms.int32(3),
                ACH = cms.int32(1),
                ACL = cms.int32(2),
                CH = cms.int32(41),
                CL = cms.int32(22),
                DEAD = cms.int32(31),
                Debug = cms.untracked.int32(0),
                KACCTHETA = cms.int32(1),
                KMAX = cms.int32(64),
                LH = cms.int32(21),
                LL = cms.int32(2),
                LTS = cms.int32(3),
                PTMS0 = cms.int32(0),
                PTMS1 = cms.int32(0),
                PTMS10 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS12 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS15 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS20 = cms.int32(1),
                PTMS21 = cms.int32(1),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                PTMS3 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS31 = cms.int32(0),
                PTMS4 = cms.int32(1),
                PTMS5 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS8 = cms.int32(1),
                PTMS9 = cms.int32(1),
                RE43 = cms.int32(2),
                RH = cms.int32(61),
                RL = cms.int32(42),
                RON = cms.bool(True),
                SET = cms.int32(7),
                ST43 = cms.int32(42),
                WEN0 = cms.int32(1),
                WEN1 = cms.int32(1),
                WEN2 = cms.int32(1),
                WEN3 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                WEN6 = cms.int32(1),
                WEN7 = cms.int32(1),
                WEN8 = cms.int32(1),
                XON = cms.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            LutParameters = cms.PSet(
                BTIC = cms.untracked.int32(0),
                D = cms.untracked.double(0),
                Debug = cms.untracked.bool(False),
                WHEEL = cms.untracked.int32(-1),
                XCN = cms.untracked.double(0)
            ),
            TSPhiParameters = cms.PSet(
                Debug = cms.untracked.bool(False),
                TSMCCE1 = cms.bool(True),
                TSMCCE2 = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSMHSP = cms.int32(1),
                TSMHTE1 = cms.bool(True),
                TSMHTE2 = cms.bool(False),
                TSMHTEC = cms.bool(False),
                TSMMSK1 = cms.int32(312),
                TSMMSK2 = cms.int32(312),
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSMNOEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSSCCEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSGS1 = cms.int32(1),
                TSSGS2 = cms.int32(1),
                TSSHTE1 = cms.bool(True),
                TSSHTE2 = cms.bool(False),
                TSSHTEC = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSSMSK2 = cms.int32(312),
                TSSNOE1 = cms.bool(True),
                TSSNOE2 = cms.bool(False),
                TSSNOEC = cms.bool(False),
                TSTREN0 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN10 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN18 = cms.bool(True),
                TSTREN19 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN9 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            TracoParameters = cms.PSet(
                BTIC = cms.int32(32),
                DD = cms.int32(18),
                Debug = cms.untracked.int32(0),
                FHISM = cms.int32(0),
                FHTMSK = cms.int32(0),
                FHTPRF = cms.int32(1),
                FLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                FSLMSK = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                LTF = cms.int32(0),
                LTS = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                REUSEI = cms.int32(1),
                REUSEO = cms.int32(1),
                SHISM = cms.int32(0),
                SHTMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SLTMSK = cms.int32(1),
                SPRGCOMP = cms.int32(2),
                SSLMSK = cms.int32(0),
                TRGENB0 = cms.int32(1),
                TRGENB1 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB2 = cms.int32(1),
                TRGENB3 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                TRGENB9 = cms.int32(1)
            )
        )
    )
)

process.DTTimingExtractorBlock = cms.PSet(
    DTTimingParameters = cms.PSet(
        DTTimeOffset = cms.double(0.0),
        DoWireCorr = cms.bool(True),
        DropTheta = cms.bool(True),
        HitError = cms.double(6.0),
        HitsMin = cms.int32(3),
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTradius = cms.double(0.01),
            DTsegments = cms.InputTag("dt4DSegments"),
            TightMatchCSC = cms.bool(True),
            TightMatchDT = cms.bool(False)
        ),
        PruneCut = cms.double(10000.0),
        RequireBothProjections = cms.bool(False),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        ),
        UseSegmentT0 = cms.bool(False),
        debug = cms.bool(False)
    )
)

process.DefaultAlgorithms = cms.PSet(
    APVInspectMode = cms.string('BaselineFollower'),
    APVRestoreMode = cms.string('BaselineFollower'),
    ApplyBaselineCleaner = cms.bool(True),
    ApplyBaselineRejection = cms.bool(True),
    CleaningSequence = cms.uint32(1),
    CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
    CutToAvoidSignal = cms.double(2.0),
    DeltaCMThreshold = cms.uint32(20),
    Deviation = cms.uint32(25),
    ForceNoRestore = cms.bool(False),
    Fraction = cms.double(0.2),
    Iterations = cms.int32(3),
    MeanCM = cms.int32(0),
    PedestalSubtractionFedMode = cms.bool(False),
    SelfSelectRestoreAlgo = cms.bool(False),
    SiStripFedZeroSuppressionMode = cms.uint32(4),
    TruncateInSuppressor = cms.bool(True),
    consecThreshold = cms.uint32(5),
    distortionThreshold = cms.uint32(20),
    doAPVRestore = cms.bool(True),
    filteredBaselineDerivativeSumSquare = cms.double(30),
    filteredBaselineMax = cms.double(6),
    hitStripThreshold = cms.uint32(40),
    minStripsToFit = cms.uint32(4),
    nSaturatedStrip = cms.uint32(2),
    nSigmaNoiseDerTh = cms.uint32(4),
    nSmooth = cms.uint32(9),
    restoreThreshold = cms.double(0.5),
    slopeX = cms.int32(3),
    slopeY = cms.int32(4),
    useCMMeanMap = cms.bool(False),
    useRealMeanCM = cms.bool(False)
)

process.DefaultClusterizer = cms.PSet(
    Algorithm = cms.string('ThreeThresholdAlgorithm'),
    ChannelThreshold = cms.double(2.0),
    ClusterThreshold = cms.double(5.0),
    MaxAdjacentBad = cms.uint32(0),
    MaxSequentialBad = cms.uint32(1),
    MaxSequentialHoles = cms.uint32(0),
    QualityLabel = cms.string(''),
    RemoveApvShots = cms.bool(True),
    SeedThreshold = cms.double(3.0),
    clusterChargeCut = cms.PSet(
        refToPSet_ = cms.string('SiStripClusterChargeCutNone')
    )
)

process.DigiToRawFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*')
)

process.DualBzeroTrajectoryFactory = cms.PSet(
    MaterialEffects = cms.string('Combined'),
    MomentumEstimate = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('DualBzeroTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.DualTrajectoryFactory = cms.PSet(
    MaterialEffects = cms.string('Combined'),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('DualTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.EITopPAGEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*')
)

process.EvtScalersAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*')
)

process.EvtScalersRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*')
)

process.FEVTDEBUGEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*', 
        'keep *_heavyIon_*_*', 
        'keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTDEBUGHLTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(1048576),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*', 
        'keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*', 
        'keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'keep *_*_MergedTrackTruth_*', 
        'keep *_*_StripDigiSimLink_*', 
        'keep *_*_PixelDigiSimLink_*', 
        'keep *_*_MuonCSCStripDigiSimLinks_*', 
        'keep *_*_MuonCSCWireDigiSimLinks_*', 
        'keep *_*_RPCDigiSimLink_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_*_*_*', 
        'keep *_heavyIon_*_*', 
        'keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTHLTALLEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep *_*_*_HLT', 
        'keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.FEVTSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_heavyIon_*_*', 
        'keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.GENRAWEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep recoGenMETs_*_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_logErrorHarvester_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.GeneratorInterfaceAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.GeneratorInterfaceLHE = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep *_externalLHEProducer_LHEScriptOutput_*')
)

process.GeneratorInterfaceRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.GeneratorInterfaceRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.GlobalMuonRefitter = cms.PSet(
    CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
    Chi2CutCSC = cms.double(1.0),
    Chi2CutDT = cms.double(30.0),
    Chi2CutRPC = cms.double(1.0),
    Chi2ProbabilityCut = cms.double(30.0),
    DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
    DYTselector = cms.int32(1),
    DYTthrs = cms.vint32(10, 10),
    DYTupdator = cms.bool(True),
    DYTuseAPE = cms.bool(False),
    DoPredictionsOnly = cms.bool(False),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    HitThreshold = cms.int32(1),
    MuonHitsOption = cms.int32(1),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    PropDirForCosmics = cms.bool(False),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    PtCut = cms.double(1.0),
    RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
    RefitDirection = cms.string('insideOut'),
    RefitFlag = cms.bool(True),
    RefitRPCHits = cms.bool(True),
    SkipStation = cms.int32(-1),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
    TrackerSkipSection = cms.int32(-1),
    TrackerSkipSystem = cms.int32(-1)
)

process.GlobalMuonTrackMatcher = cms.PSet(
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    )
)

process.GlobalTrajectoryBuilderCommon = cms.PSet(
    GlbRefitterParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        Chi2CutCSC = cms.double(150.0),
        Chi2CutDT = cms.double(10.0),
        Chi2CutRPC = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DYTselector = cms.int32(1),
        DYTthrs = cms.vint32(20, 30),
        DYTupdator = cms.bool(False),
        DYTuseAPE = cms.bool(False),
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('GlbMuKFFitter'),
        HitThreshold = cms.int32(1),
        MuonHitsOption = cms.int32(1),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        PropDirForCosmics = cms.bool(False),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        PtCut = cms.double(1.0),
        RefitDirection = cms.string('insideOut'),
        RefitFlag = cms.bool(True),
        RefitRPCHits = cms.bool(True),
        SkipStation = cms.int32(-1),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        TrackerSkipSection = cms.int32(-1),
        TrackerSkipSystem = cms.int32(-1)
    ),
    GlobalMuonTrackMatcher = cms.PSet(
        Chi2Cut_1 = cms.double(50.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaDCut_2 = cms.double(10.0),
        DeltaDCut_3 = cms.double(15.0),
        DeltaRCut_1 = cms.double(0.1),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        Eta_threshold = cms.double(1.2),
        LocChi2Cut = cms.double(20.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Pt_threshold1 = cms.double(0.0),
        Pt_threshold2 = cms.double(999999999.0),
        Quality_1 = cms.double(20.0),
        Quality_2 = cms.double(15.0),
        Quality_3 = cms.double(7.0)
    ),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    MuonTrackingRegionBuilder = cms.PSet(
        DeltaEta = cms.double(0.2),
        DeltaPhi = cms.double(0.2),
        DeltaR = cms.double(0.2),
        DeltaZ = cms.double(15.9),
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        Eta_fixed = cms.bool(False),
        Eta_min = cms.double(0.1),
        MeasurementTrackerName = cms.InputTag(""),
        OnDemand = cms.int32(-1),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        Phi_fixed = cms.bool(False),
        Phi_min = cms.double(0.1),
        Pt_fixed = cms.bool(False),
        Pt_min = cms.double(1.5),
        Rescale_Dz = cms.double(3.0),
        Rescale_eta = cms.double(3.0),
        Rescale_phi = cms.double(3.0),
        UseVertex = cms.bool(False),
        Z_fixed = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        input = cms.InputTag(""),
        maxRegions = cms.int32(1),
        precise = cms.bool(True),
        vertexCollection = cms.InputTag("")
    ),
    PCut = cms.double(2.5),
    PtCut = cms.double(1.0),
    RefitRPCHits = cms.bool(True),
    ScaleTECxFactor = cms.double(-1.0),
    ScaleTECyFactor = cms.double(-1.0),
    TrackTransformer = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
    ),
    TrackerPropagator = cms.string('SteppingHelixPropagatorAny'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate')
)

process.GroupedCkfTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.GroupedCkfTrajectoryBuilderP5 = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(1),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfBaseTrajectoryFilterP5')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.GroupedCkfTrajectoryBuilderP5Bottom = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('MeasurementTrackerBottom'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(1),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfBaseTrajectoryFilterP5')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.GroupedCkfTrajectoryBuilderP5Top = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string('MeasurementTrackerTop'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('Chi2'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(1),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('ckfBaseTrajectoryFilterP5')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.HLTDEBUGEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep *_logErrorHarvester_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.HLTDebugFEVT = cms.PSet(
    outputCommands = cms.vstring( ('drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*' ) )
)

process.HLTDebugRAW = cms.PSet(
    outputCommands = cms.vstring( ('drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*' ) )
)

process.HLTriggerAOD = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'drop L1GlobalTriggerObjectMapRecord_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTriggerRAW = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HLTriggerRECO = cms.PSet(
    outputCommands = cms.vstring('drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.HcalNoiseParameterSet = cms.PSet(
    TS4TS5EnergyThreshold = cms.double(50),
    TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.4, -0.2, -0.08, 
        0, 0.1),
    TS4TS5LowerThreshold = cms.vdouble(100, 120, 150, 200, 300, 
        400, 500),
    TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72, 0.72),
    TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400, 4000),
    calibdigiHBHEthreshold = cms.double(15),
    calibdigiHBHEtimeslices = cms.vint32(3, 4, 5, 6),
    calibdigiHFthreshold = cms.double(-999),
    calibdigiHFtimeslices = cms.vint32(0, 1, 2, 3, 4, 
        5, 6, 7, 8, 9),
    hlMaxHPDEMF = cms.double(-9999.0),
    hlMaxRBXEMF = cms.double(0.01),
    lMaxHighEHitTime = cms.double(9999.0),
    lMaxLowEHitTime = cms.double(9999.0),
    lMaxRatio = cms.double(999.0),
    lMinHPDHits = cms.int32(17),
    lMinHPDNoOtherHits = cms.int32(10),
    lMinHighEHitTime = cms.double(-9999.0),
    lMinLowEHitTime = cms.double(-9999.0),
    lMinRBXHits = cms.int32(999),
    lMinRatio = cms.double(-999.0),
    lMinZeros = cms.int32(10),
    lRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.5, 0.0, 
        0.0, 1.0, -0.5),
    minEEMF = cms.double(50.0),
    minERatio = cms.double(50.0),
    minEZeros = cms.double(10.0),
    minHighHitE = cms.double(25.0),
    minLowHitE = cms.double(10.0),
    minR45HitE = cms.double(5.0),
    minRecHitE = cms.double(1.5),
    pMaxHPDEMF = cms.double(0.02),
    pMaxHighEHitTime = cms.double(5.0),
    pMaxLowEHitTime = cms.double(6.0),
    pMaxRBXEMF = cms.double(0.02),
    pMaxRatio = cms.double(0.85),
    pMinE = cms.double(40.0),
    pMinEEMF = cms.double(10.0),
    pMinERatio = cms.double(25.0),
    pMinEZeros = cms.double(5.0),
    pMinHPDHits = cms.int32(10),
    pMinHPDNoOtherHits = cms.int32(7),
    pMinHighEHitTime = cms.double(-4.0),
    pMinLowEHitTime = cms.double(-6.0),
    pMinRBXHits = cms.int32(20),
    pMinRBXRechitR45Count = cms.int32(1),
    pMinRBXRechitR45EnergyFraction = cms.double(0.1),
    pMinRBXRechitR45Fraction = cms.double(0.1),
    pMinRatio = cms.double(0.75),
    pMinZeros = cms.int32(4),
    tMaxHighEHitTime = cms.double(6.0),
    tMaxLowEHitTime = cms.double(9999.0),
    tMaxRatio = cms.double(999.0),
    tMinHPDHits = cms.int32(16),
    tMinHPDNoOtherHits = cms.int32(9),
    tMinHighEHitTime = cms.double(-7.0),
    tMinLowEHitTime = cms.double(-9999.0),
    tMinRBXHits = cms.int32(50),
    tMinRatio = cms.double(-999.0),
    tMinZeros = cms.int32(8),
    tRBXRecHitR45Cuts = cms.vdouble(0.0, 1.0, 0.0, -0.2, 0.0, 
        0.0, 1.0, -0.2)
)

process.HcalReLabel = cms.PSet(
    RelabelHits = cms.untracked.bool(False),
    RelabelRules = cms.untracked.PSet(
        CorrectPhi = cms.untracked.bool(False),
        Eta1 = cms.untracked.vint32(1, 2, 2, 2, 3, 
            3, 3, 3, 3, 3, 
            3, 3, 3, 3, 3, 
            3, 3, 3, 3),
        Eta16 = cms.untracked.vint32(1, 1, 2, 2, 2, 
            2, 2, 2, 2, 3, 
            3, 3, 3, 3, 3, 
            3, 3, 3, 3),
        Eta17 = cms.untracked.vint32(1, 1, 2, 2, 3, 
            3, 3, 4, 4, 4, 
            4, 4, 5, 5, 5, 
            5, 5, 5, 5)
    )
)

process.HiCaloJetDefaults = cms.PSet(
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    puPtMin = cms.double(10),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)

process.HiCaloJetParameters = cms.PSet(
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.4),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(True),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(False),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.3),
    jetPtMin = cms.double(10.0),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puPtMin = cms.double(10),
    puWidth = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("towerMaker"),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)

process.HiConformalPixelFilterBlock = cms.PSet(
    ComponentName = cms.string('HIPixelTrackFilter'),
    VertexCollection = cms.InputTag("hiSelectedVertex"),
    chi2 = cms.double(80.0),
    clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
    lipMax = cms.double(999.0),
    nSigmaLipMaxTolerance = cms.double(14.0),
    nSigmaTipMaxTolerance = cms.double(999.0),
    ptMin = cms.double(0.25),
    tipMax = cms.double(999.0),
    useClusterShape = cms.bool(False)
)

process.HiFilterBlock = cms.PSet(
    ComponentName = cms.string('HIPixelTrackFilter'),
    VertexCollection = cms.InputTag("hiSelectedVertex"),
    chi2 = cms.double(1000.0),
    clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache"),
    lipMax = cms.double(0.3),
    nSigmaLipMaxTolerance = cms.double(0),
    nSigmaTipMaxTolerance = cms.double(6.0),
    ptMin = cms.double(1.5),
    tipMax = cms.double(0),
    useClusterShape = cms.bool(False)
)

process.HiLowPtTrackingRegionWithVertexBlock = cms.PSet(
    VertexCollection = cms.InputTag("hiSelectedVertex"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    fixedError = cms.double(0.2),
    nSigmaZ = cms.double(3.0),
    originRadius = cms.double(0.2),
    precise = cms.bool(True),
    ptMin = cms.double(0.25),
    sigmaZVertex = cms.double(3.0),
    useFixedError = cms.bool(True),
    useFoundVertices = cms.bool(True)
)

process.HiMixAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_heavyIon_*_*')
)

process.HiMixRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_heavyIon_*_*')
)

process.HiMixRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_heavyIon_*_*')
)

process.HiPFJetDefaults = cms.PSet(
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetPtMin = cms.double(10),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)

process.HiPFJetParameters = cms.PSet(
    Active_Area_Repeats = cms.int32(1),
    GhostArea = cms.double(0.01),
    Ghost_EtaMax = cms.double(6.5),
    Rho_EtaMax = cms.double(4.5),
    addNegative = cms.bool(True),
    addNegativesFromCone = cms.bool(False),
    doAreaDiskApprox = cms.bool(False),
    doAreaFastjet = cms.bool(True),
    doFastJetNonUniform = cms.bool(True),
    doOutputJets = cms.bool(True),
    doPUOffsetCorr = cms.bool(False),
    doPVCorrection = cms.bool(False),
    doRhoFastjet = cms.bool(True),
    dropZeros = cms.bool(True),
    infinitesimalPt = cms.double(0.005),
    inputEMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetPtMin = cms.double(10),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    nExclude = cms.uint32(2),
    nSigmaPU = cms.double(1.0),
    puCenters = cms.vdouble(-5, -4, -3, -2, -1, 
        0, 1, 2, 3, 4, 
        5),
    puWidth = cms.double(0.8),
    radiusPU = cms.double(0.5),
    src = cms.InputTag("particleFlow"),
    srcPVs = cms.InputTag(""),
    useDeterministicSeed = cms.bool(True),
    voronoiRfact = cms.double(-0.9)
)

process.HiProtoTrackFilterBlock = cms.PSet(
    ComponentName = cms.string('HIProtoTrackFilter'),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    chi2 = cms.double(1000.0),
    doVariablePtMin = cms.bool(True),
    ptMin = cms.double(1.0),
    siPixelRecHits = cms.InputTag("siPixelRecHits"),
    tipMax = cms.double(1.0)
)

process.HiTrackingRegionFactoryFromJetsBlock = cms.PSet(
    ComponentName = cms.string('TauRegionalPixelSeedGenerator'),
    RegionPSet = cms.PSet(
        JetSrc = cms.InputTag("iterativeConePu5CaloJets"),
        deltaEtaRegion = cms.double(0.1),
        deltaPhiRegion = cms.double(0.1),
        originHalfLength = cms.double(0.2),
        originRadius = cms.double(0.2),
        originZPos = cms.double(0.0),
        precise = cms.bool(True),
        ptMin = cms.double(5.0),
        vertexSrc = cms.InputTag("hiSelectedVertex")
    )
)

process.HiTrackingRegionFactoryFromSTAMuonsBlock = cms.PSet(
    ComponentName = cms.string('HIMuonTrackingRegionProducer'),
    MuonSrc = cms.InputTag("standAloneMuons","UpdatedAtVtx"),
    MuonTrackingRegionBuilder = cms.PSet(
        DeltaEta = cms.double(0.1),
        DeltaPhi = cms.double(0.2),
        DeltaR = cms.double(0.2),
        DeltaZ = cms.double(15.9),
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        Eta_fixed = cms.bool(True),
        Eta_min = cms.double(0.1),
        MeasurementTrackerName = cms.InputTag(""),
        OnDemand = cms.int32(-1),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        Phi_fixed = cms.bool(True),
        Phi_min = cms.double(0.1),
        Pt_fixed = cms.bool(False),
        Pt_min = cms.double(1.5),
        Rescale_Dz = cms.double(5.0),
        Rescale_eta = cms.double(3.0),
        Rescale_phi = cms.double(3.0),
        UseVertex = cms.bool(True),
        Z_fixed = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        input = cms.InputTag(""),
        maxRegions = cms.int32(1),
        precise = cms.bool(True),
        vertexCollection = cms.InputTag("hiSelectedVertex")
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    )
)

process.HiTrackingRegionForPrimaryVertexBlock = cms.PSet(
    beamSpot = cms.InputTag("offlineBeamSpot"),
    directionXCoord = cms.double(1.0),
    directionYCoord = cms.double(1.0),
    directionZCoord = cms.double(0.0),
    doVariablePtMin = cms.bool(True),
    nSigmaZ = cms.double(3.0),
    originRadius = cms.double(0.1),
    precise = cms.bool(True),
    ptMin = cms.double(0.7),
    siPixelRecHits = cms.InputTag("siPixelRecHits")
)

process.HiTrackingRegionFromClusterVtxBlock = cms.PSet(
    VertexCollection = cms.InputTag("hiPixelClusterVertex"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    directionXCoord = cms.double(1.0),
    directionYCoord = cms.double(1.0),
    directionZCoord = cms.double(0.0),
    doVariablePtMin = cms.bool(True),
    fixedError = cms.double(3.0),
    nSigmaZ = cms.double(3.0),
    originRadius = cms.double(0.2),
    precise = cms.bool(True),
    ptMin = cms.double(0.7),
    siPixelRecHits = cms.InputTag("siPixelRecHits"),
    sigmaZVertex = cms.double(3.0),
    useFixedError = cms.bool(True),
    useFoundVertices = cms.bool(True)
)

process.HiTrackingRegionWithVertexBlock = cms.PSet(
    VertexCollection = cms.InputTag("hiSelectedVertex"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    fixedError = cms.double(0.2),
    nSigmaZ = cms.double(3.0),
    originRadius = cms.double(0.2),
    precise = cms.bool(True),
    ptMin = cms.double(1.5),
    sigmaZVertex = cms.double(3.0),
    useFixedError = cms.bool(True),
    useFoundVertices = cms.bool(True)
)

process.IOMCRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_randomEngineStateProducer_*_*')
)

process.KinematicFilterBlock = cms.PSet(
    ComponentName = cms.string('PixelTrackFilterByKinematics'),
    chi2 = cms.double(1000.0),
    nSigmaInvPtTolerance = cms.double(0.0),
    nSigmaTipMaxTolerance = cms.double(0.0),
    ptMin = cms.double(0.7),
    tipMax = cms.double(1.0)
)

process.L1ExtraInputTagSet = cms.PSet(
    L1ExtraInputTags = cms.PSet(
        TagL1ExtraCenJet = cms.InputTag("dqmL1ExtraParticles","Central"),
        TagL1ExtraEtMissHTM = cms.InputTag("dqmL1ExtraParticles","MHT"),
        TagL1ExtraEtMissMET = cms.InputTag("dqmL1ExtraParticles","MET"),
        TagL1ExtraForJet = cms.InputTag("dqmL1ExtraParticles","Forward"),
        TagL1ExtraHFRings = cms.InputTag("dqmL1ExtraParticles"),
        TagL1ExtraIsoEG = cms.InputTag("dqmL1ExtraParticles","Isolated"),
        TagL1ExtraMuon = cms.InputTag("dqmL1ExtraParticles"),
        TagL1ExtraNoIsoEG = cms.InputTag("dqmL1ExtraParticles","NonIsolated"),
        TagL1ExtraTauJet = cms.InputTag("dqmL1ExtraParticles","Tau")
    )
)

process.L1ExtraInputTagSetStage1 = cms.PSet(
    L1ExtraInputTags = cms.PSet(
        TagL1ExtraCenJet = cms.InputTag("dqmL1ExtraParticlesStage1","Central"),
        TagL1ExtraEtMissHTM = cms.InputTag("dqmL1ExtraParticlesStage1","MHT"),
        TagL1ExtraEtMissMET = cms.InputTag("dqmL1ExtraParticlesStage1","MET"),
        TagL1ExtraForJet = cms.InputTag("dqmL1ExtraParticlesStage1","Forward"),
        TagL1ExtraHFRings = cms.InputTag("dqmL1ExtraParticlesStage1"),
        TagL1ExtraIsoEG = cms.InputTag("dqmL1ExtraParticlesStage1","Isolated"),
        TagL1ExtraMuon = cms.InputTag("dqmL1ExtraParticlesStage1"),
        TagL1ExtraNoIsoEG = cms.InputTag("dqmL1ExtraParticlesStage1","NonIsolated"),
        TagL1ExtraTauJet = cms.InputTag("dqmL1ExtraParticlesStage1","Tau")
    )
)

process.L1TriggerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.L1TriggerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simCscTriggerPrimitiveDigis_*_*', 
        'keep *_simDtTriggerPrimitiveDigis_*_*', 
        'keep *_simRpcTriggerDigis_*_*', 
        'keep *_simRctDigis_*_*', 
        'keep *_simCsctfDigis_*_*', 
        'keep *_simCsctfTrackDigis_*_*', 
        'keep *_simDttfDigis_*_*', 
        'keep *_simGctDigis_*_*', 
        'keep *_simGmtDigis_*_*', 
        'keep *_simGtDigis_*_*', 
        'keep *_cscTriggerPrimitiveDigis_*_*', 
        'keep *_dtTriggerPrimitiveDigis_*_*', 
        'keep *_rpcTriggerDigis_*_*', 
        'keep *_rctDigis_*_*', 
        'keep *_csctfDigis_*_*', 
        'keep *_csctfTrackDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gctDigis_*_*', 
        'keep *_gmtDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_gtEvmDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.L1TriggerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*')
)

process.L1TriggerRAWDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*')
)

process.L1TriggerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*')
)

process.LHEEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep *_externalLHEProducer_LHEScriptOutput_*'),
    splitLevel = cms.untracked.int32(0)
)

process.LutParametersBlock = cms.PSet(
    LutParameters = cms.PSet(
        BTIC = cms.untracked.int32(0),
        D = cms.untracked.double(0),
        Debug = cms.untracked.bool(False),
        WHEEL = cms.untracked.int32(-1),
        XCN = cms.untracked.double(0)
    )
)

process.MEtoEDMConverterAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MEtoEDMConverterFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConverter_*_*')
)

process.MEtoEDMConverterRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.MINIAODEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep *_slimmedPhotons*_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons*_*_*', 
        'keep *_slimmedTaus*_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs*_*_*', 
        'keep *_slimmedSecondaryVertices*_*_*', 
        'keep *_cmsTopTaggerMap_*_*', 
        'keep *_slimmedJetsAK8PFCHSSoftDropPacked_SubJets_*', 
        'keep *_slimmedJetsCMSTopTagCHSPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep double_fixedGridRho*__*', 
        'keep *_selectedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep patPackedTriggerPrescales_patTrigger_l1max_*', 
        'keep patPackedTriggerPrescales_patTrigger_l1min_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep *_caTopTagInfosPAT_*_*', 
        'keep int_bunchSpacingProducer_*_*')
)

process.MINIAODSIMEventContent = cms.PSet(
    compressionAlgorithm = cms.untracked.string('LZMA'),
    compressionLevel = cms.untracked.int32(4),
    eventAutoFlushCompressedSize = cms.untracked.int32(15728640),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep *_slimmedPhotons*_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons*_*_*', 
        'keep *_slimmedTaus*_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs*_*_*', 
        'keep *_slimmedSecondaryVertices*_*_*', 
        'keep *_cmsTopTaggerMap_*_*', 
        'keep *_slimmedJetsAK8PFCHSSoftDropPacked_SubJets_*', 
        'keep *_slimmedJetsCMSTopTagCHSPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep double_fixedGridRho*__*', 
        'keep *_selectedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep patPackedTriggerPrescales_patTrigger_l1max_*', 
        'keep patPackedTriggerPrescales_patTrigger_l1min_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep *_caTopTagInfosPAT_*_*', 
        'keep *_slimmedGenJets*_*_*', 
        'keep patPackedGenParticles_packedGenParticles_*_*', 
        'keep recoGenParticles_prunedGenParticles_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep GenLumiInfoProduct_*_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep GenRunInfoProduct_*_*_*', 
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*', 
        'keep int_bunchSpacingProducer_*_*')
)

process.MIXINGMODULEEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_cfWriter_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.MIdIsoExtractorPSetBlock = cms.PSet(
    CaloExtractorPSet = cms.PSet(
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_H = cms.double(0.1),
        DR_Veto_HO = cms.double(0.1),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        DepositLabel = cms.untracked.string('Cal'),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Noise_EB = cms.double(0.025),
        Noise_EE = cms.double(0.1),
        Noise_HB = cms.double(0.2),
        Noise_HE = cms.double(0.2),
        Noise_HO = cms.double(0.2),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold_E = cms.double(0.2),
        Threshold_H = cms.double(0.5),
        Threshold_HO = cms.double(0.5),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            dRHcal = cms.double(1.0),
            dRHcalPreselection = cms.double(1.0),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        ),
        UseRecHitsFlag = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.1),
        ExcludeMuonVeto = cms.bool(True),
        JetCollectionLabel = cms.InputTag("ak4CaloJets"),
        PrintTimeReport = cms.untracked.bool(False),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Threshold = cms.double(5.0),
        TrackAssociatorParameters = cms.PSet(
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            accountForTrajectoryChangeCalo = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            dRHcal = cms.double(0.5),
            dRHcalPreselection = cms.double(0.5),
            dRMuon = cms.double(9999.0),
            dRMuonPreselection = cms.double(0.2),
            dRPreshowerPreselection = cms.double(0.2),
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            propagateAllDirections = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            truthMatch = cms.bool(False),
            useCalo = cms.bool(True),
            useEcal = cms.bool(False),
            useHO = cms.bool(False),
            useHcal = cms.bool(False),
            useMuon = cms.bool(False),
            usePreshower = cms.bool(False)
        )
    ),
    TrackExtractorPSet = cms.PSet(
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        BeamlineOption = cms.string('BeamSpotFromEvent'),
        Chi2Ndof_Max = cms.double(1e+64),
        Chi2Prob_Min = cms.double(-1.0),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        DR_Veto = cms.double(0.01),
        DepositLabel = cms.untracked.string(''),
        Diff_r = cms.double(0.1),
        Diff_z = cms.double(0.2),
        NHits_Min = cms.uint32(0),
        Pt_Min = cms.double(-1.0),
        inputTrackCollection = cms.InputTag("generalTracks")
    ),
    ecalDepositName = cms.string('ecal'),
    hcalDepositName = cms.string('hcal'),
    hoDepositName = cms.string('ho'),
    jetDepositName = cms.string('jets'),
    trackDepositName = cms.string('tracker')
)

process.MIsoCaloExtractorByAssociatorHitsBlock = cms.PSet(
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DR_Veto_HO = cms.double(0.1),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    DepositLabel = cms.untracked.string('Cal'),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Noise_EB = cms.double(0.025),
    Noise_EE = cms.double(0.1),
    Noise_HB = cms.double(0.2),
    Noise_HE = cms.double(0.2),
    Noise_HO = cms.double(0.2),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold_E = cms.double(0.025),
    Threshold_H = cms.double(0.1),
    Threshold_HO = cms.double(0.1),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    ),
    UseRecHitsFlag = cms.bool(True)
)

process.MIsoCaloExtractorByAssociatorTowersBlock = cms.PSet(
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DR_Veto_HO = cms.double(0.1),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    DepositLabel = cms.untracked.string('Cal'),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Noise_EB = cms.double(0.025),
    Noise_EE = cms.double(0.1),
    Noise_HB = cms.double(0.2),
    Noise_HE = cms.double(0.2),
    Noise_HO = cms.double(0.2),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Threshold_HO = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    ),
    UseRecHitsFlag = cms.bool(False)
)

process.MIsoCaloExtractorEcalBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(1.0),
    Weight_H = cms.double(0.0)
)

process.MIsoCaloExtractorHLTBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(1.5),
    Weight_H = cms.double(1.0)
)

process.MIsoCaloExtractorHcalBlock = cms.PSet(
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    ComponentName = cms.string('CaloExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_H = cms.double(0.1),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    Threshold_E = cms.double(0.2),
    Threshold_H = cms.double(0.5),
    Vertex_Constraint_XY = cms.bool(False),
    Vertex_Constraint_Z = cms.bool(False),
    Weight_E = cms.double(0.0),
    Weight_H = cms.double(1.0)
)

process.MIsoDepositGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('TrackCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("globalMuons")
)

process.MIsoDepositGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('TrackCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("globalMuons")
)

process.MIsoDepositParamGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositParamGlobalViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons")
)

process.MIsoDepositViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("muons1stStep")
)

process.MIsoDepositViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    InputType = cms.string('MuonCollection'),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    inputMuonCollection = cms.InputTag("muons1stStep")
)

process.MIsoJetExtractorBlock = cms.PSet(
    ComponentName = cms.string('JetExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.1),
    ExcludeMuonVeto = cms.bool(True),
    JetCollectionLabel = cms.InputTag("ak4CaloJets"),
    PrintTimeReport = cms.untracked.bool(False),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Threshold = cms.double(5.0),
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        dRHcal = cms.double(0.5),
        dRHcalPreselection = cms.double(0.5),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorDefault = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorHits = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorJets = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        dRHcal = cms.double(0.5),
        dRHcalPreselection = cms.double(0.5),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackAssociatorTowers = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        dRHcal = cms.double(1.0),
        dRHcalPreselection = cms.double(1.0),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(True),
        useEcal = cms.bool(False),
        useHO = cms.bool(False),
        useHcal = cms.bool(False),
        useMuon = cms.bool(False),
        usePreshower = cms.bool(False)
    )
)

process.MIsoTrackExtractorBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.MIsoTrackExtractorCtfBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("generalTracks")
)

process.MIsoTrackExtractorGsBlock = cms.PSet(
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    BeamlineOption = cms.string('BeamSpotFromEvent'),
    Chi2Ndof_Max = cms.double(1e+64),
    Chi2Prob_Min = cms.double(-1.0),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    DR_Veto = cms.double(0.01),
    DepositLabel = cms.untracked.string(''),
    Diff_r = cms.double(0.1),
    Diff_z = cms.double(0.2),
    NHits_Min = cms.uint32(0),
    Pt_Min = cms.double(-1.0),
    inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks")
)

process.MaxConsecLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxConsecLostHitsTrajectoryFilter'),
    maxConsecLostHits = cms.int32(1)
)

process.MaxHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxHitsTrajectoryFilter'),
    maxNumberOfHits = cms.int32(100)
)

process.MaxLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxLostHitsTrajectoryFilter'),
    maxLostHits = cms.int32(2)
)

process.MicroEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_slimmedPhotons*_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons*_*_*', 
        'keep *_slimmedTaus*_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs*_*_*', 
        'keep *_slimmedSecondaryVertices*_*_*', 
        'keep *_cmsTopTaggerMap_*_*', 
        'keep *_slimmedJetsAK8PFCHSSoftDropPacked_SubJets_*', 
        'keep *_slimmedJetsCMSTopTagCHSPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep double_fixedGridRho*__*', 
        'keep *_selectedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep patPackedTriggerPrescales_patTrigger_l1max_*', 
        'keep patPackedTriggerPrescales_patTrigger_l1min_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep *_caTopTagInfosPAT_*_*')
)

process.MicroEventContentMC = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_slimmedPhotons*_*_*', 
        'keep *_slimmedElectrons_*_*', 
        'keep *_slimmedMuons*_*_*', 
        'keep *_slimmedTaus*_*_*', 
        'keep *_slimmedJets_*_*', 
        'keep *_slimmedJetsAK8_*_*', 
        'keep *_slimmedJetsPuppi_*_*', 
        'keep *_slimmedMETs*_*_*', 
        'keep *_slimmedSecondaryVertices*_*_*', 
        'keep *_cmsTopTaggerMap_*_*', 
        'keep *_slimmedJetsAK8PFCHSSoftDropPacked_SubJets_*', 
        'keep *_slimmedJetsCMSTopTagCHSPacked_SubJets_*', 
        'keep recoPhotonCores_reducedEgamma_*_*', 
        'keep recoGsfElectronCores_reducedEgamma_*_*', 
        'keep recoConversions_reducedEgamma_*_*', 
        'keep recoSuperClusters_reducedEgamma_*_*', 
        'keep recoCaloClusters_reducedEgamma_*_*', 
        'keep EcalRecHitsSorted_reducedEgamma_*_*', 
        'drop *_*_caloTowers_*', 
        'drop *_*_pfCandidates_*', 
        'drop *_*_genJets_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep *_offlineSlimmedPrimaryVertices_*_*', 
        'keep patPackedCandidates_packedPFCandidates_*_*', 
        'keep double_fixedGridRho*__*', 
        'keep *_selectedPatTrigger_*_*', 
        'keep patPackedTriggerPrescales_patTrigger__*', 
        'keep patPackedTriggerPrescales_patTrigger_l1max_*', 
        'keep patPackedTriggerPrescales_patTrigger_l1min_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_TriggerResults_*_*', 
        'keep patPackedCandidates_lostTracks_*_*', 
        'keep HcalNoiseSummary_hcalnoise__*', 
        'keep *_caTopTagInfosPAT_*_*', 
        'keep *_slimmedGenJets*_*_*', 
        'keep patPackedGenParticles_packedGenParticles_*_*', 
        'keep recoGenParticles_prunedGenParticles_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep PileupSummaryInfos_slimmedAddPileupInfo_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep GenLumiInfoProduct_*_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep GenRunInfoProduct_*_*_*', 
        'keep L1GtTriggerMenuLite_l1GtTriggerMenuLite__*')
)

process.MillePedeAlignmentAlgorithm = cms.PSet(
    TrajectoryFactory = cms.PSet(
        MaterialEffects = cms.string('BrokenLinesCoarse'),
        MomentumEstimateFieldOff = cms.double(10.0),
        ParticleMass = cms.double(0.10565836),
        PropagationDirection = cms.string('alongMomentum'),
        TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
        UseBeamSpot = cms.bool(False),
        UseBzeroIfFieldOff = cms.bool(True),
        UseHitWithoutDet = cms.bool(True),
        UseInvalidHits = cms.bool(True),
        UseProjectedHits = cms.bool(True)
    ),
    algoName = cms.string('MillePedeAlignmentAlgorithm'),
    binaryFile = cms.string('milleBinary_0.dat'),
    doubleBinary = cms.bool(False),
    fileDir = cms.untracked.string(''),
    max2Dcorrelation = cms.double(0.05),
    mergeBinaryFiles = cms.vstring(),
    mergeTreeFiles = cms.vstring(),
    minNumHits = cms.uint32(7),
    mode = cms.untracked.string('mille'),
    monitorFile = cms.untracked.string('millePedeMonitor.root'),
    pedeLabeler = cms.PSet(

    ),
    pedeReader = cms.PSet(
        fileDir = cms.untracked.string(''),
        readFile = cms.string('millepede.res')
    ),
    pedeReaderInputs = cms.VPSet(),
    pedeSteerer = cms.PSet(
        Presigmas = cms.VPSet(),
        additionalSteerFiles = cms.vstring(),
        constrPrecision = cms.uint32(0),
        constraints = cms.VPSet(),
        fileDir = cms.untracked.string(''),
        method = cms.string('sparseMINRES 6  0.8'),
        minHieraConstrCoeff = cms.double(1e-07),
        minHieraParPerConstr = cms.uint32(2),
        options = cms.vstring('entries 50', 
            'outlierdownweighting 5', 
            'dwfractioncut 0.2'),
        parameterSign = cms.untracked.int32(1),
        pedeCommand = cms.untracked.string('pede_1GB'),
        pedeDump = cms.untracked.string('pede.dump'),
        steerFile = cms.string('pedeSteer'),
        steerFileDebug = cms.untracked.bool(False)
    ),
    surveyPixelBarrel = cms.PSet(
        doOutputOnStdout = cms.bool(False),
        doSurvey = cms.bool(False),
        doToySurvey = cms.bool(False),
        infile = cms.FileInPath('Alignment/SurveyAnalysis/data/BPix_Survey_info_raw.txt'),
        toySurveyFile = cms.untracked.string('toySurveyInfo.txt'),
        toySurveyParameters = cms.VPSet(cms.PSet(
            mean = cms.double(1800.0),
            name = cms.string('a0'),
            sigma = cms.double(150.0)
        ), 
            cms.PSet(
                mean = cms.double(2600.0),
                name = cms.string('a1'),
                sigma = cms.double(200.0)
            ), 
            cms.PSet(
                mean = cms.double(1150.0),
                name = cms.string('scale'),
                sigma = cms.double(50.0)
            ), 
            cms.PSet(
                mean = cms.double(0.0),
                name = cms.string('phi'),
                sigma = cms.double(0.0025)
            ), 
            cms.PSet(
                mean = cms.double(0.0),
                name = cms.string('u'),
                sigma = cms.double(0.175)
            ), 
            cms.PSet(
                mean = cms.double(0.0),
                name = cms.string('v'),
                sigma = cms.double(0.175)
            )),
        toySurveySeed = cms.uint32(12)
    ),
    treeFile = cms.string('treeFile.root')
)

process.MinHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinHitsTrajectoryFilter'),
    minimumNumberOfHits = cms.int32(5)
)

process.MinPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinPtTrajectoryFilter'),
    minHitsMinPt = cms.int32(3),
    minPt = cms.double(1.0),
    nSigmaMinPt = cms.double(5.0)
)

process.MultipleAlgoIteratorBlock = cms.PSet(
    subtractorName = cms.string('MultipleAlgoIterator'),
    sumRecHits = cms.bool(False)
)

process.MuonCaloCompatibilityBlock = cms.PSet(
    MuonCaloCompatibility = cms.PSet(
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        allSiPMHO = cms.bool(False),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    )
)

process.MuonCosmicCompatibilityParameters = cms.PSet(
    CosmicCompFillerParameters = cms.PSet(
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons1stStep")),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        angleCut = cms.double(0.1),
        corrTimeNeg = cms.double(-10),
        corrTimePos = cms.double(5),
        deltaPt = cms.double(0.1),
        hIpTrdxy = cms.double(0.02),
        hIpTrvProb = cms.double(0.5),
        ipCut = cms.double(0.02),
        largedxy = cms.double(2.0),
        largedxyMult = cms.double(3.0),
        maxdxyLoose = cms.double(0.01),
        maxdxyLooseMult = cms.double(0.01),
        maxdxyTight = cms.double(1.0),
        maxdxyTightMult = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        maxdzLooseMult = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        maxdzTightMult = cms.double(10.0),
        maxvertRho = cms.double(5),
        maxvertZ = cms.double(20),
        minvProb = cms.double(0.001),
        nChamberMatches = cms.int32(1),
        nTrackThreshold = cms.int32(3),
        offTimeNegLoose = cms.double(-15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        offTimeNegTight = cms.double(-20.0),
        offTimeNegTightMult = cms.double(-20.0),
        offTimePosLoose = cms.double(15.0),
        offTimePosLooseMult = cms.double(15.0),
        offTimePosTight = cms.double(25.0),
        offTimePosTightMult = cms.double(25.0),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        sharedHits = cms.int32(5)
    )
)

process.MuonSegmentMatcher = cms.PSet(
    MatchParameters = cms.PSet(
        CSCsegments = cms.InputTag("cscSegments"),
        DTradius = cms.double(0.01),
        DTsegments = cms.InputTag("dt4DSegments"),
        TightMatchCSC = cms.bool(True),
        TightMatchDT = cms.bool(False)
    )
)

process.MuonServiceProxy = cms.PSet(
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    )
)

process.MuonShowerParameters = cms.PSet(
    MuonShowerInformationFillerParameters = cms.PSet(
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        TrackerRecHitBuilder = cms.string('WithTrackAngle')
    )
)

process.MuonTrackLoaderForCosmic = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        AllowNoVertex = cms.untracked.bool(True),
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny')
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackLoaderForGLB = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackLoaderForL2 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("hltOfflineBeamSpot")
    )
)

process.MuonTrackLoaderForL3 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(True),
        MuonSeededTracksInstance = cms.untracked.string('L2Seeded'),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        PutTkTrackIntoEvent = cms.untracked.bool(True),
        SmoothTkTrack = cms.untracked.bool(False),
        Smoother = cms.string('KFSmootherForMuonTrackLoaderL3'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(False),
        beamSpot = cms.InputTag("hltOfflineBeamSpot")
    )
)

process.MuonTrackLoaderForSTA = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        DoSmoothing = cms.bool(False),
        MuonUpdatorAtVertexParameters = cms.PSet(
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite')
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        TTRHBuilder = cms.string('WithAngleAndTemplate'),
        VertexConstraint = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonTrackingRegionCommon = cms.PSet(
    MuonTrackingRegionBuilder = cms.PSet(
        DeltaEta = cms.double(0.2),
        DeltaPhi = cms.double(0.2),
        DeltaR = cms.double(0.2),
        DeltaZ = cms.double(15.9),
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        Eta_fixed = cms.bool(False),
        Eta_min = cms.double(0.1),
        MeasurementTrackerName = cms.InputTag(""),
        OnDemand = cms.int32(-1),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        Phi_fixed = cms.bool(False),
        Phi_min = cms.double(0.1),
        Pt_fixed = cms.bool(False),
        Pt_min = cms.double(1.5),
        Rescale_Dz = cms.double(3.0),
        Rescale_eta = cms.double(3.0),
        Rescale_phi = cms.double(3.0),
        UseVertex = cms.bool(False),
        Z_fixed = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        input = cms.InputTag(""),
        maxRegions = cms.int32(1),
        precise = cms.bool(True),
        vertexCollection = cms.InputTag("")
    )
)

process.MuonUpdatorAtVertex = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorOpposite')
    )
)

process.MuonUpdatorAtVertexAnyDirection = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3),
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorAny')
    )
)

process.OutALCARECODtCalib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*')
)

process.OutALCARECODtCalibCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*')
)

process.OutALCARECODtCalibCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*')
)

process.OutALCARECODtCalibHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECODtCalibHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalibHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECODtCalib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECODtCalib')
    ),
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DSegmentsNoWire_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_dttfDigis_*_*', 
        'keep *_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep recoMuons_muons_*_*', 
        'keep booledmValueMap_muid*_*_*')
)

process.OutALCARECOEcalCalElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'drop reco*Clusters_hfEMClusters_*_*', 
        'drop reco*Clusters_pfPhotonTranslator_*_*', 
        'drop *EcalRecHit*_ecalRecHit_*_*', 
        'drop *EcalrecHit*_*ecalPreshowerRecHit*_*EcalRecHitsES*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsE*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*EBEEClusters*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*ESClusters*_*', 
        'keep *CaloCluster*_*alCaIsolatedElectrons*_*alcaCaloCluster*_*')
)

process.OutALCARECOEcalCalElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*')
)

process.OutALCARECOEcalCalEtaCalib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalEtaCalib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEB_*', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_etaEcalRecHitsES_*')
)

process.OutALCARECOEcalCalEtaCalib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalEtaCalib')
    ),
    outputCommands = cms.untracked.vstring('keep *_ecalEtaCorrected_etaEcalRecHitsEB_*', 
        'keep *_ecalEtaCorrected_etaEcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_etaEcalRecHitsES_*')
)

process.OutALCARECOEcalCalPi0Calib = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalPi0Calib')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEB_*', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_pi0EcalRecHitsES_*')
)

process.OutALCARECOEcalCalPi0Calib_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalPi0Calib')
    ),
    outputCommands = cms.untracked.vstring('keep *_ecalPi0Corrected_pi0EcalRecHitsEB_*', 
        'keep *_ecalPi0Corrected_pi0EcalRecHitsEE_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_pi0EcalRecHitsES_*')
)

process.OutALCARECOEcalCalWElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'drop reco*Clusters_hfEMClusters_*_*', 
        'drop reco*Clusters_pfPhotonTranslator_*_*', 
        'drop *EcalRecHit*_ecalRecHit_*_*', 
        'drop *EcalrecHit*_*ecalPreshowerRecHit*_*EcalRecHitsES*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsE*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*EBEEClusters*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*ESClusters*_*', 
        'keep *CaloCluster*_*alCaIsolatedElectrons*_*alcaCaloCluster*_*')
)

process.OutALCARECOEcalCalWElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalWElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*')
)

process.OutALCARECOEcalCalZElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'drop reco*Clusters_hfEMClusters_*_*', 
        'drop reco*Clusters_pfPhotonTranslator_*_*', 
        'drop *EcalRecHit*_ecalRecHit_*_*', 
        'drop *EcalrecHit*_*ecalPreshowerRecHit*_*EcalRecHitsES*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsE*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*EBEEClusters*_*', 
        'drop *CaloCluster*_*particleFlowEGamma*_*ESClusters*_*', 
        'keep *CaloCluster*_*alCaIsolatedElectrons*_*alcaCaloCluster*_*')
)

process.OutALCARECOEcalCalZElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*')
)

process.OutALCARECOEcalRecalElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalRecalZElectron', 
            'pathALCARECOEcalRecalZSCElectron', 
            'pathALCARECOEcalRecalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_electronRecalibSCAssociator_*_*', 
        'drop *_gedGsfElectron*_*_*', 
        'drop *_*Unclean*_*_*', 
        'drop *_*unclean*_*_*', 
        'drop *_*_*Unclean*_*', 
        'drop *_*_*unclean*_*')
)

process.OutALCARECOEcalRecalElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_electronRecalibSCAssociator_*_*')
)

process.OutALCARECOEcalUncalElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalZElectron', 
            'pathALCARECOEcalUncalZSCElectron', 
            'pathALCARECOEcalUncalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*', 
        'drop recoCaloClusters_*_*_*', 
        'drop recoSuperClusters_*_*_*', 
        'drop recoPreshowerCluster*_*_*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsES*_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalCalZElectron', 
            'pathALCARECOEcalCalWElectron', 
            'pathALCARECOEcalCalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalWElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalWElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*', 
        'drop recoCaloClusters_*_*_*', 
        'drop recoSuperClusters_*_*_*', 
        'drop recoPreshowerCluster*_*_*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsES*_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalWElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalWElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalZElectron = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalZElectron', 
            'pathALCARECOEcalUncalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*', 
        'drop recoCaloClusters_*_*_*', 
        'drop recoSuperClusters_*_*_*', 
        'drop recoPreshowerCluster*_*_*_*', 
        'drop *EcalRecHit*_reducedEcalRecHitsES*_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOEcalUncalZElectron_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOEcalUncalZElectron', 
            'pathALCARECOEcalUncalZSCElectron')
    ),
    outputCommands = cms.untracked.vstring('keep *_pfMet_*_*', 
        'keep *_kt6PFJetsForRhoCorrection_rho_*', 
        'keep *_kt6PFJets_rho_*', 
        'keep recoVertexs_offlinePrimaryVertices*_*_*', 
        'keep *BeamSpot_offlineBeamSpot_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_conversions_*_*', 
        'keep *GsfTrack*_*_*_*', 
        'keep *_generator_*_*', 
        'keep *_addPileupInfo_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGsfElectron*_gsfElectron*_*_*', 
        'keep recoGsfElectron*_gedGsfElectron*_*_*', 
        'keep recoPhoton*_gedPhoton_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoPreshowerCluster*_*_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_alcaElectronTracksReducer_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep edmConditionsInEventBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInLumiBlock_conditionsInEdm_*_*', 
        'keep edmConditionsInRunBlock_conditionsInEdm_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep *_hltTriggerSummaryAOD_*_HLT', 
        'keep *EcalRecHit*_alCaIsolatedElectrons_*_*', 
        'keep *EcalRecHit*_reducedEcalRecHitsES_alCaRecHitsES_*', 
        'keep *_ecalDigis_*_*', 
        'keep *EcalTriggerPrimitiveDigi*_ecalDigis_*_*', 
        'keep *_ecalPreshowerDigis_*_*', 
        'keep *_ecalDetIdToBeRecovered_*_*', 
        'keep reco*Clusters_pfElectronTranslator_*_*')
)

process.OutALCARECOHcalCalDijets = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalDijets')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_DiJetsProd_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_*_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep recoTracks_generalTracks_*_*')
)

process.OutALCARECOHcalCalDijets_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalDijets')
    ),
    outputCommands = cms.untracked.vstring('keep *_DiJetsProd_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_*_*_*', 
        'keep *_fixedGridRhoFastjetAll_*_*', 
        'keep recoTracks_generalTracks_*_*')
)

process.OutALCARECOHcalCalGammaJet = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalGammaJet')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep recoPhotonCores_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_*_*_*', 
        'keep *_GammaJetProd_*_*')
)

process.OutALCARECOHcalCalGammaJet_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalGammaJet')
    ),
    outputCommands = cms.untracked.vstring('keep recoPhotonCores_*_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep *_particleFlow_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFClusters_*_*_*', 
        'keep *_GammaJetProd_*_*')
)

process.OutALCARECOHcalCalHO = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHO')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_hoCalibProducer_*_*')
)

process.OutALCARECOHcalCalHOCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHOCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep HOCalibVariabless_*_*_*')
)

process.OutALCARECOHcalCalHOCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHOCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep HOCalibVariabless_*_*_*')
)

process.OutALCARECOHcalCalHO_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalHO')
    ),
    outputCommands = cms.untracked.vstring('keep *_hoCalibProducer_*_*')
)

process.OutALCARECOHcalCalIsoTrk = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrk')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*')
)

process.OutALCARECOHcalCalIsoTrkNoHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrkNoHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.OutALCARECOHcalCalIsoTrkNoHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrkNoHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*')
)

process.OutALCARECOHcalCalIsoTrk_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIsoTrk')
    ),
    outputCommands = cms.untracked.vstring('keep *_IsoProd_*_*', 
        'keep *_TkAlIsoProd_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*')
)

process.OutALCARECOHcalCalIterativePhiSym = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIterativePhiSym')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_horeco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalIterativePhiSym_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalIterativePhiSym')
    ),
    outputCommands = cms.untracked.vstring('keep *_horeco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalMinBiasHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbhereco_*_*', 
        'keep HORecHitsSorted_horeco_*_*', 
        'keep HFRecHitsSorted_hfreco_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalMinBiasHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbhereco_*_*', 
        'keep HORecHitsSorted_horeco_*_*', 
        'keep HFRecHitsSorted_hfreco_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_gtDigisAlCaMB_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMBspecial_*_*', 
        'keep HBHERecHitsSorted_hbherecoNoise_*_*', 
        'keep HORecHitsSorted_horecoNoise_*_*', 
        'keep HFRecHitsSorted_hfrecoNoise_*_*')
)

process.OutALCARECOHcalCalNoise = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalNoise')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_HcalNoiseProd_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalNoise_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalNoise')
    ),
    outputCommands = cms.untracked.vstring('keep *_HcalNoiseProd_*_*', 
        'keep edmTriggerResults_*_*_HLT')
)

process.OutALCARECOHcalCalPedestal = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalPedestal')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_gtDigisAlCaPedestal_*_*', 
        'keep HBHERecHitsSorted_hbherecoPedestal_*_*', 
        'keep HORecHitsSorted_horecoPedestal_*_*', 
        'keep HFRecHitsSorted_hfrecoPedestal_*_*')
)

process.OutALCARECOHcalCalPedestal_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOHcalCalPedestal')
    ),
    outputCommands = cms.untracked.vstring('keep *_gtDigisAlCaPedestal_*_*', 
        'keep HBHERecHitsSorted_hbherecoPedestal_*_*', 
        'keep HORecHitsSorted_horecoPedestal_*_*', 
        'keep HFRecHitsSorted_hfrecoPedestal_*_*')
)

process.OutALCARECOHotline = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathHotlineSkimSingleMuon', 
            'pathHotlineSkimDoubleMuon', 
            'pathHotlineSkimTripleMuon', 
            'pathHotlineSkimSingleElectron', 
            'pathHotlineSkimDoubleElectron', 
            'pathHotlineSkimTripleElectron', 
            'pathHotlineSkimSinglePhoton', 
            'pathHotlineSkimDoublePhoton', 
            'pathHotlineSkimTriplePhoton', 
            'pathHotlineSkimSingleJet', 
            'pathHotlineSkimDoubleJet', 
            'pathHotlineSkimMultiJet', 
            'pathHotlineSkimHT', 
            'pathHotlineSkimMassiveDimuon', 
            'pathHotlineSkimMassiveDielectron', 
            'pathHotlineSkimMassiveEMu', 
            'pathHotlineSkimPFMET', 
            'pathHotlineSkimCaloMET', 
            'pathHotlineSkimCondMET')
    ),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*' ) )
)

process.OutALCARECOHotline_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathHotlineSkimSingleMuon', 
            'pathHotlineSkimDoubleMuon', 
            'pathHotlineSkimTripleMuon', 
            'pathHotlineSkimSingleElectron', 
            'pathHotlineSkimDoubleElectron', 
            'pathHotlineSkimTripleElectron', 
            'pathHotlineSkimSinglePhoton', 
            'pathHotlineSkimDoublePhoton', 
            'pathHotlineSkimTriplePhoton', 
            'pathHotlineSkimSingleJet', 
            'pathHotlineSkimDoubleJet', 
            'pathHotlineSkimMultiJet', 
            'pathHotlineSkimHT', 
            'pathHotlineSkimMassiveDimuon', 
            'pathHotlineSkimMassiveDielectron', 
            'pathHotlineSkimMassiveEMu', 
            'pathHotlineSkimPFMET', 
            'pathHotlineSkimCaloMET', 
            'pathHotlineSkimCondMET')
    ),
    outputCommands = cms.untracked.vstring( ('keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*' ) )
)

process.OutALCARECOLumiPixels = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixels')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_siPixelClustersForLumi_*_*', 
        'keep *_TriggerResults_*_HLT')
)

process.OutALCARECOLumiPixelsMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixelsMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_siPixelClusters_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOLumiPixelsMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixelsMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_siPixelClusters_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_HLT', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOLumiPixels_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOLumiPixels')
    ),
    outputCommands = cms.untracked.vstring('keep *_siPixelClustersForLumi_*_*', 
        'keep *_TriggerResults_*_HLT')
)

process.OutALCARECOMuAlBeamHalo = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlBeamHalo_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlBeamHaloOverlaps = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHaloOverlaps')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlBeamHaloOverlaps_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlBeamHaloOverlaps_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHaloOverlaps')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlBeamHaloOverlaps_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlBeamHalo_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlBeamHalo_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlCalIsolatedMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlCalIsolatedMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlCalIsolatedMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlCalIsolatedMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlCalIsolatedMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlCalIsolatedMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlGlobalCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlGlobalCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlGlobalCosmicsInCollisions = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlGlobalCosmicsInCollisions_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlGlobalCosmicsInCollisions_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlGlobalCosmicsInCollisions_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlGlobalCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlGlobalCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlGlobalCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlOverlaps = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlOverlaps')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlOverlaps_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlOverlaps_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlOverlaps')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlOverlaps_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlStandAloneCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlStandAloneCosmics')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlStandAloneCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlStandAloneCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlStandAloneCosmics')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlStandAloneCosmics_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlZMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOMuAlZMuMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOMuAlZMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOMuAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOMuAlZMuMu_*_*', 
        'keep *_muonCSCDigis_*_*', 
        'keep *_muonDTDigis_*_*', 
        'keep *_muonRPCDigis_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt2DSegments_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOPromptCalibProd = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProd')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOPromptCalibProdSiPixelAli = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiPixelAli')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_SiPixelAliMillePedeFileConverter_*_*')
)

process.OutALCARECOPromptCalibProdSiPixelAli_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiPixelAli')
    ),
    outputCommands = cms.untracked.vstring('keep *_SiPixelAliMillePedeFileConverter_*_*')
)

process.OutALCARECOPromptCalibProdSiStrip = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStrip')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOPromptCalibProdSiStripGains = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStripGains')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStripGains_*_*')
)

process.OutALCARECOPromptCalibProdSiStripGains_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStripGains')
    ),
    outputCommands = cms.untracked.vstring('keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStripGains_*_*')
)

process.OutALCARECOPromptCalibProdSiStrip_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProdSiStrip')
    ),
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOPromptCalibProd_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOPromptCalibProd')
    ),
    outputCommands = cms.untracked.vstring('keep *_alcaBeamSpotProducer_*_*', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECORpcCalHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECORpcCalHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_muonDTDigis_*_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_*_*_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_*_*_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_*_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_*_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep L1MuRegionalCands_*_RPCb_*', 
        'keep L1MuRegionalCands_*_RPCf_*', 
        'keep L1MuGMTCands_*_*_*', 
        'keep L1MuGMTReadoutCollection_*_*_*')
)

process.OutALCARECORpcCalHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECORpcCalHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_muonDTDigis_*_*', 
        'keep CSCDetIdCSCWireDigiMuonDigiCollection_*_*_*', 
        'keep CSCDetIdCSCStripDigiMuonDigiCollection_*_*_*', 
        'keep DTLayerIdDTDigiMuonDigiCollection_*_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_*_*_*', 
        'keep recoMuons_muonsNoRPC_*_*', 
        'keep L1MuRegionalCands_*_RPCb_*', 
        'keep L1MuRegionalCands_*_RPCf_*', 
        'keep L1MuGMTCands_*_*_*', 
        'keep L1MuGMTReadoutCollection_*_*_*')
)

process.OutALCARECOSiPixelLorentzAngle = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiPixelLorentzAngle')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_globalMuons_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'drop *_*_*_HLT')
)

process.OutALCARECOSiPixelLorentzAngle_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiPixelLorentzAngle')
    ),
    outputCommands = cms.untracked.vstring('keep *_globalMuons_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'drop *_*_*_HLT')
)

process.OutALCARECOSiStripCalMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOSiStripCalMinBias_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalZeroBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalZeroBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOSiStripCalZeroBias_*_*', 
        'keep *_calZeroBiasClusters_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripCalZeroBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripCalZeroBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOSiStripCalZeroBias_*_*', 
        'keep *_calZeroBiasClusters_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep *_TriggerResults_*_*')
)

process.OutALCARECOSiStripPCLHistos = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripPCLHistos')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOSiStripPCLHistos_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOSiStripPCLHistos')
    ),
    outputCommands = cms.untracked.vstring('keep *_MEtoEDMConvertSiStrip_*_*')
)

process.OutALCARECOTkAlBeamHalo = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlBeamHalo_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlBeamHalo_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlBeamHalo')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlBeamHalo_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlCosmics = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF', 
            'pathALCARECOTkAlCosmicsCosmicTF', 
            'pathALCARECOTkAlCosmicsRegional')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0T = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0T', 
            'pathALCARECOTkAlCosmicsCosmicTF0T', 
            'pathALCARECOTkAlCosmicsRegional0T')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0THLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0THLT', 
            'pathALCARECOTkAlCosmicsCosmicTF0THLT', 
            'pathALCARECOTkAlCosmicsRegional0THLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0THLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0THLT', 
            'pathALCARECOTkAlCosmicsCosmicTF0THLT', 
            'pathALCARECOTkAlCosmicsRegional0THLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics0T_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF0T', 
            'pathALCARECOTkAlCosmicsCosmicTF0T', 
            'pathALCARECOTkAlCosmicsRegional0T')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmics*0T_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsHLT = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTFHLT', 
            'pathALCARECOTkAlCosmicsCosmicTFHLT', 
            'pathALCARECOTkAlCosmicsRegionalHLT')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsHLT_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTFHLT', 
            'pathALCARECOTkAlCosmicsCosmicTFHLT', 
            'pathALCARECOTkAlCosmicsRegionalHLT')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsInCollisions = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlCosmicsInCollisions_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmicsInCollisions_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsInCollisions')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsInCollisions_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlCosmics_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlCosmicsCTF', 
            'pathALCARECOTkAlCosmicsCosmicTF', 
            'pathALCARECOTkAlCosmicsRegional')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlCosmicsCTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsCosmicTF_*_*', 
        'keep *_ALCARECOTkAlCosmicsRegional_*_*', 
        'keep siStripDigis_DetIdCollection_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep Si*Cluster*_si*Clusters_*_*', 
        'keep recoMuons_muons1Leg_*_*')
)

process.OutALCARECOTkAlJpsiMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlJpsiMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlJpsiMuMuHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlJpsiMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlJpsiMuMuHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlJpsiMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlJpsiMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlJpsiMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlJpsiMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlLAS = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlLAS')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlLAST0Producer_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlLAS_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlLAS')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlLAST0Producer_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*')
)

process.OutALCARECOTkAlMinBias = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBias')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMinBias_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMinBiasHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBiasHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMinBiasHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMinBiasHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBiasHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMinBiasHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMinBias_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMinBias')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMinBias_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*', 
        'keep *_offlineBeamSpot_*_*')
)

process.OutALCARECOTkAlMuonIsolated = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolated')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMuonIsolated_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlMuonIsolatedHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolatedHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMuonIsolatedHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlMuonIsolatedHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolatedHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMuonIsolatedHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlMuonIsolatedPA = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolatedPA')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlMuonIsolatedPA_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlMuonIsolatedPA_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolatedPA')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMuonIsolatedPA_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlMuonIsolated_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlMuonIsolated')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlMuonIsolated_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlUpsilonMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlUpsilonMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlUpsilonMuMuHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlUpsilonMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlUpsilonMuMuHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlUpsilonMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlUpsilonMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlUpsilonMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlUpsilonMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlZMuMu = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlZMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.OutALCARECOTkAlZMuMuHI = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep *_ALCARECOTkAlZMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlZMuMuHI_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMuHI')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlZMuMuHI_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_hiSelectedVertex_*_*')
)

process.OutALCARECOTkAlZMuMu_noDrop = cms.PSet(
    SelectEvents = cms.untracked.PSet(
        SelectEvents = cms.vstring('pathALCARECOTkAlZMuMu')
    ),
    outputCommands = cms.untracked.vstring('keep *_ALCARECOTkAlZMuMu_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_TriggerResults_*_*', 
        'keep DcsStatuss_scalersRawToDigi_*_*', 
        'keep *_offlinePrimaryVertices_*_*')
)

process.PREMIXEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep recoGenMETs_*_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep RPCDetIdRPCDigiMuonDigiCollection_simMuonRPCDigis_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_*_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_*_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.PREMIXRAWEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'drop CrossingFramePlaybackInfoNew_mix_*_*', 
        'keep *_*_MergedTrackTruth_*', 
        'keep *_*_StripDigiSimLink_*', 
        'keep *_*_PixelDigiSimLink_*', 
        'keep *_*_MuonCSCStripDigiSimLinks_*', 
        'keep *_*_MuonCSCWireDigiSimLinks_*', 
        'keep *_*_RPCDigiSimLink_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_*_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.ParametrizedSubtractorBlock = cms.PSet(
    interpolate = cms.bool(False),
    subtractorName = cms.string('ParametrizedSubtractorBlock'),
    sumRecHits = cms.bool(False)
)

process.PixelFitterByConformalMappingAndLine = cms.PSet(
    ComponentName = cms.string('PixelFitterByConformalMappingAndLine'),
    TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle')
)

process.PixelTripletHLTGenerator = cms.PSet(
    ComponentName = cms.string('PixelTripletHLTGenerator'),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    extraHitRPhitolerance = cms.double(0.032),
    extraHitRZtolerance = cms.double(0.037),
    maxElement = cms.uint32(100000),
    phiPreFiltering = cms.double(0.3),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)

process.PixelTripletHLTGeneratorWithFilter = cms.PSet(
    ComponentName = cms.string('PixelTripletHLTGenerator'),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor'),
        clusterShapeCacheSrc = cms.InputTag("siPixelClusterShapeCache")
    ),
    extraHitRPhitolerance = cms.double(0.032),
    extraHitRZtolerance = cms.double(0.037),
    maxElement = cms.uint32(100000),
    phiPreFiltering = cms.double(0.3),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)

process.PixelTripletLargeTipGenerator = cms.PSet(
    ComponentName = cms.string('PixelTripletLargeTipGenerator'),
    extraHitRPhitolerance = cms.double(0.0),
    extraHitRZtolerance = cms.double(0.0),
    maxElement = cms.uint32(100000),
    phiPreFiltering = cms.double(0.3),
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    useMultScattering = cms.bool(True)
)

process.RAWDEBUGEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_heavyIon_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.RAWDEBUGHLTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'keep *_heavyIon_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECODEBUGHLTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECOEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWRECOSIMHLTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RAWSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_heavyIon_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.RAWSIMHLTEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltAK4CaloJetsCorrectedIDPassed_*_*', 
        'keep *_hltAK4CaloJetsIDPassed_*_*', 
        'keep *_hltAK4CaloJets_*_*', 
        'keep *_hltAK4PFJetsCorrected_*_*', 
        'keep *_hltAK4PFJetsForTaus_*_*', 
        'keep *_hltAK4PFJets_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEBRechitsToDigis_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaEtaEERechitsToDigis_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegionalLowPU_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonlyRegional_etaEcalRecHitsES_*', 
        'keep *_hltAlCaEtaRecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaEtaRecHitsFilter_*_*', 
        'keep *_hltAlCaPhiSymStream_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EBRechitsToDigis_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigisLowPU_*_*', 
        'keep *_hltAlCaPi0EERechitsToDigis_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEBonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegionalLowPU_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonlyRegional_pi0EcalRecHitsES_*', 
        'keep *_hltAlCaPi0RecHitsFilterEEonly_*_*', 
        'keep *_hltAlCaPi0RecHitsFilter_*_*', 
        'keep *_hltBLifetimeL25AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL25TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3AssociatorbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3BJetTagsbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeL3TagInfosbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBLifetimeRegionalCtfWithMaterialTracksbbPhiL1FastJetFastPV_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet110Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet20Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet40Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5L3FilterByDR_*_*', 
        'keep *_hltBSoftMuonDiJet70Mu5SelL3BJetTagsByDR_*_*', 
        'keep *_hltBSoftMuonMu5L3_*_*', 
        'keep *_hltCSVJetTagSingleTopEle27_*_*', 
        'keep *_hltCSVJetTagSingleTopIsoMu24_*_*', 
        'keep *_hltCaloJetCorrectedRegional_*_*', 
        'keep *_hltCaloJetCorrected_*_*', 
        'keep *_hltCaloJetL1FastJetCorrected_*_*', 
        'keep *_hltCleanedCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCleanedHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsCalo_*_*', 
        'keep *_hltCombinedSecondaryVertexBJetTagsPF_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFindingIsolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackFinding_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5Isolation_*_*', 
        'keep *_hltConvPFTausTightIsoTrackPt5_*_*', 
        'keep *_hltConvPFTausTightIso_*_*', 
        'keep *_hltConvPFTausTrackFindingLooseIsolation_*_*', 
        'keep *_hltConvPFTausTrackFinding_*_*', 
        'keep *_hltConvPFTaus_*_*', 
        'keep *_hltCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltCsc2DRecHits_*_*', 
        'keep *_hltCscSegments_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4L1HLTMatched_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltDoublePFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltDoublePFTau25TrackPt5_*_*', 
        'keep *_hltDoublePFTau25_*_*', 
        'keep *_hltDoublePFTauTightIso45Track5_*_*', 
        'keep *_hltDoublePFTauTightIso45Track_*_*', 
        'keep *_hltDt4DSegments_*_*', 
        'keep *_hltEcalPhiSymFilter_*_*', 
        'keep *_hltEcalRecHitAll_*_*', 
        'keep *_hltEle20CaloIdVTCaloIsoTTrkIdTTrkIsoTTrackIsoFilterL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltEle20CaloIdVTTrkIdTDphiFilter_*_*', 
        'keep *_hltEle27WP85PixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltFEDSelectorLumiPixels_*_*', 
        'keep *_hltFastPVPixelTracksMerger_*_*', 
        'keep *_hltFastPVPixelTracksRecover_*_*', 
        'keep *_hltFastPVPixelTracks_*_*', 
        'keep *_hltFastPVPixelVertices3D_*_*', 
        'keep *_hltFastPVPixelVertices_*_*', 
        'keep *_hltFastPixelBLifetimeL3TagInfos_*_*', 
        'keep *_hltFastPrimaryVertex_*_*', 
        'keep *_hltFilterDoubleIsoPFTau45Trk5LeadTrack5IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterL2EtCutDoublePFIsoTau45Trk5_*_*', 
        'keep *_hltFilterL2EtCutSingleIsoPFTau35Trk20MET70_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20LeadTrackPt20_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET60LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltFilterSingleIsoPFTau35Trk20MET70LeadTrack20IsolationL1HLTMatched_*_*', 
        'keep *_hltGoodOnlinePVs_*_*', 
        'keep *_hltHICaloJetCorrected_*_*', 
        'keep *_hltHICaloJetIDPassed_*_*', 
        'keep *_hltHIGoodLooseTracks_*_*', 
        'keep *_hltHIPixel3PrimTracks_*_*', 
        'keep *_hltHISelectedVertex_*_*', 
        'keep *_hltHISiPixelClusters_*_*', 
        'keep *_hltHITIPTCorrectorHB_*_*', 
        'keep *_hltHITIPTCorrectorHE_*_*', 
        'keep *_hltHiCorrectedIslandBarrelSuperClustersHI_*_*', 
        'keep *_hltHiCorrectedIslandEndcapSuperClustersHI_*_*', 
        'keep *_hltHiIslandSuperClustersHI_*_*', 
        'keep *_hltIsolPixelTrackProdHB_*_*', 
        'keep *_hltIsolPixelTrackProdHE_*_*', 
        'keep *_hltIter0PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter1Merged_*_*', 
        'keep *_hltIter1PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter2Merged_*_*', 
        'keep *_hltIter2PFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltIter3Merged_*_*', 
        'keep *_hltIter4Merged_*_*', 
        'keep *_hltIterativeCone5PileupSubtractionCaloJets_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep *_hltL1HLTSingleIsoPFTau35Trk20Met60JetsMatch_*_*', 
        'keep *_hltL1IsoElectronTrackIsol_*_*', 
        'keep *_hltL1NonIsoElectronTrackIsol_*_*', 
        'keep *_hltL1SeededRecoEcalCandidate_*_*', 
        'keep *_hltL1extraParticles_*_*', 
        'keep *_hltL1sDoubleTauJet44Eta2p17orDoubleJet64Central_*_*', 
        'keep *_hltL1sDoubleTauJet44erorDoubleJetC64_*_*', 
        'keep *_hltL1sL1EG18er_*_*', 
        'keep *_hltL1sL1ETM36ORETM40_*_*', 
        'keep *_hltL1sL1Jet52ETM30_*_*', 
        'keep *_hltL1sL1SingleEG12_*_*', 
        'keep *_hltL1sL1SingleEG15_*_*', 
        'keep *_hltL1sL1SingleEG18orL1SingleEG20_*_*', 
        'keep *_hltL1sL1SingleMu10_*_*', 
        'keep *_hltL1sL1SingleMu14Eta2p1_*_*', 
        'keep *_hltL1sMu16Eta2p1_*_*', 
        'keep *_hltL2MuonCandidatesNoVtx_*_*', 
        'keep *_hltL2MuonCandidates_*_*', 
        'keep *_hltL2MuonSeeds_*_*', 
        'keep *_hltL2Muons_*_*', 
        'keep *_hltL2TauJets_*_*', 
        'keep *_hltL3MuonCandidates_*_*', 
        'keep *_hltL3MuonsIOHit_*_*', 
        'keep *_hltL3MuonsLinksCombination_*_*', 
        'keep *_hltL3MuonsOIHit_*_*', 
        'keep *_hltL3MuonsOIState_*_*', 
        'keep *_hltL3Muons_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuonCandidates_*_*', 
        'keep *_hltL3NoFiltersNoVtxMuons_*_*', 
        'keep *_hltL3SecondaryVertexTagInfos_*_*', 
        'keep *_hltL3TkFromL2OICombination_*_*', 
        'keep *_hltL3TkTracksFromL2IOHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIHit_*_*', 
        'keep *_hltL3TkTracksFromL2OIState_*_*', 
        'keep *_hltL3TkTracksFromL2_*_*', 
        'keep *_hltL3TrackCandidateFromL2IOHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIHit_*_*', 
        'keep *_hltL3TrackCandidateFromL2OIState_*_*', 
        'keep *_hltL3TrajSeedIOHit_*_*', 
        'keep *_hltL3TrajSeedOIHit_*_*', 
        'keep *_hltL3TrajSeedOIState_*_*', 
        'keep *_hltL3TrajectorySeed_*_*', 
        'keep *_hltL3crIsoL1sMu16Eta2p1L1f0L2f16QL3f18QL3crIsoRhoFiltered0p15_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopEle27_*_*', 
        'keep *_hltLeadingCentralJets30SingleTopIsoMu24_*_*', 
        'keep *_hltMet_*_*', 
        'keep *_hltMu8Ele17CaloIdTCaloIsoVLPixelMatchFilter_*_*', 
        'keep *_hltMuTrackJpsiCtfTrackCands_*_*', 
        'keep *_hltMuTrackJpsiPixelTrackCands_*_*', 
        'keep *_hltMuonCSCDigis_*_*', 
        'keep *_hltMuonCSCDigis_MuonCSCStripDigi_*', 
        'keep *_hltMuonCSCDigis_MuonCSCWireDigi_*', 
        'keep *_hltMuonDTDigis_*_*', 
        'keep *_hltMuonRPCDigis_*_*', 
        'keep *_hltOnlineBeamSpot_*_*', 
        'keep *_hltOnlinePrimaryVertices_*_*', 
        'keep *_hltOverlapFilterEle20LooseIsoPFTau20OldVersion_*_*', 
        'keep *_hltOverlapFilterIsoEle20MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15IsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15MediumIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu15TightIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18LooseIsoPFTau20_*_*', 
        'keep *_hltOverlapFilterIsoMu18PFTau25TrackPt5Prong4_*_*', 
        'keep *_hltPFJetForBtag_*_*', 
        'keep *_hltPFTau15TrackLooseIso_*_*', 
        'keep *_hltPFTau15Track_*_*', 
        'keep *_hltPFTau15_*_*', 
        'keep *_hltPFTau20IsoMuVertex_*_*', 
        'keep *_hltPFTau20TrackLooseIso_*_*', 
        'keep *_hltPFTau20Track_*_*', 
        'keep *_hltPFTau20_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4IsoMuVertex_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolationProng4_*_*', 
        'keep *_hltPFTau25TrackPt5MediumIsolation_*_*', 
        'keep *_hltPFTau25TrackPt5_*_*', 
        'keep *_hltPFTau25_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIsoProng2_*_*', 
        'keep *_hltPFTau35TrackPt20LooseIso_*_*', 
        'keep *_hltPFTau35TrackPt20_*_*', 
        'keep *_hltPFTau35Track_*_*', 
        'keep *_hltPFTau35_*_*', 
        'keep *_hltPFTauEleVertex20_*_*', 
        'keep *_hltPFTauJetTracksAssociator_*_*', 
        'keep *_hltPFTauMediumIso20TrackMediumIso_*_*', 
        'keep *_hltPFTauMediumIso20Track_*_*', 
        'keep *_hltPFTauMediumIso20_*_*', 
        'keep *_hltPFTauMediumIso35Track_*_*', 
        'keep *_hltPFTauMediumIso35_*_*', 
        'keep *_hltPFTauTagInfo_*_*', 
        'keep *_hltPFTauTightIso20TrackTightIso_*_*', 
        'keep *_hltPFTauTightIso20Track_*_*', 
        'keep *_hltPFTauTightIso20_*_*', 
        'keep *_hltPFlowTrackSelectionHighPurity_*_*', 
        'keep *_hltParticleFlowForTaus_*_*', 
        'keep *_hltParticleFlow_*_*', 
        'keep *_hltPixelMatch3HitElectronsActivity_*_*', 
        'keep *_hltPixelMatch3HitElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchCleanElectronsL1Seeded_*_*', 
        'keep *_hltPixelMatchElectronsActivity_*_*', 
        'keep *_hltPixelMatchElectronsL1Iso_*_*', 
        'keep *_hltPixelMatchElectronsL1NonIso_*_*', 
        'keep *_hltPixelMatchElectronsL1Seeded_*_*', 
        'keep *_hltPixelTracks_*_*', 
        'keep *_hltPixelVertices3DbbPhi_*_*', 
        'keep *_hltPixelVertices_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC4_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidateSC5_*_*', 
        'keep *_hltRecoEcalSuperClusterActivityCandidate_*_*', 
        'keep *_hltRpcRecHits_*_*', 
        'keep *_hltSelector4CentralJetsL1FastJet_*_*', 
        'keep *_hltSelector8CentralJetsL1FastJet_*_*', 
        'keep *_hltSelectorJets20L1FastJet_*_*', 
        'keep *_hltSiPixelCluster_*_*', 
        'keep *_hltSiPixelClusters_*_*', 
        'keep *_hltSiStripClusters_*_*', 
        'keep *_hltSiStripRawToClustersFacility_*_*', 
        'keep *_hltSingleMu15L3Filtered15_*_*', 
        'keep *_hltSingleMuIsoL1s14L3IsoFiltered15eta2p1_*_*', 
        'keep *_hltSingleMuIsoL3IsoFiltered15_*_*', 
        'keep *_hltTowerMakerForAll_*_*', 
        'keep *_hltTowerMakerForMuons_*_*', 
        'keep *_hltTriggerSummaryAOD_*_*', 
        'keep *_hltTriggerSummaryRAW_*_*', 
        'keep *_hltTrimmedPixelVertices_*_*', 
        'keep *_hltVerticesL3_*_*', 
        'keep *_hltVerticesPFSelector_*_*', 
        'keep DcsStatuss_hltScalersRawToDigi_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep L1GlobalTriggerReadoutRecord_hltGtDigis_*_*', 
        'keep L1MuGMTCands_hltGtDigis_*_*', 
        'keep L1MuGMTReadoutCollection_hltGtDigis_*_*', 
        'keep L2MuonTrajectorySeeds_hltL2MuonSeeds_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajSeedOIHit_*_*', 
        'keep L3MuonTrajectorySeeds_hltHIL3TrajectorySeed_*_*', 
        'keep L3MuonTrajectorySeeds_hltL3TrajSeedOIState_*_*', 
        'keep LumiScalerss_hltScalersRawToDigi_*_*', 
        'keep SiPixelClusteredmNewDetSetVector_hltSiPixelClusters_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIHit_*_*', 
        'keep TrackCandidates_hltHIL3TrackCandidateFromL2OIState_*_*', 
        'keep TrackingRecHitsOwned_hltL3Muons_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep recoCaloJets_*_*_*', 
        'keep recoCaloMETs_*_*_*', 
        'keep recoCaloMETs_hltMet_*_*', 
        'keep recoCompositeCandidates_*_*_*', 
        'keep recoElectrons_*_*_*', 
        'keep recoIsolatedPixelTrackCandidates_*_*_*', 
        'keep recoMETs_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoPFTaus_*_*_*', 
        'keep recoRecoChargedCandidates_*_*_*', 
        'keep recoRecoChargedCandidates_hltHIL3MuonCandidates_*_*', 
        'keep recoRecoChargedCandidates_hltL2MuonCandidates_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1IsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsoHLTClusterShape_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonEcalIsol_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalForHE_*_*', 
        'keep recoRecoEcalCandidatesToValuefloatAssociation_hltL1NonIsolatedPhotonHcalIsol_*_*', 
        'keep recoRecoEcalCandidates_*_*_*', 
        'keep recoRecoEcalCandidates_hltL1IsoRecoEcalCandidate_*_*', 
        'keep recoRecoEcalCandidates_hltL1NonIsoRecoEcalCandidate_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIHit_*_*', 
        'keep recoTrackExtras_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3MuonsOIHit_*_*', 
        'keep recoTracks_hltHIL3MuonsOIState_*_*', 
        'keep recoTracks_hltHIL3Muons_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIHit_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2OIState_*_*', 
        'keep recoTracks_hltHIL3TkTracksFromL2_*_*', 
        'keep triggerTriggerEventWithRefs_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep triggerTriggerFilterObjectWithRefs_*_*_*', 
        'keep *_heavyIon_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECODEBUGEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_heavyIon_*_*', 
        'keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECOEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.RECOSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring( ('drop *', 
        'drop *', 
        'keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*', 
        'keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*', 
        'keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*', 
        'keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*', 
        'keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*', 
        'keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*', 
        'keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*', 
        'keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*', 
        'keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*', 
        'keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*', 
        'keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*', 
        'drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*', 
        'keep *_offlineBeamSpot_*_*', 
        'keep L1GlobalTriggerReadoutRecord_gtDigis_*_*', 
        'keep *_l1GtRecord_*_*', 
        'keep *_l1GtTriggerMenuLite_*_*', 
        'keep *_conditionsInEdm_*_*', 
        'keep *_l1extraParticles_*_*', 
        'keep *_l1L1GtObjectMap_*_*', 
        'keep L1MuGMTReadoutCollection_gtDigis_*_*', 
        'keep L1GctEmCand*_gctDigis_*_*', 
        'keep L1GctJetCand*_gctDigis_*_*', 
        'keep L1GctEtHad*_gctDigis_*_*', 
        'keep L1GctEtMiss*_gctDigis_*_*', 
        'keep L1GctEtTotal*_gctDigis_*_*', 
        'keep L1GctHtMiss*_gctDigis_*_*', 
        'keep L1GctJetCounts*_gctDigis_*_*', 
        'keep L1GctHFRingEtSums*_gctDigis_*_*', 
        'keep L1GctHFBitCounts*_gctDigis_*_*', 
        'keep LumiDetails_lumiProducer_*_*', 
        'keep LumiSummary_lumiProducer_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep L1AcceptBunchCrossings_*_*_*', 
        'keep L1TriggerScalerss_*_*_*', 
        'keep Level1TriggerScalerss_*_*_*', 
        'keep LumiScalerss_*_*_*', 
        'keep BeamSpotOnlines_*_*_*', 
        'keep DcsStatuss_*_*_*', 
        'keep *_tcdsDigis_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'keep *_pfIsolatedElectronsEI_*_*', 
        'keep *_pfIsolatedMuonsEI_*_*', 
        'keep recoPFJets_pfJetsEI_*_*', 
        'keep *_pfJetTrackAssociatorEI_*_*', 
        'keep *_impactParameterTagInfosEI_*_*', 
        'keep *_secondaryVertexTagInfosEI_*_*', 
        'keep *_combinedSecondaryVertexBJetTagsEI_*_*', 
        'keep recoPFTaus_pfTausEI_*_*', 
        'keep recoPFTauDiscriminator_pfTausDiscrimination*_*_*', 
        'keep *_pfMetEI_*_*', 
        'keep int_bunchSpacingProducer_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*', 
        'keep *_heavyIon_*_*' ) ),
    splitLevel = cms.untracked.int32(0)
)

process.REDIGIEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring('drop *', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'drop *_randomEngineStateProducer_*_*')
)

process.REGENEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring('keep *', 
        'drop *_genParticles_*_*', 
        'drop *_genParticlesForJets_*_*', 
        'drop *_kt4GenJets_*_*', 
        'drop *_kt6GenJets_*_*', 
        'drop *_iterativeCone5GenJets_*_*', 
        'drop *_ak4GenJets_*_*', 
        'drop *_ak7GenJets_*_*', 
        'drop *_ak8GenJets_*_*', 
        'drop *_ak4GenJetsNoNu_*_*', 
        'drop *_ak8GenJetsNoNu_*_*', 
        'drop *_genCandidatesForMET_*_*', 
        'drop *_genParticlesForMETAllVisible_*_*', 
        'drop *_genMetCalo_*_*', 
        'drop *_genMetCaloAndNonPrompt_*_*', 
        'drop *_genMetTrue_*_*', 
        'drop *_genMetIC5GenJs_*_*')
)

process.REPACKRAWEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop FEDRawDataCollection_*_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'drop FEDRawDataCollection_source_*_*', 
        'drop FEDRawDataCollection_rawDataCollector_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.REPACKRAWSIMEventContent = cms.PSet(
    eventAutoFlushCompressedSize = cms.untracked.int32(5242880),
    outputCommands = cms.untracked.vstring('drop *', 
        'drop FEDRawDataCollection_*_*_*', 
        'keep FEDRawDataCollection_rawDataRepacker_*_*', 
        'keep FEDRawDataCollection_virginRawDataRepacker_*_*', 
        'keep  FEDRawDataCollection_rawDataCollector_*_*', 
        'keep  FEDRawDataCollection_source_*_*', 
        'drop *_hlt*_*_*', 
        'keep *_hltL1GtObjectMap_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep edmTriggerResults_*_*_*', 
        'keep triggerTriggerEvent_*_*_*', 
        'keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*', 
        'keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*', 
        'keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*', 
        'keep recoGenMETs_*_*_*', 
        'keep FEDRawDataCollection_source_*_*', 
        'keep FEDRawDataCollection_rawDataCollector_*_*', 
        'keep *_MEtoEDMConverter_*_*', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep *_logErrorHarvester_*_*', 
        'drop FEDRawDataCollection_source_*_*', 
        'drop FEDRawDataCollection_rawDataCollector_*_*'),
    splitLevel = cms.untracked.int32(0)
)

process.RESIMEventContent = cms.PSet(
    inputCommands = cms.untracked.vstring('drop *', 
        'keep *_randomEngineStateProducer_*_*', 
        'keep LHERunInfoProduct_*_*_*', 
        'keep LHEEventProduct_*_*_*', 
        'keep GenRunInfoProduct_generator_*_*', 
        'keep GenLumiInfoProduct_generator_*_*', 
        'keep GenEventInfoProduct_generator_*_*', 
        'keep edmHepMCProduct_generator_*_*', 
        'keep GenFilterInfo_*_*_*', 
        'keep *_genParticles_*_*')
)

process.RecoBTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*')
)

process.RecoBTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*')
)

process.RecoBTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_impactParameterTagInfos_*_*', 
        'keep *_trackCountingHighEffBJetTags_*_*', 
        'keep *_trackCountingHighPurBJetTags_*_*', 
        'keep *_jetProbabilityBJetTags_*_*', 
        'keep *_jetBProbabilityBJetTags_*_*', 
        'keep *_secondaryVertexTagInfos_*_*', 
        'keep *_inclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_ghostTrackVertexTagInfos_*_*', 
        'keep *_simpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_simpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_combinedSecondaryVertexBJetTags_*_*', 
        'keep *_combinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_ghostTrackBJetTags_*_*', 
        'keep *_softPFMuonsTagInfos_*_*', 
        'keep *_softPFElectronsTagInfos_*_*', 
        'keep *_softPFElectronBJetTags_*_*', 
        'keep *_softPFMuonBJetTags_*_*', 
        'keep *_softMuonTagInfos_*_*', 
        'keep *_softMuonBJetTags_*_*', 
        'keep *_softMuonByIP3dBJetTags_*_*', 
        'keep *_softMuonByPtBJetTags_*_*', 
        'keep *_combinedMVABJetTags_*_*', 
        'keep *_pfImpactParameterTagInfos_*_*', 
        'keep *_pfTrackCountingHighEffBJetTags_*_*', 
        'keep *_pfTrackCountingHighPurBJetTags_*_*', 
        'keep *_pfJetProbabilityBJetTags_*_*', 
        'keep *_pfJetBProbabilityBJetTags_*_*', 
        'keep *_pfSecondaryVertexTagInfos_*_*', 
        'keep *_pfInclusiveSecondaryVertexFinderTagInfos_*_*', 
        'keep *_pfSimpleSecondaryVertexHighEffBJetTags_*_*', 
        'keep *_pfSimpleSecondaryVertexHighPurBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexBJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedInclusiveSecondaryVertexV2BJetTags_*_*', 
        'keep *_pfCombinedMVABJetTags_*_*', 
        'keep *_pfCombinedSecondaryVertexSoftLeptonBJetTags_*_*', 
        'keep *_inclusiveCandidateSecondaryVertices_*_*')
)

process.RecoBTauAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoBTauRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoEcalAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep recoCaloClusters_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_hybridSuperClusters_uncleanOnlyHybridSuperClusters_*', 
        'keep recoCaloClusters_multi5x5SuperClusters_multi5x5EndcapBasicClusters_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep recoSuperClusters_particleFlowSuperClusterECAL_*_*', 
        'keep recoCaloClusters_particleFlowSuperClusterECAL_*_*')
)

process.RecoEcalFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_selectDigi_*_*', 
        'keep *_reducedEcalRecHitsEB_*_*', 
        'keep *_reducedEcalRecHitsEE_*_*', 
        'keep *_reducedEcalRecHitsES_*_*', 
        'keep *_interestingEcalDetId*_*_*', 
        'keep *_ecalWeightUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep *_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5*_*_*', 
        'keep *_correctedMulti5x5*_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*')
)

process.RecoEcalRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_selectDigi_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEE_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsEB_*_*', 
        'keep EcalRecHitsSorted_reducedEcalRecHitsES_*_*', 
        'keep *_hybridSuperClusters_*_*', 
        'keep recoSuperClusters_correctedHybridSuperClusters_*_*', 
        'keep *_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClusters_*_*', 
        'keep recoSuperClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoSuperClusters_correctedMulti5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusters_multi5x5SuperClustersWithPreshower_*_*', 
        'keep recoPreshowerClusterShapes_multi5x5PreshowerClusterShape_*_*', 
        'keep *_particleFlowSuperClusterECAL_*_*', 
        'drop recoClusterShapes_*_*_*', 
        'drop recoBasicClustersToOnerecoClusterShapesAssociation_*_*_*', 
        'drop recoBasicClusters_multi5x5BasicClusters_multi5x5BarrelBasicClusters_*', 
        'drop recoSuperClusters_multi5x5SuperClusters_multi5x5BarrelSuperClusters_*', 
        'keep recoCaloClusters_islandBasicClusters_*_*')
)

process.RecoEgammaAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep recoPhotonCores_gedPhotonCore_*_*', 
        'keep recoPhotons_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'drop *_gedPhotons_valMapPFEgammaCandToPhoton_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*')
)

process.RecoEgammaFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_gsfElectronCores_*_*', 
        'keep *_gsfElectrons_*_*', 
        'keep *_uncleanedOnlyGsfElectronCores_*_*', 
        'keep *_uncleanedOnlyGsfElectrons_*_*', 
        'keep *_eidRobustLoose_*_*', 
        'keep *_eidRobustTight_*_*', 
        'keep *_eidRobustHighEnergy_*_*', 
        'keep *_eidLoose_*_*', 
        'keep *_eidTight_*_*', 
        'keep *_egmGedGsfElectronPF*Isolation_*_*', 
        'keep *_egmGsfElectronIDs_*_*', 
        'keep *_egmPhotonIDs_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'keep *_conversions_*_*', 
        'keep *_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotonsTmp_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep *_photonCore_*_*', 
        'keep *_photons_*_*', 
        'keep *_mustachePhotonCore_*_*', 
        'keep *_mustachePhotons_*_*', 
        'keep *_allConversions_*_*', 
        'keep *_allConversionsOldEG_*_*', 
        'keep *_ckfOutInTracksFrom*Conversions_*_*', 
        'keep *_ckfInOutTracksFrom*Conversions_*_*', 
        'keep *_uncleanedOnlyAllConversions_*_*', 
        'keep *_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep *_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*')
)

process.RecoEgammaRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGsfElectronCores_gsfElectronCores_*_*', 
        'keep recoGsfElectrons_gsfElectrons_*_*', 
        'keep recoGsfElectronCores_uncleanedOnlyGsfElectronCores_*_*', 
        'keep recoGsfElectrons_uncleanedOnlyGsfElectrons_*_*', 
        'keep floatedmValueMap_eidRobustLoose_*_*', 
        'keep floatedmValueMap_eidRobustTight_*_*', 
        'keep floatedmValueMap_eidRobustHighEnergy_*_*', 
        'keep floatedmValueMap_eidLoose_*_*', 
        'keep floatedmValueMap_eidTight_*_*', 
        'keep *_egmGedGsfElectronPFIsolation_*_*', 
        'keep *_photonEcalPFClusterIsolationProducer_*_*', 
        'keep *_electronEcalPFClusterIsolationProducer_*_*', 
        'keep *_photonHcalPFClusterIsolationProducer_*_*', 
        'keep *_electronHcalPFClusterIsolationProducer_*_*', 
        'drop *_egmGsfElectronIDs_*_*', 
        'drop *_egmPhotonIDs_*_*', 
        'keep *_gedPhotonCore_*_*', 
        'keep *_gedPhotons_*_*', 
        'keep *_particleBasedIsolation_*_*', 
        'keep recoPhotons_mustachePhotons_*_*', 
        'keep recoPhotonCores_mustachePhotonCore_*_*', 
        'keep recoPhotons_photons_*_*', 
        'keep recoPhotonCores_photonCore_*_*', 
        'keep recoConversions_conversions_*_*', 
        'keep recoConversions_mustacheConversions_*_*', 
        'drop *_conversions_uncleanedConversions_*', 
        'drop *_gedPhotonsTmp_valMapPFEgammaCandToPhoton_*', 
        'keep recoConversions_allConversions_*_*', 
        'keep recoConversions_allConversionsOldEG_*_*', 
        'keep recoTracks_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTracks_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfOutInTracksFrom*Conversions_*_*', 
        'keep recoTrackExtras_ckfInOutTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfOutInTracksFrom*Conversions_*_*', 
        'keep TrackingRecHitsOwned_ckfInOutTracksFrom*Conversions_*_*', 
        'keep recoConversions_uncleanedOnlyAllConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTracks_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep recoTrackExtras_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfOutInTracksFromConversions_*_*', 
        'keep TrackingRecHitsOwned_uncleanedOnlyCkfInOutTracksFromConversions_*_*', 
        'keep *_PhotonIDProd_*_*', 
        'keep *_PhotonIDProdGED_*_*', 
        'keep *_hfRecoEcalCandidate_*_*', 
        'keep *_hfEMClusters_*_*', 
        'keep *_gedGsfElectronCores_*_*', 
        'keep *_gedGsfElectrons_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerppGED_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerpp_*_*')
)

process.RecoGenJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenJets_*_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4GenJets_*_*', 
        'keep *_ak8GenJets_*_*', 
        'keep *_ak4GenJetsNoNu_*_*', 
        'keep *_ak8GenJetsNoNu_*_*', 
        'keep *_genParticle_*_*')
)

process.RecoGenMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoGenMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoGenMETs_*_*_*')
)

process.RecoHIAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_hiGeneralTracks_*_*', 
        'keep recoTracks_hiGeneralAndPixelTracks_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep CaloTowersSorted_towerMaker_*_*', 
        'drop recoCandidatesOwned_caloTowers_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoGsfElectrons_gedGsfElectronsTmp_*_*', 
        'keep recoSuperClusters_correctedIslandBarrelSuperClusters_*_*', 
        'keep recoSuperClusters_correctedIslandEndcapSuperClusters_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep HFRecHitsSorted_hfreco_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*')
)

process.RecoHIFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*')
)

process.RecoHIRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*', 
        'keep *_*_APVCM_*', 
        'keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*', 
        'keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*')
)

process.RecoHcalNoiseAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('drop recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHcalNoiseFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHcalNoiseRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*')
)

process.RecoHiCentralityAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*')
)

process.RecoHiCentralityFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*')
)

process.RecoHiCentralityRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCentrality*_hiCentrality_*_*', 
        'keep *_centralityBin_*_*', 
        'keep recoClusterCompatibility*_hiClusterCompatibility_*_*')
)

process.RecoHiEgammaAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep floatedmValueMap_*_*_*', 
        'keep recoGsfElectrons_gedGsfElectronsTmp_*_*', 
        'keep recoSuperClusters_correctedIslandBarrelSuperClusters_*_*', 
        'keep recoSuperClusters_correctedIslandEndcapSuperClusters_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*')
)

process.RecoHiEgammaFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*')
)

process.RecoHiEgammaRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoSuperClusters_*_*_*', 
        'keep recoCaloClusters_*_*_*', 
        'keep EcalRecHitsSorted_*_*_*', 
        'keep floatedmValueMap_*_*_*', 
        'keep recoPFCandidates_*_*_*', 
        'drop recoPFClusters_*_*_*', 
        'keep recoElectronSeeds_*_*_*', 
        'keep recoGsfElectrons_*_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducer_*_*', 
        'keep recoPhotons_gedPhotonsTmp_*_*', 
        'keep recoHIPhotonIsolationedmValueMap_photonIsolationHIProducerGED_*_*', 
        'keep recoElectronSeeds_ecalDrivenElectronSeeds_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*')
)

process.RecoHiEvtPlaneAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoEvtPlanes_hiEvtPlane_*_*', 
        'keep ZDCRecHitsSorted_zdcreco_*_*', 
        'keep ZDCDataFramesSorted_hcalDigis_*_*', 
        'keep HFRecHitsSorted_hfreco_*_*')
)

process.RecoHiEvtPlaneFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoEvtPlanes_hiEvtPlane_*_*')
)

process.RecoHiEvtPlaneRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoEvtPlanes_hiEvtPlane_*_*')
)

process.RecoHiJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*', 
        'keep CaloTowersSorted_towerMaker_*_*', 
        'drop recoCandidatesOwned_caloTowers_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*')
)

process.RecoHiJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*')
)

process.RecoHiJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_*CaloJets_*_*', 
        'keep *_*PFJets_*_*', 
        'keep *_*HiGenJets_*_*', 
        'keep *_*voronoiBackground*_*_*', 
        'keep *_*PFTowers_*_*')
)

process.RecoHiMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*')
)

process.RecoHiMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*')
)

process.RecoHiMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*')
)

process.RecoHiTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_hiGeneralTracks_*_*', 
        'keep recoTracks_hiGeneralAndPixelTracks_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*')
)

process.RecoHiTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep *_hiPixel3PrimTracks_*_*', 
        'keep *_hiPixel3ProtoTracks_*_*', 
        'keep *_hiSelectedProtoTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*')
)

process.RecoHiTrackerLocalFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_*_APVCM_*', 
        'keep *_siStripZeroSuppression_BADAPVBASELINE_*', 
        'keep SiStripRawDigiedmDetSetVector_siStripZeroSuppression_VirginRaw_*')
)

process.RecoHiTrackerLocalRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_*_APVCM_*')
)

process.RecoHiTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hiGeneralTracks_*_*', 
        'keep *_hiGeneralAndPixelTracks_*_*', 
        'keep recoVertexs_hiPixelMedianVertex_*_*', 
        'keep recoVertexs_hiPixelAdaptiveVertex_*_*', 
        'keep recoVertexs_hiSelectedVertex_*_*', 
        'keep recoVertexs_hiPixelClusterVertex_*_*')
)

process.RecoJetsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'drop doubles_*Jets_rhos_*', 
        'drop doubles_*Jets_sigmas_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*')
)

process.RecoJetsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloJets_*_*_*', 
        'keep recoPFJets_*_*_*', 
        'keep recoTrackJets_*_*_*', 
        'keep recoJPTJets_*_*_*', 
        'keep recoBasicJets_*_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_kt4JetTracksAssociatorAtVertex_*_*', 
        'keep *_kt4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_kt4JetExtender_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex*_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace*_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak7JetTracksAssociatorAtVertex*_*_*', 
        'keep *_ak7JetTracksAssociatorAtCaloFace*_*_*', 
        'keep *_ak7JetExtender_*_*', 
        'keep *_*JetID_*_*', 
        'keep *_kt4CaloJets_*_*', 
        'keep *_kt6CaloJets_*_*', 
        'keep *_ak4CaloJets_*_*', 
        'keep *_ak5CaloJets_*_*', 
        'keep *_ak7CaloJets_*_*', 
        'keep *_kt4PFJets_*_*', 
        'keep *_kt6PFJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak5PFJets_*_*', 
        'keep *_ak7PFJets_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep *_kt4TrackJets_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ca*Mass_*_*', 
        'keep *_ak*Mass_*_*')
)

process.RecoJetsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4CaloJets_*_*', 
        'keep *_ak4PFJets_*_*', 
        'keep *_ak4PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHS_*_*', 
        'keep *_ak8PFJetsCHSSoftDrop_*_*', 
        'keep *_cmsTopTagPFJetsCHS_*_*', 
        'keep *_JetPlusTrackZSPCorJetAntiKt4_*_*', 
        'keep *_ak4TrackJets_*_*', 
        'keep recoRecoChargedRefCandidates_trackRefsForJets_*_*', 
        'keep *_caloTowers_*_*', 
        'keep *_towerMaker_*_*', 
        'keep *_CastorTowerReco_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertex_*_*', 
        'keep *_ak4JetTracksAssociatorAtVertexPF_*_*', 
        'keep *_ak4JetTracksAssociatorAtCaloFace_*_*', 
        'keep *_ak4JetTracksAssociatorExplicit_*_*', 
        'keep *_ak4JetExtender_*_*', 
        'keep *_ak4JetID_*_*', 
        'keep *_ak5CastorJets_*_*', 
        'keep *_ak5CastorJetID_*_*', 
        'keep *_ak7CastorJets_*_*', 
        'keep *_ak7CastorJetID_*_*', 
        'keep *_fixedGridRho*_*_*', 
        'keep *_ak8PFJetsCHSSoftDropMass_*_*')
)

process.RecoLocalCaloAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_castorreco_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep HcalUnpackerReport_*_*_*')
)

process.RecoLocalCaloFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HBHERecHitsSorted_hbheprerecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalMultiFitUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*')
)

process.RecoLocalCaloRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_hbhereco_*_*', 
        'keep *_hbheprereco_*_*', 
        'keep *_hfreco_*_*', 
        'keep *_horeco_*_*', 
        'keep HBHERecHitsSorted_hbherecoMB_*_*', 
        'keep HORecHitsSorted_horecoMB_*_*', 
        'keep HFRecHitsSorted_hfrecoMB_*_*', 
        'keep ZDCDataFramesSorted_*Digis_*_*', 
        'keep ZDCRecHitsSorted_*_*_*', 
        'keep *_reducedHcalRecHits_*_*', 
        'keep *_castorreco_*_*', 
        'keep HcalUnpackerReport_*_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*')
)

process.RecoLocalMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_dt4DSegments_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*')
)

process.RecoLocalMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*')
)

process.RecoLocalMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_dt1DRecHits_*_*', 
        'keep *_dt4DSegments_*_*', 
        'keep *_dt1DCosmicRecHits_*_*', 
        'keep *_dt4DCosmicSegments_*_*', 
        'keep *_csc2DRecHits_*_*', 
        'keep *_cscSegments_*_*', 
        'keep *_rpcRecHits_*_*')
)

process.RecoLocalTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_clusterSummaryProducer_*_*')
)

process.RecoLocalTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*')
)

process.RecoLocalTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep DetIdedmEDCollection_siStripDigis_*_*', 
        'keep DetIdedmEDCollection_siPixelDigis_*_*', 
        'keep *_siPixelClusters_*_*', 
        'keep *_siStripClusters_*_*', 
        'keep *_clusterSummaryProducer_*_*')
)

process.RecoMETAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'drop recoHcalNoiseRBXs_*_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *GlobalHaloData_*_*_*', 
        'keep recoCSCHaloData_CSCHaloData_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMETFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMETRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoCaloMETs_caloMet_*_*', 
        'keep recoCaloMETs_caloMetBE_*_*', 
        'keep recoCaloMETs_caloMetBEFO_*_*', 
        'keep recoCaloMETs_caloMetM_*_*', 
        'keep recoPFMETs_pfMet_*_*', 
        'keep recoPFMETs_pfChMet_*_*', 
        'keep recoMuonMETCorrectionDataedmValueMap_muonMETValueMapProducer_*_*', 
        'keep recoHcalNoiseRBXs_hcalnoise_*_*', 
        'keep HcalNoiseSummary_hcalnoise_*_*', 
        'keep *HaloData_*_*_*', 
        'keep *BeamHaloSummary_BeamHaloSummary_*_*')
)

process.RecoMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*')
)

process.RecoMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.RecoMuonIsolationFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationParamGlobal = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muParamGlobalIsoDepositGsTk_*_*', 
        'keep *_muParamGlobalIsoDepositCalEcal_*_*', 
        'keep *_muParamGlobalIsoDepositCalHcal_*_*', 
        'keep *_muParamGlobalIsoDepositCtfTk_*_*', 
        'keep *_muParamGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muParamGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muParamGlobalIsoDepositJets_*_*')
)

process.RecoMuonIsolationRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_displacedMuonSeeds_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_globalMuons_*_*', 
        'keep TrackingRecHitsOwned_tevMuons_*_*', 
        'keep recoCaloMuons_calomuons_*_*', 
        'keep *_CosmicMuonSeed_*_*', 
        'keep recoTrackExtras_cosmicMuons_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons_*_*', 
        'keep recoTrackExtras_cosmicMuons1Leg_*_*', 
        'keep TrackingRecHitsOwned_cosmicMuons1Leg_*_*', 
        'keep recoTracks_cosmicsVetoTracks_*_*', 
        'keep *_SETMuonSeed_*_*', 
        'keep recoTracks_standAloneSETMuons_*_*', 
        'keep recoTrackExtras_standAloneSETMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneSETMuons_*_*', 
        'keep recoTracks_globalSETMuons_*_*', 
        'keep recoTrackExtras_globalSETMuons_*_*', 
        'keep TrackingRecHitsOwned_globalSETMuons_*_*', 
        'keep recoMuons_muonsWithSET_*_*', 
        'keep *_muons_*_*', 
        'keep *_*_muons_*', 
        'drop *_muons_muons1stStep2muonsMap_*', 
        'drop recoIsoDepositedmValueMap_muons_*_*', 
        'drop doubleedmValueMap_muons_muPFIso*_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_globalMuons_*_*', 
        'keep recoTrackExtras_globalMuons_*_*', 
        'keep recoTracks_tevMuons_*_*', 
        'keep recoTrackExtras_tevMuons_*_*', 
        'keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_displacedTracks_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_tevMuons_*_*', 
        'keep recoTracks_displacedGlobalMuons_*_*', 
        'keep recoTrackExtras_displacedGlobalMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedGlobalMuons_*_*', 
        'keep recoTracks_cosmicMuons_*_*', 
        'keep recoMuons_muonsFromCosmics_*_*', 
        'keep recoTracks_cosmicMuons1Leg_*_*', 
        'keep recoMuons_muonsFromCosmics1Leg_*_*', 
        'keep recoTracks_refittedStandAloneMuons_*_*', 
        'keep recoTrackExtras_refittedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_refittedStandAloneMuons_*_*', 
        'keep recoTracks_displacedStandAloneMuons__*', 
        'keep recoTrackExtras_displacedStandAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_displacedStandAloneMuons_*_*', 
        'keep *_muIsoDepositTk_*_*', 
        'keep *_muIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muIsoDepositJets_*_*', 
        'keep *_muGlobalIsoDepositCtfTk_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorTowers_*_*', 
        'keep *_muGlobalIsoDepositCalByAssociatorHits_*_*', 
        'keep *_muGlobalIsoDepositJets_*_*')
)

process.RecoParticleFlowAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('drop CaloTowersSorted_towerMakerPF_*_*', 
        'drop *_pfElectronTranslator_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep recoCaloClusters_pfElectronTranslator_*_*', 
        'keep recoPreshowerClusters_pfElectronTranslator_*_*', 
        'keep recoSuperClusters_pfElectronTranslator_*_*', 
        'keep recoCaloClusters_pfPhotonTranslator_*_*', 
        'keep recoPreshowerClusters_pfPhotonTranslator_*_*', 
        'keep recoSuperClusters_pfPhotonTranslator_*_*', 
        'keep recoPhotons_pfPhotonTranslator_*_*', 
        'keep recoPhotonCores_pfPhotonTranslator_*_*', 
        'keep recoConversions_pfPhotonTranslator_*_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*')
)

process.RecoParticleFlowFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterHFEM_*_*', 
        'keep recoPFClusters_particleFlowClusterHFHAD_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*')
)

process.RecoParticleFlowRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('drop CaloTowersSorted_towerMakerPF_*_*', 
        'keep recoPFRecHits_particleFlowClusterECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHCAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFEM_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterHFHAD_Cleaned_*', 
        'keep recoPFRecHits_particleFlowClusterPS_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitECAL_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHBHE_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHF_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitHO_Cleaned_*', 
        'keep recoPFRecHits_particleFlowRecHitPS_Cleaned_*', 
        'keep recoPFClusters_particleFlowClusterECAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHCAL_*_*', 
        'keep recoPFClusters_particleFlowClusterHO_*_*', 
        'keep recoPFClusters_particleFlowClusterPS_*_*', 
        'keep recoPFBlocks_particleFlowBlock_*_*', 
        'keep recoPFCandidates_particleFlowEGamma_*_*', 
        'keep recoCaloClusters_particleFlowEGamma_*_*', 
        'keep recoSuperClusters_particleFlowEGamma_*_*', 
        'keep recoConversions_particleFlowEGamma_*_*', 
        'keep recoPFCandidates_particleFlow_*_*', 
        'keep recoPFCandidates_particleFlowTmp_electrons_*', 
        'keep recoPFCandidates_particleFlowTmp_*_*', 
        'drop recoPFCandidates_particleFlowTmp__*', 
        'keep recoPFDisplacedVertexs_particleFlowDisplacedVertex_*_*', 
        'keep *_pfElectronTranslator_*_*', 
        'keep *_pfPhotonTranslator_*_*', 
        'keep *_particleFlow_electrons_*', 
        'keep *_particleFlow_photons_*', 
        'keep *_trackerDrivenElectronSeeds_preid_*', 
        'keep *_particleFlowPtrs_*_*', 
        'keep *_particleFlowTmpPtrs_*_*')
)

process.RecoPixelVertexingFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*')
)

process.RecoPixelVertexingRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_pixelTracks_*_*', 
        'keep *_pixelVertices_*_*')
)

process.RecoTauTagAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*')
)

process.RecoTauTagFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*')
)

process.RecoTauTagRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ak4PFJetsRecoTauPiZeros_*_*', 
        'keep *_hpsPFTauProducer_*_*', 
        'keep *_hpsPFTauDiscrimination*_*_*', 
        'keep *_hpsPFTau*PtSum_*_*', 
        'keep *_hpsPFTauTransverseImpactParameters_*_*')
)

process.RecoTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_generalTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTracks_ctfPixelLess_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*')
)

process.RecoTrackerFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*')
)

process.RecoTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_generalTracks_*_*', 
        'keep recoTrackExtras_generalTracks_*_*', 
        'keep TrackingRecHitsOwned_extraFromSeeds_*_*', 
        'keep uints_extraFromSeeds_*_*', 
        'keep TrackingRecHitsOwned_generalTracks_*_*', 
        'keep recoTracks_beamhaloTracks_*_*', 
        'keep recoTrackExtras_beamhaloTracks_*_*', 
        'keep TrackingRecHitsOwned_beamhaloTracks_*_*', 
        'keep recoTracks_rsWithMaterialTracks_*_*', 
        'keep recoTrackExtras_rsWithMaterialTracks_*_*', 
        'keep TrackingRecHitsOwned_rsWithMaterialTracks_*_*', 
        'keep recoTracks_conversionStepTracks_*_*', 
        'keep recoTrackExtras_conversionStepTracks_*_*', 
        'keep TrackingRecHitsOwned_conversionStepTracks_*_*', 
        'keep *_ctfPixelLess_*_*', 
        'keep *_dedxTruncated40_*_*', 
        'keep *_dedxHitInfo_*_*', 
        'keep *_dedxHarmonic2_*_*', 
        'keep *_trackExtrapolator_*_*', 
        'keep floatedmValueMap_generalTracks_*_*')
)

process.RecoVertexAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*')
)

process.RecoVertexFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*')
)

process.RecoVertexRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep  *_offlinePrimaryVertices__*', 
        'keep  *_offlinePrimaryVerticesWithBS_*_*', 
        'keep  *_offlinePrimaryVerticesFromCosmicTracks_*_*', 
        'keep  *_nuclearInteractionMaker_*_*', 
        'keep *_generalV0Candidates_*_*', 
        'keep *_inclusiveSecondaryVertices_*_*')
)

process.ReferenceTrajectoryFactory = cms.PSet(
    MaterialEffects = cms.string('Combined'),
    MomentumEstimateFieldOff = cms.double(10.0),
    ParticleMass = cms.double(0.10565836),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('ReferenceTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseBzeroIfFieldOff = cms.bool(True),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.RegionPSetBlock = cms.PSet(
    RegionPSet = cms.PSet(
        originHalfLength = cms.double(21.2),
        originRadius = cms.double(0.2),
        originXPos = cms.double(0.0),
        originYPos = cms.double(0.0),
        originZPos = cms.double(0.0),
        precise = cms.bool(True),
        ptMin = cms.double(0.9)
    )
)

process.RegionPSetWithVerticesBlock = cms.PSet(
    RegionPSet = cms.PSet(
        VertexCollection = cms.InputTag("firstStepPrimaryVertices"),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        fixedError = cms.double(0.2),
        nSigmaZ = cms.double(4.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.9),
        sigmaZVertex = cms.double(3.0),
        useFakeVertices = cms.bool(False),
        useFixedError = cms.bool(True),
        useFoundVertices = cms.bool(True)
    )
)

process.RegionPsetFomBeamSpotBlock = cms.PSet(
    RegionPSet = cms.PSet(
        beamSpot = cms.InputTag("offlineBeamSpot"),
        nSigmaZ = cms.double(4.0),
        originRadius = cms.double(0.2),
        precise = cms.bool(True),
        ptMin = cms.double(0.9)
    )
)

process.SK_ME1234 = cms.PSet(
    chi2Max = cms.double(99999.0),
    dPhiFineMax = cms.double(0.025),
    dPhiMax = cms.double(0.003),
    dRPhiFineMax = cms.double(8.0),
    dRPhiMax = cms.double(8.0),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True),
    wideSeg = cms.double(3.0)
)

process.SK_ME1A = cms.PSet(
    chi2Max = cms.double(99999.0),
    dPhiFineMax = cms.double(0.025),
    dPhiMax = cms.double(0.025),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(8.0),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True),
    wideSeg = cms.double(3.0)
)

process.ST_ME1234 = cms.PSet(
    BPMinImprovement = cms.double(10000.0),
    BrutePruning = cms.bool(True),
    CSCDebug = cms.untracked.bool(False),
    CorrectTheErrors = cms.bool(True),
    Covariance = cms.double(0.0),
    ForceCovariance = cms.bool(False),
    ForceCovarianceAll = cms.bool(False),
    NormChi2Cut2D = cms.double(20.0),
    NormChi2Cut3D = cms.double(10.0),
    Pruning = cms.bool(True),
    SeedBig = cms.double(0.0015),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    curvePenaltyThreshold = cms.double(0.85),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(4.0),
    dYclusBoxMax = cms.double(8.0),
    hitDropLimit4Hits = cms.double(0.6),
    hitDropLimit5Hits = cms.double(0.8),
    hitDropLimit6Hits = cms.double(0.3333),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3),
    maxRecHitsInCluster = cms.int32(20),
    minHitsPerSegment = cms.int32(3),
    onlyBestSegment = cms.bool(False),
    preClustering = cms.bool(True),
    preClusteringUseChaining = cms.bool(True),
    prePrun = cms.bool(True),
    prePrunLimit = cms.double(3.17),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2),
    useShowering = cms.bool(False),
    yweightPenalty = cms.double(1.5),
    yweightPenaltyThreshold = cms.double(1.0)
)

process.ST_ME1A = cms.PSet(
    BPMinImprovement = cms.double(10000.0),
    BrutePruning = cms.bool(True),
    CSCDebug = cms.untracked.bool(False),
    CorrectTheErrors = cms.bool(True),
    Covariance = cms.double(0.0),
    ForceCovariance = cms.bool(False),
    ForceCovarianceAll = cms.bool(False),
    NormChi2Cut2D = cms.double(20.0),
    NormChi2Cut3D = cms.double(10.0),
    Pruning = cms.bool(True),
    SeedBig = cms.double(0.0015),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    curvePenaltyThreshold = cms.double(0.85),
    dPhiFineMax = cms.double(0.025),
    dRPhiFineMax = cms.double(8.0),
    dXclusBoxMax = cms.double(4.0),
    dYclusBoxMax = cms.double(8.0),
    hitDropLimit4Hits = cms.double(0.6),
    hitDropLimit5Hits = cms.double(0.8),
    hitDropLimit6Hits = cms.double(0.3333),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    maxRatioResidualPrune = cms.double(3),
    maxRecHitsInCluster = cms.int32(24),
    minHitsPerSegment = cms.int32(3),
    onlyBestSegment = cms.bool(False),
    preClustering = cms.bool(True),
    preClusteringUseChaining = cms.bool(True),
    prePrun = cms.bool(True),
    prePrunLimit = cms.double(3.17),
    tanPhiMax = cms.double(0.5),
    tanThetaMax = cms.double(1.2),
    useShowering = cms.bool(False),
    yweightPenalty = cms.double(1.5),
    yweightPenaltyThreshold = cms.double(1.0)
)

process.SectCollParametersBlock = cms.PSet(
    SectCollParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        SCCSP1 = cms.int32(0),
        SCCSP2 = cms.int32(0),
        SCCSP3 = cms.int32(0),
        SCCSP4 = cms.int32(0),
        SCCSP5 = cms.int32(0),
        SCECF1 = cms.bool(False),
        SCECF2 = cms.bool(False),
        SCECF3 = cms.bool(False),
        SCECF4 = cms.bool(False)
    )
)

process.SiPixelGainCalibrationServiceParameters = cms.PSet(

)

process.SiStripClusterChargeCutLoose = cms.PSet(
    value = cms.double(1620.0)
)

process.SiStripClusterChargeCutNone = cms.PSet(
    value = cms.double(-1.0)
)

process.SiStripClusterChargeCutTight = cms.PSet(
    value = cms.double(1945.0)
)

process.SimCalorimetryAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimCalorimetryFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simEcalDigis_*_*', 
        'keep *_simEcalPreshowerDigis_*_*', 
        'keep *_simEcalTriggerPrimitiveDigis_*_*', 
        'keep *_simHcalDigis_*_*', 
        'keep ZDCDataFramesSorted_simHcalUnsuppressedDigis_*_*', 
        'drop ZDCDataFramesSorted_mix_simHcalUnsuppressedDigis*_*', 
        'keep *_simHcalTriggerPrimitiveDigis_*_*')
)

process.SimCalorimetryRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep EBSrFlagsSorted_simEcalDigis_*_*', 
        'keep EESrFlagsSorted_simEcalDigis_*_*')
)

process.SimCalorimetryRECO = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimG4CoreRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_g4SimHits_*_*', 
        'keep edmHepMCProduct_source_*_*')
)

process.SimG4CoreRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep edmHepMCProduct_source_*_*', 
        'keep SimTracks_g4SimHits_*_*', 
        'keep SimVertexs_g4SimHits_*_*')
)

process.SimGeneralAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*')
)

process.SimGeneralFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('drop *_trackingtruthprod_*_*', 
        'drop *_electrontruth_*_*', 
        'keep *_mix_MergedTrackTruth_*', 
        'keep CrossingFramePlaybackInfoNew_*_*_*')
)

process.SimGeneralRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep CrossingFramePlaybackInfoNew_*_*_*', 
        'keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*')
)

process.SimGeneralRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PileupSummaryInfos_*_*_*', 
        'keep int_*_bunchSpacing_*')
)

process.SimMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.SimMuonFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simMuonCSCDigis_*_*', 
        'keep *_simMuonDTDigis_*_*', 
        'keep *_simMuonRPCDigis_*_*')
)

process.SimMuonRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep CSCDetIdCSCComparatorDigiMuonDigiCollection_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*')
)

process.SimMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep StripDigiSimLinkedmDetSetVector_simMuonCSCDigis_*_*', 
        'keep DTLayerIdDTDigiSimLinkMuonDigiCollection_simMuonDTDigis_*_*', 
        'keep RPCDigiSimLinkedmDetSetVector_simMuonRPCDigis_*_*')
)

process.SimTrackerAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SimTrackerDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep PixelDigiSimLinkedmDetSetVector_simSiPixelDigis_*_*', 
        'keep StripDigiSimLinkedmDetSetVector_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*')
)

process.SimTrackerFEVTDEBUG = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_simSiPixelDigis_*_*', 
        'keep *_simSiStripDigis_*_*', 
        'drop *_mix_simSiPixelDigis*_*', 
        'drop *_mix_simSiStripDigis*_*', 
        'keep *_allTrackMCMatch_*_*', 
        'keep *_trackingParticleRecoTrackAsssociation_*_*', 
        'keep *_assoc2secStepTk_*_*', 
        'keep *_assoc2thStepTk_*_*', 
        'keep *_assoc2GsfTracks_*_*', 
        'keep *_assocOutInConversionTracks_*_*', 
        'keep *_assocInOutConversionTracks_*_*')
)

process.SimTrackerRAW = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.SimTrackerRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_allTrackMCMatch_*_*')
)

process.TC_ME1234 = cms.PSet(
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    chi2ndfProbMin = cms.double(0.0001),
    dPhiFineMax = cms.double(0.02),
    dPhiMax = cms.double(0.003),
    dRPhiFineMax = cms.double(6.0),
    dRPhiMax = cms.double(1.2),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True)
)

process.TC_ME1A = cms.PSet(
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    chi2ndfProbMin = cms.double(0.0001),
    dPhiFineMax = cms.double(0.013),
    dPhiMax = cms.double(0.00198),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(0.6),
    minLayersApart = cms.int32(2),
    verboseInfo = cms.untracked.bool(True)
)

process.TSPhiParametersBlock = cms.PSet(
    TSPhiParameters = cms.PSet(
        Debug = cms.untracked.bool(False),
        TSMCCE1 = cms.bool(True),
        TSMCCE2 = cms.bool(False),
        TSMCCEC = cms.bool(False),
        TSMCGS1 = cms.bool(True),
        TSMCGS2 = cms.bool(True),
        TSMGS1 = cms.int32(1),
        TSMGS2 = cms.int32(1),
        TSMHSP = cms.int32(1),
        TSMHTE1 = cms.bool(True),
        TSMHTE2 = cms.bool(False),
        TSMHTEC = cms.bool(False),
        TSMMSK1 = cms.int32(312),
        TSMMSK2 = cms.int32(312),
        TSMNOE1 = cms.bool(True),
        TSMNOE2 = cms.bool(False),
        TSMNOEC = cms.bool(False),
        TSMWORD = cms.int32(255),
        TSSCCE1 = cms.bool(True),
        TSSCCE2 = cms.bool(False),
        TSSCCEC = cms.bool(False),
        TSSCGS1 = cms.bool(True),
        TSSCGS2 = cms.bool(True),
        TSSGS1 = cms.int32(1),
        TSSGS2 = cms.int32(1),
        TSSHTE1 = cms.bool(True),
        TSSHTE2 = cms.bool(False),
        TSSHTEC = cms.bool(False),
        TSSMSK1 = cms.int32(312),
        TSSMSK2 = cms.int32(312),
        TSSNOE1 = cms.bool(True),
        TSSNOE2 = cms.bool(False),
        TSSNOEC = cms.bool(False),
        TSTREN0 = cms.bool(True),
        TSTREN1 = cms.bool(True),
        TSTREN10 = cms.bool(True),
        TSTREN11 = cms.bool(True),
        TSTREN12 = cms.bool(True),
        TSTREN13 = cms.bool(True),
        TSTREN14 = cms.bool(True),
        TSTREN15 = cms.bool(True),
        TSTREN16 = cms.bool(True),
        TSTREN17 = cms.bool(True),
        TSTREN18 = cms.bool(True),
        TSTREN19 = cms.bool(True),
        TSTREN2 = cms.bool(True),
        TSTREN20 = cms.bool(True),
        TSTREN21 = cms.bool(True),
        TSTREN22 = cms.bool(True),
        TSTREN23 = cms.bool(True),
        TSTREN3 = cms.bool(True),
        TSTREN4 = cms.bool(True),
        TSTREN5 = cms.bool(True),
        TSTREN6 = cms.bool(True),
        TSTREN7 = cms.bool(True),
        TSTREN8 = cms.bool(True),
        TSTREN9 = cms.bool(True)
    )
)

process.TSThetaParametersBlock = cms.PSet(
    TSThetaParameters = cms.PSet(
        Debug = cms.untracked.bool(False)
    )
)

process.TUParamsBlock = cms.PSet(
    Debug = cms.untracked.bool(False)
)

process.TcdsEventContent = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_tcdsDigis_*_*')
)

process.ThresholdPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ThresholdPtTrajectoryFilter'),
    minHitsThresholdPt = cms.int32(3),
    nSigmaThresholdPt = cms.double(5.0),
    thresholdPt = cms.double(10.0)
)

process.TimingFillerBlock = cms.PSet(
    TimingFillerParameters = cms.PSet(
        CSCTimingParameters = cms.PSet(
            CSCStripError = cms.double(7.0),
            CSCStripTimeOffset = cms.double(0.0),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(9.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseStripTime = cms.bool(True),
            UseWireTime = cms.bool(True),
            debug = cms.bool(False)
        ),
        DTTimingParameters = cms.PSet(
            DTTimeOffset = cms.double(0.0),
            DoWireCorr = cms.bool(True),
            DropTheta = cms.bool(True),
            HitError = cms.double(6.0),
            HitsMin = cms.int32(3),
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTradius = cms.double(0.01),
                DTsegments = cms.InputTag("dt4DSegments"),
                TightMatchCSC = cms.bool(True),
                TightMatchDT = cms.bool(False)
            ),
            PruneCut = cms.double(10000.0),
            RequireBothProjections = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            UseSegmentT0 = cms.bool(False),
            debug = cms.bool(False)
        ),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseDT = cms.bool(True),
        UseECAL = cms.bool(False)
    )
)

process.TrackAssociatorParameterBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        accountForTrajectoryChangeCalo = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        dRHcal = cms.double(9999.0),
        dRHcalPreselection = cms.double(0.2),
        dRMuon = cms.double(9999.0),
        dRMuonPreselection = cms.double(0.2),
        dRPreshowerPreselection = cms.double(0.2),
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        propagateAllDirections = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        truthMatch = cms.bool(False),
        useCalo = cms.bool(False),
        useEcal = cms.bool(True),
        useHO = cms.bool(True),
        useHcal = cms.bool(True),
        useMuon = cms.bool(True),
        usePreshower = cms.bool(False)
    )
)

process.TrackAssociatorParameters = cms.PSet(
    CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
    EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
    HORecHitCollectionLabel = cms.InputTag("horeco"),
    accountForTrajectoryChangeCalo = cms.bool(False),
    dREcal = cms.double(9999.0),
    dREcalPreselection = cms.double(0.05),
    dRHcal = cms.double(9999.0),
    dRHcalPreselection = cms.double(0.2),
    dRMuon = cms.double(9999.0),
    dRMuonPreselection = cms.double(0.2),
    muonMaxDistanceSigmaX = cms.double(0.0),
    muonMaxDistanceSigmaY = cms.double(0.0),
    muonMaxDistanceX = cms.double(5.0),
    muonMaxDistanceY = cms.double(5.0),
    propagateAllDirections = cms.bool(True),
    trajectoryUncertaintyTolerance = cms.double(-1.0),
    truthMatch = cms.bool(False),
    useCalo = cms.bool(False),
    useEcal = cms.bool(True),
    useHO = cms.bool(True),
    useHcal = cms.bool(True),
    useMuon = cms.bool(True),
    usePreshower = cms.bool(False)
)

process.TrackerKinkFinderParametersBlock = cms.PSet(
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        diagonalOnly = cms.bool(False),
        usePosition = cms.bool(True)
    )
)

process.TrackingToolsAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep recoTracks_GsfGlobalElectronTest_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*')
)

process.TrackingToolsFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep *_electronGsfTracks_*_*')
)

process.TrackingToolsRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_CkfElectronCandidates_*_*', 
        'keep *_GsfGlobalElectronTest_*_*', 
        'keep *_electronMergedSeeds_*_*', 
        'keep recoGsfTracks_electronGsfTracks_*_*', 
        'keep recoGsfTrackExtras_electronGsfTracks_*_*', 
        'keep recoTrackExtras_electronGsfTracks_*_*', 
        'keep TrackingRecHitsOwned_electronGsfTracks_*_*')
)

process.TracoParametersBlock = cms.PSet(
    TracoParameters = cms.PSet(
        BTIC = cms.int32(32),
        DD = cms.int32(18),
        Debug = cms.untracked.int32(0),
        FHISM = cms.int32(0),
        FHTMSK = cms.int32(0),
        FHTPRF = cms.int32(1),
        FLTMSK = cms.int32(1),
        FPRGCOMP = cms.int32(2),
        FSLMSK = cms.int32(0),
        IBTIOFF = cms.int32(0),
        KPRGCOM = cms.int32(255),
        KRAD = cms.int32(0),
        LTF = cms.int32(0),
        LTS = cms.int32(0),
        LVALIDIFH = cms.int32(0),
        REUSEI = cms.int32(1),
        REUSEO = cms.int32(1),
        SHISM = cms.int32(0),
        SHTMSK = cms.int32(0),
        SHTPRF = cms.int32(1),
        SLTMSK = cms.int32(1),
        SPRGCOMP = cms.int32(2),
        SSLMSK = cms.int32(0),
        TRGENB0 = cms.int32(1),
        TRGENB1 = cms.int32(1),
        TRGENB10 = cms.int32(1),
        TRGENB11 = cms.int32(1),
        TRGENB12 = cms.int32(1),
        TRGENB13 = cms.int32(1),
        TRGENB14 = cms.int32(1),
        TRGENB15 = cms.int32(1),
        TRGENB2 = cms.int32(1),
        TRGENB3 = cms.int32(1),
        TRGENB4 = cms.int32(1),
        TRGENB5 = cms.int32(1),
        TRGENB6 = cms.int32(1),
        TRGENB7 = cms.int32(1),
        TRGENB8 = cms.int32(1),
        TRGENB9 = cms.int32(1)
    )
)

process.TrajectoryBuilderForElectrons = cms.PSet(
    ComponentType = cms.string('CkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    estimator = cms.string('ElectronChi2'),
    intermediateCleaning = cms.bool(False),
    lostHitPenalty = cms.double(90.0),
    maxCand = cms.int32(5),
    propagatorAlong = cms.string('fwdGsfElectronPropagator'),
    propagatorOpposite = cms.string('bwdGsfElectronPropagator'),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('TrajectoryFilterForElectrons')
    ),
    updator = cms.string('KFUpdator')
)

process.TrajectoryFactoryBase = cms.PSet(
    MaterialEffects = cms.string('Combined'),
    PropagationDirection = cms.string('alongMomentum'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True)
)

process.TrajectoryFilterForElectrons = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxNumberOfHits = cms.int32(-1),
    minHitsMinPt = cms.int32(-1),
    minPt = cms.double(2.0),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0)
)

process.TrkIsoCuts = cms.PSet(
    IsCombinedIso = cms.untracked.bool(False),
    IsRelativeIso = cms.untracked.bool(False),
    IsoCut03 = cms.untracked.double(3.0),
    ptThreshold = cms.untracked.double(0.0)
)

process.TwoBodyDecayTrajectoryFactory = cms.PSet(
    Chi2Cut = cms.double(10000.0),
    ConstructTsosWithErrors = cms.bool(False),
    EstimatorParameters = cms.PSet(
        MaxIterationDifference = cms.untracked.double(0.01),
        MaxIterations = cms.untracked.int32(100),
        RobustificationConstant = cms.untracked.double(1.0),
        UseInvariantMass = cms.untracked.bool(True)
    ),
    MaterialEffects = cms.string('Combined'),
    NSigmaCut = cms.double(100.0),
    ParticleProperties = cms.PSet(
        PrimaryMass = cms.double(91.1876),
        PrimaryWidth = cms.double(2.4952),
        SecondaryMass = cms.double(0.105658)
    ),
    PropagationDirection = cms.string('alongMomentum'),
    TrajectoryFactoryName = cms.string('TwoBodyDecayTrajectoryFactory'),
    UseBeamSpot = cms.bool(False),
    UseHitWithoutDet = cms.bool(True),
    UseInvalidHits = cms.bool(False),
    UseProjectedHits = cms.bool(True),
    UseRefittedState = cms.bool(True)
)

process.ckfBaseInOutTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0)
)

process.ckfBaseTrajectoryFilterP5 = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(3),
    maxLostHits = cms.int32(4),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.5),
    minimumNumberOfHits = cms.int32(6),
    nSigmaMinPt = cms.double(5.0)
)

process.cleaningAlgoConfig = cms.PSet(
    cThreshold_barrel = cms.double(4),
    cThreshold_double = cms.double(10),
    cThreshold_endcap = cms.double(15),
    e4e1Threshold_barrel = cms.double(0.08),
    e4e1Threshold_endcap = cms.double(0.3),
    e4e1_a_barrel = cms.double(0.02),
    e4e1_a_endcap = cms.double(0.02),
    e4e1_b_barrel = cms.double(0.02),
    e4e1_b_endcap = cms.double(-0.0125),
    e6e2thresh = cms.double(0.04),
    ignoreOutOfTimeThresh = cms.double(1000000000.0),
    tightenCrack_e1_double = cms.double(2),
    tightenCrack_e1_single = cms.double(1),
    tightenCrack_e4e1_single = cms.double(2.5),
    tightenCrack_e6e2_double = cms.double(3)
)

process.cleaningParameters = cms.PSet(
    bypassAllDCSChecks = cms.bool(False),
    bypassAllPVChecks = cms.bool(False),
    gtLabel = cms.InputTag("gtDigis"),
    trigSelection = cms.PSet(
        andOr = cms.bool(False),
        andOrHlt = cms.bool(False),
        errorReplyHlt = cms.bool(False),
        hltDBKey = cms.string('jetmet_hltsel'),
        hltInputTag = cms.InputTag("TriggerResults","","HLT"),
        hltPaths = cms.vstring('')
    ),
    vertexCollection = cms.InputTag("goodOfflinePrimaryVerticesDQM")
)

process.configurationMetadata = cms.untracked.PSet(
    annotation = cms.untracked.string(' nevts:-1'),
    name = cms.untracked.string('Applications'),
    version = cms.untracked.string('$Revision: 1.19 $')
)

process.cscRecHitDParameters = cms.PSet(
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME41 = cms.double(0.03),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    XTasymmetry_ME12 = cms.double(0.015),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME1a = cms.double(0.023),
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME21 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME31 = cms.double(0.023),
    XTasymmetry_ME32 = cms.double(0.023),
    XTasymmetry_ME41 = cms.double(0.023)
)

process.detachedTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('detachedTripletStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.detachedTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryFilterBase')
    ))
)

process.detachedTripletStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.075),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.detachedTripletStepTrajectoryFilterShape = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.dphiScale = cms.PSet(
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0)
)

process.ecalClusterTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        BCE = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Basic cluster energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean energy of the basic clusters.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy map%(suffix)s'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEMapProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the mean energy of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy projection eta%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEMapProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the mean energy of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC energy projection phi%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        BCEtMapProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the mean Et of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC ET projection eta%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('transverse energy (GeV)')
            )
        ),
        BCEtMapProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the mean Et of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC ET projection phi%(suffix)s'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('transverse energy (GeV)')
            )
        ),
        BCNum = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the number of basic clusters per event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20)
            )
        ),
        BCOccupancy = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Basic cluster occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number map%(suffix)s')
        ),
        BCOccupancyProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the basic cluster occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number projection eta%(suffix)s')
        ),
        BCOccupancyProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the basic cluster occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC number projection phi%(suffix)s')
        ),
        BCSize = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the basic cluster size (number of crystals).'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50)
            )
        ),
        BCSizeMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean size (number of crystals) of the basic clusters.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size map%(suffix)s')
        ),
        BCSizeMapProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the mean size (number of crystals) of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size projection eta%(suffix)s')
        ),
        BCSizeMapProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the mean size (number of crystals) of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT BC size projection phi%(suffix)s')
        ),
        ExclusiveTriggers = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Counter for the trigger categories'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('None'),
            path = cms.untracked.string('EcalBarrel/EBClusterTaskExtras/EBCLTE exclusive triggers'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(5.0),
                labels = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(5),
                title = cms.untracked.string('triggers')
            )
        ),
        SCClusterVsSeed = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Relation between super cluster energy and its seed crystal energy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy vs seed crystal energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCE = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Super cluster energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCELow = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Energy distribution of the super clusters (low scale).'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC energy (low scale)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(10.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCNBCs = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the super cluster size (number of basic clusters)'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC size'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(15)
            )
        ),
        SCNcrystals = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the super cluster size (number of crystals).'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC size (crystal)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50)
            )
        ),
        SCNum = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the number of super clusters per event in EB/EE.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC number'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20)
            )
        ),
        SCOccupancyProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Supercluster eta.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/superClusters_%(subdetshortsig)s_eta')
        ),
        SCOccupancyProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Supercluster phi.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/superClusters_%(subdetshortsig)s_phi')
        ),
        SCR9 = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of E_seed / E_3x3 of the super clusters.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC R9'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1.2),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50)
            )
        ),
        SCSeedEnergy = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Energy distribution of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC seed crystal energy'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(150.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(50),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCSeedOccupancy = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC seed occupancy map%(suffix)s')
        ),
        SCSeedOccupancyHighE = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters with energy > 2.0 GeV.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed occupancy map%(suffix)s (high energy clusters) %(supercrystal)s binned')
        ),
        SCSeedOccupancyTrig = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH2F'),
            multi = cms.untracked.PSet(
                trig = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC')
            ),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed occupancy map%(suffix)s (%(trig)s triggered) %(supercrystal)s binned')
        ),
        SCSeedTimeMapTrigEx = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Mean timing of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TProfile2D'),
            multi = cms.untracked.PSet(
                trig = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC')
            ),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed crystal timing map%(suffix)s (%(trig)s exclusive triggered) %(supercrystal)s binned'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(25.0),
                low = cms.untracked.double(-25.0),
                title = cms.untracked.string('time (ns)')
            )
        ),
        SCSeedTimeTrigEx = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Timing distribution of the crystals that seeded super clusters.'),
            kind = cms.untracked.string('TH1F'),
            multi = cms.untracked.PSet(
                trig = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC')
            ),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC seed crystal timing (%(trig)s exclusive triggered)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(25.0),
                low = cms.untracked.double(-25.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('time (ns)')
            )
        ),
        SCSizeVsEnergy = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Mean SC size in crystals as a function of the SC energy.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTaskExtras/%(prefix)sCLTE SC size (crystal) vs energy (GeV)'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(10.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        SCSwissCross = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Swiss cross for SC maximum-energy crystal.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('EB'),
            path = cms.untracked.string('EcalBarrel/EBRecoSummary/superClusters_EB_E1oE4'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1.5),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        SingleCrystalCluster = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy map of the occurrence of super clusters with only one constituent'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sClusterTask/%(prefix)sCLT SC single crystal cluster seed occupancy map%(suffix)s')
        ),
        TrendBCSize = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the mean size of the basic clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s size of basic clusters')
        ),
        TrendNBC = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the number of basic clusters per event in EB/EE.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s number of basic clusters')
        ),
        TrendNSC = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the number of super clusters per event in EB/EE.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s number of super clusters')
        ),
        TrendSCSize = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the mean size (number of crystals) of the super clusters.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/ClusterTask %(prefix)s size of super clusters')
        ),
        Triggers = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Counter for the trigger categories'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('None'),
            path = cms.untracked.string('EcalBarrel/EBClusterTaskExtras/EBCLTE triggers'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(5.0),
                labels = cms.untracked.vstring('ECAL', 
                    'HCAL', 
                    'CSC', 
                    'DT', 
                    'RPC'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(5),
                title = cms.untracked.string('triggers')
            )
        )
    ),
    params = cms.untracked.PSet(
        L1GlobalTriggerReadoutRecordTag = cms.untracked.InputTag("gtDigis"),
        L1MuGMTReadoutCollectionTag = cms.untracked.InputTag("gtDigis"),
        doExtra = cms.untracked.bool(True),
        egTriggerAlgos = cms.untracked.vstring('L1_SingleEG2', 
            'L1_SingleEG5', 
            'L1_SingleEG8', 
            'L1_SingleEG10', 
            'L1_SingleEG12', 
            'L1_SingleEG15', 
            'L1_SingleEG20', 
            'L1_SingleEG25', 
            'L1_DoubleNoIsoEG_BTB_tight', 
            'L1_DoubleNoIsoEG_BTB_loose', 
            'L1_DoubleNoIsoEGTopBottom', 
            'L1_DoubleNoIsoEGTopBottomCen', 
            'L1_DoubleNoIsoEGTopBottomCen2', 
            'L1_DoubleNoIsoEGTopBottomCenVert'),
        energyThreshold = cms.untracked.double(2.0),
        swissCrossMaxThreshold = cms.untracked.double(3.0)
    )
)

process.ecalCommonParams = cms.untracked.PSet(
    onlineMode = cms.untracked.bool(False),
    willConvertToEDM = cms.untracked.bool(True)
)

process.ecalDQMCollectionTags = cms.untracked.PSet(
    BlockSizeErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    EBBasicCluster = cms.untracked.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    EBChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EBDigi = cms.untracked.InputTag("ecalDigis","ebDigis"),
    EBGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EBGainSwitchErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EBLaserLedUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
    EBRecHit = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEB"),
    EBReducedRecHit = cms.untracked.InputTag("reducedEcalRecHitsEB"),
    EBSrFlag = cms.untracked.InputTag("ecalDigis"),
    EBSuperCluster = cms.untracked.InputTag("correctedIslandBarrelSuperClusters"),
    EBTestPulseUncalibRecHit = cms.untracked.InputTag("ecalTestPulseUncalibRecHit","EcalUncalibRecHitsEB"),
    EBUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEB"),
    EEBasicCluster = cms.untracked.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    EEChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    EEDigi = cms.untracked.InputTag("ecalDigis","eeDigis"),
    EEGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    EEGainSwitchErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    EELaserLedUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
    EERecHit = cms.untracked.InputTag("ecalRecHit","EcalRecHitsEE"),
    EEReducedRecHit = cms.untracked.InputTag("reducedEcalRecHitsEE"),
    EESrFlag = cms.untracked.InputTag("ecalDigis"),
    EESuperCluster = cms.untracked.InputTag("correctedIslandEndcapSuperClusters"),
    EETestPulseUncalibRecHit = cms.untracked.InputTag("ecalTestPulseUncalibRecHit","EcalUncalibRecHitsEE"),
    EEUncalibRecHit = cms.untracked.InputTag("ecalMultiFitUncalibRecHit","EcalUncalibRecHitsEE"),
    EcalRawData = cms.untracked.InputTag("ecalDigis"),
    MEMBlockSizeErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemBlockSizeErrors"),
    MEMChIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemChIdErrors"),
    MEMGainErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemGainErrors"),
    MEMTowerIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityMemTtIdErrors"),
    PnDiodeDigi = cms.untracked.InputTag("ecalDigis"),
    Source = cms.untracked.InputTag("rawDataCollector"),
    TowerIdErrors = cms.untracked.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    TrigPrimDigi = cms.untracked.InputTag("ecalDigis","EcalTriggerPrimitives"),
    TrigPrimEmulDigi = cms.untracked.InputTag("valEcalTriggerPrimitiveDigis")
)

process.ecalDrivenElectronSeedsParameters = cms.PSet(
    DeltaPhi1High = cms.double(0.08),
    DeltaPhi1Low = cms.double(0.23),
    DeltaPhi2B = cms.double(0.008),
    DeltaPhi2F = cms.double(0.012),
    HighPtThreshold = cms.double(35.0),
    LowPtThreshold = cms.double(5.0),
    PhiMax2B = cms.double(0.002),
    PhiMax2F = cms.double(0.003),
    PhiMin2B = cms.double(-0.002),
    PhiMin2F = cms.double(-0.003),
    SCEtCut = cms.double(0.0),
    SizeWindowENeg = cms.double(0.675),
    applyHOverECut = cms.bool(True),
    applySigmaIEtaIEtaCut = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    deltaZ1WithVertex = cms.double(25.0),
    dynamicPhiRoad = cms.bool(True),
    ePhiMax1 = cms.double(0.075),
    ePhiMin1 = cms.double(-0.125),
    fromTrackerSeeds = cms.bool(True),
    hOverEConeSize = cms.double(0.15),
    hOverEHBMinE = cms.double(0.7),
    hOverEHFMinE = cms.double(0.8),
    hOverEPtMin = cms.double(0.0),
    hcalRecHits = cms.InputTag("hbhereco"),
    hcalTowers = cms.InputTag("towerMaker"),
    initialSeeds = cms.InputTag("newCombinedSeeds"),
    maxHBarrel = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    maxSigmaIEtaIEtaBarrel = cms.double(0.5),
    maxSigmaIEtaIEtaEndcaps = cms.double(0.5),
    measurementTrackerEvent = cms.InputTag("MeasurementTrackerEvent"),
    measurementTrackerName = cms.string(''),
    nSigmasDeltaZ1 = cms.double(5.0),
    pPhiMax1 = cms.double(0.125),
    pPhiMin1 = cms.double(-0.075),
    preFilteredSeeds = cms.bool(False),
    r2MaxF = cms.double(0.15),
    r2MinF = cms.double(-0.15),
    rMaxI = cms.double(0.2),
    rMinI = cms.double(-0.2),
    searchInTIDTEC = cms.bool(True),
    useRecoVertex = cms.bool(False),
    vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
    z2MaxB = cms.double(0.09),
    z2MinB = cms.double(-0.09)
)

process.ecalEnergyTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Hit = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Rec hit energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT energy spectrum %(sm)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        HitAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Rec hit energy distribution.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit spectrum%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        HitMap = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit energy.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit energy %(sm)s'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        ),
        HitMapAll = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit energy.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT%(suffix)s energy summary'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('energy (GeV)')
            )
        )
    ),
    params = cms.untracked.PSet(
        isPhysicsRun = cms.untracked.bool(True)
    )
)

process.ecalIntegrityTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        BlockSize = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/TTBlockSize/%(prefix)sIT TTBlockSize %(sm)s')
        ),
        ByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of integrity errors for each FED in this lumi section.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/%(prefix)sIT weighted integrity errors by lumi'),
            perLumi = cms.untracked.bool(True)
        ),
        ChId = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/ChId/%(prefix)sIT ChId %(sm)s')
        ),
        Gain = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/Gain/%(prefix)sIT gain %(sm)s')
        ),
        GainSwitch = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/GainSwitch/%(prefix)sIT gain switch %(sm)s')
        ),
        Total = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of integrity errors for each FED.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sIT integrity quality errors summary')
        ),
        TowerId = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sIntegrityTask/TTId/%(prefix)sIT TTId %(sm)s')
        ),
        TrendNErrors = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the number of integrity errors.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal'),
            path = cms.untracked.string('Ecal/Trends/IntegrityTask number of integrity errors')
        )
    )
)

process.ecalLocalRecoAOD = cms.PSet(
    outputCommands = cms.untracked.vstring()
)

process.ecalLocalRecoFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ecalMultiFitUncalibRecHit_*_*', 
        'keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*')
)

process.ecalLocalRecoRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_ecalPreshowerRecHit_*_*', 
        'keep *_ecalRecHit_*_*', 
        'keep *_ecalCompactTrigPrim_*_*', 
        'keep *_ecalTPSkim_*_*')
)

process.ecalOccupancyTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        DCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of entries recoreded by each FED'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT DCC entries')
        ),
        Digi = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('Digi occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy %(sm)s')
        ),
        Digi1D = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the number of digis per event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT number of digis in event'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(3000.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        DigiAll = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Digi occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s')
        ),
        DigiDCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('DCC digi occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sOT digi occupancy summary 1D')
        ),
        DigiProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of digi occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s projection eta')
        ),
        DigiProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of digi occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT digi occupancy%(suffix)s projection phi')
        ),
        RecHitAll = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('Rec hit occupancy.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s')
        ),
        RecHitProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the occupancy of all rec hits.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s projection eta')
        ),
        RecHitProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the rec hit occupancy.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit occupancy%(suffix)s projection phi')
        ),
        RecHitThr1D = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT number of filtered rec hits in event'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(500.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        RecHitThrAll = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Occupancy for rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s')
        ),
        RecHitThrProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s projection eta')
        ),
        RecHitThrProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the occupancy of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT rec hit thr occupancy%(suffix)s projection phi')
        ),
        TPDigiRCT = cms.untracked.PSet(
            btype = cms.untracked.string('RCT'),
            description = cms.untracked.string('Occupancy for TP digis with Et > 4.0 GeV in RCT coordinates'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal'),
            path = cms.untracked.string('EcalBarrel/EBOccupancyTask/TP digi thr occupancy in RCT coordinates')
        ),
        TPDigiThrAll = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Occupancy for TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s')
        ),
        TPDigiThrProjEta = cms.untracked.PSet(
            btype = cms.untracked.string('ProjEta'),
            description = cms.untracked.string('Projection of the occupancy of TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s projection eta')
        ),
        TPDigiThrProjPhi = cms.untracked.PSet(
            btype = cms.untracked.string('ProjPhi'),
            description = cms.untracked.string('Projection of the occupancy of TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sOccupancyTask/%(prefix)sOT TP digi thr occupancy%(suffix)s projection phi')
        ),
        TrendNDigi = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the per-event number of digis.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of digis')
        ),
        TrendNRecHitThr = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the per-event number of rec hits with GOOD reconstruction flag and E > 0.5 GeV.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of filtered recHits')
        ),
        TrendNTPDigi = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            description = cms.untracked.string('Trend of the per-event number of TP digis with Et > 4.0 GeV.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('Ecal/Trends/OccupancyTask %(prefix)s number of filtered TP digis')
        )
    ),
    params = cms.untracked.PSet(
        recHitThreshold = cms.untracked.double(0.5),
        tpThreshold = cms.untracked.double(4.0)
    )
)

process.ecalPresampleTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Pedestal = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('2D distribution of mean presample value.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sPedestalOnlineTask/Gain12/%(prefix)sPOT pedestal %(sm)s G12')
        )
    ),
    params = cms.untracked.PSet(
        nSamples = cms.untracked.int32(3),
        pulseMaxPosition = cms.untracked.int32(5)
    )
)

process.ecalRawDataTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        BXDCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between bunch crossing numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing DCC errors')
        ),
        BXDCCDiff = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between bunch crossing numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing DCC-GT'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-100.0),
                nbins = cms.untracked.int32(200)
            )
        ),
        BXFE = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing FE errors'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(68.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(68),
                title = cms.untracked.string('iFE')
            )
        ),
        BXFEDiff = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing FE-DCC'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-100.0),
                nbins = cms.untracked.int32(200)
            )
        ),
        BXFEInvalid = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing invalid value'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(69.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(69),
                title = cms.untracked.string('iFE')
            )
        ),
        BXSRP = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch crossing value mismatches between DCC and SRP.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing SRP errors')
        ),
        BXTCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of bunch corssing value mismatches between DCC and TCC.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT bunch crossing TCC errors')
        ),
        CRC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of CRC errors.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT CRC errors')
        ),
        DesyncByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of synchronization errors (L1A & BX mismatches) between DCC and FE in this lumi section.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT FE synchronization errors by lumi'),
            perLumi = cms.untracked.bool(True)
        ),
        DesyncTotal = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of synchronization errors (L1A & BX mismatches) between DCC and FE.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT total FE synchronization errors')
        ),
        EventTypeCalib = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing == 3490. This plot is filled using data from the physics data stream during physics runs. It is normal to have very few entries in these cases.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type calibration BX'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(24.5),
                labels = cms.untracked.vstring('UNKNOWN', 
                    'COSMIC', 
                    'BEAMH4', 
                    'BEAMH2', 
                    'MTCC', 
                    'LASER_STD', 
                    'LASER_POWER_SCAN', 
                    'LASER_DELAY_SCAN', 
                    'TESTPULSE_SCAN_MEM', 
                    'TESTPULSE_MGPA', 
                    'PEDESTAL_STD', 
                    'PEDESTAL_OFFSET_SCAN', 
                    'PEDESTAL_25NS_SCAN', 
                    'LED_STD', 
                    'PHYSICS_GLOBAL', 
                    'COSMICS_GLOBAL', 
                    'HALO_GLOBAL', 
                    'LASER_GAP', 
                    'TESTPULSE_GAP', 
                    'PEDESTAL_GAP', 
                    'LED_GAP', 
                    'PHYSICS_LOCAL', 
                    'COSMICS_LOCAL', 
                    'HALO_LOCAL', 
                    'CALIB_LOCAL'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(25)
            )
        ),
        EventTypePostCalib = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing > 3490.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type post calibration BX'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(24.5),
                labels = cms.untracked.vstring('UNKNOWN', 
                    'COSMIC', 
                    'BEAMH4', 
                    'BEAMH2', 
                    'MTCC', 
                    'LASER_STD', 
                    'LASER_POWER_SCAN', 
                    'LASER_DELAY_SCAN', 
                    'TESTPULSE_SCAN_MEM', 
                    'TESTPULSE_MGPA', 
                    'PEDESTAL_STD', 
                    'PEDESTAL_OFFSET_SCAN', 
                    'PEDESTAL_25NS_SCAN', 
                    'LED_STD', 
                    'PHYSICS_GLOBAL', 
                    'COSMICS_GLOBAL', 
                    'HALO_GLOBAL', 
                    'LASER_GAP', 
                    'TESTPULSE_GAP', 
                    'PEDESTAL_GAP', 
                    'LED_GAP', 
                    'PHYSICS_LOCAL', 
                    'COSMICS_LOCAL', 
                    'HALO_LOCAL', 
                    'CALIB_LOCAL'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(25)
            )
        ),
        EventTypePreCalib = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Event type recorded in the DCC for events in bunch crossing < 3490'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT event type pre calibration BX'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(24.5),
                labels = cms.untracked.vstring('UNKNOWN', 
                    'COSMIC', 
                    'BEAMH4', 
                    'BEAMH2', 
                    'MTCC', 
                    'LASER_STD', 
                    'LASER_POWER_SCAN', 
                    'LASER_DELAY_SCAN', 
                    'TESTPULSE_SCAN_MEM', 
                    'TESTPULSE_MGPA', 
                    'PEDESTAL_STD', 
                    'PEDESTAL_OFFSET_SCAN', 
                    'PEDESTAL_25NS_SCAN', 
                    'LED_STD', 
                    'PHYSICS_GLOBAL', 
                    'COSMICS_GLOBAL', 
                    'HALO_GLOBAL', 
                    'LASER_GAP', 
                    'TESTPULSE_GAP', 
                    'PEDESTAL_GAP', 
                    'LED_GAP', 
                    'PHYSICS_LOCAL', 
                    'COSMICS_LOCAL', 
                    'HALO_LOCAL', 
                    'CALIB_LOCAL'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(25)
            )
        ),
        FEByLumi = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Total number of front-ends in error status in this lumi section.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT weighted frontend errors by lumi'),
            perLumi = cms.untracked.bool(True)
        ),
        FEStatus = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('FE status counter.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sStatusFlagsTask/FEStatus/%(prefix)sSFT front-end status bits %(sm)s'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                labels = cms.untracked.vstring('ENABLED', 
                    'DISABLED', 
                    'TIMEOUT', 
                    'HEADERERROR', 
                    'CHANNELID', 
                    'LINKERROR', 
                    'BLOCKSIZE', 
                    'SUPPRESSED', 
                    'FIFOFULL', 
                    'L1ADESYNC', 
                    'BXDESYNC', 
                    'L1ABXDESYNC', 
                    'FIFOFULLL1ADESYNC', 
                    'HPARITY', 
                    'VPARITY', 
                    'FORCEDZS'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        L1ADCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between L1A recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A DCC errors')
        ),
        L1AFE = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of L1A value mismatches between DCC and FE.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A FE errors'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(68.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(68),
                title = cms.untracked.string('iFE')
            )
        ),
        L1ASRP = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of L1A value mismatches between DCC and SRP.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A SRP errors')
        ),
        L1ATCC = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of L1A value mismatches between DCC and TCC.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT L1A TCC errors')
        ),
        Orbit = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between LHC orbit numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT orbit number errors')
        ),
        OrbitDiff = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between LHC orbit numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT orbit number DCC-GT'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-100.0),
                nbins = cms.untracked.int32(200)
            )
        ),
        RunNumber = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between run numbers recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT run number errors')
        ),
        TrendNSyncErrors = cms.untracked.PSet(
            btype = cms.untracked.string('Trend'),
            cumulative = cms.untracked.bool(True),
            description = cms.untracked.string('Accumulated trend of the number of synchronization errors (L1A & BX mismatches) between DCC and FE in this run.'),
            kind = cms.untracked.string('TH1F'),
            online = cms.untracked.bool(True),
            otype = cms.untracked.string('Ecal'),
            path = cms.untracked.string('Ecal/Trends/RawDataTask accumulated number of sync errors')
        ),
        TriggerType = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Number of discrepancies between trigger type recorded in the DCC and that in CMS Event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRawDataTask/%(prefix)sRDT trigger type errors')
        )
    )
)

process.ecalRecoSummaryTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Chi2 = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Chi2 of the pulse reconstruction.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_Chi2'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        EnergyMax = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Maximum energy of the rechit.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_energyMax'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(100.0),
                low = cms.untracked.double(-10.0),
                nbins = cms.untracked.int32(110)
            )
        ),
        RecoFlagAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Reconstruction flags from all rechits.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshort)s_recoFlag'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        RecoFlagBasicCluster = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Reconstruction flags from rechits in basic clusters.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/basicClusters_recHits_%(subdetshort)s_recoFlag'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        RecoFlagReduced = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Reconstruction flags from reduced rechits.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/redRecHits_%(subdetshort)s_recoFlag'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(15.5),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(16)
            )
        ),
        SwissCross = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Swiss cross.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('EB'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshort)s_E1oE4'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(1.5),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100)
            )
        ),
        Time = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Rechit time.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sRecoSummary/recHits_%(subdetshortsig)s_time'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(50.0),
                low = cms.untracked.double(-50.0),
                nbins = cms.untracked.int32(100)
            )
        )
    ),
    params = cms.untracked.PSet(
        rechitThresholdEB = cms.untracked.double(0.8),
        rechitThresholdEE = cms.untracked.double(1.2)
    )
)

process.ecalSelectiveReadoutTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        DCCSize = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Distribution of the per-DCC data size.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT event size vs DCC'),
            yaxis = cms.untracked.PSet(
                edges = cms.untracked.vdouble(0.0, 0.0608, 0.1216, 0.1824, 0.2432, 
                    0.304, 0.3648, 0.4256, 0.4864, 0.5472, 
                    0.608, 0.608, 1.216, 1.824, 2.432, 
                    3.04, 3.648, 4.256, 4.864, 5.472, 
                    6.08, 6.688, 7.296, 7.904, 8.512, 
                    9.12, 9.728, 10.336, 10.944, 11.552, 
                    12.16, 12.768, 13.376, 13.984, 14.592, 
                    15.2, 15.808, 16.416, 17.024, 17.632, 
                    18.24, 18.848, 19.456, 20.064, 20.672, 
                    21.28, 21.888, 22.496, 23.104, 23.712, 
                    24.32, 24.928, 25.536, 26.144, 26.752, 
                    27.36, 27.968, 28.576, 29.184, 29.792, 
                    30.4, 31.008, 31.616, 32.224, 32.832, 
                    33.44, 34.048, 34.656, 35.264, 35.872, 
                    36.48, 37.088, 37.696, 38.304, 38.912, 
                    39.52, 40.128, 40.736, 41.344),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        DCCSizeProf = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Mean and spread of the per-DCC data size.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal2P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT DCC event size'),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('event size (kB)')
            )
        ),
        EventSize = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of per-DCC data size.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT event size%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(3.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        FRDropped = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Number of FR flagged but dropped towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT FR Flagged Dropped Readout Number%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20),
                title = cms.untracked.string('number of towers')
            )
        ),
        FRDroppedMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Number of FR flagged but dropped towers.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT FR flagged dropped counter%(suffix)s')
        ),
        FlagCounterMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy of any SR flag.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower flag counter%(suffix)s')
        ),
        FullReadout = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Number of FR flags per event.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT full readout SR Flags Number%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(200.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('number of towers')
            )
        ),
        FullReadoutMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy with FR flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower full readout counter%(suffix)s')
        ),
        HighIntOutput = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Output of the ZS filter for high interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT high interest ZS filter output%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(60.0),
                low = cms.untracked.double(-60.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('ADC counts*4')
            )
        ),
        HighIntPayload = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Total data size from all high interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT high interest payload%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(3.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        LowIntOutput = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Output of the ZS filter for low interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT low interest ZS filter output%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(60.0),
                low = cms.untracked.double(-60.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('ADC counts*4')
            )
        ),
        LowIntPayload = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Total data size from all low interest towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT low interest payload%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(3.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('event size (kB)')
            )
        ),
        RUForcedMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy of FORCED flag.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT RU with forced SR counter%(suffix)s')
        ),
        TowerSize = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean data size from each readout unit.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT tower event size%(suffix)s'),
            zaxis = cms.untracked.PSet(
                title = cms.untracked.string('size (bytes)')
            )
        ),
        ZS1Map = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy with ZS1 flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower ZS1 counter%(suffix)s')
        ),
        ZSFullReadout = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Number of ZS flagged but fully read out towers.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT ZS Flagged Fully Readout Number%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(20.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(20),
                title = cms.untracked.string('number of towers')
            )
        ),
        ZSFullReadoutMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Number of ZS flagged but fully read out towers.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT ZS flagged full readout counter%(suffix)s')
        ),
        ZSMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('Tower occupancy of ZS1 and ZS2 flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower ZS1+ZS2 counter%(suffix)s')
        )
    ),
    params = cms.untracked.PSet(
        DCCZS1stSample = cms.untracked.int32(2),
        ZSFIRWeights = cms.untracked.vdouble(-0.374, -0.374, -0.3629, 0.2721, 0.4681, 
            0.3707),
        useCondDb = cms.untracked.bool(False)
    )
)

process.ecalTimingTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        Time1D = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing 1D %(sm)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(12.5),
                low = cms.untracked.double(-12.5),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing 1D summary%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(12.5),
                low = cms.untracked.double(-12.5),
                nbins = cms.untracked.int32(100),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAllMap = cms.untracked.PSet(
            btype = cms.untracked.string('SuperCrystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 7.0 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing map%(suffix)s'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(7.0),
                low = cms.untracked.double(-7.0),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAmp = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Correlation between hit timing and energy. Only hits with GOOD or OUT_OF_TIME reconstruction flags are used.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing vs amplitude %(sm)s'),
            xaxis = cms.untracked.PSet(
                edges = cms.untracked.vdouble(0.316227766017, 0.354813389234, 0.398107170553, 0.446683592151, 0.501187233627, 
                    0.56234132519, 0.63095734448, 0.707945784384, 0.794328234724, 0.891250938134, 
                    1.0, 1.1220184543, 1.25892541179, 1.41253754462, 1.58489319246, 
                    1.77827941004, 1.99526231497, 2.23872113857, 2.51188643151, 2.81838293126, 
                    3.16227766017, 3.54813389234, 3.98107170553, 4.46683592151, 5.01187233627, 
                    5.6234132519, 6.3095734448, 7.07945784384, 7.94328234724, 8.91250938134, 
                    10.0, 11.220184543, 12.5892541179, 14.1253754462, 15.8489319246, 
                    17.7827941004, 19.9526231497, 22.3872113857, 25.1188643151, 28.1838293126, 
                    31.6227766017, 35.4813389234, 39.8107170553, 44.6683592151, 50.1187233627, 
                    56.234132519, 63.095734448, 70.7945784384, 79.4328234724, 89.1250938134),
                title = cms.untracked.string('energy (GeV)')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(50.0),
                low = cms.untracked.double(-50.0),
                nbins = cms.untracked.int32(200),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeAmpAll = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Correlation between hit timing and energy. Only hits with GOOD or OUT_OF_TIME reconstruction flags are used.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing vs amplitude summary%(suffix)s'),
            xaxis = cms.untracked.PSet(
                edges = cms.untracked.vdouble(0.316227766017, 0.354813389234, 0.398107170553, 0.446683592151, 0.501187233627, 
                    0.56234132519, 0.63095734448, 0.707945784384, 0.794328234724, 0.891250938134, 
                    1.0, 1.1220184543, 1.25892541179, 1.41253754462, 1.58489319246, 
                    1.77827941004, 1.99526231497, 2.23872113857, 2.51188643151, 2.81838293126, 
                    3.16227766017, 3.54813389234, 3.98107170553, 4.46683592151, 5.01187233627, 
                    5.6234132519, 6.3095734448, 7.07945784384, 7.94328234724, 8.91250938134, 
                    10.0, 11.220184543, 12.5892541179, 14.1253754462, 15.8489319246, 
                    17.7827941004, 19.9526231497, 22.3872113857, 25.1188643151, 28.1838293126, 
                    31.6227766017, 35.4813389234, 39.8107170553, 44.6683592151, 50.1187233627, 
                    56.234132519, 63.095734448, 70.7945784384, 79.4328234724, 89.1250938134),
                title = cms.untracked.string('energy (GeV)')
            ),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(50.0),
                low = cms.untracked.double(-50.0),
                nbins = cms.untracked.int32(200),
                title = cms.untracked.string('time (ns)')
            )
        ),
        TimeMap = cms.untracked.PSet(
            btype = cms.untracked.string('Crystal'),
            description = cms.untracked.string('2D distribution of the mean rec hit timing. Only hits with GOOD or OUT_OF_TIME reconstruction flags and energy above threshold are used. Hits with |t| > 12.5 ns are discarded. The energy thresholds are 1.000000 and 3.000000 for EB and EE respectively.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTimingTask/%(prefix)sTMT timing %(sm)s'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(12.5),
                low = cms.untracked.double(-12.5),
                title = cms.untracked.string('time (ns)')
            )
        )
    ),
    params = cms.untracked.PSet(
        energyThresholdEB = cms.untracked.double(1.0),
        energyThresholdEE = cms.untracked.double(3.0)
    )
)

process.ecalTrigPrimTask = cms.untracked.PSet(
    MEs = cms.untracked.PSet(
        EmulMaxIndex = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the index of emulated TP with the highest Et value.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT max TP matching index%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(5.5),
                labels = cms.untracked.vstring('no maximum', 
                    '0', 
                    '1', 
                    '2', 
                    '3', 
                    '4'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(6),
                title = cms.untracked.string('TP index')
            )
        ),
        EtEmulError = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulError %(sm)s')
        ),
        EtMaxEmul = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the maximum Et value within one emulated TP'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/Emulated/%(prefix)sTTT Et spectrum Emulated Digis max%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtReal = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Distribution of the trigger primitive Et.'),
            kind = cms.untracked.string('TH1F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et spectrum Real Digis%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtRealMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('2D distribution of the trigger primitive Et.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et map Real Digis %(sm)s'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtSummary = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('2D distribution of the trigger primitive Et.'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSummaryClient/%(prefix)sTTT%(suffix)s Et trigger tower summary'),
            zaxis = cms.untracked.PSet(
                high = cms.untracked.double(256.0),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(128),
                title = cms.untracked.string('TP Et')
            )
        ),
        EtVsBx = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('Mean TP Et in different bunch crossing intervals. This plot is filled by data from physics data stream. It is normal to have very little entries in BX >= 3490.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT Et vs bx Real Digis%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(16.0),
                labels = cms.untracked.vstring('1', 
                    '271', 
                    '541', 
                    '892', 
                    '1162', 
                    '1432', 
                    '1783', 
                    '2053', 
                    '2323', 
                    '2674', 
                    '2944', 
                    '3214', 
                    '3446', 
                    '3490', 
                    '3491', 
                    '3565'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(16),
                title = cms.untracked.string('bunch crossing')
            ),
            yaxis = cms.untracked.PSet(
                title = cms.untracked.string('TP Et')
            )
        ),
        FGEmulError = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulFineGrainVetoError %(sm)s')
        ),
        HighIntMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Tower occupancy of high interest flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower high interest counter%(suffix)s')
        ),
        LowIntMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Tower occupancy of low interest flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower low interest counter%(suffix)s')
        ),
        MatchedIndex = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Counter for TP "timing" (= index withing the emulated TP whose Et matched that of the real TP)'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT EmulMatch %(sm)s'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(6.0),
                labels = cms.untracked.vstring('no emul', 
                    '0', 
                    '1', 
                    '2', 
                    '3', 
                    '4'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(6),
                title = cms.untracked.string('TP index')
            )
        ),
        MedIntMap = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string('Tower occupancy of medium interest flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/Counters/%(prefix)sSRT tower med interest counter%(suffix)s')
        ),
        OccVsBx = cms.untracked.PSet(
            btype = cms.untracked.string('User'),
            description = cms.untracked.string('TP occupancy in different bunch crossing intervals. This plot is filled by data from physics data stream. It is normal to have very little entries in BX >= 3490.'),
            kind = cms.untracked.string('TProfile'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/%(prefix)sTTT TP occupancy vs bx Real Digis%(suffix)s'),
            xaxis = cms.untracked.PSet(
                high = cms.untracked.double(16.0),
                labels = cms.untracked.vstring('1', 
                    '271', 
                    '541', 
                    '892', 
                    '1162', 
                    '1432', 
                    '1783', 
                    '2053', 
                    '2323', 
                    '2674', 
                    '2944', 
                    '3214', 
                    '3446', 
                    '3490', 
                    '3491', 
                    '3565'),
                low = cms.untracked.double(0.0),
                nbins = cms.untracked.int32(16),
                title = cms.untracked.string('bunch crossing')
            )
        ),
        TTFMismatch = cms.untracked.PSet(
            btype = cms.untracked.string('TriggerTower'),
            description = cms.untracked.string(''),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT flag mismatch%(suffix)s')
        ),
        TTFlags = cms.untracked.PSet(
            btype = cms.untracked.string('DCC'),
            description = cms.untracked.string('Distribution of the trigger tower flags.'),
            kind = cms.untracked.string('TH2F'),
            otype = cms.untracked.string('Ecal3P'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sSelectiveReadoutTask/%(prefix)sSRT TT Flags%(suffix)s'),
            yaxis = cms.untracked.PSet(
                high = cms.untracked.double(7.5),
                labels = cms.untracked.vstring('0', 
                    '1', 
                    '2', 
                    '3', 
                    '4', 
                    '5', 
                    '6', 
                    '7'),
                low = cms.untracked.double(-0.5),
                nbins = cms.untracked.int32(8),
                title = cms.untracked.string('TT flag')
            )
        ),
        TTMaskMap = cms.untracked.PSet(
            btype = cms.untracked.string('PseudoStrip'),
            description = cms.untracked.string('Trigger tower and pseudo-strip masking status: a TT or strip is red if it is masked'),
            kind = cms.untracked.string('TProfile2D'),
            otype = cms.untracked.string('SM'),
            path = cms.untracked.string('%(subdet)s/%(prefix)sTriggerTowerTask/TTStatus/%(prefix)sTTT TT Masking Status%(sm)s')
        )
    ),
    params = cms.untracked.PSet(
        runOnEmul = cms.untracked.bool(True)
    )
)

process.ecal_digi_parameters = cms.PSet(
    EBCorrNoiseMatrixG01 = cms.vdouble(1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
        0.53082, 0.51916, 0.51097, 0.50732, 0.50409),
    EBCorrNoiseMatrixG06 = cms.vdouble(1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
        0.41366, 0.39699, 0.38478, 0.37847, 0.37055),
    EBCorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
        0.35931, 0.33924, 0.32439, 0.31581, 0.30481),
    EBdigiCollection = cms.string(''),
    EECorrNoiseMatrixG01 = cms.vdouble(1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
        0.49147, 0.47813, 0.47007, 0.46621, 0.46265),
    EECorrNoiseMatrixG06 = cms.vdouble(1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
        0.20287, 0.17734, 0.16256, 0.15618, 0.14443),
    EECorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
        0.14786, 0.11772, 0.10165, 0.09465, 0.08098),
    EEdigiCollection = cms.string(''),
    ESdigiCollection = cms.string(''),
    EcalPreMixStage1 = cms.bool(False),
    EcalPreMixStage2 = cms.bool(False),
    UseLCcorrection = cms.untracked.bool(True)
)

process.ecal_pulse_shape_covariances = cms.PSet(
    EBPulseShapeCovariance = cms.vdouble(3.001e-06, 1.233e-05, 0.0, -4.416e-06, -4.571e-06, 
        -3.614e-06, -2.636e-06, -1.286e-06, -8.41e-07, -5.296e-07, 
        0.0, 0.0, 1.233e-05, 6.154e-05, 0.0, 
        -2.2e-05, -2.309e-05, -1.838e-05, -1.373e-05, -7.334e-06, 
        -5.088e-06, -3.745e-06, -2.428e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -4.416e-06, -2.2e-05, 0.0, 8.319e-06, 
        8.545e-06, 6.792e-06, 5.059e-06, 2.678e-06, 1.816e-06, 
        1.223e-06, 8.245e-07, 5.589e-07, -4.571e-06, -2.309e-05, 
        0.0, 8.545e-06, 9.182e-06, 7.219e-06, 5.388e-06, 
        2.853e-06, 1.944e-06, 1.324e-06, 9.083e-07, 6.335e-07, 
        -3.614e-06, -1.838e-05, 0.0, 6.792e-06, 7.219e-06, 
        6.016e-06, 4.437e-06, 2.385e-06, 1.636e-06, 1.118e-06, 
        7.754e-07, 5.556e-07, -2.636e-06, -1.373e-05, 0.0, 
        5.059e-06, 5.388e-06, 4.437e-06, 3.602e-06, 1.917e-06, 
        1.322e-06, 9.079e-07, 6.529e-07, 4.752e-07, -1.286e-06, 
        -7.334e-06, 0.0, 2.678e-06, 2.853e-06, 2.385e-06, 
        1.917e-06, 1.375e-06, 9.1e-07, 6.455e-07, 4.693e-07, 
        3.657e-07, -8.41e-07, -5.088e-06, 0.0, 1.816e-06, 
        1.944e-06, 1.636e-06, 1.322e-06, 9.1e-07, 9.115e-07, 
        6.062e-07, 4.436e-07, 3.422e-07, -5.296e-07, -3.745e-06, 
        0.0, 1.223e-06, 1.324e-06, 1.118e-06, 9.079e-07, 
        6.455e-07, 6.062e-07, 7.217e-07, 4.862e-07, 3.768e-07, 
        0.0, -2.428e-06, 0.0, 8.245e-07, 9.083e-07, 
        7.754e-07, 6.529e-07, 4.693e-07, 4.436e-07, 4.862e-07, 
        6.509e-07, 4.418e-07, 0.0, 0.0, 0.0, 
        5.589e-07, 6.335e-07, 5.556e-07, 4.752e-07, 3.657e-07, 
        3.422e-07, 3.768e-07, 4.418e-07, 6.142e-07),
    EEPulseShapeCovariance = cms.vdouble(3.941e-05, 3.333e-05, 0.0, -1.449e-05, -1.661e-05, 
        -1.424e-05, -1.183e-05, -6.842e-06, -4.915e-06, -3.411e-06, 
        0.0, 0.0, 3.333e-05, 2.862e-05, 0.0, 
        -1.244e-05, -1.431e-05, -1.233e-05, -1.032e-05, -5.883e-06, 
        -4.154e-06, -2.902e-06, -2.128e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -1.449e-05, -1.244e-05, 0.0, 5.84e-06, 
        6.649e-06, 5.72e-06, 4.812e-06, 2.708e-06, 1.869e-06, 
        1.33e-06, 9.186e-07, 6.446e-07, -1.661e-05, -1.431e-05, 
        0.0, 6.649e-06, 7.966e-06, 6.898e-06, 5.794e-06, 
        3.157e-06, 2.184e-06, 1.567e-06, 1.084e-06, 7.575e-07, 
        -1.424e-05, -1.233e-05, 0.0, 5.72e-06, 6.898e-06, 
        6.341e-06, 5.347e-06, 2.859e-06, 1.991e-06, 1.431e-06, 
        9.839e-07, 6.886e-07, -1.183e-05, -1.032e-05, 0.0, 
        4.812e-06, 5.794e-06, 5.347e-06, 4.854e-06, 2.628e-06, 
        1.809e-06, 1.289e-06, 9.02e-07, 6.146e-07, -6.842e-06, 
        -5.883e-06, 0.0, 2.708e-06, 3.157e-06, 2.859e-06, 
        2.628e-06, 1.863e-06, 1.296e-06, 8.882e-07, 6.108e-07, 
        4.283e-07, -4.915e-06, -4.154e-06, 0.0, 1.869e-06, 
        2.184e-06, 1.991e-06, 1.809e-06, 1.296e-06, 1.217e-06, 
        8.669e-07, 5.751e-07, 3.882e-07, -3.411e-06, -2.902e-06, 
        0.0, 1.33e-06, 1.567e-06, 1.431e-06, 1.289e-06, 
        8.882e-07, 8.669e-07, 9.522e-07, 6.717e-07, 4.293e-07, 
        0.0, -2.128e-06, 0.0, 9.186e-07, 1.084e-06, 
        9.839e-07, 9.02e-07, 6.108e-07, 5.751e-07, 6.717e-07, 
        7.911e-07, 5.493e-07, 0.0, 0.0, 0.0, 
        6.446e-07, 7.575e-07, 6.886e-07, 6.146e-07, 4.283e-07, 
        3.882e-07, 4.293e-07, 5.493e-07, 7.027e-07)
)

process.ecal_pulse_shape_parameters = cms.PSet(
    EBCorrNoiseMatrixG01 = cms.vdouble(1.0, 0.73354, 0.64442, 0.58851, 0.55425, 
        0.53082, 0.51916, 0.51097, 0.50732, 0.50409),
    EBCorrNoiseMatrixG06 = cms.vdouble(1.0, 0.70946, 0.58021, 0.49846, 0.45006, 
        0.41366, 0.39699, 0.38478, 0.37847, 0.37055),
    EBCorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71073, 0.55721, 0.46089, 0.40449, 
        0.35931, 0.33924, 0.32439, 0.31581, 0.30481),
    EBPulseShapeCovariance = cms.vdouble(3.001e-06, 1.233e-05, 0.0, -4.416e-06, -4.571e-06, 
        -3.614e-06, -2.636e-06, -1.286e-06, -8.41e-07, -5.296e-07, 
        0.0, 0.0, 1.233e-05, 6.154e-05, 0.0, 
        -2.2e-05, -2.309e-05, -1.838e-05, -1.373e-05, -7.334e-06, 
        -5.088e-06, -3.745e-06, -2.428e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -4.416e-06, -2.2e-05, 0.0, 8.319e-06, 
        8.545e-06, 6.792e-06, 5.059e-06, 2.678e-06, 1.816e-06, 
        1.223e-06, 8.245e-07, 5.589e-07, -4.571e-06, -2.309e-05, 
        0.0, 8.545e-06, 9.182e-06, 7.219e-06, 5.388e-06, 
        2.853e-06, 1.944e-06, 1.324e-06, 9.083e-07, 6.335e-07, 
        -3.614e-06, -1.838e-05, 0.0, 6.792e-06, 7.219e-06, 
        6.016e-06, 4.437e-06, 2.385e-06, 1.636e-06, 1.118e-06, 
        7.754e-07, 5.556e-07, -2.636e-06, -1.373e-05, 0.0, 
        5.059e-06, 5.388e-06, 4.437e-06, 3.602e-06, 1.917e-06, 
        1.322e-06, 9.079e-07, 6.529e-07, 4.752e-07, -1.286e-06, 
        -7.334e-06, 0.0, 2.678e-06, 2.853e-06, 2.385e-06, 
        1.917e-06, 1.375e-06, 9.1e-07, 6.455e-07, 4.693e-07, 
        3.657e-07, -8.41e-07, -5.088e-06, 0.0, 1.816e-06, 
        1.944e-06, 1.636e-06, 1.322e-06, 9.1e-07, 9.115e-07, 
        6.062e-07, 4.436e-07, 3.422e-07, -5.296e-07, -3.745e-06, 
        0.0, 1.223e-06, 1.324e-06, 1.118e-06, 9.079e-07, 
        6.455e-07, 6.062e-07, 7.217e-07, 4.862e-07, 3.768e-07, 
        0.0, -2.428e-06, 0.0, 8.245e-07, 9.083e-07, 
        7.754e-07, 6.529e-07, 4.693e-07, 4.436e-07, 4.862e-07, 
        6.509e-07, 4.418e-07, 0.0, 0.0, 0.0, 
        5.589e-07, 6.335e-07, 5.556e-07, 4.752e-07, 3.657e-07, 
        3.422e-07, 3.768e-07, 4.418e-07, 6.142e-07),
    EBPulseShapeTemplate = cms.vdouble(0.0113979, 0.758151, 1.0, 0.887744, 0.673548, 
        0.474332, 0.319561, 0.215144, 0.147464, 0.101087, 
        0.0693181, 0.0475044),
    EBdigiCollection = cms.string(''),
    EECorrNoiseMatrixG01 = cms.vdouble(1.0, 0.72698, 0.62048, 0.55691, 0.51848, 
        0.49147, 0.47813, 0.47007, 0.46621, 0.46265),
    EECorrNoiseMatrixG06 = cms.vdouble(1.0, 0.71217, 0.47464, 0.34056, 0.26282, 
        0.20287, 0.17734, 0.16256, 0.15618, 0.14443),
    EECorrNoiseMatrixG12 = cms.vdouble(1.0, 0.71373, 0.44825, 0.30152, 0.21609, 
        0.14786, 0.11772, 0.10165, 0.09465, 0.08098),
    EEPulseShapeCovariance = cms.vdouble(3.941e-05, 3.333e-05, 0.0, -1.449e-05, -1.661e-05, 
        -1.424e-05, -1.183e-05, -6.842e-06, -4.915e-06, -3.411e-06, 
        0.0, 0.0, 3.333e-05, 2.862e-05, 0.0, 
        -1.244e-05, -1.431e-05, -1.233e-05, -1.032e-05, -5.883e-06, 
        -4.154e-06, -2.902e-06, -2.128e-06, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, 0.0, 0.0, 0.0, 0.0, 
        0.0, -1.449e-05, -1.244e-05, 0.0, 5.84e-06, 
        6.649e-06, 5.72e-06, 4.812e-06, 2.708e-06, 1.869e-06, 
        1.33e-06, 9.186e-07, 6.446e-07, -1.661e-05, -1.431e-05, 
        0.0, 6.649e-06, 7.966e-06, 6.898e-06, 5.794e-06, 
        3.157e-06, 2.184e-06, 1.567e-06, 1.084e-06, 7.575e-07, 
        -1.424e-05, -1.233e-05, 0.0, 5.72e-06, 6.898e-06, 
        6.341e-06, 5.347e-06, 2.859e-06, 1.991e-06, 1.431e-06, 
        9.839e-07, 6.886e-07, -1.183e-05, -1.032e-05, 0.0, 
        4.812e-06, 5.794e-06, 5.347e-06, 4.854e-06, 2.628e-06, 
        1.809e-06, 1.289e-06, 9.02e-07, 6.146e-07, -6.842e-06, 
        -5.883e-06, 0.0, 2.708e-06, 3.157e-06, 2.859e-06, 
        2.628e-06, 1.863e-06, 1.296e-06, 8.882e-07, 6.108e-07, 
        4.283e-07, -4.915e-06, -4.154e-06, 0.0, 1.869e-06, 
        2.184e-06, 1.991e-06, 1.809e-06, 1.296e-06, 1.217e-06, 
        8.669e-07, 5.751e-07, 3.882e-07, -3.411e-06, -2.902e-06, 
        0.0, 1.33e-06, 1.567e-06, 1.431e-06, 1.289e-06, 
        8.882e-07, 8.669e-07, 9.522e-07, 6.717e-07, 4.293e-07, 
        0.0, -2.128e-06, 0.0, 9.186e-07, 1.084e-06, 
        9.839e-07, 9.02e-07, 6.108e-07, 5.751e-07, 6.717e-07, 
        7.911e-07, 5.493e-07, 0.0, 0.0, 0.0, 
        6.446e-07, 7.575e-07, 6.886e-07, 6.146e-07, 4.283e-07, 
        3.882e-07, 4.293e-07, 5.493e-07, 7.027e-07),
    EEPulseShapeTemplate = cms.vdouble(0.116442, 0.756246, 1.0, 0.897182, 0.686831, 
        0.491506, 0.344111, 0.245731, 0.174115, 0.123361, 
        0.0874288, 0.061957),
    EEdigiCollection = cms.string(''),
    ESdigiCollection = cms.string(''),
    EcalPreMixStage1 = cms.bool(False),
    EcalPreMixStage2 = cms.bool(False),
    UseLCcorrection = cms.untracked.bool(True)
)

process.ecal_pulse_shape_templates = cms.PSet(
    EBPulseShapeTemplate = cms.vdouble(0.0113979, 0.758151, 1.0, 0.887744, 0.673548, 
        0.474332, 0.319561, 0.215144, 0.147464, 0.101087, 
        0.0693181, 0.0475044),
    EEPulseShapeTemplate = cms.vdouble(0.116442, 0.756246, 1.0, 0.897182, 0.686831, 
        0.491506, 0.344111, 0.245731, 0.174115, 0.123361, 
        0.0874288, 0.061957)
)

process.egHLTOffBaseEleTrigCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('default')
)

process.egHLTOffBasePhoTrigCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('default')
)

process.egHLTOffDQMBinData = cms.PSet(
    HLTenergy = cms.PSet(
        max = cms.double(300.0),
        min = cms.double(0.0),
        nr = cms.int32(60)
    ),
    HLTeta = cms.PSet(
        max = cms.double(3.0),
        min = cms.double(-3.0),
        nr = cms.int32(30)
    ),
    HLTphi = cms.PSet(
        max = cms.double(3.14),
        min = cms.double(-3.14),
        nr = cms.int32(16)
    ),
    charge = cms.PSet(
        max = cms.double(1.5),
        min = cms.double(-1.5),
        nr = cms.int32(2)
    ),
    dEtaIn = cms.PSet(
        max = cms.double(0.02),
        min = cms.double(-0.02),
        nr = cms.int32(10)
    ),
    dPhiIn = cms.PSet(
        max = cms.double(0.15),
        min = cms.double(-0.15),
        nr = cms.int32(10)
    ),
    deltaE = cms.PSet(
        max = cms.double(50.0),
        min = cms.double(-50.0),
        nr = cms.int32(50)
    ),
    e1x5 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    e2x5 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    eOverP = cms.PSet(
        max = cms.double(5),
        min = cms.double(-1.0),
        nr = cms.int32(12)
    ),
    energy = cms.PSet(
        max = cms.double(300.0),
        min = cms.double(0.0),
        nr = cms.int32(60)
    ),
    err = cms.PSet(
        max = cms.double(100.5),
        min = cms.double(-0.5),
        nr = cms.int32(101)
    ),
    et = cms.PSet(
        max = cms.double(155.0),
        min = cms.double(-5.0),
        nr = cms.int32(80)
    ),
    etHigh = cms.PSet(
        max = cms.double(2025),
        min = cms.double(25),
        nr = cms.int32(30)
    ),
    eta = cms.PSet(
        max = cms.double(3.0),
        min = cms.double(-3.0),
        nr = cms.int32(30)
    ),
    etaVsPhi = cms.PSet(
        nrX = cms.int32(15),
        nrY = cms.int32(8),
        xMax = cms.double(3.0),
        xMin = cms.double(-3.0),
        yMax = cms.double(3.14),
        yMin = cms.double(-3.14)
    ),
    hOverE = cms.PSet(
        max = cms.double(0.1),
        min = cms.double(0.0),
        nr = cms.int32(30)
    ),
    invEInvP = cms.PSet(
        max = cms.double(0.2),
        min = cms.double(-0.2),
        nr = cms.int32(10)
    ),
    isolEm = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    isolHad = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    isolNrTrks = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    isolPtTrks = cms.PSet(
        max = cms.double(10),
        min = cms.double(-1),
        nr = cms.int32(22)
    ),
    mass = cms.PSet(
        max = cms.double(120),
        min = cms.double(-10.0),
        nr = cms.int32(26)
    ),
    massHigh = cms.PSet(
        max = cms.double(5000),
        min = cms.double(0.0),
        nr = cms.int32(20)
    ),
    maxr9 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    minr9 = cms.PSet(
        max = cms.double(1.1),
        min = cms.double(-0.1),
        nr = cms.int32(24)
    ),
    nVertex = cms.PSet(
        max = cms.double(21.0),
        min = cms.double(-1.0),
        nr = cms.int32(22)
    ),
    phi = cms.PSet(
        max = cms.double(3.14),
        min = cms.double(-3.14),
        nr = cms.int32(16)
    ),
    sigEtaEta = cms.PSet(
        max = cms.double(0.05),
        min = cms.double(-0.01),
        nr = cms.int32(30)
    )
)

process.egHLTOffDoubleEleEt10SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoubleElectronEt10PixelMatchFilter')
)

process.egHLTOffDoubleEleEt5Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(5.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(5.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoubleElectronEt5PixelMatchFilter')
)

process.egHLTOffDoublePhoEt10Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoublePhotonEt10HcalIsolFilter')
)

process.egHLTOffDoublePhoEt15Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoDoublePhotonEt15HcalIsolFilter')
)

process.egHLTOffDoublePhoEt15VLEICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(5.0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(5.0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTVLEIDoublePhotonEt15HcalIsolFilter')
)

process.egHLTOffDoublePhotonEt33_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:maxr9:hadem'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(33.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:maxr9:hadem'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(33.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltDoublePhoton33EgammaLHEDoubleFilter')
)

process.egHLTOffEle90_NoSpikeFilter_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hadem'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(90.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hadem'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(90.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle90NoSpikeFilterPixelMatchFilter')
)

process.egHLTOffEleBarrelCuts = cms.PSet(
    cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
    isolEmConstTerm = cms.double(3),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.03),
    isolHadConstTerm = cms.double(3),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.03),
    isolNrTrksConstTerm = cms.int32(0),
    isolPtTrksConstTerm = cms.double(7.5),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.0),
    maxCTFTrkChi2NDof = cms.double(99999),
    maxCTFTrkInnerRadius = cms.double(99999),
    maxDEtaIn = cms.double(0.004),
    maxDPhiIn = cms.double(0.06),
    maxEta = cms.double(1.442),
    maxHLTDEtaIn = cms.double(0.008),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(9999),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0.07),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0.1),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0.09),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.04),
    maxInvEInvP = cms.double(0.1),
    maxNrCTFTrkHitsLost = cms.int32(999),
    maxR9 = cms.double(0.98),
    maxSigmaEtaEta = cms.double(0.01),
    maxSigmaIEtaIEta = cms.double(0.01),
    minCTFTrkOuterRadius = cms.double(0.0),
    minEt = cms.double(15),
    minEta = cms.double(0.0),
    minNrCTFTrkHits = cms.int32(7),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffEleCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffEleEndcapCuts = cms.PSet(
    cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
    isolEmConstTerm = cms.double(3),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.03),
    isolHadConstTerm = cms.double(3),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.03),
    isolNrTrksConstTerm = cms.int32(0),
    isolPtTrksConstTerm = cms.double(15),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.0),
    maxCTFTrkChi2NDof = cms.double(99999),
    maxCTFTrkInnerRadius = cms.double(9999.0),
    maxDEtaIn = cms.double(0.007),
    maxDPhiIn = cms.double(0.03),
    maxEta = cms.double(2.5),
    maxHLTDEtaIn = cms.double(0.008),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(9999),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0.05),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0.025),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0.04),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.025),
    maxInvEInvP = cms.double(0.1),
    maxNrCTFTrkHitsLost = cms.int32(999),
    maxR9 = cms.double(999.0),
    maxSigmaEtaEta = cms.double(0.03),
    maxSigmaIEtaIEta = cms.double(0.03),
    minCTFTrkOuterRadius = cms.double(0.0),
    minEt = cms.double(15),
    minEta = cms.double(1.56),
    minNrCTFTrkHits = cms.int32(7),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffEleEt10LWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronLWEt10PixelMatchFilter')
)

process.egHLTOffEleEt10LWEleIdCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.015),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.04),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronLWEt10EleIdDphiFilter')
)

process.egHLTOffEleEt10SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt10PixelMatchFilter')
)

process.egHLTOffEleEt15LWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronLWEt15PixelMatchFilter')
)

process.egHLTOffEleEt15SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15PixelMatchFilter')
)

process.egHLTOffEleEt15SWEleIdCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.015),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltDEtaIn:hltDPhiIn:sigmaEtaEta:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.04),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15EleIdDphiFilter')
)

process.egHLTOffEleEt15SWEleIdLTICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:dEtaIn:dPhiIn:sigmaIEtaIEta:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.015),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(25.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:dEtaIn:dPhiIn:sigmaIEtaIEta:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.04),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(25.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15EleIdTrackIsolFilterESet25LTI')
)

process.egHLTOffEleEt15SWLTICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksEle:ctfTrack'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(8),
        maxHLTIsolTrksEleOverPt = cms.double(0.5),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt15LTITrackIsolFilter')
)

process.egHLTOffEleEt15_CaloIdVT_CaloIsoT_TrkIdT_TrkIsoT_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.07),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.125),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.125),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.125),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.05),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.075),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.075),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.075),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle15CaloIdVTTrkIdTCaloIsoTTrkIsoTTrackIsolFilter')
)

process.egHLTOffEleEt17_CaloIdL_CaloIsoVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.2),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.014),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(17),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.035),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(17),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle17CaloIdLCaloIsoVLPixelMatchFilter')
)

process.egHLTOffEleEt20SWCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(20.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(20.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSingleElectronEt20PixelMatchFilter')
)

process.egHLTOffEleEt27_CaloIdVT_CaloIsoT_TrkIdT_TrkIsoT_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.07),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.125),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.125),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.125),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(27.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad:hltIsolTrksEle:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.05),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.075),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.075),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.075),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(27.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle27CaloIdTCaloIsoTTrkIdTTrkIsoTTrackIsoFilter')
)

process.egHLTOffEleEt45_CaloIdVT_TrkIdT_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.07),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(45.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.008),
        maxDPhiIn = cms.double(0.05),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(45.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle45CaloIdVTTrkIdTDphiFilter')
)

process.egHLTOffEleEt8_CaloIdL_CaloIsoVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.2),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.2),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.014),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:hltIsolEm:hltIsolHad'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.035),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle8CaloIdLCaloIsoVLPixelMatchFilter')
)

process.egHLTOffEleEt8_CaloIdL_TrkIdVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.01),
        maxDPhiIn = cms.double(0.15),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.014),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:dEtaIn:dPhiIn'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.01),
        maxDPhiIn = cms.double(0.1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.035),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle8CaloIdLTrkIdVLDphiFilter')
)

process.egHLTOffEleEt8_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hadem:maxr9'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hadem:maxr9'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(8.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEle8PixelMatchFilter')
)

process.egHLTOffEleLooseCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:e2x5Over5x5:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(7.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(99999),
        maxDEtaIn = cms.double(0.004),
        maxDPhiIn = cms.double(0.06),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.07),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.1),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.09),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.04),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.01),
        maxSigmaIEtaIEta = cms.double(0.01),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:dEtaIn:dPhiIn:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks:hltIsolHad:hltIsolTrksEle:hltIsolEm'),
        isolEmConstTerm = cms.double(3),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.03),
        isolHadConstTerm = cms.double(3),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.03),
        isolNrTrksConstTerm = cms.int32(0),
        isolPtTrksConstTerm = cms.double(15),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.0),
        maxCTFTrkChi2NDof = cms.double(99999),
        maxCTFTrkInnerRadius = cms.double(9999.0),
        maxDEtaIn = cms.double(0.007),
        maxDPhiIn = cms.double(0.03),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.008),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(9999),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0.05),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0.025),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0.04),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.025),
        maxInvEInvP = cms.double(0.1),
        maxNrCTFTrkHitsLost = cms.int32(999),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.03),
        maxSigmaIEtaIEta = cms.double(0.03),
        minCTFTrkOuterRadius = cms.double(0.0),
        minEt = cms.double(15),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(7),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffFiltersToMon = cms.PSet(
    diEleTightLooseTrigNames = cms.vstring(),
    diPhoTightLooseTrigNames = cms.vstring(),
    eleHLTFilterNames = cms.vstring('hltEle65CaloIdVTTrkIdTDphiFilter'),
    eleHLTFilterNames2Leg = cms.vstring(),
    eleTightLooseTrigNames = cms.vstring(),
    phoHLTFilterNames = cms.vstring(),
    phoHLTFilterNames2Leg = cms.vstring(),
    phoTightLooseTrigNames = cms.vstring()
)

process.egHLTOffPhoBarrelCuts = cms.PSet(
    cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
    isolEmConstTerm = cms.double(5.0),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.012),
    isolHadConstTerm = cms.double(3.0),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.005),
    isolNrTrksConstTerm = cms.int32(4),
    isolPtTrksConstTerm = cms.double(3.0),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.002),
    maxCTFTrkChi2NDof = cms.double(99999.0),
    maxCTFTrkInnerRadius = cms.double(9.0),
    maxDEtaIn = cms.double(-1),
    maxDPhiIn = cms.double(-1),
    maxEta = cms.double(1.442),
    maxHLTDEtaIn = cms.double(0.1),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(0.1),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.05),
    maxInvEInvP = cms.double(-1),
    maxNrCTFTrkHitsLost = cms.int32(0),
    maxR9 = cms.double(0.98),
    maxSigmaEtaEta = cms.double(0.011),
    maxSigmaIEtaIEta = cms.double(0.011),
    minCTFTrkOuterRadius = cms.double(40.0),
    minEt = cms.double(20),
    minEta = cms.double(0.0),
    minNrCTFTrkHits = cms.int32(5),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffPhoCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffPhoEndcapCuts = cms.PSet(
    cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
    isolEmConstTerm = cms.double(5.0),
    isolEmGradStart = cms.double(0.0),
    isolEmGradTerm = cms.double(0.012),
    isolHadConstTerm = cms.double(3.0),
    isolHadGradStart = cms.double(0.0),
    isolHadGradTerm = cms.double(0.005),
    isolNrTrksConstTerm = cms.int32(4),
    isolPtTrksConstTerm = cms.double(3.0),
    isolPtTrksGradStart = cms.double(0.0),
    isolPtTrksGradTerm = cms.double(0.002),
    maxCTFTrkChi2NDof = cms.double(99999.0),
    maxCTFTrkInnerRadius = cms.double(9.0),
    maxDEtaIn = cms.double(-1),
    maxDPhiIn = cms.double(-1),
    maxEta = cms.double(2.5),
    maxHLTDEtaIn = cms.double(0.1),
    maxHLTDPhiIn = cms.double(0.1),
    maxHLTInvEInvP = cms.double(0.1),
    maxHLTIsolEm = cms.double(0),
    maxHLTIsolEmOverEt = cms.double(0),
    maxHLTIsolEmOverEt2 = cms.double(0),
    maxHLTIsolHad = cms.double(0),
    maxHLTIsolHadOverEt = cms.double(0),
    maxHLTIsolHadOverEt2 = cms.double(0),
    maxHLTIsolTrksEle = cms.double(0),
    maxHLTIsolTrksEleOverPt = cms.double(0),
    maxHLTIsolTrksEleOverPt2 = cms.double(0),
    maxHLTIsolTrksPho = cms.double(0),
    maxHLTIsolTrksPhoOverPt = cms.double(0),
    maxHLTIsolTrksPhoOverPt2 = cms.double(0),
    maxHadEnergy = cms.double(0),
    maxHadem = cms.double(0.05),
    maxInvEInvP = cms.double(-1),
    maxNrCTFTrkHitsLost = cms.int32(0),
    maxR9 = cms.double(999.0),
    maxSigmaEtaEta = cms.double(0.031),
    maxSigmaIEtaIEta = cms.double(0.031),
    minCTFTrkOuterRadius = cms.double(40.0),
    minEt = cms.double(20),
    minEta = cms.double(1.56),
    minNrCTFTrkHits = cms.int32(5),
    minR9 = cms.double(0.0),
    requirePixelHitsIfOuterInOuter = cms.bool(True)
)

process.egHLTOffPhoEt10Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(10.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt10HcalIsolFilter')
)

process.egHLTOffPhoEt10LEITICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTLEITISinglePhotonEt10TrackIsolFilter')
)

process.egHLTOffPhoEt15Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt15HcalIsolFilter')
)

process.egHLTOffPhoEt15HTICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoSinglePhotonEt15HTITrackIsolFilter')
)

process.egHLTOffPhoEt15LEICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(15.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoSinglePhotonEt15LEIHcalIsolFilter')
)

process.egHLTOffPhoEt20Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt20HcalIsolFilter')
)

process.egHLTOffPhoEt20LEITICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTLEITISinglePhotonEt20TrackIsolFilter')
)

process.egHLTOffPhoEt25Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt25HcalIsolFilter')
)

process.egHLTOffPhoEt25LEITICuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:hltIsolTrksPho:hltIsolEm'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(3.0),
        maxHLTIsolEmOverEt = cms.double(0.1),
        maxHLTIsolEmOverEt2 = cms.double(-1.0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(4.0),
        maxHLTIsolTrksPhoOverPt = cms.double(0.05),
        maxHLTIsolTrksPhoOverPt2 = cms.double(-1),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(25.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTLEITISinglePhotonEt25TrackIsolFilter')
)

process.egHLTOffPhoEt30Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltL1NonIsoHLTNonIsoSinglePhotonEt30HcalIsolFilter')
)

process.egHLTOffPhoLooseCuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:detEta:hadem:sigmaIEtaIEta:minr9:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(20),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    )
)

process.egHLTOffPhotonEt125_NoSpikeFilter_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.011),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(125.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.05),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.031),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(125.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton125HEFilter')
)

process.egHLTOffPhotonEt30_CaloIdVL_IsoL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton30CaloIdVLIsoLTrackIsoFilter')
)

process.egHLTOffPhotonEt30_CaloIdVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(30.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEG30CaloIdVLHEFilter')
)

process.egHLTOffPhotonEt50_CaloIdVL_IsoL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(50.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(50.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton50CaloIdVLIsoLTrackIsoFilter')
)

process.egHLTOffPhotonEt75_CaloIdVL_IsoL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9:isolEm:isolHad:isolPtTrks'),
        isolEmConstTerm = cms.double(5.5),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.5),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.5),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltPhoton75CaloIdVLIsoLTrackIsoFilter')
)

process.egHLTOffPhotonEt75_CaloIdVL_v1Cuts = cms.PSet(
    barrel = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(1.442),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.15),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(0.98),
        maxSigmaEtaEta = cms.double(0.011),
        maxSigmaIEtaIEta = cms.double(0.024),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(0.0),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    endcap = cms.PSet(
        cuts = cms.string('et:sigmaIEtaIEta:hadem:maxr9'),
        isolEmConstTerm = cms.double(5.0),
        isolEmGradStart = cms.double(0.0),
        isolEmGradTerm = cms.double(0.012),
        isolHadConstTerm = cms.double(3.0),
        isolHadGradStart = cms.double(0.0),
        isolHadGradTerm = cms.double(0.005),
        isolNrTrksConstTerm = cms.int32(4),
        isolPtTrksConstTerm = cms.double(3.0),
        isolPtTrksGradStart = cms.double(0.0),
        isolPtTrksGradTerm = cms.double(0.002),
        maxCTFTrkChi2NDof = cms.double(99999.0),
        maxCTFTrkInnerRadius = cms.double(9.0),
        maxDEtaIn = cms.double(-1),
        maxDPhiIn = cms.double(-1),
        maxEta = cms.double(2.5),
        maxHLTDEtaIn = cms.double(0.1),
        maxHLTDPhiIn = cms.double(0.1),
        maxHLTInvEInvP = cms.double(0.1),
        maxHLTIsolEm = cms.double(0),
        maxHLTIsolEmOverEt = cms.double(0),
        maxHLTIsolEmOverEt2 = cms.double(0),
        maxHLTIsolHad = cms.double(0),
        maxHLTIsolHadOverEt = cms.double(0),
        maxHLTIsolHadOverEt2 = cms.double(0),
        maxHLTIsolTrksEle = cms.double(0),
        maxHLTIsolTrksEleOverPt = cms.double(0),
        maxHLTIsolTrksEleOverPt2 = cms.double(0),
        maxHLTIsolTrksPho = cms.double(0),
        maxHLTIsolTrksPhoOverPt = cms.double(0),
        maxHLTIsolTrksPhoOverPt2 = cms.double(0),
        maxHadEnergy = cms.double(0),
        maxHadem = cms.double(0.1),
        maxInvEInvP = cms.double(-1),
        maxNrCTFTrkHitsLost = cms.int32(0),
        maxR9 = cms.double(999.0),
        maxSigmaEtaEta = cms.double(0.031),
        maxSigmaIEtaIEta = cms.double(0.04),
        minCTFTrkOuterRadius = cms.double(40.0),
        minEt = cms.double(75.0),
        minEta = cms.double(1.56),
        minNrCTFTrkHits = cms.int32(5),
        minR9 = cms.double(0.0),
        requirePixelHitsIfOuterInOuter = cms.bool(True)
    ),
    trigName = cms.string('hltEG75CaloIdVLHEFilter')
)

process.globalMuonParams = cms.PSet(
    d0Cut = cms.untracked.double(2.0),
    hltCuts = cms.untracked.string('abs(eta) < 2.4'),
    recoCuts = cms.untracked.string('isGlobalMuon && abs(eta) < 2.4'),
    z0Cut = cms.untracked.double(25.0)
)

process.hcalZDCMonitorTask = cms.PSet(
    AllowedCalibTypes = cms.untracked.vint32(0),
    NLumiBlocks = cms.untracked.int32(4000),
    TaskFolder = cms.untracked.string('ZDCMonitor_Hcal/'),
    ZDC_AcceptableChannelErrorRates = cms.untracked.vdouble(0.1, 0.1, 0.1, 0.1, 0.1, 
        0.1, 0.1, 0.1, 0.1, 0.1, 
        0.1, 0.1, 0.1, 0.1, 0.1, 
        0.1, 0.1, 0.1),
    ZDC_ChannelWeighting = cms.untracked.vdouble(0.1, 0.1, 0.1, 0.1, 0.1, 
        0.125, 0.125, 0.125, 0.125, 0.1, 
        0.1, 0.1, 0.1, 0.1, 0.125, 
        0.125, 0.125, 0.125),
    ZDC_ColdADCThreshold = cms.untracked.int32(20),
    ZDC_OfflineColdThreshold = cms.untracked.int32(250),
    ZDC_OfflineDeadThreshold = cms.untracked.int32(250),
    ZDC_OnlineColdThreshold = cms.untracked.int32(250),
    ZDC_OnlineDeadThreshold = cms.untracked.int32(250),
    debug = cms.untracked.int32(0),
    digiLabel = cms.InputTag("hcalDigis"),
    enableCleanup = cms.untracked.bool(False),
    makeDiagnostics = cms.untracked.bool(False),
    mergeRuns = cms.untracked.bool(False),
    online = cms.untracked.bool(False),
    rechitLabel = cms.InputTag("zdcreco"),
    skipOutOfOrderLS = cms.untracked.bool(False),
    subSystemFolder = cms.untracked.string('Hcal/')
)

process.hiDetachedTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hiDetachedTripletStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(0),
    maxPtForLooperReconstruction = cms.double(0),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hiDetachedTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hiDetachedTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(0.701),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.3),
    minimumNumberOfHits = cms.int32(6),
    nSigmaMinPt = cms.double(5.0)
)

process.hiHighPtStepTruncMTS = cms.PSet(
    applyAbsCutsIfNoPV = cms.bool(False),
    applyAdaptedPVCuts = cms.bool(True),
    chi2n_no1Dmod_par = cms.double(9999.0),
    chi2n_par = cms.double(0.3),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    d0_par1 = cms.vdouble(9999.0, 0.0),
    d0_par2 = cms.vdouble(9999.0, 0.0),
    dz_par1 = cms.vdouble(9999.0, 0.0),
    dz_par2 = cms.vdouble(9999.0, 0.0),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(100),
    max_eta = cms.double(9999.0),
    max_lostHitFraction = cms.double(1.0),
    max_minMissHitOutOrIn = cms.int32(99),
    max_relpterr = cms.double(9999.0),
    max_z0 = cms.double(100),
    minHitsToBypassChecks = cms.uint32(9999),
    minMVA = cms.double(-1),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_eta = cms.double(-9999.0),
    min_nhits = cms.uint32(12),
    nSigmaZ = cms.double(9999.0),
    name = cms.string('hiHighPtTrkTrunc'),
    pixel_pTMaxCut = cms.vdouble(9998, 9999, 9999, 1.0),
    pixel_pTMinCut = cms.vdouble(1.0, 1.8, 0.15, 2.5),
    preFilterName = cms.string(''),
    qualityBit = cms.string(''),
    res_par = cms.vdouble(99999.0, 99999.0),
    useMVA = cms.bool(False),
    vertexCut = cms.string(''),
    vtxNumber = cms.int32(-1)
)

process.hiHighpurityMTS = cms.PSet(
    applyAbsCutsIfNoPV = cms.bool(False),
    applyAdaptedPVCuts = cms.bool(True),
    chi2n_no1Dmod_par = cms.double(0.15),
    chi2n_par = cms.double(0.3),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    d0_par1 = cms.vdouble(9999.0, 0.0),
    d0_par2 = cms.vdouble(3.0, 0.0),
    dz_par1 = cms.vdouble(9999.0, 0.0),
    dz_par2 = cms.vdouble(3.0, 0.0),
    keepAllTracks = cms.bool(True),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(100),
    max_eta = cms.double(9999.0),
    max_lostHitFraction = cms.double(1.0),
    max_minMissHitOutOrIn = cms.int32(99),
    max_relpterr = cms.double(0.05),
    max_z0 = cms.double(100),
    minHitsToBypassChecks = cms.uint32(999),
    minMVA = cms.double(-1),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_eta = cms.double(-9999.0),
    min_nhits = cms.uint32(8),
    nSigmaZ = cms.double(9999.0),
    name = cms.string('hiTrkHighPurity'),
    preFilterName = cms.string('hiTrkTight'),
    qualityBit = cms.string('highPurity'),
    res_par = cms.vdouble(99999.0, 99999.0),
    useMVA = cms.bool(False),
    vertexCut = cms.string(''),
    vtxNumber = cms.int32(-1)
)

process.hiJetCoreRegionalStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hiJetCoreRegionalStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(50),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hiJetCoreRegionalStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hiJetCoreRegionalStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(10.0),
    minimumNumberOfHits = cms.int32(6),
    nSigmaMinPt = cms.double(5.0)
)

process.hiLooseMTS = cms.PSet(
    applyAbsCutsIfNoPV = cms.bool(False),
    applyAdaptedPVCuts = cms.bool(True),
    chi2n_no1Dmod_par = cms.double(9999.0),
    chi2n_par = cms.double(0.3),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    d0_par1 = cms.vdouble(9999.0, 0.0),
    d0_par2 = cms.vdouble(0.4, 4.0),
    dz_par1 = cms.vdouble(9999.0, 0.0),
    dz_par2 = cms.vdouble(0.4, 4.0),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(100),
    max_eta = cms.double(9999.0),
    max_lostHitFraction = cms.double(1.0),
    max_minMissHitOutOrIn = cms.int32(99),
    max_relpterr = cms.double(0.2),
    max_z0 = cms.double(100),
    minHitsToBypassChecks = cms.uint32(999),
    minMVA = cms.double(-1),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_eta = cms.double(-9999.0),
    min_nhits = cms.uint32(8),
    nSigmaZ = cms.double(9999.0),
    name = cms.string('hiTrkLoose'),
    preFilterName = cms.string(''),
    qualityBit = cms.string('loose'),
    res_par = cms.vdouble(99999.0, 99999.0),
    useMVA = cms.bool(False),
    vertexCut = cms.string(''),
    vtxNumber = cms.int32(-1)
)

process.hiLowPtTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hiLowPtTripletStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hiLowPtTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hiLowPtTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(1),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.4),
    minimumNumberOfHits = cms.int32(6),
    nSigmaMinPt = cms.double(5.0)
)

process.hiMixedTripletTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    clustersToSkip = cms.InputTag("hiMixedTripletClusters"),
    estimator = cms.string('hiMixedTripletChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('hiMixedTripletPropagator'),
    propagatorOpposite = cms.string('hiMixedTripletPropagatorOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hiMixedTripletTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hiMixedTripletTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(1.0),
    minimumNumberOfHits = cms.int32(6),
    nSigmaMinPt = cms.double(5.0)
)

process.hiPixelOnlyStepHighpurityMTS = cms.PSet(
    applyAbsCutsIfNoPV = cms.bool(False),
    applyAdaptedPVCuts = cms.bool(True),
    chi2n_no1Dmod_par = cms.double(12.0),
    chi2n_par = cms.double(0.3),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    d0_par1 = cms.vdouble(9999.0, 0.0),
    d0_par2 = cms.vdouble(9999.0, 0.0),
    dz_par1 = cms.vdouble(9999.0, 0.0),
    dz_par2 = cms.vdouble(10.0, 0.0),
    keepAllTracks = cms.bool(True),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(100),
    max_eta = cms.double(9999.0),
    max_lostHitFraction = cms.double(1.0),
    max_minMissHitOutOrIn = cms.int32(99),
    max_relpterr = cms.double(9999.0),
    max_z0 = cms.double(100),
    minHitsToBypassChecks = cms.uint32(999),
    minMVA = cms.double(-1),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_eta = cms.double(-9999.0),
    min_nhits = cms.uint32(0),
    nSigmaZ = cms.double(9999.0),
    name = cms.string('hiPixelOnlyTrkHighPurity'),
    pixel_pTMaxCut = cms.vdouble(2.4, 1.6, 12, 2.5),
    pixel_pTMinCut = cms.vdouble(0.0001, 0.0, 9999, 1.0),
    preFilterName = cms.string('hiPixelOnlyTrkTight'),
    qualityBit = cms.string('highPurity'),
    res_par = cms.vdouble(99999.0, 99999.0),
    useMVA = cms.bool(False),
    vertexCut = cms.string(''),
    vtxNumber = cms.int32(-1)
)

process.hiPixelOnlyStepLooseMTS = cms.PSet(
    applyAbsCutsIfNoPV = cms.bool(False),
    applyAdaptedPVCuts = cms.bool(True),
    chi2n_no1Dmod_par = cms.double(25.0),
    chi2n_par = cms.double(0.3),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    d0_par1 = cms.vdouble(9999.0, 0.0),
    d0_par2 = cms.vdouble(9999.0, 0.0),
    dz_par1 = cms.vdouble(9999.0, 0.0),
    dz_par2 = cms.vdouble(14.0, 0.0),
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(100),
    max_eta = cms.double(9999.0),
    max_lostHitFraction = cms.double(1.0),
    max_minMissHitOutOrIn = cms.int32(99),
    max_relpterr = cms.double(9999.0),
    max_z0 = cms.double(100),
    minHitsToBypassChecks = cms.uint32(999),
    minMVA = cms.double(-1),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_eta = cms.double(-9999.0),
    min_nhits = cms.uint32(0),
    nSigmaZ = cms.double(9999.0),
    name = cms.string('hiPixelOnlyTrkLoose'),
    pixel_pTMaxCut = cms.vdouble(10, 5, 25, 2.5),
    pixel_pTMinCut = cms.vdouble(0.0001, 0.0, 9999, 1.0),
    preFilterName = cms.string(''),
    qualityBit = cms.string('loose'),
    res_par = cms.vdouble(99999.0, 99999.0),
    useMVA = cms.bool(False),
    vertexCut = cms.string(''),
    vtxNumber = cms.int32(-1)
)

process.hiPixelOnlyStepTightMTS = cms.PSet(
    applyAbsCutsIfNoPV = cms.bool(False),
    applyAdaptedPVCuts = cms.bool(True),
    chi2n_no1Dmod_par = cms.double(18.0),
    chi2n_par = cms.double(0.3),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    d0_par1 = cms.vdouble(9999.0, 0.0),
    d0_par2 = cms.vdouble(9999.0, 0.0),
    dz_par1 = cms.vdouble(9999.0, 0.0),
    dz_par2 = cms.vdouble(12.0, 0.0),
    keepAllTracks = cms.bool(True),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(100),
    max_eta = cms.double(9999.0),
    max_lostHitFraction = cms.double(1.0),
    max_minMissHitOutOrIn = cms.int32(99),
    max_relpterr = cms.double(9999.0),
    max_z0 = cms.double(100),
    minHitsToBypassChecks = cms.uint32(999),
    minMVA = cms.double(-1),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_eta = cms.double(-9999.0),
    min_nhits = cms.uint32(0),
    nSigmaZ = cms.double(9999.0),
    name = cms.string('hiPixelOnlyTrkTight'),
    pixel_pTMaxCut = cms.vdouble(4, 2, 18, 2.5),
    pixel_pTMinCut = cms.vdouble(0.0001, 0.0, 9999, 1.0),
    preFilterName = cms.string('hiPixelOnlyTrkLoose'),
    qualityBit = cms.string('tight'),
    res_par = cms.vdouble(99999.0, 99999.0),
    useMVA = cms.bool(False),
    vertexCut = cms.string(''),
    vtxNumber = cms.int32(-1)
)

process.hiPixelPairTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('hiPixelPairChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hiPixelPairTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hiPixelPairTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(1.0),
    minimumNumberOfHits = cms.int32(6),
    nSigmaMinPt = cms.double(5.0)
)

process.hiRegitMuDetachedTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    clustersToSkip = cms.InputTag("hiRegitMuDetachedTripletStepClusters"),
    estimator = cms.string('detachedTripletStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('detachedTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hiRegitMuDetachedTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('hiRegitMuDetachedTripletStepTrajectoryFilterBase')
    ), 
        cms.PSet(
            refToPSet_ = cms.string('detachedTripletStepTrajectoryFilterShape')
        ))
)

process.hiRegitMuDetachedTripletStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.8),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.hiRegitMuInitialStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('initialStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hiRegitMuInitialStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hiRegitMuInitialStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('hiRegitMuInitialStepTrajectoryFilterBase')
    ), 
        cms.PSet(
            refToPSet_ = cms.string('initialStepTrajectoryFilterShape')
        ))
)

process.hiRegitMuInitialStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(2.5),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.hiRegitMuMixedTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('mixedTripletStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(6),
    propagatorAlong = cms.string('mixedTripletStepPropagator'),
    propagatorOpposite = cms.string('mixedTripletStepPropagatorOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hiRegitMuMixedTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hiRegitMuMixedTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.4),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(4),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(1.0),
    minimumNumberOfHits = cms.int32(6),
    nSigmaMinPt = cms.double(5.0)
)

process.hiRegitMuPixelLessStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('pixelLessStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(6),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hiRegitMuPixelLessStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hiRegitMuPixelLessStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(4),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(1.7),
    minimumNumberOfHits = cms.int32(6),
    nSigmaMinPt = cms.double(5.0)
)

process.hiRegitMuPixelPairStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('pixelPairStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(6),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('hiRegitMuPixelPairStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.hiRegitMuPixelPairStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('hiRegitMuPixelPairStepTrajectoryFilterBase')
    ), 
        cms.PSet(
            refToPSet_ = cms.string('pixelPairStepTrajectoryFilterShape')
        ))
)

process.hiRegitMuPixelPairStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(4),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.8),
    minimumNumberOfHits = cms.int32(6),
    nSigmaMinPt = cms.double(5.0)
)

process.hiTightMTS = cms.PSet(
    applyAbsCutsIfNoPV = cms.bool(False),
    applyAdaptedPVCuts = cms.bool(True),
    chi2n_no1Dmod_par = cms.double(0.25),
    chi2n_par = cms.double(0.3),
    copyExtras = cms.untracked.bool(True),
    copyTrajectories = cms.untracked.bool(True),
    d0_par1 = cms.vdouble(9999.0, 0.0),
    d0_par2 = cms.vdouble(5.0, 0.0),
    dz_par1 = cms.vdouble(9999.0, 0.0),
    dz_par2 = cms.vdouble(5.0, 0.0),
    keepAllTracks = cms.bool(True),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(100),
    max_eta = cms.double(9999.0),
    max_lostHitFraction = cms.double(1.0),
    max_minMissHitOutOrIn = cms.int32(99),
    max_relpterr = cms.double(0.075),
    max_z0 = cms.double(100),
    minHitsToBypassChecks = cms.uint32(999),
    minMVA = cms.double(-1),
    minNumber3DLayers = cms.uint32(0),
    minNumberLayers = cms.uint32(0),
    min_eta = cms.double(-9999.0),
    min_nhits = cms.uint32(8),
    nSigmaZ = cms.double(9999.0),
    name = cms.string('hiTrkTight'),
    preFilterName = cms.string('hiTrkLoose'),
    qualityBit = cms.string('tight'),
    res_par = cms.vdouble(99999.0, 99999.0),
    useMVA = cms.bool(False),
    vertexCut = cms.string(''),
    vtxNumber = cms.int32(-1)
)

process.initialStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('initialStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.initialStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('initialStepTrajectoryFilterBase')
    ))
)

process.initialStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.2),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.initialStepTrajectoryFilterShape = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.isolationInputParameters = cms.PSet(
    barrelBasicCluster = cms.InputTag("islandBasicClusters","islandBarrelBasicClusters"),
    endcapBasicCluster = cms.InputTag("islandBasicClusters","islandEndcapBasicClusters"),
    hbhereco = cms.InputTag("hbhereco"),
    hfreco = cms.InputTag("hfreco"),
    horeco = cms.InputTag("horeco"),
    photons = cms.InputTag("cleanPhotons"),
    track = cms.InputTag("hiGeneralTracks")
)

process.isolationSumsCalculator = cms.PSet(
    ComponentName = cms.string('isolationSumsCalculator'),
    EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
    EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
    EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
    EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
    EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
    EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
    EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
    EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
    EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
    EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
    EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
    EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitThreshEA_Barrel = cms.double(0.095),
    EcalRecHitThreshEA_Endcap = cms.double(0.0),
    EcalRecHitThreshEB_Barrel = cms.double(0.095),
    EcalRecHitThreshEB_Endcap = cms.double(0.0),
    EcalRecHitThreshEtA_Barrel = cms.double(0.0),
    EcalRecHitThreshEtA_Endcap = cms.double(0.11),
    EcalRecHitThreshEtB_Barrel = cms.double(0.0),
    EcalRecHitThreshEtB_Endcap = cms.double(0.11),
    HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
    HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
    HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
    HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
    HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth2TowerThreshEB_Barrel = cms.double(0.0),
    HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
    HcalRecHitCollection = cms.InputTag("towerMaker"),
    HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
    HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
    HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalTowerThreshEA_Barrel = cms.double(0.0),
    HcalTowerThreshEA_Endcap = cms.double(0.0),
    HcalTowerThreshEB_Barrel = cms.double(0.0),
    HcalTowerThreshEB_Endcap = cms.double(0.0),
    TrackConeInnerRadiusA_Barrel = cms.double(0.04),
    TrackConeInnerRadiusA_Endcap = cms.double(0.04),
    TrackConeInnerRadiusB_Barrel = cms.double(0.04),
    TrackConeInnerRadiusB_Endcap = cms.double(0.04),
    TrackConeOuterRadiusA_Barrel = cms.double(0.4),
    TrackConeOuterRadiusA_Endcap = cms.double(0.4),
    TrackConeOuterRadiusB_Barrel = cms.double(0.3),
    TrackConeOuterRadiusB_Endcap = cms.double(0.3),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    beamSpotProducer = cms.InputTag("offlineBeamSpot"),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    isolationtrackEtaSliceA_Barrel = cms.double(0.015),
    isolationtrackEtaSliceA_Endcap = cms.double(0.015),
    isolationtrackEtaSliceB_Barrel = cms.double(0.015),
    isolationtrackEtaSliceB_Endcap = cms.double(0.015),
    isolationtrackThresholdA_Barrel = cms.double(0.0),
    isolationtrackThresholdA_Endcap = cms.double(0.0),
    isolationtrackThresholdB_Barrel = cms.double(0.0),
    isolationtrackThresholdB_Endcap = cms.double(0.0),
    longImpactParameterA_Barrel = cms.double(0.2),
    longImpactParameterA_Endcap = cms.double(0.2),
    longImpactParameterB_Barrel = cms.double(0.2),
    longImpactParameterB_Endcap = cms.double(0.2),
    moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
        0.81, 1.13, 1.15, 1.45, 1.58),
    modulePhiBoundary = cms.double(0.0087),
    trackProducer = cms.InputTag("generalTracks"),
    transImpactParameterA_Barrel = cms.double(0.1),
    transImpactParameterA_Endcap = cms.double(0.1),
    transImpactParameterB_Barrel = cms.double(0.1),
    transImpactParameterB_Endcap = cms.double(0.1),
    useNumCrystals = cms.bool(True),
    vetoClustered = cms.bool(False)
)

process.jetDQMParameters = cms.PSet(
    asymmetryThirdJetCut = cms.double(30),
    balanceThirdJetCut = cms.double(0.2),
    eBin = cms.int32(100),
    eMax = cms.double(1000.0),
    eMin = cms.double(0.0),
    etaBin = cms.int32(100),
    etaMax = cms.double(5.0),
    etaMin = cms.double(-5.0),
    fillJIDPassFrac = cms.int32(1),
    pBin = cms.int32(100),
    pMax = cms.double(500.0),
    pMin = cms.double(0.0),
    pVBin = cms.int32(100),
    pVMax = cms.double(100.0),
    pVMin = cms.double(0.0),
    phiBin = cms.int32(70),
    phiMax = cms.double(3.2),
    phiMin = cms.double(-3.2),
    ptBin = cms.int32(100),
    ptMax = cms.double(500.0),
    ptMin = cms.double(20.0),
    ptThreshold = cms.double(20.0),
    ptThresholdUnc = cms.double(30),
    verbose = cms.int32(0)
)

process.layerInfo = cms.PSet(
    TEC = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        ),
        maxRing = cms.int32(7),
        minRing = cms.int32(6),
        useRingSlector = cms.bool(False)
    ),
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        clusterChargeCut = cms.PSet(
            refToPSet_ = cms.string('SiStripClusterChargeCutNone')
        )
    )
)

process.looseMuonParams = cms.PSet(
    d0Cut = cms.untracked.double(50),
    hltCuts = cms.untracked.string('abs(eta) < 2.4'),
    recoCuts = cms.untracked.string('isPFMuon && (isTrackerMuon || isGlobalMuon) && (pfIsolationR04().sumChargedHadronPt + max(pfIsolationR04().sumNeutralHadronEt + pfIsolationR04().sumPhotonEt - pfIsolationR04().sumPUPt/2,0.0))/pt < 0.20'),
    z0Cut = cms.untracked.double(100)
)

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(options.maxEvents)
)

process.mipVariable = cms.PSet(
    ComponentName = cms.string('mipVariable'),
    HaloDiscThreshold = cms.double(70.0),
    ResidualWidth = cms.double(0.23),
    XRangeFit = cms.double(180.0),
    YRangeFit = cms.double(7.0),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)

process.mixedTripletStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('mixedTripletStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('mixedTripletStepPropagator'),
    propagatorOpposite = cms.string('mixedTripletStepPropagatorOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('mixedTripletStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.mixedTripletStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(1.4),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.muonSeededTrajectoryBuilderForInOut = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForInOut'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForInOut')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(5),
    minNrOfHitsForRebuild = cms.int32(2),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForInOut')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryBuilderForOutIn = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForOutIn'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutIn')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(3),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutIn')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryBuilderForOutInDisplaced = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForOutInDisplaced'),
    foundHitBonus = cms.double(1000.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutInDisplaced')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(1.0),
    maxCand = cms.int32(3),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('muonSeededTrajectoryFilterForOutInDisplaced')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.muonSeededTrajectoryFilterForInOut = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.muonSeededTrajectoryFilterForOutIn = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0)
)

process.muonSeededTrajectoryFilterForOutInDisplaced = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(10),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minimumNumberOfHits = cms.int32(5),
    nSigmaMinPt = cms.double(5.0)
)

process.options = cms.untracked.PSet(

)

process.pfBlockBasedIsolation = cms.PSet(
    ComponentName = cms.string('pfBlockBasedIsolation'),
    coneSize = cms.double(9999999999)
)

process.pfElecMva = cms.PSet(
    MVACut = cms.double(-1.0)
)

process.pfIsolationCalculator = cms.PSet(
    ComponentName = cms.string('pfIsolationCalculator'),
    applyDzDxyVeto = cms.bool(True),
    applyMissHitPhVeto = cms.bool(False),
    applyPFPUVeto = cms.bool(True),
    applyVeto = cms.bool(True),
    checkClosestZVertex = cms.bool(True),
    coneDR = cms.double(0.3),
    deltaRVetoBarrel = cms.bool(True),
    deltaRVetoBarrelCharged = cms.double(0.02),
    deltaRVetoBarrelNeutrals = cms.double(-1.0),
    deltaRVetoBarrelPhotons = cms.double(-1.0),
    deltaRVetoEndcap = cms.bool(True),
    deltaRVetoEndcapCharged = cms.double(0.02),
    deltaRVetoEndcapNeutrals = cms.double(-1.0),
    deltaRVetoEndcapPhotons = cms.double(0.07),
    numberOfCrystalEndcapPhotons = cms.double(4.0),
    numberOfRings = cms.int32(1),
    particleType = cms.int32(1),
    rectangleDeltaEtaVetoBarrelCharged = cms.double(-1),
    rectangleDeltaEtaVetoBarrelNeutrals = cms.double(-1),
    rectangleDeltaEtaVetoBarrelPhotons = cms.double(0.015),
    rectangleDeltaEtaVetoEndcapCharged = cms.double(-1),
    rectangleDeltaEtaVetoEndcapNeutrals = cms.double(-1),
    rectangleDeltaEtaVetoEndcapPhotons = cms.double(-1),
    rectangleDeltaPhiVetoBarrelCharged = cms.double(-1),
    rectangleDeltaPhiVetoBarrelNeutrals = cms.double(-1),
    rectangleDeltaPhiVetoBarrelPhotons = cms.double(1.0),
    rectangleDeltaPhiVetoEndcapCharged = cms.double(-1),
    rectangleDeltaPhiVetoEndcapNeutrals = cms.double(-1),
    rectangleDeltaPhiVetoEndcapPhotons = cms.double(-1),
    rectangleVetoBarrel = cms.bool(True),
    rectangleVetoEndcap = cms.bool(False),
    ringSize = cms.double(0.3),
    useCrystalSize = cms.bool(True)
)

process.pixelLessStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(False),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('pixelLessStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(2),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(4),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('pixelLessStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.pixelLessStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(0),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(4),
    nSigmaMinPt = cms.double(5.0)
)

process.pixelPairStepTrajectoryBuilder = cms.PSet(
    ComponentType = cms.string('GroupedCkfTrajectoryBuilder'),
    MeasurementTrackerName = cms.string(''),
    TTRHBuilder = cms.string('WithTrackAngle'),
    alwaysUseInvalidHits = cms.bool(True),
    bestHitOnly = cms.bool(True),
    estimator = cms.string('pixelPairStepChi2Est'),
    foundHitBonus = cms.double(5.0),
    inOutTrajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('CkfBaseTrajectoryFilter_block')
    ),
    intermediateCleaning = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    lockHits = cms.bool(True),
    lostHitPenalty = cms.double(30.0),
    maxCand = cms.int32(3),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    maxPtForLooperReconstruction = cms.double(0.7),
    minNrOfHitsForRebuild = cms.int32(5),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    requireSeedHitsInRebuild = cms.bool(True),
    trajectoryFilter = cms.PSet(
        refToPSet_ = cms.string('pixelPairStepTrajectoryFilter')
    ),
    updator = cms.string('KFUpdator'),
    useSameTrajFilter = cms.bool(True)
)

process.pixelPairStepTrajectoryFilter = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet(cms.PSet(
        refToPSet_ = cms.string('pixelPairStepTrajectoryFilterBase')
    ))
)

process.pixelPairStepTrajectoryFilterBase = cms.PSet(
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0),
    constantValueForLostHitsFractionFilter = cms.double(2.0),
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    maxConsecLostHits = cms.int32(1),
    maxLostHits = cms.int32(999),
    maxLostHitsFraction = cms.double(0.1),
    maxNumberOfHits = cms.int32(100),
    minHitsMinPt = cms.int32(3),
    minNumberOfHits = cms.int32(13),
    minNumberOfHitsPerLoop = cms.int32(4),
    minPt = cms.double(0.1),
    minimumNumberOfHits = cms.int32(3),
    nSigmaMinPt = cms.double(5.0)
)

process.pixelPairStepTrajectoryFilterShape = cms.PSet(
    ComponentType = cms.string('StripSubClusterShapeTrajectoryFilter'),
    layerMask = cms.PSet(
        TEC = cms.bool(False),
        TIB = cms.vuint32(1, 2),
        TID = cms.vuint32(1, 2),
        TOB = cms.bool(False)
    ),
    maxNSat = cms.uint32(3),
    maxTrimmedSizeDiffNeg = cms.double(1.0),
    maxTrimmedSizeDiffPos = cms.double(0.7),
    seedCutMIPs = cms.double(0.35),
    seedCutSN = cms.double(7.0),
    subclusterCutMIPs = cms.double(0.45),
    subclusterCutSN = cms.double(12.0),
    subclusterWindow = cms.double(0.7),
    trimMaxADC = cms.double(30.0),
    trimMaxFracNeigh = cms.double(0.25),
    trimMaxFracTotal = cms.double(0.15)
)

process.ptSeedParameterization = cms.PSet(
    CSC_01 = cms.vdouble(0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
        0.0),
    CSC_02 = cms.vdouble(0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
        0.253916),
    CSC_03 = cms.vdouble(0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
        0.72802),
    CSC_12 = cms.vdouble(-0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
        3.478874),
    CSC_13 = cms.vdouble(1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
        2.0142),
    CSC_14 = cms.vdouble(0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
        0.514139),
    CSC_23 = cms.vdouble(-0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
        -4.267065),
    CSC_24 = cms.vdouble(-0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
        -4.241835),
    CSC_34 = cms.vdouble(0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
        43.430395),
    DT_12 = cms.vdouble(0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
        0.222219),
    DT_13 = cms.vdouble(0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
        0.155638),
    DT_14 = cms.vdouble(0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
        -0.133269),
    DT_23 = cms.vdouble(0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
        0.261012),
    DT_24 = cms.vdouble(0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
        0.010984),
    DT_34 = cms.vdouble(0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
        -0.304346),
    OL_1213 = cms.vdouble(0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
        0.0),
    OL_1222 = cms.vdouble(0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
        0.0),
    OL_1232 = cms.vdouble(0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
        0.0),
    OL_2213 = cms.vdouble(0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
        0.0),
    OL_2222 = cms.vdouble(0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
        0.0),
    SMB_10 = cms.vdouble(1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
        0.0),
    SMB_11 = cms.vdouble(1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
        0.0),
    SMB_12 = cms.vdouble(1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
        0.0),
    SMB_20 = cms.vdouble(0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
        0.0),
    SMB_21 = cms.vdouble(0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
        0.0),
    SMB_22 = cms.vdouble(1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
        0.0),
    SMB_30 = cms.vdouble(0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
        0.0),
    SMB_31 = cms.vdouble(0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
        0.0),
    SMB_32 = cms.vdouble(0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
        0.0),
    SME_11 = cms.vdouble(2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
        0.0),
    SME_12 = cms.vdouble(-0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
        0.0),
    SME_13 = cms.vdouble(0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
        0.0),
    SME_21 = cms.vdouble(0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
        0.0),
    SME_22 = cms.vdouble(-0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
        0.0),
    SME_31 = cms.vdouble(-0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
        0.0),
    SME_32 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0),
    SME_41 = cms.vdouble(-0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
        0.0),
    SME_42 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0)
)

process.reRecoMuonAOD = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*')
)

process.reRecoMuonFEVT = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*')
)

process.reRecoMuonRECO = cms.PSet(
    outputCommands = cms.untracked.vstring('keep *_MuonSeed_*_*', 
        'keep *_ancientMuonSeed_*_*', 
        'keep *_mergedStandAloneMuonSeeds_*_*', 
        'keep TrackingRecHitsOwned_reglobalMuons_*_*', 
        'keep TrackingRecHitsOwned_retevMuons_*_*', 
        'keep recoCaloMuons_recalomuons_*_*', 
        'keep *_remuons_*_*', 
        'keep *_*_remuons_*', 
        'keep recoTracks_standAloneMuons_*_*', 
        'keep recoTrackExtras_standAloneMuons_*_*', 
        'keep TrackingRecHitsOwned_standAloneMuons_*_*', 
        'keep recoTracks_reglobalMuons_*_*', 
        'keep recoTrackExtras_reglobalMuons_*_*', 
        'keep recoTracks_retevMuons_*_*', 
        'keep recoTrackExtras_retevMuons_*_*', 
        'keep recoTracksToOnerecoTracksAssociation_retevMuons_*_*')
)

process.tightMuonParams = cms.PSet(
    d0Cut = cms.untracked.double(0.2),
    hltCuts = cms.untracked.string('abs(eta) < 2.4'),
    recoCuts = cms.untracked.string('isGlobalMuon && isPFMuon && isTrackerMuon && abs(eta) < 2.4 && innerTrack.hitPattern.numberOfValidPixelHits > 0 && innerTrack.hitPattern.trackerLayersWithMeasurement > 5 && (pfIsolationR04().sumChargedHadronPt + max(pfIsolationR04().sumNeutralHadronEt + pfIsolationR04().sumPhotonEt - pfIsolationR04().sumPUPt/2,0.0))/pt < 0.12 && globalTrack.hitPattern.numberOfValidMuonHits > 0 && globalTrack.normalizedChi2 < 10 && numberOfMatches > 1'),
    z0Cut = cms.untracked.double(0.5)
)

process.trackerMuonParams = cms.PSet(
    d0Cut = cms.untracked.double(2.0),
    hltCuts = cms.untracked.string('abs(eta) < 2.4'),
    recoCuts = cms.untracked.string('isTrackerMuon && abs(eta) < 2.4'),
    z0Cut = cms.untracked.double(25.0)
)

process.RateParams = cms.VPSet(cms.PSet(
    AlgoName = cms.string('L1_SingleEG22'),
    ParErrors = cms.vdouble(4.6133, 0.00124988, 2.17871e-07, 2.56616e-11),
    Parameters = cms.vdouble(-250.646, 1.78975, -5.5801e-05, 5.90724e-09),
    TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
), 
    cms.PSet(
        AlgoName = cms.string('L1_ETM50'),
        ParErrors = cms.vdouble(1.57155, 0.000427218, 7.48549e-08, 8.83838e-12),
        Parameters = cms.vdouble(-781.253, 0.589212, -8.09682e-05, 6.11958e-09),
        TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
    ), 
    cms.PSet(
        AlgoName = cms.string('L1_ETT80'),
        ParErrors = cms.vdouble(34685.1, 9.68504, 0.00177067, 2.12745e-07),
        Parameters = cms.vdouble(6414890.0, -3748.94, 0.656481, -2.14204e-05),
        TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
    ), 
    cms.PSet(
        AlgoName = cms.string('L1_HTT100'),
        ParErrors = cms.vdouble(2026.82, 0.549814, 9.61286e-05, 1.1393e-08),
        Parameters = cms.vdouble(-461.806, 0.635347, -1.80574e-05, 1.61805e-08),
        TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
    ), 
    cms.PSet(
        AlgoName = cms.string('L1_SingleIsoEG20er'),
        ParErrors = cms.vdouble(3.81866, 0.00103454, 1.80314e-07, 2.12361e-11),
        Parameters = cms.vdouble(152.06, 1.02088, 5.33485e-06, 9.91573e-10),
        TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
    ), 
    cms.PSet(
        AlgoName = cms.string('L1_SingleJet128'),
        ParErrors = cms.vdouble(1.82347, 0.000494797, 8.64361e-08, 1.01899e-11),
        Parameters = cms.vdouble(-217.021, 0.326, -1.41957e-05, 1.4588e-09),
        TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
    ), 
    cms.PSet(
        AlgoName = cms.string('L1_SingleMu16'),
        ParErrors = cms.vdouble(7.08545, 0.00194953, 3.5046e-07, 4.37085e-11),
        Parameters = cms.vdouble(-5435.68, 6.38796, -0.000563198, 3.4096e-08),
        TemplateFunction = cms.string('[0]/x+[1]+[2]*x+[3]*x*x')
    ))

process.multPhiCorr_METDiagnostics = cms.VPSet(cms.PSet(
    etaMax = cms.double(2.7),
    etaMin = cms.double(-2.7),
    etaNBins = cms.int32(108),
    nMax = cms.int32(7500),
    nMin = cms.int32(0),
    name = cms.string('h'),
    nbins = cms.double(250),
    phiMax = cms.double(3.14159265359),
    phiMin = cms.double(-3.14159265359),
    phiNBins = cms.int32(160),
    type = cms.int32(1)
), 
    cms.PSet(
        etaMax = cms.double(1.392),
        etaMin = cms.double(-1.392),
        etaNBins = cms.int32(32),
        nMax = cms.int32(250),
        nMin = cms.int32(0),
        name = cms.string('h0Barrel'),
        nbins = cms.double(250),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(72),
        type = cms.int32(5)
    ), 
    cms.PSet(
        etaMax = cms.double(-1.392),
        etaMin = cms.double(-3.0),
        etaNBins = cms.int32(12),
        nMax = cms.int32(250),
        nMin = cms.int32(0),
        name = cms.string('h0Endcap'),
        nbins = cms.double(250),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(18),
        type = cms.int32(5)
    ), 
    cms.PSet(
        etaMax = cms.double(1.479),
        etaMin = cms.double(-1.479),
        etaNBins = cms.int32(170),
        nMax = cms.int32(2500),
        nMin = cms.int32(0),
        name = cms.string('gammaBarrel'),
        nbins = cms.double(125),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(360),
        type = cms.int32(4)
    ), 
    cms.PSet(
        etaMax = cms.double(-1.479),
        etaMin = cms.double(-3.0),
        etaNBins = cms.int32(20),
        nMax = cms.int32(750),
        nMin = cms.int32(0),
        name = cms.string('gammaEndcap'),
        nbins = cms.double(125),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(30),
        type = cms.int32(4)
    ), 
    cms.PSet(
        etaMax = cms.double(-3.0),
        etaMin = cms.double(-5.0),
        etaNBins = cms.int32(20),
        nMax = cms.int32(50),
        nMin = cms.int32(0),
        name = cms.string('gammaForward'),
        nbins = cms.double(50),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(30),
        type = cms.int32(4)
    ), 
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(-2.7),
        etaNBins = cms.int32(27),
        nMax = cms.int32(50),
        nMin = cms.int32(0),
        name = cms.string('e'),
        nbins = cms.double(50),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(40),
        type = cms.int32(2)
    ), 
    cms.PSet(
        etaMax = cms.double(2.7),
        etaMin = cms.double(-2.7),
        etaNBins = cms.int32(27),
        nMax = cms.int32(50),
        nMin = cms.int32(0),
        name = cms.string('mu'),
        nbins = cms.double(50),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(40),
        type = cms.int32(3)
    ), 
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        etaNBins = cms.int32(11),
        nMax = cms.int32(1250),
        nMin = cms.int32(0),
        name = cms.string('hHF'),
        nbins = cms.double(125),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(18),
        type = cms.int32(6)
    ), 
    cms.PSet(
        etaMax = cms.double(-2.901376),
        etaMin = cms.double(-5.2),
        etaNBins = cms.int32(11),
        nMax = cms.int32(1250),
        nMin = cms.int32(0),
        name = cms.string('egammaHF'),
        nbins = cms.double(125),
        phiMax = cms.double(3.14159265359),
        phiMin = cms.double(-3.14159265359),
        phiNBins = cms.int32(18),
        type = cms.int32(7)
    ))

process.schedule = cms.Schedule(*[ process.raw2digi_step, process.L1Reco_step, process.reconstruction_step, process.pathALCARECOSiStripCalMinBias, process.pathALCARECOTkAlMinBiasHI, process.dqmoffline_step, process.endjob_step, process.write_FEVT_step, process.write_ALCARECO_step ])
